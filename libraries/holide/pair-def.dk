
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME pair_2Ddef.

Data_2EPair_2E_2A : hol.type -> hol.type -> hol.type.

Data_2EBool_2E_3F : A : hol.type -> hol.term A.

Data_2EBool_2E_3F_21 : A : hol.type -> hol.term A.

HOLLight_2EABS__prod : B : hol.type -> A : hol.type -> hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) (Data_2EPair_2E_2A A B)).

HOLLight_2EREP__prod : B : hol.type -> A : hol.type -> hol.term (hol.arr (Data_2EPair_2E_2A A B) (hol.arr A (hol.arr B hol.bool))).

(; Constant HOLLight.mk_pair ;)

def HOLLight_2Emk__pair : B : hol.type -> A : hol.type -> hol.term (hol.arr A (hol.arr B (hol.arr A (hol.arr B hol.bool)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y_2 : hol.term B => a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 x_1) (hol.eq B b_4 y_2).

(; Constant Data.Pair., ;)

def Data_2EPair_2E_2C : B : hol.type -> A : hol.type -> hol.term (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y_2 : hol.term B => HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2).

(; Constant Data.Pair.fst ;)

def Data_2EPair_2Efst : B : hol.type -> A : hol.type -> hol.term (hol.arr (Data_2EPair_2E_2A A B) A) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.select A (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))).

(; Constant Data.Pair.snd ;)

def Data_2EPair_2Esnd : B : hol.type -> A : hol.type -> hol.term (hol.arr (Data_2EPair_2E_2A A B) B) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.select B (b_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_3 b_2))).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))).

(; axiom ;)

thm_1 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1)).

(; axiom ;)

thm_2 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))).

(; axiom ;)

thm_3 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)).

(; axiom ;)

thm_4 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true)).

(; axiom ;)

thm_5 : hol.proof hol.true.

(; axiom ;)

thm_6 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.imp t_1 t_1)).

(; axiom ;)

thm_7 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))).

(; axiom ;)

thm_8 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)).

(; axiom ;)

thm_9 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false).

(; axiom ;)

thm_10 : hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true).

(; axiom ;)

thm_11 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)).

(; axiom ;)

thm_12 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)).

(; axiom ;)

thm_13 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)).

(; axiom ;)

thm_14 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))).

(; axiom ;)

thm_15 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))).

(; axiom ;)

thm_16 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))).

(; axiom ;)

thm_17 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.or (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp p_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))).

(; axiom ;)

thm_18 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1)).

(; axiom ;)

thm_19 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))).

(; axiom ;)

thm_20 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))))).

(; axiom ;)

thm_21 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))).

(; axiom ;)

thm_22 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2)))).

(; axiom ;)

thm_23 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))))).

(; axiom ;)

thm_24 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))).

(; axiom ;)

thm_25 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))))).

(; axiom ;)

thm_26 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))).

(; axiom ;)

thm_27 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))))).

(; defineTypeOp ;)

thm_28 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) r_1)).

(; defineTypeOp ;)

thm_29 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2A A B)) (a_1 : hol.term (Data_2EPair_2E_2A A B) => HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) (a_1 : hol.term (Data_2EPair_2E_2A A B) => a_1)).

(; axiom ;)

thm_30 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) q_2))).

(; axiom ;)

thm_31 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true)).

(; axiom ;)

thm_32 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true)).

(; axiom ;)

thm_33 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1)).

(; axiom ;)

thm_34 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1)).

(; axiom ;)

thm_35 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1)).

(; axiom ;)

thm_36 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1)))).

(; axiom ;)

thm_37 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))))).

(; axiom ;)

thm_38 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))))).

(; axiom ;)

thm_39 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)).

(; axiom ;)

thm_40 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)).

(; axiom ;)

thm_41 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)).

(; axiom ;)

thm_42 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)).

(; axiom ;)

thm_43 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)).

(; axiom ;)

thm_44 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))))).

(; axiom ;)

thm_45 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2))))).

(; axiom ;)

thm_46 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))))).

(; axiom ;)

thm_47 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2))))).

(; axiom ;)

thm_48 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))))).

(; axiom ;)

thm_49 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))).

(; axiom ;)

thm_50 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)))).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_51 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= ((= Data.Bool.?) \lambda p. (p (select p)))) ((= Data.Bool.?) \lambda p. (p (select p)))) ;)

(; dict ;)

def thm_52 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1)))) :=
  A : hol.type => hol.REFL hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))).

(; Theorem: |- ((= ((= Data.Bool.?) \lambda p. (p (select p)))) ((= Data.Bool.?) \lambda p. (p (select p)))) ;)

(; dict ;)

def thm_53 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1)))) :=
  A : hol.type => hol.TRANS hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (thm_52 A) (thm_52 A).

(; Theorem: |- ((= Data.Bool.?) \lambda p. (p (select p))) ;)

(; dict ;)

def thm_54 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool)) (p_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) => p_1 (hol.select (hol.arr A (hol.arr B hol.bool)) p_1))) :=
  B : hol.type => A : hol.type => (A : hol.type => hol.EQ_MP (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (thm_53 A) (thm_0 A)) (hol.arr A (hol.arr B hol.bool)).

(; Theorem: |- ((= HOLLight.mk_pair) \lambda x. \lambda y. \lambda a. \lambda b. ((Data.Bool./\ ((= a) x)) ((= b) y))) ;)

(; dict ;)

def thm_55 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr B (hol.arr A (hol.arr B hol.bool)))) (HOLLight_2Emk__pair B A) (x_1 : hol.term A => y_2 : hol.term B => a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 x_1) (hol.eq B b_4 y_2))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr A (hol.arr B (hol.arr A (hol.arr B hol.bool)))) (HOLLight_2Emk__pair B A).

(; Theorem: |- ((= \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))) \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_56 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))))) (\lambda p. (p (select p)) \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_57 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) ((p_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) => p_1 (hol.select (hol.arr A (hol.arr B hol.bool)) p_1)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool)) (p_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) => p_1 (hol.select (hol.arr A (hol.arr B hol.bool)) p_1)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (thm_54 B A) (thm_56 B A).

(; Theorem: |- ((= (\lambda p. (p (select p)) \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))))) (\lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))) (select \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) ;)

(; dict ;)

def thm_58 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool ((p_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) => p_1 (hol.select (hol.arr A (hol.arr B hol.bool)) p_1)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) ((x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.select (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))))) :=
  B : hol.type => A : hol.type => hol.BETA_CONV (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (p_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) => p_1 (hol.select (hol.arr A (hol.arr B hol.bool)) p_1)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))))) (\lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))) (select \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) ;)

(; dict ;)

def thm_59 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) ((x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.select (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) ((p_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) => p_1 (hol.select (hol.arr A (hol.arr B hol.bool)) p_1)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) ((x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.select (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (thm_57 B A) (thm_58 B A).

(; Theorem: |- ((= ((= p) ((Data.Bool.==> (Data.Bool.~ p)) Data.Bool.F))) ((= p) ((Data.Bool.==> (Data.Bool.~ p)) Data.Bool.F))) ;)

(; dict ;)

def thm_60 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool p_1 (hol.imp (hol.not p_1) hol.false)) (hol.eq hol.bool p_1 (hol.imp (hol.not p_1) hol.false))) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool p_1 (hol.imp (hol.not p_1) hol.false)).

(; Theorem: |- ((= ((= p) ((Data.Bool.==> (Data.Bool.~ p)) Data.Bool.F))) ((= p) ((Data.Bool.==> (Data.Bool.~ p)) Data.Bool.F))) ;)

(; dict ;)

def thm_61 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool p_1 (hol.imp (hol.not p_1) hol.false)) (hol.eq hol.bool p_1 (hol.imp (hol.not p_1) hol.false))) :=
  p_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool p_1 (hol.imp (hol.not p_1) hol.false)) (hol.eq hol.bool p_1 (hol.imp (hol.not p_1) hol.false)) (hol.eq hol.bool p_1 (hol.imp (hol.not p_1) hol.false)) (thm_60 p_1) (thm_60 p_1).

(; Theorem: |- ((= (= p)) (= p)) ;)

(; dict ;)

def thm_62 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool p_1) (hol.eq hol.bool p_1)) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool p_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_63 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_64 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_63 t_1) (thm_63 t_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_65 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool) (hol.forall hol.bool)) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_66 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_67 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_66 thm_66.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) ;)

(; dict ;)

def thm_68 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_65 thm_67.

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_69 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_70 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_69 t_1) (thm_69 t_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_71 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_1 t_1.

(; Theorem: |- ((= (= ((Data.Bool./\ p) q))) (= ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_72 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_73 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q))) ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_74 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_72 q_1 p_2) (thm_73 q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool./\ p))) (= (Data.Bool./\ p))) ;)

(; dict ;)

def thm_75 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_76 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1.

(; Theorem: |- ((= ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p))) ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_77 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)) (thm_75 p_1) (thm_76 p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_78 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 p_1) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool p_1.

(; Theorem: |- ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) ;)

(; dict ;)

def thm_79 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1 p_1 thm_2 (thm_78 p_1).

(; Theorem: |- ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_80 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) (thm_77 p_1) (thm_79 p_1).

(; Theorem: |- ((= q) q) ;)

(; dict ;)

def thm_81 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_1 q_1) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) ;)

(; dict ;)

def thm_82 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1 q_1 (thm_80 p_2) (thm_81 q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_83 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) (thm_74 q_1 p_2) (thm_82 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_84 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_85 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hol.EQ_MP (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_83 q_1 p_2) (thm_84 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) q))) q) ;)

(; dict ;)

def thm_86 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 q_1)) q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_85 q_1 p_2 hyp_1 q_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_87 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_88 : q_1 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof q_1 :=
  q_1 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_89 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.PROP_EXT p_2 q_1 (hyp_3 : hol.proof q_1 => thm_87 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_88 q_1 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_90 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.EQ_MP p_1 q_2 (thm_89 q_2 p_1 hyp_1 hyp_2) (thm_87 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) q) ;)

(; dict ;)

def thm_91 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 q_2) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_90 p_1 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) q)) ;)

(; dict ;)

def thm_92 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_91 p_2 q_1 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_93 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_86 q_2 p_1 hyp_1 (thm_92 q_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_94 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_83 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) x)) ;)

(; dict ;)

def thm_95 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) -> hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) x) ;)

(; dict ;)

def thm_96 : p_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) -> hol.proof (hol.imp q_3 x_2) :=
  p_1 : hol.term hol.bool => x_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) => thm_95 x_2 q_3 p_1 hyp_2 (thm_87 p_1 hyp_1).

(; Theorem: |- x ;)

(; dict ;)

def thm_97 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) -> hol.proof x_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) => thm_96 p_2 x_3 q_1 hyp_1 hyp_3 (thm_88 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x) ;)

(; dict ;)

def thm_98 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.imp (hol.imp p_3 (hol.imp q_2 x_1)) x_1) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hyp_3 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => thm_97 q_2 p_3 x_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_99 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => x_3 : hol.term hol.bool => thm_98 x_3 q_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_100 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1) (thm_94 q_1 p_2) (thm_99 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= q) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_101 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool q_2 (hol.and p_1 q_2)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hol.PROP_EXT q_2 (hol.and p_1 q_2) (hyp_2 : hol.proof (hol.and p_1 q_2) => thm_93 p_1 q_2 hyp_2) (hyp_2 : hol.proof q_2 => thm_100 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_102 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_103 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_70 t_1) (thm_71 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => thm_102 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_104 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_105 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_104 t_1) (thm_104 t_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_106 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => thm_3 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_107 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_108 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_105 t_1) (thm_106 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => thm_107 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_109 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_110 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_109 t_1) (thm_109 t_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_111 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => thm_4 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_112 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_113 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_110 t_1) (thm_111 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => thm_112 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_114 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_115 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_114 t_1) (thm_114 t_1).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_116 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_117 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_116 thm_116.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) ;)

(; dict ;)

def thm_118 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_65 thm_117.

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_119 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool) (hol.eq hol.bool)) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool).

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_120 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_121 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_120 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_122 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_121 t_1 hyp_1) thm_5.

(; Theorem: |- t ;)

(; dict ;)

def thm_123 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_124 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_123 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_5).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_125 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_122 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_124 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> t) t)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_126 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_125 t_1) (hol.imp t_1 t_1).

(; Theorem: |- ((Data.Bool.==> t) t) ;)

(; dict ;)

def thm_127 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 t_1) :=
  t_1 : hol.term hol.bool => thm_6 t_1.

(; Theorem: |- ((= ((Data.Bool.==> t) t)) Data.Bool.T) ;)

(; dict ;)

def thm_128 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_126 t_1) (thm_127 t_1).

(; Theorem: |- ((= (= ((Data.Bool.==> t) t))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_129 : t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp t_1 t_1) hol.true thm_119 (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_114 t_1) (thm_128 t_1)).

(; Theorem: |- ((= Data.Bool.T) Data.Bool.T) ;)

(; dict ;)

def thm_130 : hol.proof (hol.eq hol.bool hol.true hol.true) :=
  hol.REFL hol.bool hol.true.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_131 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true) hol.true hol.true (thm_129 t_1) thm_130.

(; Theorem: |- ((= ((= Data.Bool.T) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_132 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true) (thm_131 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_133 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_132 t_1) thm_130.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_134 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_135 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_115 t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) thm_118 thm_133 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => thm_134 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_136 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_7 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_137 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (thm_135 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_63 t_1) (thm_136 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_138 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_113 t_1) (thm_137 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_139 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (thm_108 t_1) (thm_138 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_140 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (thm_103 t_1) (thm_139 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_141 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => thm_140 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_142 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_93 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_143 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) thm_68 thm_141 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => thm_142 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_144 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_93 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_145 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_143 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) => thm_144 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_146 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_93 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_147 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (thm_145 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) => thm_146 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_148 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_93 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_149 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_147 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) => thm_148 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ p)) Data.Bool.F)) (Data.Bool.~ (Data.Bool.~ p))) ;)

(; dict ;)

def thm_150 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.not p_1) hol.false) (hol.not (hol.not p_1))) :=
  p_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_64 t_1) (thm_149 t_1)) (hol.not p_1).

(; Theorem: |- ((= ((= p) ((Data.Bool.==> (Data.Bool.~ p)) Data.Bool.F))) ((= p) (Data.Bool.~ (Data.Bool.~ p)))) ;)

(; dict ;)

def thm_151 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool p_1 (hol.imp (hol.not p_1) hol.false)) (hol.eq hol.bool p_1 (hol.not (hol.not p_1)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool p_1) (hol.eq hol.bool p_1) (hol.imp (hol.not p_1) hol.false) (hol.not (hol.not p_1)) (thm_62 p_1) (thm_150 p_1).

(; Theorem: |- ((= ((= p) (Data.Bool.~ (Data.Bool.~ p)))) ((= p) ((Data.Bool.==> (Data.Bool.~ p)) Data.Bool.F))) ;)

(; dict ;)

def thm_152 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool p_1 (hol.not (hol.not p_1))) (hol.eq hol.bool p_1 (hol.imp (hol.not p_1) hol.false))) :=
  p_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool p_1 (hol.imp (hol.not p_1) hol.false)) (hol.eq hol.bool p_1 (hol.not (hol.not p_1))) (thm_151 p_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_153 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_154 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (thm_153 t_1) (thm_153 t_1).

(; Theorem: |- ((= ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ((Data.Bool./\ (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t))) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)))) ;)

(; dict ;)

def thm_155 : hyp_1 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)))) :=
  hyp_1 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ((Data.Bool./\ (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t))) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)))) ;)

(; dict ;)

def thm_156 : hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)))) :=
  hol.PROVE_HYP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)))) thm_8 (hyp_1 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) => thm_155 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_157 : hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true) hyp_1.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_158 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hol.PROVE_HYP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) thm_9 (hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) => thm_157 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_159 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) thm_158 thm_10.

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t))) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_160 : hol.proof (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hol.EQ_MP (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) thm_156 thm_159.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) p))) p) ;)

(; dict ;)

def thm_161 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 p_2)) p_2) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_85 q_1 p_2 hyp_1 p_2.

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_162 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.SYM hol.bool p_1 q_2 (thm_89 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_163 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP q_1 p_2 (thm_162 p_2 q_1 hyp_1 hyp_2) (thm_88 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_164 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_163 q_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_165 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_164 p_2 q_1 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_166 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_161 q_1 p_2 hyp_1 (thm_165 q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_167 : hyp_1 : hol.proof (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  hyp_1 : hol.proof (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_166 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_168 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  hol.PROVE_HYP (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) thm_160 (hyp_1 : hol.proof (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) => thm_167 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ t))) t) ;)

(; dict ;)

def thm_169 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) :=
  t_1 : hol.term hol.bool => thm_168 t_1.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ p))) p) ;)

(; dict ;)

def thm_170 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.not p_1)) p_1) :=
  p_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (thm_154 t_1) (thm_169 t_1)) p_1.

(; Theorem: |- ((= ((= p) (Data.Bool.~ (Data.Bool.~ p)))) ((= p) p)) ;)

(; dict ;)

def thm_171 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool p_1 (hol.not (hol.not p_1))) (hol.eq hol.bool p_1 p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool p_1) (hol.eq hol.bool p_1) (hol.not (hol.not p_1)) p_1 (thm_62 p_1) (thm_170 p_1).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_172 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_173 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_172 A x_1) (thm_172 A x_1).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_174 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_175 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_174 A) (thm_174 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_176 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_51 A) (thm_175 A).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_177 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_125 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_178 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => thm_11 A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_179 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_177 A x_1) (thm_178 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_180 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_172 A x_1) (thm_179 A x_1)) A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_181 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_1 x_1) hol.true) :=
  x_1 : hol.term hol.bool => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_173 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_176 A) (thm_180 A) x_1)) hol.bool x_1.

(; Theorem: |- ((= ((= p) p)) Data.Bool.T) ;)

(; dict ;)

def thm_182 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool p_1 p_1) hol.true) :=
  p_1 : hol.term hol.bool => (x_1 : hol.term hol.bool => thm_181 x_1) p_1.

(; Theorem: |- ((= ((= p) (Data.Bool.~ (Data.Bool.~ p)))) Data.Bool.T) ;)

(; dict ;)

def thm_183 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool p_1 (hol.not (hol.not p_1))) hol.true) :=
  p_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool p_1 (hol.not (hol.not p_1))) (hol.eq hol.bool p_1 p_1) hol.true (thm_171 p_1) (thm_182 p_1).

(; Theorem: |- ((= Data.Bool.T) ((= p) (Data.Bool.~ (Data.Bool.~ p)))) ;)

(; dict ;)

def thm_184 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool p_1 (hol.not (hol.not p_1)))) :=
  p_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool p_1 (hol.not (hol.not p_1))) hol.true (thm_183 p_1).

(; Theorem: |- ((= p) (Data.Bool.~ (Data.Bool.~ p))) ;)

(; dict ;)

def thm_185 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 (hol.not (hol.not p_1))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool p_1 (hol.not (hol.not p_1))) (thm_184 p_1) thm_5.

(; Theorem: |- ((= p) ((Data.Bool.==> (Data.Bool.~ p)) Data.Bool.F)) ;)

(; dict ;)

def thm_186 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 (hol.imp (hol.not p_1) hol.false)) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool p_1 (hol.not (hol.not p_1))) (hol.eq hol.bool p_1 (hol.imp (hol.not p_1) hol.false)) (thm_152 p_1) (thm_185 p_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F)) ;)

(; dict ;)

def thm_187 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) :=
  B : hol.type => A : hol.type => (p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool p_1 (hol.imp (hol.not p_1) hol.false)) (hol.eq hol.bool p_1 (hol.imp (hol.not p_1) hol.false)) (thm_61 p_1) (thm_186 p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F)) (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_188 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (thm_187 B A).

(; Theorem: |- (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_189 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) -> hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F)) ;)

(; dict ;)

def thm_190 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) :=
  B : hol.type => A : hol.type => hol.REFL hol.bool (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F)) ;)

(; dict ;)

def thm_191 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (thm_190 B A).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F))) ;)

(; dict ;)

def thm_192 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false))) :=
  B : hol.type => A : hol.type => hol.REFL hol.bool (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F))) ;)

(; dict ;)

def thm_193 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) (thm_192 B A) (thm_192 B A).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F)) ;)

(; dict ;)

def thm_194 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) -> hol.proof (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F) ;)

(; dict ;)

def thm_195 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) -> hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F) ;)

(; dict ;)

def thm_196 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) -> hyp_2 : hol.proof (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) -> hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) => hyp_2 : hol.proof (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) => thm_194 B A hyp_2 (thm_195 B A hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F)) ;)

(; dict ;)

def thm_197 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) -> hol.proof (hol.imp (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) => hyp_2 : hol.proof (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) => thm_196 B A hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F))) ;)

(; dict ;)

def thm_198 : B : hol.type -> A : hol.type -> hol.proof (hol.imp (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false))) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) => hyp_2 : hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) => thm_197 B A hyp_2 (thm_194 B A hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F)) ;)

(; dict ;)

def thm_199 : B : hol.type -> A : hol.type -> hol.proof (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) => thm_195 B A hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p)) ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p)) ;)

(; dict ;)

def thm_200 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p)) ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p)) ;)

(; dict ;)

def thm_201 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) :=
  p_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (thm_200 p_1) (thm_200 p_1).

(; Theorem: |- ((= (= (\lambda _618. ((= ((Data.Bool.==> (Data.Bool.~ _618)) _618)) _618) p))) (= (\lambda _618. ((= ((Data.Bool.==> (Data.Bool.~ _618)) _618)) _618) p))) ;)

(; dict ;)

def thm_202 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) p_1)) (hol.eq hol.bool ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) p_1)).

(; Theorem: |- ((= (\lambda _618. ((= ((Data.Bool.==> (Data.Bool.~ _618)) _618)) _618) Data.Bool.F)) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_203 : hol.proof (hol.eq hol.bool ((__618_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_1) __618_1) __618_1) hol.false) (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false)) :=
  hol.BETA_CONV hol.bool hol.bool (__618_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_1) __618_1) __618_1) hol.false.

(; Theorem: |- ((= ((= (\lambda _618. ((= ((Data.Bool.==> (Data.Bool.~ _618)) _618)) _618) p)) (\lambda _618. ((= ((Data.Bool.==> (Data.Bool.~ _618)) _618)) _618) Data.Bool.F))) ((= (\lambda _618. ((= ((Data.Bool.==> (Data.Bool.~ _618)) _618)) _618) p)) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F)) Data.Bool.F))) ;)

(; dict ;)

def thm_204 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) p_1) ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) hol.false)) (hol.eq hol.bool ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) p_1) (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false))) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) p_1)) (hol.eq hol.bool ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) p_1)) ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) hol.false) (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false) (thm_202 p_1) thm_203.

(; Theorem: |- ((= (\lambda _618. ((= ((Data.Bool.==> (Data.Bool.~ _618)) _618)) _618) p)) ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p)) ;)

(; dict ;)

def thm_205 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) p_1) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) p_1.

(; Theorem: |- ((= (= (\lambda _618. ((= ((Data.Bool.==> (Data.Bool.~ _618)) _618)) _618) p))) (= ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p))) ;)

(; dict ;)

def thm_206 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) p_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1))) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) p_1) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) thm_119 (thm_205 p_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_207 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false) (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false)) :=
  hol.REFL hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false).

(; Theorem: |- ((= ((= (\lambda _618. ((= ((Data.Bool.==> (Data.Bool.~ _618)) _618)) _618) p)) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F)) Data.Bool.F))) ((= ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p)) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F)) Data.Bool.F))) ;)

(; dict ;)

def thm_208 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) p_1) (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false))) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) p_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false) (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false) (thm_206 p_1) thm_207.

(; Theorem: |- ((= ((= (\lambda _618. ((= ((Data.Bool.==> (Data.Bool.~ _618)) _618)) _618) p)) (\lambda _618. ((= ((Data.Bool.==> (Data.Bool.~ _618)) _618)) _618) Data.Bool.F))) ((= ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p)) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F)) Data.Bool.F))) ;)

(; dict ;)

def thm_209 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) p_1) ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false))) :=
  p_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) p_1) ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) hol.false)) (hol.eq hol.bool ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) p_1) (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false)) (thm_204 p_1) (thm_208 p_1).

(; Theorem: |- ((= \lambda _618. ((= ((Data.Bool.==> (Data.Bool.~ _618)) _618)) _618)) \lambda _618. ((= ((Data.Bool.==> (Data.Bool.~ _618)) _618)) _618)) ;)

(; dict ;)

def thm_210 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__618_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_1) __618_1) __618_1) (__618_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_1) __618_1) __618_1)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (__618_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_1) __618_1) __618_1).

(; Theorem: |- ((= p) Data.Bool.F) ;)

(; dict ;)

def thm_211 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) -> hol.proof (hol.eq hol.bool p_1 hol.false) :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) => hyp_1.

(; Theorem: |- ((= (\lambda _618. ((= ((Data.Bool.==> (Data.Bool.~ _618)) _618)) _618) p)) (\lambda _618. ((= ((Data.Bool.==> (Data.Bool.~ _618)) _618)) _618) Data.Bool.F)) ;)

(; dict ;)

def thm_212 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) -> hol.proof (hol.eq hol.bool ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) p_1) ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) hol.false)) :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) => hol.APP_THM hol.bool hol.bool (__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) (__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) p_1 hol.false thm_210 (thm_211 p_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p)) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_213 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false)) :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) p_1) ((__618_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __618_2) __618_2) __618_2) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false)) (thm_209 p_1) (thm_212 p_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p)) ;)

(; dict ;)

def thm_214 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) => hol.SYM hol.bool (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false) (thm_213 p_1 hyp_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_215 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_216 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_215 t_1) (thm_215 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_217 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_218 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) thm_217 thm_217.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_219 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) thm_65 thm_218.

(; Theorem: |- ((= ((= ((= Data.Bool.T) t)) t)) ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_220 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((= Data.Bool.T) t)) t)) ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_221 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_220 t_1) (thm_220 t_1).

(; Theorem: |- ((= ((= Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_222 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_12 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_223 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_224 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_221 t_1) (thm_222 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) => thm_223 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.T)) t)) ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_225 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.T)) t)) ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_226 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_225 t_1) (thm_225 t_1).

(; Theorem: |- ((= ((= t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_227 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_13 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_228 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_229 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_226 t_1) (thm_227 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) => thm_228 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_230 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)).

(; Theorem: |- ((= ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_231 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_230 t_1) (thm_230 t_1).

(; Theorem: |- ((= ((= Data.Bool.F) t)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_232 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_14 t_1.

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_233 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_234 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_231 t_1) (thm_232 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) => thm_233 t_1 hyp_1).

(; Theorem: |- ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_235 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_15 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_236 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (thm_234 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_215 t_1) (thm_235 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_237 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (thm_229 t_1) (thm_236 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_238 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (thm_224 t_1) (thm_237 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_239 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => thm_238 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_240 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_93 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_241 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_2) (hol.not t_2)) (hol.eq hol.bool (hol.eq hol.bool t_2 hol.false) (hol.not t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_2) (hol.not t_2)) (hol.eq hol.bool (hol.eq hol.bool t_2 hol.false) (hol.not t_2)))))) thm_219 thm_239 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) => thm_240 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_242 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_93 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_243 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (thm_241 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) => thm_242 t_1 hyp_1).

(; Theorem: |- ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_244 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_93 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_245 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_243 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) => thm_244 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F)) Data.Bool.F)) (Data.Bool.~ ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F))) ;)

(; dict ;)

def thm_246 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false) (hol.not (hol.imp (hol.not hol.false) hol.false))) :=
  (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_216 t_1) (thm_245 t_1)) (hol.imp (hol.not hol.false) hol.false).

(; Theorem: |- ((= Data.Bool.~) Data.Bool.~) ;)

(; dict ;)

def thm_247 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) hol.not hol.not) :=
  hol.REFL (hol.arr hol.bool hol.bool) hol.not.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F)) (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) ;)

(; dict ;)

def thm_248 : hol.proof (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) (hol.not (hol.not hol.false))) :=
  (t_1 : hol.term hol.bool => thm_136 t_1) (hol.not hol.false).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F) ;)

(; dict ;)

def thm_249 : hol.proof (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false) :=
  (t_1 : hol.term hol.bool => thm_169 t_1) hol.false.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_250 : hol.proof (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false) :=
  hol.TRANS hol.bool (hol.imp (hol.not hol.false) hol.false) (hol.not (hol.not hol.false)) hol.false thm_248 thm_249.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F))) (Data.Bool.~ Data.Bool.F)) ;)

(; dict ;)

def thm_251 : hol.proof (hol.eq hol.bool (hol.not (hol.imp (hol.not hol.false) hol.false)) (hol.not hol.false)) :=
  hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.imp (hol.not hol.false) hol.false) hol.false thm_247 thm_250.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F))) Data.Bool.T) ;)

(; dict ;)

def thm_252 : hol.proof (hol.eq hol.bool (hol.not (hol.imp (hol.not hol.false) hol.false)) hol.true) :=
  hol.TRANS hol.bool (hol.not (hol.imp (hol.not hol.false) hol.false)) (hol.not hol.false) hol.true thm_251 thm_10.

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F)) Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_253 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false) hol.true) :=
  hol.TRANS hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false) (hol.not (hol.imp (hol.not hol.false) hol.false)) hol.true thm_246 thm_252.

(; Theorem: |- ((= Data.Bool.T) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_254 : hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false)) :=
  hol.SYM hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false) hol.true thm_253.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p) ;)

(; dict ;)

def thm_255 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) => hol.EQ_MP (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (thm_214 p_1 hyp_1) (hol.EQ_MP hol.true (hol.eq hol.bool (hol.imp (hol.not hol.false) hol.false) hol.false) thm_254 thm_5).

(; Theorem: |- ((Data.Bool.==> ((= p) Data.Bool.F)) ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p)) ;)

(; dict ;)

def thm_256 : p_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_1 hol.false) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) => thm_255 p_1 hyp_1.

(; Theorem: |- ((= (= (\lambda _616. ((= ((Data.Bool.==> (Data.Bool.~ _616)) _616)) _616) p))) (= (\lambda _616. ((= ((Data.Bool.==> (Data.Bool.~ _616)) _616)) _616) p))) ;)

(; dict ;)

def thm_257 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) p_1)) (hol.eq hol.bool ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) p_1)).

(; Theorem: |- ((= (\lambda _616. ((= ((Data.Bool.==> (Data.Bool.~ _616)) _616)) _616) Data.Bool.T)) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_258 : hol.proof (hol.eq hol.bool ((__616_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_1) __616_1) __616_1) hol.true) (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true)) :=
  hol.BETA_CONV hol.bool hol.bool (__616_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_1) __616_1) __616_1) hol.true.

(; Theorem: |- ((= ((= (\lambda _616. ((= ((Data.Bool.==> (Data.Bool.~ _616)) _616)) _616) p)) (\lambda _616. ((= ((Data.Bool.==> (Data.Bool.~ _616)) _616)) _616) Data.Bool.T))) ((= (\lambda _616. ((= ((Data.Bool.==> (Data.Bool.~ _616)) _616)) _616) p)) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) Data.Bool.T)) Data.Bool.T))) ;)

(; dict ;)

def thm_259 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) p_1) ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) hol.true)) (hol.eq hol.bool ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) p_1) (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true))) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) p_1)) (hol.eq hol.bool ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) p_1)) ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) hol.true) (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true) (thm_257 p_1) thm_258.

(; Theorem: |- ((= (\lambda _616. ((= ((Data.Bool.==> (Data.Bool.~ _616)) _616)) _616) p)) ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p)) ;)

(; dict ;)

def thm_260 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) p_1) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) p_1.

(; Theorem: |- ((= (= (\lambda _616. ((= ((Data.Bool.==> (Data.Bool.~ _616)) _616)) _616) p))) (= ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p))) ;)

(; dict ;)

def thm_261 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) p_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1))) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) p_1) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) thm_119 (thm_260 p_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_262 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true) (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true)) :=
  hol.REFL hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true).

(; Theorem: |- ((= ((= (\lambda _616. ((= ((Data.Bool.==> (Data.Bool.~ _616)) _616)) _616) p)) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) Data.Bool.T)) Data.Bool.T))) ((= ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p)) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) Data.Bool.T)) Data.Bool.T))) ;)

(; dict ;)

def thm_263 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) p_1) (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true))) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) p_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true) (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true) (thm_261 p_1) thm_262.

(; Theorem: |- ((= ((= (\lambda _616. ((= ((Data.Bool.==> (Data.Bool.~ _616)) _616)) _616) p)) (\lambda _616. ((= ((Data.Bool.==> (Data.Bool.~ _616)) _616)) _616) Data.Bool.T))) ((= ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p)) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) Data.Bool.T)) Data.Bool.T))) ;)

(; dict ;)

def thm_264 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) p_1) ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true))) :=
  p_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) p_1) ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) hol.true)) (hol.eq hol.bool ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) p_1) (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true)) (thm_259 p_1) (thm_263 p_1).

(; Theorem: |- ((= \lambda _616. ((= ((Data.Bool.==> (Data.Bool.~ _616)) _616)) _616)) \lambda _616. ((= ((Data.Bool.==> (Data.Bool.~ _616)) _616)) _616)) ;)

(; dict ;)

def thm_265 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__616_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_1) __616_1) __616_1) (__616_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_1) __616_1) __616_1)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (__616_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_1) __616_1) __616_1).

(; Theorem: |- ((= p) Data.Bool.T) ;)

(; dict ;)

def thm_266 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) -> hol.proof (hol.eq hol.bool p_1 hol.true) :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) => hyp_1.

(; Theorem: |- ((= (\lambda _616. ((= ((Data.Bool.==> (Data.Bool.~ _616)) _616)) _616) p)) (\lambda _616. ((= ((Data.Bool.==> (Data.Bool.~ _616)) _616)) _616) Data.Bool.T)) ;)

(; dict ;)

def thm_267 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) -> hol.proof (hol.eq hol.bool ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) p_1) ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) hol.true)) :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) => hol.APP_THM hol.bool hol.bool (__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) (__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) p_1 hol.true thm_265 (thm_266 p_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p)) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_268 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true)) :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) p_1) ((__616_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __616_2) __616_2) __616_2) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true)) (thm_264 p_1) (thm_267 p_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p)) ;)

(; dict ;)

def thm_269 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) => hol.SYM hol.bool (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true) (thm_268 p_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) Data.Bool.T)) Data.Bool.T)) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_270 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true) (hol.imp (hol.not hol.true) hol.true)) :=
  (t_1 : hol.term hol.bool => thm_227 t_1) (hol.imp (hol.not hol.true) hol.true).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_271 : hol.proof (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true) :=
  (t_1 : hol.term hol.bool => thm_106 t_1) (hol.not hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) Data.Bool.T)) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_272 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true) hol.true) :=
  hol.TRANS hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true) (hol.imp (hol.not hol.true) hol.true) hol.true thm_270 thm_271.

(; Theorem: |- ((= Data.Bool.T) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_273 : hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true)) :=
  hol.SYM hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true) hol.true thm_272.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p) ;)

(; dict ;)

def thm_274 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) => hol.EQ_MP (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (thm_269 p_1 hyp_1) (hol.EQ_MP hol.true (hol.eq hol.bool (hol.imp (hol.not hol.true) hol.true) hol.true) thm_273 thm_5).

(; Theorem: |- ((Data.Bool.==> ((= p) Data.Bool.T)) ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p)) ;)

(; dict ;)

def thm_275 : p_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_1 hol.true) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) => thm_274 p_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((= p) Data.Bool.T)) ((= p) Data.Bool.F)) ;)

(; dict ;)

def thm_276 : p_1 : hol.term hol.bool -> hol.proof (hol.or (hol.eq hol.bool p_1 hol.true) (hol.eq hol.bool p_1 hol.false)) :=
  p_1 : hol.term hol.bool => thm_16 p_1.

(; Theorem: |- ((= (= ((Data.Bool.\/ P) Q))) (= ((Data.Bool.\/ P) Q))) ;)

(; dict ;)

def thm_277 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or P_2 Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or P_2 Q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r)))) ;)

(; dict ;)

def thm_278 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ P) Q)) (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q))) ((= ((Data.Bool.\/ P) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r))))) ;)

(; dict ;)

def thm_279 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or P_2 Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) (thm_277 Q_1 P_2) (thm_278 Q_1 P_2).

(; Theorem: |- ((= (= (Data.Bool.\/ P))) (= (Data.Bool.\/ P))) ;)

(; dict ;)

def thm_280 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1))) :=
  P_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r)))) ;)

(; dict ;)

def thm_281 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) :=
  P_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1.

(; Theorem: |- ((= ((= (Data.Bool.\/ P)) (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P))) ((= (Data.Bool.\/ P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))))) ;)

(; dict ;)

def thm_282 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3))))) :=
  P_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3))) (thm_280 P_1) (thm_281 P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_283 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool P_1 P_1) :=
  P_1 : hol.term hol.bool => hol.REFL hol.bool P_1.

(; Theorem: |- ((= (Data.Bool.\/ P)) (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P)) ;)

(; dict ;)

def thm_284 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1 P_1 thm_17 (thm_283 P_1).

(; Theorem: |- ((= (Data.Bool.\/ P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r)))) ;)

(; dict ;)

def thm_285 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) :=
  P_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) (thm_282 P_1) (thm_284 P_1).

(; Theorem: |- ((= Q) Q) ;)

(; dict ;)

def thm_286 : Q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool Q_1 Q_1) :=
  Q_1 : hol.term hol.bool => hol.REFL hol.bool Q_1.

(; Theorem: |- ((= ((Data.Bool.\/ P) Q)) (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q)) ;)

(; dict ;)

def thm_287 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.or P_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1 Q_1 (thm_285 P_2) (thm_286 Q_1).

(; Theorem: |- ((= ((Data.Bool.\/ P) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r)))) ;)

(; dict ;)

def thm_288 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) (thm_279 Q_1 P_2) (thm_287 Q_1 P_2).

(; Theorem: |- ((Data.Bool.\/ P) Q) ;)

(; dict ;)

def thm_289 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_2 Q_1) -> hol.proof (hol.or P_2 Q_1) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_2 Q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r))) ;)

(; dict ;)

def thm_290 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_2 Q_1) -> hol.proof (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_2 Q_1) => hol.EQ_MP (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) (thm_288 Q_1 P_2) (thm_289 Q_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> P) R)) ((Data.Bool.==> ((Data.Bool.==> Q) R)) R)) ;)

(; dict ;)

def thm_291 : Q_1 : hol.term hol.bool -> R_2 : hol.term hol.bool -> P_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_3 Q_1) -> hol.proof (hol.imp (hol.imp P_3 R_2) (hol.imp (hol.imp Q_1 R_2) R_2)) :=
  Q_1 : hol.term hol.bool => R_2 : hol.term hol.bool => P_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_3 Q_1) => thm_290 Q_1 P_3 hyp_1 R_2.

(; Theorem: |- ((Data.Bool.==> P) R) ;)

(; dict ;)

def thm_292 : R_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_2 R_1) -> hol.proof (hol.imp P_2 R_1) :=
  R_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> Q) R)) R) ;)

(; dict ;)

def thm_293 : P_1 : hol.term hol.bool -> R_2 : hol.term hol.bool -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_1 R_2) -> hyp_2 : hol.proof (hol.or P_1 Q_3) -> hol.proof (hol.imp (hol.imp Q_3 R_2) R_2) :=
  P_1 : hol.term hol.bool => R_2 : hol.term hol.bool => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_1 R_2) => hyp_2 : hol.proof (hol.or P_1 Q_3) => thm_291 Q_3 R_2 P_1 hyp_2 (thm_292 R_2 P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> Q) R) ;)

(; dict ;)

def thm_294 : R_1 : hol.term hol.bool -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp Q_2 R_1) -> hol.proof (hol.imp Q_2 R_1) :=
  R_1 : hol.term hol.bool => Q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp Q_2 R_1) => hyp_1.

(; Theorem: |- R ;)

(; dict ;)

def thm_295 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> R_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_2 R_3) -> hyp_2 : hol.proof (hol.imp Q_1 R_3) -> hyp_3 : hol.proof (hol.or P_2 Q_1) -> hol.proof R_3 :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_293 P_2 R_3 Q_1 hyp_1 hyp_3 (thm_294 R_3 Q_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p) ;)

(; dict ;)

def thm_296 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_1 hol.false) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool p_1 hol.true) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool p_1 hol.true) (hol.eq hol.bool p_1 hol.false)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_1 hol.false) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool p_1 hol.true) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool p_1 hol.true) (hol.eq hol.bool p_1 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool p_1 hol.false) (hol.eq hol.bool p_1 hol.true) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p) ;)

(; dict ;)

def thm_297 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_1 hol.false) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool p_1 hol.true) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_1 hol.false) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool p_1 hol.true) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) => hol.PROVE_HYP (hol.or (hol.eq hol.bool p_1 hol.true) (hol.eq hol.bool p_1 hol.false)) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (thm_276 p_1) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool p_1 hol.true) (hol.eq hol.bool p_1 hol.false)) => thm_296 p_1 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p) ;)

(; dict ;)

def thm_298 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_1 hol.false) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_1 hol.false) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool p_1 hol.true) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (thm_275 p_1) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool p_1 hol.true) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) => thm_297 p_1 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ p)) p)) p) ;)

(; dict ;)

def thm_299 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) :=
  p_1 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool p_1 hol.false) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (thm_256 p_1) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_1 hol.false) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1)) => thm_298 p_1 hyp_1).

(; Theorem: |- ((= Data.Bool.F) Data.Bool.F) ;)

(; dict ;)

def thm_300 : hol.proof (hol.eq hol.bool hol.false hol.false) :=
  hol.REFL hol.bool hol.false.

(; Theorem: |- ((= Data.Bool.F) Data.Bool.F) ;)

(; dict ;)

def thm_301 : hol.proof (hol.eq hol.bool hol.false hol.false) :=
  hol.TRANS hol.bool hol.false hol.false hol.false thm_300 thm_300.

(; Theorem: |- ((= ((Data.Bool.==> ((= _1181) ((HOLLight.mk_pair _1182) _1183))) Data.Bool.F)) ((Data.Bool.==> ((= _1181) ((HOLLight.mk_pair _1182) _1183))) Data.Bool.F)) ;)

(; dict ;)

def thm_302 : B : hol.type -> A : hol.type -> __1183_1 : hol.term B -> __1182_2 : hol.term A -> __1181_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1)) hol.false) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1)) hol.false)) :=
  B : hol.type => A : hol.type => __1183_1 : hol.term B => __1182_2 : hol.term A => __1181_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1)) hol.false).

(; Theorem: |- ((= ((Data.Bool.==> ((= _1181) ((HOLLight.mk_pair _1182) _1183))) Data.Bool.F)) ((Data.Bool.==> ((= _1181) ((HOLLight.mk_pair _1182) _1183))) Data.Bool.F)) ;)

(; dict ;)

def thm_303 : B : hol.type -> A : hol.type -> __1183_1 : hol.term B -> __1182_2 : hol.term A -> __1181_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1)) hol.false) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1)) hol.false)) :=
  B : hol.type => A : hol.type => __1183_1 : hol.term B => __1182_2 : hol.term A => __1181_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1)) hol.false) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1)) hol.false) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1)) hol.false) (thm_302 B A __1183_1 __1182_2 __1181_3) (thm_302 B A __1183_1 __1182_2 __1181_3).

(; Theorem: |- ((= (Data.Bool.~ ((= _1181) ((HOLLight.mk_pair _1182) _1183)))) (Data.Bool.~ ((= _1181) ((HOLLight.mk_pair _1182) _1183)))) ;)

(; dict ;)

def thm_304 : B : hol.type -> A : hol.type -> __1183_1 : hol.term B -> __1182_2 : hol.term A -> __1181_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1)))) :=
  B : hol.type => A : hol.type => __1183_1 : hol.term B => __1182_2 : hol.term A => __1181_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1))).

(; Theorem: |- ((= ((= (Data.Bool.~ p)) ((Data.Bool.==> p) Data.Bool.F))) ((= (Data.Bool.~ p)) ((Data.Bool.==> p) Data.Bool.F))) ;)

(; dict ;)

def thm_305 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not p_1) (hol.imp p_1 hol.false)) (hol.eq hol.bool (hol.not p_1) (hol.imp p_1 hol.false))) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not p_1) (hol.imp p_1 hol.false)).

(; Theorem: |- ((= ((= (Data.Bool.~ p)) ((Data.Bool.==> p) Data.Bool.F))) ((= (Data.Bool.~ p)) ((Data.Bool.==> p) Data.Bool.F))) ;)

(; dict ;)

def thm_306 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not p_1) (hol.imp p_1 hol.false)) (hol.eq hol.bool (hol.not p_1) (hol.imp p_1 hol.false))) :=
  p_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not p_1) (hol.imp p_1 hol.false)) (hol.eq hol.bool (hol.not p_1) (hol.imp p_1 hol.false)) (hol.eq hol.bool (hol.not p_1) (hol.imp p_1 hol.false)) (thm_305 p_1) (thm_305 p_1).

(; Theorem: |- ((= (= (Data.Bool.~ p))) (= (Data.Bool.~ p))) ;)

(; dict ;)

def thm_307 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not p_1)) (hol.eq hol.bool (hol.not p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not p_1)).

(; Theorem: |- ((= ((Data.Bool.==> p) Data.Bool.F)) (Data.Bool.~ p)) ;)

(; dict ;)

def thm_308 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp p_1 hol.false) (hol.not p_1)) :=
  p_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_136 t_1) p_1.

(; Theorem: |- ((= ((= (Data.Bool.~ p)) ((Data.Bool.==> p) Data.Bool.F))) ((= (Data.Bool.~ p)) (Data.Bool.~ p))) ;)

(; dict ;)

def thm_309 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not p_1) (hol.imp p_1 hol.false)) (hol.eq hol.bool (hol.not p_1) (hol.not p_1))) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not p_1)) (hol.eq hol.bool (hol.not p_1)) (hol.imp p_1 hol.false) (hol.not p_1) (thm_307 p_1) (thm_308 p_1).

(; Theorem: |- ((= ((= (Data.Bool.~ p)) (Data.Bool.~ p))) Data.Bool.T) ;)

(; dict ;)

def thm_310 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not p_1) (hol.not p_1)) hol.true) :=
  p_1 : hol.term hol.bool => (x_1 : hol.term hol.bool => thm_181 x_1) (hol.not p_1).

(; Theorem: |- ((= ((= (Data.Bool.~ p)) ((Data.Bool.==> p) Data.Bool.F))) Data.Bool.T) ;)

(; dict ;)

def thm_311 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not p_1) (hol.imp p_1 hol.false)) hol.true) :=
  p_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not p_1) (hol.imp p_1 hol.false)) (hol.eq hol.bool (hol.not p_1) (hol.not p_1)) hol.true (thm_309 p_1) (thm_310 p_1).

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ p)) ((Data.Bool.==> p) Data.Bool.F))) ;)

(; dict ;)

def thm_312 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not p_1) (hol.imp p_1 hol.false))) :=
  p_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not p_1) (hol.imp p_1 hol.false)) hol.true (thm_311 p_1).

(; Theorem: |- ((= (Data.Bool.~ p)) ((Data.Bool.==> p) Data.Bool.F)) ;)

(; dict ;)

def thm_313 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not p_1) (hol.imp p_1 hol.false)) :=
  p_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.not p_1) (hol.imp p_1 hol.false)) (thm_312 p_1) thm_5.

(; Theorem: |- ((= (Data.Bool.~ ((= _1181) ((HOLLight.mk_pair _1182) _1183)))) ((Data.Bool.==> ((= _1181) ((HOLLight.mk_pair _1182) _1183))) Data.Bool.F)) ;)

(; dict ;)

def thm_314 : B : hol.type -> A : hol.type -> __1183_1 : hol.term B -> __1182_2 : hol.term A -> __1181_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1))) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1)) hol.false)) :=
  B : hol.type => A : hol.type => __1183_1 : hol.term B => __1182_2 : hol.term A => __1181_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not p_1) (hol.imp p_1 hol.false)) (hol.eq hol.bool (hol.not p_1) (hol.imp p_1 hol.false)) (thm_306 p_1) (thm_313 p_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1)).

(; Theorem: |- ((= (Data.Bool.~ ((= _1181) ((HOLLight.mk_pair _1182) _1183)))) ((Data.Bool.==> ((= _1181) ((HOLLight.mk_pair _1182) _1183))) Data.Bool.F)) ;)

(; dict ;)

def thm_315 : B : hol.type -> A : hol.type -> __1183_1 : hol.term B -> __1182_2 : hol.term A -> __1181_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1))) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1)) hol.false)) :=
  B : hol.type => A : hol.type => __1183_1 : hol.term B => __1182_2 : hol.term A => __1181_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1))) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1)) hol.false) (thm_304 B A __1183_1 __1182_2 __1181_3) (thm_314 B A __1183_1 __1182_2 __1181_3).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b))))))) ;)

(; dict ;)

def thm_316 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))))) :=
  B : hol.type => A : hol.type => hol.REFL hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b))))))) ;)

(; dict ;)

def thm_317 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (thm_316 B A) (thm_316 B A).

(; Theorem: |- ((= ((= t) \lambda x. (t x))) ((= t) \lambda x. (t x))) ;)

(; dict ;)

def thm_318 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)).

(; Theorem: |- ((= ((= t) \lambda x. (t x))) ((= t) \lambda x. (t x))) ;)

(; dict ;)

def thm_319 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (thm_318 B A t_1) (thm_318 B A t_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_320 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)).

(; Theorem: |- ((= t) \lambda x. (t x)) ;)

(; dict ;)

def thm_321 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) -> hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) => hyp_1.

(; Theorem: |- ((= \lambda x. (t x)) t) ;)

(; dict ;)

def thm_322 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) -> hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) => hol.SYM (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2) (thm_321 B A t_1 hyp_1).

(; Theorem: |- ((= \lambda x. (t x)) t) ;)

(; dict ;)

def thm_323 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) -> hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) => hyp_1.

(; Theorem: |- ((= t) \lambda x. (t x)) ;)

(; dict ;)

def thm_324 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) -> hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) => hol.SYM (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1 (thm_323 B A t_1 hyp_1).

(; Theorem: |- ((= ((= \lambda x. (t x)) t)) ((= t) \lambda x. (t x))) ;)

(; dict ;)

def thm_325 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hol.PROP_EXT (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (hyp_1 : hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) => thm_322 B A t_1 hyp_1) (hyp_1 : hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) => thm_324 B A t_1 hyp_1).

(; Theorem: |- ((= \lambda t. ((= \lambda x. (t x)) t)) \lambda t. ((= t) \lambda x. (t x))) ;)

(; dict ;)

def thm_326 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A B) hol.bool (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (t_1 : hol.term (hol.arr A B) => thm_325 B A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= \lambda x. (t x)) t))) (Data.Bool.! \lambda t. ((= t) \lambda x. (t x)))) ;)

(; dict ;)

def thm_327 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1)) (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (thm_320 B A) (thm_326 B A).

(; Theorem: |- (Data.Bool.! \lambda t. ((= t) \lambda x. (t x))) ;)

(; dict ;)

def thm_328 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1)) (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2))) (thm_327 B A) (thm_18 B A).

(; Theorem: |- ((= t) \lambda x. (t x)) ;)

(; dict ;)

def thm_329 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => thm_328 B A t_1.

(; Theorem: |- ((= t) \lambda x. (t x)) ;)

(; dict ;)

def thm_330 : A : hol.type -> t_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) t_1 (x_2 : hol.term A => t_1 x_2)) :=
  A : hol.type => t_1 : hol.term (hol.arr A hol.bool) => (B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (thm_319 B A t_1) (thm_329 B A t_1)) hol.bool A t_1.

(; Theorem: |- ((= P) \lambda x. (P x)) ;)

(; dict ;)

def thm_331 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) P_1 (x_2 : hol.term A => P_1 x_2)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => t_1 : hol.term (hol.arr A hol.bool) => thm_330 A t_1) A P_1.

(; Theorem: |- ((= (Data.Bool.! P)) (Data.Bool.! \lambda x. (P x))) ;)

(; dict ;)

def thm_332 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A P_1) (hol.forall A (x_2 : hol.term A => P_1 x_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) P_1 (x_2 : hol.term A => P_1 x_2) (thm_51 A) (thm_331 A P_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! P))) (Data.Bool.~ (Data.Bool.! \lambda x. (P x)))) ;)

(; dict ;)

def thm_333 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A P_1)) (hol.not (hol.forall A (x_2 : hol.term A => P_1 x_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.forall A P_1) (hol.forall A (x_2 : hol.term A => P_1 x_2)) thm_247 (thm_332 A P_1).

(; Theorem: |- ((= (= (Data.Bool.~ (Data.Bool.! P)))) (= (Data.Bool.~ (Data.Bool.! \lambda x. (P x))))) ;)

(; dict ;)

def thm_334 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.forall A P_1))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => P_1 x_2))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.forall A P_1)) (hol.not (hol.forall A (x_2 : hol.term A => P_1 x_2))) thm_119 (thm_333 A P_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (P x)))) ;)

(; dict ;)

def thm_335 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2))).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! P))) (Data.Bool.? \lambda x. (Data.Bool.~ (P x))))) ((= (Data.Bool.~ (Data.Bool.! \lambda x. (P x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (P x))))) ;)

(; dict ;)

def thm_336 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.forall A P_1))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => P_1 x_2)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2))) (thm_334 A P_1) (thm_335 A P_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. (P x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (P x))))) ((= (Data.Bool.~ (Data.Bool.! P))) (Data.Bool.? \lambda x. (Data.Bool.~ (P x))))) ;)

(; dict ;)

def thm_337 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.forall A P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (thm_336 A P_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_338 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_339 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (thm_338 A p_1) (thm_338 A p_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_340 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_19 A p_1.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (P x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (P x)))) ;)

(; dict ;)

def thm_341 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (thm_339 A p_1) (thm_340 A p_1)) A p_1) A P_1.

(; Theorem: |- ((= (= (Data.Bool.~ (Data.Bool.! \lambda x. (P x))))) (= (Data.Bool.? \lambda x. (Data.Bool.~ (P x))))) ;)

(; dict ;)

def thm_342 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => P_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.forall A (x_2 : hol.term A => P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2))) thm_119 (thm_341 A P_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. (P x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (P x))))) ((= (Data.Bool.? \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (P x))))) ;)

(; dict ;)

def thm_343 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => P_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2))) (thm_342 A P_1) (thm_335 A P_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (P x))))) Data.Bool.T) ;)

(; dict ;)

def thm_344 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) hol.true) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => (x_1 : hol.term hol.bool => thm_181 x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2))).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. (P x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (P x))))) Data.Bool.T) ;)

(; dict ;)

def thm_345 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) hol.true) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) hol.true (thm_343 A P_1) (thm_344 A P_1).

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ (Data.Bool.! \lambda x. (P x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (P x))))) ;)

(; dict ;)

def thm_346 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) hol.true (thm_345 A P_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! P))) (Data.Bool.? \lambda x. (Data.Bool.~ (P x)))) ;)

(; dict ;)

def thm_347 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (thm_337 A P_1) (hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (thm_346 A P_1) thm_5).

(; Theorem: |- ((= ((Data.Bool./\ ((= (Data.Bool.~ (Data.Bool.? P))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) ((= (Data.Bool.~ (Data.Bool.?! P))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x)))))))))) ((Data.Bool./\ ((= (Data.Bool.~ (Data.Bool.! P))) (Data.Bool.? \lambda x. (Data.Bool.~ (P x))))) ((Data.Bool./\ ((= (Data.Bool.~ (Data.Bool.? P))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) ((= (Data.Bool.~ (Data.Bool.?! P))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))))))))) ;)

(; dict ;)

def thm_348 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.forall A P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))) (hol.and (hol.eq hol.bool (hol.not (hol.forall A P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.forall A P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not (hol.forall A P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= (Data.Bool.~ (Data.Bool.? P))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) ((= (Data.Bool.~ (Data.Bool.?! P))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x)))))))))) ((Data.Bool./\ ((= (Data.Bool.~ (Data.Bool.! P))) (Data.Bool.? \lambda x. (Data.Bool.~ (P x))))) ((Data.Bool./\ ((= (Data.Bool.~ (Data.Bool.? P))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) ((= (Data.Bool.~ (Data.Bool.?! P))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))))))))) ;)

(; dict ;)

def thm_349 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))) (hol.and (hol.eq hol.bool (hol.not (hol.forall A P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.PROVE_HYP (hol.eq hol.bool (hol.not (hol.forall A P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))) (hol.and (hol.eq hol.bool (hol.not (hol.forall A P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))))) (thm_347 A P_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.forall A P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) => thm_348 A P_1 hyp_1).

(; Theorem: |- ((= Data.Bool.?) Data.Bool.?) ;)

(; dict ;)

def thm_350 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)).

(; Theorem: |- ((= (Data.Bool.? P)) (Data.Bool.? \lambda x. (P x))) ;)

(; dict ;)

def thm_351 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) P_1 (x_2 : hol.term A => P_1 x_2) (thm_350 A) (thm_331 A P_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? P))) (Data.Bool.~ (Data.Bool.? \lambda x. (P x)))) ;)

(; dict ;)

def thm_352 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool hol.not hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) thm_247 (thm_351 A P_1).

(; Theorem: |- ((= (= (Data.Bool.~ (Data.Bool.? P)))) (= (Data.Bool.~ (Data.Bool.? \lambda x. (P x))))) ;)

(; dict ;)

def thm_353 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) thm_119 (thm_352 A P_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) ;)

(; dict ;)

def thm_354 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.? P))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) ((= (Data.Bool.~ (Data.Bool.? \lambda x. (P x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) ;)

(; dict ;)

def thm_355 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (thm_353 A P_1) (thm_354 A P_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.? \lambda x. (P x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) ((= (Data.Bool.~ (Data.Bool.? P))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) ;)

(; dict ;)

def thm_356 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (thm_355 A P_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_357 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_358 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (thm_357 A p_1) (thm_357 A p_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_359 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_20 A p_1.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (P x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) ;)

(; dict ;)

def thm_360 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (thm_358 A p_1) (thm_359 A p_1)) A p_1) A P_1.

(; Theorem: |- ((= (= (Data.Bool.~ (Data.Bool.? \lambda x. (P x))))) (= (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) ;)

(; dict ;)

def thm_361 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) thm_119 (thm_360 A P_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.? \lambda x. (P x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) ((= (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) ;)

(; dict ;)

def thm_362 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (thm_361 A P_1) (thm_354 A P_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) Data.Bool.T) ;)

(; dict ;)

def thm_363 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) hol.true) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => (x_1 : hol.term hol.bool => thm_181 x_1) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.? \lambda x. (P x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) Data.Bool.T) ;)

(; dict ;)

def thm_364 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) hol.true) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) hol.true (thm_362 A P_1) (thm_363 A P_1).

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ (Data.Bool.? \lambda x. (P x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) ;)

(; dict ;)

def thm_365 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) hol.true (thm_364 A P_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? P))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) ;)

(; dict ;)

def thm_366 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (thm_356 A P_1) (hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (thm_365 A P_1) thm_5).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.?! P))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))))))) ((Data.Bool./\ ((= (Data.Bool.~ (Data.Bool.? P))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) ((= (Data.Bool.~ (Data.Bool.?! P))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x)))))))))) ;)

(; dict ;)

def thm_367 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) hyp_1.

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.?! P))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))))))) ((Data.Bool./\ ((= (Data.Bool.~ (Data.Bool.? P))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) ((= (Data.Bool.~ (Data.Bool.?! P))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x)))))))))) ;)

(; dict ;)

def thm_368 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.PROVE_HYP (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))))) (thm_366 A P_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) => thm_367 A P_1 hyp_1).

(; Theorem: |- ((= Data.Bool.?!) Data.Bool.?!) ;)

(; dict ;)

def thm_369 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)).

(; Theorem: |- ((= (Data.Bool.?! P)) (Data.Bool.?! \lambda x. (P x))) ;)

(; dict ;)

def thm_370 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) P_1 (x_2 : hol.term A => P_1 x_2) (thm_369 A) (thm_331 A P_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.?! P))) (Data.Bool.~ (Data.Bool.?! \lambda x. (P x)))) ;)

(; dict ;)

def thm_371 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool hol.not hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) thm_247 (thm_370 A P_1).

(; Theorem: |- ((= (= (Data.Bool.~ (Data.Bool.?! P)))) (= (Data.Bool.~ (Data.Bool.?! \lambda x. (P x))))) ;)

(; dict ;)

def thm_372 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) thm_119 (thm_371 A P_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x)))))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x)))))))) ;)

(; dict ;)

def thm_373 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.?! P))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))))))) ((= (Data.Bool.~ (Data.Bool.?! \lambda x. (P x)))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))))))) ;)

(; dict ;)

def thm_374 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))) (thm_372 A P_1) (thm_373 A P_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.?! \lambda x. (P x)))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))))))) ((= (Data.Bool.~ (Data.Bool.?! P))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))))))) ;)

(; dict ;)

def thm_375 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (thm_374 A P_1).

(; Theorem: |- ((= ((= Data.Bool.?!) \lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))) ((= Data.Bool.?!) \lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))) ;)

(; dict ;)

def thm_376 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))))) :=
  A : hol.type => hol.REFL hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))).

(; Theorem: |- ((= ((= Data.Bool.?!) \lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))) ((= Data.Bool.?!) \lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))) ;)

(; dict ;)

def thm_377 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))))) :=
  A : hol.type => hol.TRANS hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) (thm_376 A) (thm_376 A).

(; Theorem: |- ((= \lambda x. (P x)) \lambda x. (P x)) ;)

(; dict ;)

def thm_378 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => P_1 x_2) (x_2 : hol.term A => P_1 x_2)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (x_2 : hol.term A => P_1 x_2).

(; Theorem: |- ((= (Data.Bool.?! \lambda x. (P x))) (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) \lambda x. (P x))) ;)

(; dict ;)

def thm_379 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => P_1 x_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => P_1 x_2) (x_2 : hol.term A => P_1 x_2) (hol.EQ_MP (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4)))))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4)))))) (thm_377 A) (thm_21 A)) (thm_378 A P_1).

(; Theorem: |- ((= (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) p)) ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ;)

(; dict ;)

def thm_380 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) p_1) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) p_1.

(; Theorem: |- ((= \lambda p. (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) p)) \lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ;)

(; dict ;)

def thm_381 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => (p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) p_1) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (p_1 : hol.term (hol.arr A hol.bool) => (p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) p_1) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (p_1 : hol.term (hol.arr A hol.bool) => thm_380 A p_1).

(; Theorem: |- ((= (\lambda p. (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) p) \lambda x. (P x))) (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) \lambda x. (P x))) ;)

(; dict ;)

def thm_382 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_3) (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 y_5)) (hol.eq A x_4 y_5))))) p_2) (x_2 : hol.term A => P_1 x_2)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => P_1 x_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_3) (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 y_5)) (hol.eq A x_4 y_5))))) p_2) (p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => P_1 x_2) (x_2 : hol.term A => P_1 x_2) (thm_381 A) (thm_378 A P_1).

(; Theorem: |- ((= (= (\lambda p. (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) p) \lambda x. (P x)))) (= (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) \lambda x. (P x)))) ;)

(; dict ;)

def thm_383 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_3) (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 y_5)) (hol.eq A x_4 y_5))))) p_2) (x_2 : hol.term A => P_1 x_2))) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => P_1 x_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_3) (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 y_5)) (hol.eq A x_4 y_5))))) p_2) (x_2 : hol.term A => P_1 x_2)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => P_1 x_2)) thm_119 (thm_382 A P_1).

(; Theorem: |- ((= (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) \lambda x. (P x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (P x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. (P x) x)) (\lambda x. (P x) y))) ((= x) y)))))) ;)

(; dict ;)

def thm_384 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => P_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => P_1 x_4) x_2) ((x_4 : hol.term A => P_1 x_4) y_3)) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => P_1 x_2).

(; Theorem: |- ((= ((= (\lambda p. (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) p) \lambda x. (P x))) (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) \lambda x. (P x)))) ((= (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) \lambda x. (P x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (P x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. (P x) x)) (\lambda x. (P x) y))) ((= x) y))))))) ;)

(; dict ;)

def thm_385 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_3) (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 y_5)) (hol.eq A x_4 y_5))))) p_2) (x_2 : hol.term A => P_1 x_2)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => P_1 x_2))) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => P_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => P_1 x_4) x_2) ((x_4 : hol.term A => P_1 x_4) y_3)) (hol.eq A x_2 y_3))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_3) (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 y_5)) (hol.eq A x_4 y_5))))) p_2) (x_2 : hol.term A => P_1 x_2))) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => P_1 x_2))) ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => P_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => P_1 x_4) x_2) ((x_4 : hol.term A => P_1 x_4) y_3)) (hol.eq A x_2 y_3))))) (thm_383 A P_1) (thm_384 A P_1).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.? \lambda x. (P x)))) (Data.Bool./\ (Data.Bool.? \lambda x. (P x)))) ;)

(; dict ;)

def thm_386 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))).

(; Theorem: |- ((= Data.Bool.==>) Data.Bool.==>) ;)

(; dict ;)

def thm_387 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp hol.imp) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp.

(; Theorem: |- ((= Data.Bool./\) Data.Bool./\) ;)

(; dict ;)

def thm_388 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and hol.and) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and.

(; Theorem: |- ((= ((= (\lambda x. (f x) y)) (f y))) ((= (\lambda x. (f x) y)) (f y))) ;)

(; dict ;)

def thm_389 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)).

(; Theorem: |- ((= ((= (\lambda x. (f x) y)) (f y))) ((= (\lambda x. (f x) y)) (f y))) ;)

(; dict ;)

def thm_390 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) (thm_389 A B y_1 f_2) (thm_389 A B y_1 f_2).

(; Theorem: |- (Data.Bool.! \lambda y. ((= (\lambda x. (f x) y)) (f y))) ;)

(; dict ;)

def thm_391 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => thm_22 B A f_1.

(; Theorem: |- ((= (\lambda x. (f x) y)) (f y)) ;)

(; dict ;)

def thm_392 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A B) => thm_391 B A f_2 y_1.

(; Theorem: |- ((= (\lambda x. (f x) y)) (f y)) ;)

(; dict ;)

def thm_393 : A : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) :=
  A : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => B : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) (thm_390 A B y_1 f_2) (thm_392 A B y_1 f_2)) A hol.bool y_1 f_2.

(; Theorem: |- ((= (\lambda x_1. (P x_1) x)) (P x)) ;)

(; dict ;)

def thm_394 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x__1_3 : hol.term A => P_2 x__1_3) x_1) (P_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A hol.bool) => thm_393 A y_1 f_2) A x_1 P_2.

(; Theorem: |- ((= (Data.Bool./\ (\lambda x_1. (P x_1) x))) (Data.Bool./\ (P x))) ;)

(; dict ;)

def thm_395 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and ((x__1_3 : hol.term A => P_2 x__1_3) x_1)) (hol.and (P_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and ((x__1_3 : hol.term A => P_2 x__1_3) x_1) (P_2 x_1) thm_388 (thm_394 A x_1 P_2).

(; Theorem: |- ((= (\lambda x. (P x) y)) (P y)) ;)

(; dict ;)

def thm_396 : A : hol.type -> y_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => P_2 x_3) y_1) (P_2 y_1)) :=
  A : hol.type => y_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A hol.bool) => thm_393 A y_1 f_2) A y_1 P_2.

(; Theorem: |- ((= ((Data.Bool./\ (\lambda x_1. (P x_1) x)) (\lambda x. (P x) y))) ((Data.Bool./\ (P x)) (P y))) ;)

(; dict ;)

def thm_397 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and ((x__1_4 : hol.term A => P_3 x__1_4) x_2) ((x_4 : hol.term A => P_3 x_4) y_1)) (hol.and (P_3 x_2) (P_3 y_1))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.and ((x__1_4 : hol.term A => P_3 x__1_4) x_2)) (hol.and (P_3 x_2)) ((x_4 : hol.term A => P_3 x_4) y_1) (P_3 y_1) (thm_395 A x_2 P_3) (thm_396 A y_1 P_3).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool./\ (\lambda x_1. (P x_1) x)) (\lambda x. (P x) y)))) (Data.Bool.==> ((Data.Bool./\ (P x)) (P y)))) ;)

(; dict ;)

def thm_398 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.and ((x__1_4 : hol.term A => P_3 x__1_4) x_2) ((x_4 : hol.term A => P_3 x_4) y_1))) (hol.imp (hol.and (P_3 x_2) (P_3 y_1)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.and ((x__1_4 : hol.term A => P_3 x__1_4) x_2) ((x_4 : hol.term A => P_3 x_4) y_1)) (hol.and (P_3 x_2) (P_3 y_1)) thm_387 (thm_397 A y_1 x_2 P_3).

(; Theorem: |- ((= ((= x) y)) ((= x) y)) ;)

(; dict ;)

def thm_399 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A x_2 y_1)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.eq A x_2 y_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (\lambda x_1. (P x_1) x)) (\lambda x. (P x) y))) ((= x) y))) ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))) ;)

(; dict ;)

def thm_400 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and ((x__1_4 : hol.term A => P_3 x__1_4) x_2) ((x_4 : hol.term A => P_3 x_4) y_1)) (hol.eq A x_2 y_1)) (hol.imp (hol.and (P_3 x_2) (P_3 y_1)) (hol.eq A x_2 y_1))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.and ((x__1_4 : hol.term A => P_3 x__1_4) x_2) ((x_4 : hol.term A => P_3 x_4) y_1))) (hol.imp (hol.and (P_3 x_2) (P_3 y_1))) (hol.eq A x_2 y_1) (hol.eq A x_2 y_1) (thm_398 A y_1 x_2 P_3) (thm_399 A y_1 x_2).

(; Theorem: |- ((= \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x_1. (P x_1) x)) (\lambda x. (P x) y))) ((= x) y))) \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))) ;)

(; dict ;)

def thm_401 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => hol.imp (hol.and ((x__1_4 : hol.term A => P_2 x__1_4) x_1) ((x_4 : hol.term A => P_2 x_4) y_3)) (hol.eq A x_1 y_3)) (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (y_3 : hol.term A => hol.imp (hol.and ((x__1_4 : hol.term A => P_2 x__1_4) x_1) ((x_4 : hol.term A => P_2 x_4) y_3)) (hol.eq A x_1 y_3)) (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3)) (y_3 : hol.term A => thm_400 A y_3 x_1 P_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x_1. (P x_1) x)) (\lambda x. (P x) y))) ((= x) y)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))) ;)

(; dict ;)

def thm_402 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x__1_4 : hol.term A => P_2 x__1_4) x_1) ((x_4 : hol.term A => P_2 x_4) y_3)) (hol.eq A x_1 y_3))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3)))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_3 : hol.term A => hol.imp (hol.and ((x__1_4 : hol.term A => P_2 x__1_4) x_1) ((x_4 : hol.term A => P_2 x_4) y_3)) (hol.eq A x_1 y_3)) (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3)) (thm_51 A) (thm_401 A x_1 P_2).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x_1. (P x_1) x)) (\lambda x. (P x) y))) ((= x) y)))) \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))) ;)

(; dict ;)

def thm_403 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x__1_4 : hol.term A => P_1 x__1_4) x_2) ((x_4 : hol.term A => P_1 x_4) y_3)) (hol.eq A x_2 y_3))) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x__1_4 : hol.term A => P_1 x__1_4) x_2) ((x_4 : hol.term A => P_1 x_4) y_3)) (hol.eq A x_2 y_3))) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))) (x_2 : hol.term A => thm_402 A x_2 P_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x_1. (P x_1) x)) (\lambda x. (P x) y))) ((= x) y))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))))) ;)

(; dict ;)

def thm_404 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x__1_4 : hol.term A => P_1 x__1_4) x_2) ((x_4 : hol.term A => P_1 x_4) y_3)) (hol.eq A x_2 y_3)))) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x__1_4 : hol.term A => P_1 x__1_4) x_2) ((x_4 : hol.term A => P_1 x_4) y_3)) (hol.eq A x_2 y_3))) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))) (thm_51 A) (thm_403 A P_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (P x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x_1. (P x_1) x)) (\lambda x. (P x) y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (P x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))))) ;)

(; dict ;)

def thm_405 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x__1_4 : hol.term A => P_1 x__1_4) x_2) ((x_4 : hol.term A => P_1 x_4) y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x__1_4 : hol.term A => P_1 x__1_4) x_2) ((x_4 : hol.term A => P_1 x_4) y_3)) (hol.eq A x_2 y_3)))) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))) (thm_386 A P_1) (thm_404 A P_1).

(; Theorem: |- ((= (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) \lambda x. (P x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (P x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))))) ;)

(; dict ;)

def thm_406 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => P_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => P_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => P_1 x_4) x_2) ((x_4 : hol.term A => P_1 x_4) y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))))) (hol.EQ_MP (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_3) (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 y_5)) (hol.eq A x_4 y_5))))) p_2) (x_2 : hol.term A => P_1 x_2)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => P_1 x_2))) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => P_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => P_1 x_4) x_2) ((x_4 : hol.term A => P_1 x_4) y_3)) (hol.eq A x_2 y_3)))))) (thm_385 A P_1) (thm_382 A P_1)) (thm_405 A P_1).

(; Theorem: |- ((= (Data.Bool.?! \lambda x. (P x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (P x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))))) ;)

(; dict ;)

def thm_407 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => P_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))))) (thm_379 A P_1) (thm_406 A P_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.?! \lambda x. (P x)))) (Data.Bool.~ ((Data.Bool./\ (Data.Bool.? \lambda x. (P x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))))))) ;)

(; dict ;)

def thm_408 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.not (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool hol.not hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))))) thm_247 (thm_407 A P_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_409 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_410 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (thm_409 t2_1 t1_2) (thm_409 t2_1 t1_2).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) ;)

(; dict ;)

def thm_411 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) ;)

(; dict ;)

def thm_412 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) thm_411 thm_411.

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))))) ;)

(; dict ;)

def thm_413 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) thm_65 thm_412.

(; Theorem: |- ((= \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_414 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))).

(; Theorem: |- ((= \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_415 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (thm_414 t1_1) (thm_414 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) ;)

(; dict ;)

def thm_416 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))))) :=
  t1_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) thm_65 (thm_415 t1_1).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_417 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => thm_23 t1_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_418 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_417 t1_2 t2_1.

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_419 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) hyp_1.

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_420 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (thm_409 t2_1 t1_2) (thm_418 t2_1 t1_2)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) => thm_419 t2_1 t1_2 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_421 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_422 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (thm_421 t2_1 t1_2) (thm_421 t2_1 t1_2).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_423 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => thm_24 t1_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_424 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_423 t1_2 t2_1.

(; Theorem: |- ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_425 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) (thm_420 t2_1 t1_2) (hol.EQ_MP (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (thm_422 t2_1 t1_2) (thm_424 t2_1 t1_2)).

(; Theorem: |- (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_426 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => thm_425 t2_2 t1_1.

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) ;)

(; dict ;)

def thm_427 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))))) :=
  t1_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (thm_416 t1_1) (thm_426 t1_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_428 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) -> hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_166 q_1 p_2 hyp_1) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) hyp_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_429 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.EQ_MP (hol.forall hol.bool (t1_3 : hol.term hol.bool => hol.forall hol.bool (t2_4 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_3 t2_4)) (hol.or (hol.not t1_3) (hol.not t2_4))) (hol.eq hol.bool (hol.not (hol.or t1_3 t2_4)) (hol.and (hol.not t1_3) (hol.not t2_4)))))) (hol.forall hol.bool (t1_3 : hol.term hol.bool => hol.forall hol.bool (t2_4 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_3 t2_4)) (hol.or (hol.not t1_3) (hol.not t2_4))) (hol.eq hol.bool (hol.not (hol.or t1_3 t2_4)) (hol.and (hol.not t1_3) (hol.not t2_4)))))) thm_413 thm_427 t1_2 t2_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) => thm_428 t2_1 t1_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ (Data.Bool.? \lambda x. (P x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))))))) ((Data.Bool.\/ (Data.Bool.~ (Data.Bool.? \lambda x. (P x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))))))) ;)

(; dict ;)

def thm_430 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))))) (hol.or (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (thm_410 t2_1 t1_2) (thm_429 t2_1 t1_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)).

(; Theorem: |- ((= Data.Bool.\/) Data.Bool.\/) ;)

(; dict ;)

def thm_431 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.or hol.or) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.or.

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.~ (Data.Bool.? \lambda x. (P x))))) (Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) ;)

(; dict ;)

def thm_432 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) thm_431 (thm_360 A P_1).

(; Theorem: |- ((= (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))) x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))) ;)

(; dict ;)

def thm_433 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_2 x_3) (P_2 y_4)) (hol.eq A x_3 y_4))) x_1) (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3)))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_2 x_3) (P_2 y_4)) (hol.eq A x_3 y_4))) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))) x)) \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))) ;)

(; dict ;)

def thm_434 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_1 x_3) (P_1 y_4)) (hol.eq A x_3 y_4))) x_2) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_1 x_3) (P_1 y_4)) (hol.eq A x_3 y_4))) x_2) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))) (x_2 : hol.term A => thm_433 A x_2 P_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))) x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))))) ;)

(; dict ;)

def thm_435 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_1 x_3) (P_1 y_4)) (hol.eq A x_3 y_4))) x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_1 x_3) (P_1 y_4)) (hol.eq A x_3 y_4))) x_2) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))) (thm_51 A) (thm_434 A P_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))) x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))))) ;)

(; dict ;)

def thm_436 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_1 x_3) (P_1 y_4)) (hol.eq A x_3 y_4))) x_2))) (hol.not (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_1 x_3) (P_1 y_4)) (hol.eq A x_3 y_4))) x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))) thm_247 (thm_435 A P_1).

(; Theorem: |- ((= (= (Data.Bool.~ (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))) x))))) (= (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))))))) ;)

(; dict ;)

def thm_437 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_1 x_3) (P_1 y_4)) (hol.eq A x_3 y_4))) x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_1 x_3) (P_1 y_4)) (hol.eq A x_3 y_4))) x_2))) (hol.not (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))))) thm_119 (thm_436 A P_1).

(; Theorem: |- ((= (Data.Bool.~ (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))) x))) (Data.Bool.~ (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))))) ;)

(; dict ;)

def thm_438 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_2 x_3) (P_2 y_4)) (hol.eq A x_3 y_4))) x_1)) (hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3))))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool hol.not hol.not ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_2 x_3) (P_2 y_4)) (hol.eq A x_3 y_4))) x_1) (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3))) thm_247 (thm_433 A x_1 P_2).

(; Theorem: |- ((= \lambda x. (Data.Bool.~ (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))) x))) \lambda x. (Data.Bool.~ (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))))) ;)

(; dict ;)

def thm_439 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.not ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_1 x_3) (P_1 y_4)) (hol.eq A x_3 y_4))) x_2)) (x_2 : hol.term A => hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.not ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_1 x_3) (P_1 y_4)) (hol.eq A x_3 y_4))) x_2)) (x_2 : hol.term A => hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))) (x_2 : hol.term A => thm_438 A x_2 P_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))) x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))))) ;)

(; dict ;)

def thm_440 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_1 x_3) (P_1 y_4)) (hol.eq A x_3 y_4))) x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_2 : hol.term A => hol.not ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_1 x_3) (P_1 y_4)) (hol.eq A x_3 y_4))) x_2)) (x_2 : hol.term A => hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))) (thm_350 A) (thm_439 A P_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))) x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))) x))))) ((= (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))))) (Data.Bool.? \lambda x. (Data.Bool.~ (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))))))) ;)

(; dict ;)

def thm_441 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_1 x_3) (P_1 y_4)) (hol.eq A x_3 y_4))) x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_1 x_3) (P_1 y_4)) (hol.eq A x_3 y_4))) x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_1 x_3) (P_1 y_4)) (hol.eq A x_3 y_4))) x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_1 x_3) (P_1 y_4)) (hol.eq A x_3 y_4))) x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))))) (thm_437 A P_1) (thm_440 A P_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))) x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))) x)))) ;)

(; dict ;)

def thm_442 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_1 x_3) (P_1 y_4)) (hol.eq A x_3 y_4))) x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_1 x_3) (P_1 y_4)) (hol.eq A x_3 y_4))) x_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_340 A p_1) A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))))) (Data.Bool.? \lambda x. (Data.Bool.~ (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))))) ;)

(; dict ;)

def thm_443 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_1 x_3) (P_1 y_4)) (hol.eq A x_3 y_4))) x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (P_1 x_3) (P_1 y_4)) (hol.eq A x_3 y_4))) x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))))) (thm_441 A P_1) (thm_442 A P_1).

(; Theorem: |- ((= (\lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)) y)) ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))) ;)

(; dict ;)

def thm_444 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((y_4 : hol.term A => hol.imp (hol.and (P_3 x_2) (P_3 y_4)) (hol.eq A x_2 y_4)) y_1) (hol.imp (hol.and (P_3 x_2) (P_3 y_1)) (hol.eq A x_2 y_1))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (y_4 : hol.term A => hol.imp (hol.and (P_3 x_2) (P_3 y_4)) (hol.eq A x_2 y_4)) y_1.

(; Theorem: |- ((= \lambda y. (\lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)) y)) \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))) ;)

(; dict ;)

def thm_445 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_4)) (hol.eq A x_1 y_4)) y_3) (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_4)) (hol.eq A x_1 y_4)) y_3) (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3)) (y_3 : hol.term A => thm_444 A y_3 x_1 P_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. (\lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)) y))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))) ;)

(; dict ;)

def thm_446 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_4)) (hol.eq A x_1 y_4)) y_3)) (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3)))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_4)) (hol.eq A x_1 y_4)) y_3) (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3)) (thm_51 A) (thm_445 A x_1 P_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda y. (\lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)) y)))) (Data.Bool.~ (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))))) ;)

(; dict ;)

def thm_447 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_4)) (hol.eq A x_1 y_4)) y_3))) (hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3))))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_4)) (hol.eq A x_1 y_4)) y_3)) (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3))) thm_247 (thm_446 A x_1 P_2).

(; Theorem: |- ((= (= (Data.Bool.~ (Data.Bool.! \lambda y. (\lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)) y))))) (= (Data.Bool.~ (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))))) ;)

(; dict ;)

def thm_448 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_4)) (hol.eq A x_1 y_4)) y_3)))) (hol.eq hol.bool (hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3)))))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_4)) (hol.eq A x_1 y_4)) y_3))) (hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3)))) thm_119 (thm_447 A x_1 P_2).

(; Theorem: |- ((= (Data.Bool.~ (\lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)) y))) (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))) ;)

(; dict ;)

def thm_449 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not ((y_4 : hol.term A => hol.imp (hol.and (P_3 x_2) (P_3 y_4)) (hol.eq A x_2 y_4)) y_1)) (hol.not (hol.imp (hol.and (P_3 x_2) (P_3 y_1)) (hol.eq A x_2 y_1)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool hol.not hol.not ((y_4 : hol.term A => hol.imp (hol.and (P_3 x_2) (P_3 y_4)) (hol.eq A x_2 y_4)) y_1) (hol.imp (hol.and (P_3 x_2) (P_3 y_1)) (hol.eq A x_2 y_1)) thm_247 (thm_444 A y_1 x_2 P_3).

(; Theorem: |- ((= \lambda y. (Data.Bool.~ (\lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)) y))) \lambda y. (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))) ;)

(; dict ;)

def thm_450 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => hol.not ((y_4 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_4)) (hol.eq A x_1 y_4)) y_3)) (y_3 : hol.term A => hol.not (hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3)))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (y_3 : hol.term A => hol.not ((y_4 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_4)) (hol.eq A x_1 y_4)) y_3)) (y_3 : hol.term A => hol.not (hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3))) (y_3 : hol.term A => thm_449 A y_3 x_1 P_2).

(; Theorem: |- ((= (Data.Bool.? \lambda y. (Data.Bool.~ (\lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)) y)))) (Data.Bool.? \lambda y. (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))))) ;)

(; dict ;)

def thm_451 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.not ((y_4 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_4)) (hol.eq A x_1 y_4)) y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.not (hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3))))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (y_3 : hol.term A => hol.not ((y_4 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_4)) (hol.eq A x_1 y_4)) y_3)) (y_3 : hol.term A => hol.not (hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3))) (thm_350 A) (thm_450 A x_1 P_2).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda y. (\lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)) y)))) (Data.Bool.? \lambda y. (Data.Bool.~ (\lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)) y))))) ((= (Data.Bool.~ (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))))) (Data.Bool.? \lambda y. (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))))) ;)

(; dict ;)

def thm_452 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_4)) (hol.eq A x_1 y_4)) y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.not ((y_4 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_4)) (hol.eq A x_1 y_4)) y_3)))) (hol.eq hol.bool (hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.not (hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3)))))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_4)) (hol.eq A x_1 y_4)) y_3)))) (hol.eq hol.bool (hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.not ((y_4 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_4)) (hol.eq A x_1 y_4)) y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.not (hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3)))) (thm_448 A x_1 P_2) (thm_451 A x_1 P_2).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda y. (p y)))) (Data.Bool.? \lambda y. (Data.Bool.~ (p y))))) ((= (Data.Bool.~ (Data.Bool.! \lambda y. (p y)))) (Data.Bool.? \lambda y. (Data.Bool.~ (p y))))) ;)

(; dict ;)

def thm_453 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (y_2 : hol.term A => p_1 y_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.not (p_1 y_2)))) (hol.eq hol.bool (hol.not (hol.forall A (y_2 : hol.term A => p_1 y_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.not (p_1 y_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.forall A (y_2 : hol.term A => p_1 y_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.not (p_1 y_2)))).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ((= (Data.Bool.~ (Data.Bool.! \lambda y. (p y)))) (Data.Bool.? \lambda y. (Data.Bool.~ (p y))))) ;)

(; dict ;)

def thm_454 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (y_2 : hol.term A => p_1 y_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.not (p_1 y_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (y_2 : hol.term A => p_1 y_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.not (p_1 y_2)))) (thm_338 A p_1) (thm_453 A p_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda y. (p y)))) (Data.Bool.? \lambda y. (Data.Bool.~ (p y)))) ;)

(; dict ;)

def thm_455 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (y_2 : hol.term A => p_1 y_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.not (p_1 y_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (y_2 : hol.term A => p_1 y_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.not (p_1 y_2)))) (thm_454 A p_1) (thm_340 A p_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda y. (\lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)) y)))) (Data.Bool.? \lambda y. (Data.Bool.~ (\lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)) y)))) ;)

(; dict ;)

def thm_456 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_4)) (hol.eq A x_1 y_4)) y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.not ((y_4 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_4)) (hol.eq A x_1 y_4)) y_3)))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_455 A p_1) A p_1) A (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3)).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))))) (Data.Bool.? \lambda y. (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))))) ;)

(; dict ;)

def thm_457 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.not (hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3))))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_4)) (hol.eq A x_1 y_4)) y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.not ((y_4 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_4)) (hol.eq A x_1 y_4)) y_3)))) (hol.eq hol.bool (hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.not (hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3))))) (thm_452 A x_1 P_2) (thm_456 A x_1 P_2).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_458 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_459 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (thm_458 t2_1 t1_2) (thm_458 t2_1 t1_2).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_460 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => thm_25 t1_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_461 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_460 t1_2 t2_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))) ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y)))) ;)

(; dict ;)

def thm_462 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.imp (hol.and (P_3 x_2) (P_3 y_1)) (hol.eq A x_2 y_1))) (hol.and (hol.and (P_3 x_2) (P_3 y_1)) (hol.not (hol.eq A x_2 y_1)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (thm_459 t2_1 t1_2) (thm_461 t2_1 t1_2)) (hol.eq A x_2 y_1) (hol.and (P_3 x_2) (P_3 y_1)).

(; Theorem: |- ((= \lambda y. (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))) \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y)))) ;)

(; dict ;)

def thm_463 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => hol.not (hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3))) (y_3 : hol.term A => hol.and (hol.and (P_2 x_1) (P_2 y_3)) (hol.not (hol.eq A x_1 y_3)))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (y_3 : hol.term A => hol.not (hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3))) (y_3 : hol.term A => hol.and (hol.and (P_2 x_1) (P_2 y_3)) (hol.not (hol.eq A x_1 y_3))) (y_3 : hol.term A => thm_462 A y_3 x_1 P_2).

(; Theorem: |- ((= (Data.Bool.? \lambda y. (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))))) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y))))) ;)

(; dict ;)

def thm_464 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.not (hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_2 x_1) (P_2 y_3)) (hol.not (hol.eq A x_1 y_3))))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (y_3 : hol.term A => hol.not (hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3))) (y_3 : hol.term A => hol.and (hol.and (P_2 x_1) (P_2 y_3)) (hol.not (hol.eq A x_1 y_3))) (thm_350 A) (thm_463 A x_1 P_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))))) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y))))) ;)

(; dict ;)

def thm_465 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_2 x_1) (P_2 y_3)) (hol.not (hol.eq A x_1 y_3))))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.not (hol.imp (hol.and (P_2 x_1) (P_2 y_3)) (hol.eq A x_1 y_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_2 x_1) (P_2 y_3)) (hol.not (hol.eq A x_1 y_3)))) (thm_457 A x_1 P_2) (thm_464 A x_1 P_2).

(; Theorem: |- ((= \lambda x. (Data.Bool.~ (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))))) \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y))))) ;)

(; dict ;)

def thm_466 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))) (x_2 : hol.term A => thm_465 A x_2 P_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y)))))) ;)

(; dict ;)

def thm_467 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_2 : hol.term A => hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))) (thm_350 A) (thm_466 A P_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y)))))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y)))))) ;)

(; dict ;)

def thm_468 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.not (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3))))) (thm_443 A P_1) (thm_467 A P_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ (Data.Bool.? \lambda x. (P x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y))))))) ;)

(; dict ;)

def thm_469 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.or (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.or (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.not (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3))))) (thm_432 A P_1) (thm_468 A P_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ (Data.Bool.? \lambda x. (P x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (P x)) (P y))) ((= x) y))))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y))))))) ;)

(; dict ;)

def thm_470 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.not (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))))) (hol.or (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) (thm_430 A P_1) (thm_469 A P_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.?! \lambda x. (P x)))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y))))))) ;)

(; dict ;)

def thm_471 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.not (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (P_1 x_2) (P_1 y_3)) (hol.eq A x_2 y_3)))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) (thm_408 A P_1) (thm_470 A P_1).

(; Theorem: |- ((= (= (Data.Bool.~ (Data.Bool.?! \lambda x. (P x))))) (= ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y)))))))) ;)

(; dict ;)

def thm_472 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)))) (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) thm_119 (thm_471 A P_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.?! \lambda x. (P x)))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))))))) ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y))))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))))))) ;)

(; dict ;)

def thm_473 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2)))) (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3))))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))) (thm_472 A P_1) (thm_373 A P_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y))))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))))))) ((= (Data.Bool.~ (Data.Bool.?! \lambda x. (P x)))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))))))) ;)

(; dict ;)

def thm_474 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (thm_473 A P_1).

(; Theorem: |- ((= ((= ((= x) y)) ((= y) x))) ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_475 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)).

(; Theorem: |- ((= ((= ((= x) y)) ((= y) x))) ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_476 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_475 A y_1 x_2) (thm_475 A y_1 x_2).

(; Theorem: |- (Data.Bool.! \lambda y. ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_477 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => thm_26 A x_1.

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_478 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => thm_477 A x_2 y_1.

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_479 : y_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_2 y_1) (hol.eq hol.bool y_1 x_2)) :=
  y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => (A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_476 A y_1 x_2) (thm_478 A y_1 x_2)) hol.bool y_1 x_2.

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y))))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))))))) ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x)))))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y)))))))) ;)

(; dict ;)

def thm_480 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => (y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => thm_479 y_1 x_2) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) (Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) ;)

(; dict ;)

def thm_481 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))).

(; Theorem: |- ((= ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3))) ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3))) ;)

(; dict ;)

def thm_482 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)).

(; Theorem: |- ((= ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3))) ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3))) ;)

(; dict ;)

def thm_483 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) (thm_482 t3_1 t2_2 t1_3) (thm_482 t3_1 t2_2 t1_3).

(; Theorem: |- ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ;)

(; dict ;)

def thm_484 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) -> hol.proof (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) => hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ;)

(; dict ;)

def thm_485 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) -> hol.proof (hol.eq hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) => hol.SYM hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1) (thm_484 t3_1 t2_2 t1_3 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ;)

(; dict ;)

def thm_486 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1))) -> hol.proof (hol.eq hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1))) => hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ;)

(; dict ;)

def thm_487 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1))) -> hol.proof (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1))) => hol.SYM hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1)) (thm_486 t3_1 t2_2 t1_3 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))) ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3))) ;)

(; dict ;)

def thm_488 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1))) (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.PROP_EXT (hol.eq hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1))) (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) => thm_485 t3_1 t2_2 t1_3 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1))) => thm_487 t3_1 t2_2 t1_3 hyp_1).

(; Theorem: |- ((= \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))) \lambda t3. ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3))) ;)

(; dict ;)

def thm_489 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3))) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_2 (hol.and t2_1 t3_3)) (hol.and (hol.and t1_2 t2_1) t3_3))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.ABS_THM hol.bool hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3))) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_2 (hol.and t2_1 t3_3)) (hol.and (hol.and t1_2 t2_1) t3_3)) (t3_3 : hol.term hol.bool => thm_488 t3_3 t2_1 t1_2).

(; Theorem: |- ((= (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))))) (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)))) ;)

(; dict ;)

def thm_490 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3)))) (hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_2 (hol.and t2_1 t3_3)) (hol.and (hol.and t1_2 t2_1) t3_3)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3))) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_2 (hol.and t2_1 t3_3)) (hol.and (hol.and t1_2 t2_1) t3_3)) thm_65 (thm_489 t2_1 t1_2).

(; Theorem: |- ((= \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))))) \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)))) ;)

(; dict ;)

def thm_491 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3)))) :=
  t1_1 : hol.term hol.bool => hol.ABS_THM hol.bool hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3))) (t2_2 : hol.term hol.bool => thm_490 t2_2 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))))) (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3))))) ;)

(; dict ;)

def thm_492 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3))))) :=
  t1_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3))) thm_65 (thm_491 t1_1).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))))) \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3))))) ;)

(; dict ;)

def thm_493 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3))))) :=
  hol.ABS_THM hol.bool hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3)))) (t1_1 : hol.term hol.bool => thm_492 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)))))) ;)

(; dict ;)

def thm_494 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3)))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3)))) thm_65 thm_493.

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3))))) ;)

(; dict ;)

def thm_495 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3))))) :=
  hol.EQ_MP (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3))))) thm_494 thm_27.

(; Theorem: |- (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)))) ;)

(; dict ;)

def thm_496 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3)))) :=
  t1_1 : hol.term hol.bool => thm_495 t1_1.

(; Theorem: |- (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3))) ;)

(; dict ;)

def thm_497 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_2 (hol.and t2_1 t3_3)) (hol.and (hol.and t1_2 t2_1) t3_3))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_496 t1_2 t2_1.

(; Theorem: |- ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ;)

(; dict ;)

def thm_498 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => thm_497 t2_2 t1_3 t3_1.

(; Theorem: |- ((= ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))) ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= y) x)))) ;)

(; dict ;)

def thm_499 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (P_3 x_2) (hol.and (P_3 y_1) (hol.not (hol.eq A y_1 x_2)))) (hol.and (hol.and (P_3 x_2) (P_3 y_1)) (hol.not (hol.eq A y_1 x_2)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => (t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) (thm_483 t3_1 t2_2 t1_3) (thm_498 t3_1 t2_2 t1_3)) (hol.not (hol.eq A y_1 x_2)) (P_3 y_1) (P_3 x_2).

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool./\ (P x)) (P y)))) (Data.Bool./\ ((Data.Bool./\ (P x)) (P y)))) ;)

(; dict ;)

def thm_500 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.and (P_3 x_2) (P_3 y_1))) (hol.and (hol.and (P_3 x_2) (P_3 y_1)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.and (hol.and (P_3 x_2) (P_3 y_1))).

(; Theorem: |- ((= ((= y) x)) ((= x) y)) ;)

(; dict ;)

def thm_501 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A y_2 x_1) (hol.eq A x_1 y_2)) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => (A : hol.type => y_1 : hol.term A => x_2 : hol.term A => thm_478 A y_1 x_2) A x_1 y_2.

(; Theorem: |- ((= (Data.Bool.~ ((= y) x))) (Data.Bool.~ ((= x) y))) ;)

(; dict ;)

def thm_502 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.eq A y_2 x_1)) (hol.not (hol.eq A x_1 y_2))) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.eq A y_2 x_1) (hol.eq A x_1 y_2) thm_247 (thm_501 A x_1 y_2).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= y) x)))) ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y)))) ;)

(; dict ;)

def thm_503 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (hol.and (P_3 x_2) (P_3 y_1)) (hol.not (hol.eq A y_1 x_2))) (hol.and (hol.and (P_3 x_2) (P_3 y_1)) (hol.not (hol.eq A x_2 y_1)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.and (hol.and (P_3 x_2) (P_3 y_1))) (hol.and (hol.and (P_3 x_2) (P_3 y_1))) (hol.not (hol.eq A y_1 x_2)) (hol.not (hol.eq A x_2 y_1)) (thm_500 A y_1 x_2 P_3) (thm_502 A x_2 y_1).

(; Theorem: |- ((= ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))) ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y)))) ;)

(; dict ;)

def thm_504 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (P_3 x_2) (hol.and (P_3 y_1) (hol.not (hol.eq A y_1 x_2)))) (hol.and (hol.and (P_3 x_2) (P_3 y_1)) (hol.not (hol.eq A x_2 y_1)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.and (P_3 x_2) (hol.and (P_3 y_1) (hol.not (hol.eq A y_1 x_2)))) (hol.and (hol.and (P_3 x_2) (P_3 y_1)) (hol.not (hol.eq A y_1 x_2))) (hol.and (hol.and (P_3 x_2) (P_3 y_1)) (hol.not (hol.eq A x_2 y_1))) (thm_499 A y_1 x_2 P_3) (thm_503 A y_1 x_2 P_3).

(; Theorem: |- ((= \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))) \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y)))) ;)

(; dict ;)

def thm_505 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => hol.and (P_2 x_1) (hol.and (P_2 y_3) (hol.not (hol.eq A y_3 x_1)))) (y_3 : hol.term A => hol.and (hol.and (P_2 x_1) (P_2 y_3)) (hol.not (hol.eq A x_1 y_3)))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (y_3 : hol.term A => hol.and (P_2 x_1) (hol.and (P_2 y_3) (hol.not (hol.eq A y_3 x_1)))) (y_3 : hol.term A => hol.and (hol.and (P_2 x_1) (P_2 y_3)) (hol.not (hol.eq A x_1 y_3))) (y_3 : hol.term A => thm_504 A y_3 x_1 P_2).

(; Theorem: |- ((= (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x)))))) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y))))) ;)

(; dict ;)

def thm_506 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_2 x_1) (hol.and (P_2 y_3) (hol.not (hol.eq A y_3 x_1))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_2 x_1) (P_2 y_3)) (hol.not (hol.eq A x_1 y_3))))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (y_3 : hol.term A => hol.and (P_2 x_1) (hol.and (P_2 y_3) (hol.not (hol.eq A y_3 x_1)))) (y_3 : hol.term A => hol.and (hol.and (P_2 x_1) (P_2 y_3)) (hol.not (hol.eq A x_1 y_3))) (thm_350 A) (thm_505 A x_1 P_2).

(; Theorem: |- ((= \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x)))))) \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y))))) ;)

(; dict ;)

def thm_507 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))) (x_2 : hol.term A => thm_506 A x_2 P_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y)))))) ;)

(; dict ;)

def thm_508 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))) (thm_350 A) (thm_507 A P_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x)))))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y))))))) ;)

(; dict ;)

def thm_509 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3))))) (thm_481 A P_1) (thm_508 A P_1).

(; Theorem: |- ((= (= ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))))))) (= ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y)))))))) ;)

(; dict ;)

def thm_510 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) thm_119 (thm_509 A P_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y))))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y))))))) ;)

(; dict ;)

def thm_511 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x)))))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y)))))))) ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y))))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y)))))))) ;)

(; dict ;)

def thm_512 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3))))))) (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3))))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) (thm_510 A P_1) (thm_511 A P_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y))))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y)))))))) Data.Bool.T) ;)

(; dict ;)

def thm_513 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3))))))) hol.true) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => (x_1 : hol.term hol.bool => thm_181 x_1) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x)))))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y)))))))) Data.Bool.T) ;)

(; dict ;)

def thm_514 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3))))))) hol.true) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3))))))) (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3))))))) hol.true (thm_512 A P_1) (thm_513 A P_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y))))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))))))) Data.Bool.T) ;)

(; dict ;)

def thm_515 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) hol.true) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3))))))) hol.true (thm_480 A P_1) (thm_514 A P_1).

(; Theorem: |- ((= Data.Bool.T) ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y))))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))))))) ;)

(; dict ;)

def thm_516 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) hol.true (thm_515 A P_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((Data.Bool./\ (P x)) (P y))) (Data.Bool.~ ((= x) y))))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x)))))))) ;)

(; dict ;)

def thm_517 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP hol.true (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (thm_516 A P_1) thm_5.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.?! \lambda x. (P x)))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x)))))))) ;)

(; dict ;)

def thm_518 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (hol.and (P_1 x_2) (P_1 y_3)) (hol.not (hol.eq A x_2 y_3)))))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (thm_474 A P_1) (thm_517 A P_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.?! P))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x)))))))) ;)

(; dict ;)

def thm_519 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => P_1 x_2))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (thm_375 A P_1) (thm_518 A P_1).

(; Theorem: |- ((Data.Bool./\ ((= (Data.Bool.~ (Data.Bool.? P))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) ((= (Data.Bool.~ (Data.Bool.?! P))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))))))) ;)

(; dict ;)

def thm_520 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))) (thm_368 A P_1) (thm_519 A P_1).

(; Theorem: |- ((Data.Bool./\ ((= (Data.Bool.~ (Data.Bool.! P))) (Data.Bool.? \lambda x. (Data.Bool.~ (P x))))) ((Data.Bool./\ ((= (Data.Bool.~ (Data.Bool.? P))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) ((= (Data.Bool.~ (Data.Bool.?! P))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x)))))))))) ;)

(; dict ;)

def thm_521 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.and (hol.eq hol.bool (hol.not (hol.forall A P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))) (hol.and (hol.eq hol.bool (hol.not (hol.forall A P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))))) (thm_349 A P_1) (thm_520 A P_1).

(; Theorem: |- ((Data.Bool./\ ((= (Data.Bool.~ (Data.Bool.? P))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) ((= (Data.Bool.~ (Data.Bool.?! P))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))))))) ;)

(; dict ;)

def thm_522 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not (hol.forall A P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not (hol.forall A P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_93 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not (hol.forall A P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= (Data.Bool.~ (Data.Bool.? P))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x))))) ((= (Data.Bool.~ (Data.Bool.?! P))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ (P x)) ((Data.Bool./\ (P y)) (Data.Bool.~ ((= y) x))))))))) ;)

(; dict ;)

def thm_523 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.not (hol.forall A P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))))) (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))) (thm_521 A P_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not (hol.forall A P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))))) => thm_522 A P_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? P))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) ;)

(; dict ;)

def thm_524 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_166 q_1 p_2 hyp_1) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2)))))))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) hyp_1.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? P))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) ;)

(; dict ;)

def thm_525 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (thm_523 A P_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (P_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.and (P_1 x_2) (hol.and (P_1 y_3) (hol.not (hol.eq A y_3 x_2))))))))) => thm_524 A P_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? P))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) ;)

(; dict ;)

def thm_526 : B : hol.type -> A : hol.type -> P_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) P_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.not (P_1 x_2)))) :=
  B : hol.type => A : hol.type => P_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) => (A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => thm_525 A P_1) (hol.arr A (hol.arr B hol.bool)) P_1.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))) x)))) ;)

(; dict ;)

def thm_527 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.not ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) x_1)))) :=
  B : hol.type => A : hol.type => (B : hol.type => A : hol.type => P_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) => thm_526 B A P_1) B A (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_528 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool)))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (hol.forall (hol.arr A (hol.arr B hol.bool))).

(; Theorem: |- ((= (\lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))) x)) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_529 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV (hol.arr A (hol.arr B hol.bool)) hol.bool (x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) x_1.

(; Theorem: |- ((= (Data.Bool.~ (\lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))) x))) (Data.Bool.~ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_530 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) x_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool hol.not hol.not ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))) thm_247 (thm_529 B A x_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))))) (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))) x)))) ;)

(; dict ;)

def thm_531 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.forall A (x_2 : hol.term A => hol.not ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_3 b_4))) x_2)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => thm_366 A P_1) A (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))).

(; Theorem: |- ((= (\lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))) a)) (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_532 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4))) a_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_3)))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV A hol.bool (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4))) a_1.

(; Theorem: |- ((= (Data.Bool.~ (\lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))) a))) (Data.Bool.~ (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_533 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4))) a_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_3))))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool hol.not hol.not ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4))) a_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_3))) thm_247 (thm_532 B A a_1 x_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? P))) (Data.Bool.! \lambda x. (Data.Bool.~ (P x)))) ;)

(; dict ;)

def thm_534 : B : hol.type -> P_1 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) P_1)) (hol.forall B (x_2 : hol.term B => hol.not (P_1 x_2)))) :=
  B : hol.type => P_1 : hol.term (hol.arr B hol.bool) => (A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => thm_366 A P_1) B P_1.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))) (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda b. ((= x) ((HOLLight.mk_pair a) b)) x)))) ;)

(; dict ;)

def thm_535 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (hol.forall B (x_3 : hol.term B => hol.not ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_4)) x_3)))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (B : hol.type => P_1 : hol.term (hol.arr B hol.bool) => thm_534 B P_1) B (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_3)).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_536 : B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B hol.bool) hol.bool) (hol.forall B) (hol.forall B)) :=
  B : hol.type => hol.REFL (hol.arr (hol.arr B hol.bool) hol.bool) (hol.forall B).

(; Theorem: |- ((= (\lambda b. ((= x) ((HOLLight.mk_pair a) b)) b)) ((= x) ((HOLLight.mk_pair a) b))) ;)

(; dict ;)

def thm_537 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_2 b_4)) b_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_2 b_1))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_2 b_4)) b_1.

(; Theorem: |- ((= (Data.Bool.~ (\lambda b. ((= x) ((HOLLight.mk_pair a) b)) b))) (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_538 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_2 b_4)) b_1)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_2 b_1)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool hol.not hol.not ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_2 b_4)) b_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_2 b_1)) thm_247 (thm_537 A B b_1 a_2 x_3).

(; Theorem: |- ((= (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b)))) (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_539 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_2 b_1))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_2 b_1)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_2 b_1))).

(; Theorem: |- ((= (Data.Bool.~ (\lambda b. ((= x) ((HOLLight.mk_pair a) b)) b))) (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_540 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_2 b_4)) b_1)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_2 b_1)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.not ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_2 b_4)) b_1)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_2 b_1))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_2 b_1))) (thm_538 A B b_1 a_2 x_3) (thm_539 B A b_1 a_2 x_3).

(; Theorem: |- ((= \lambda b. (Data.Bool.~ (\lambda b. ((= x) ((HOLLight.mk_pair a) b)) b))) \lambda b. (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_541 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (b_3 : hol.term B => hol.not ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3)) (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_3)))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM B hol.bool (b_3 : hol.term B => hol.not ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3)) (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_3))) (b_3 : hol.term B => thm_540 A B b_3 a_1 x_2).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (Data.Bool.~ (\lambda b. ((= x) ((HOLLight.mk_pair a) b)) b)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_542 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall B (b_3 : hol.term B => hol.not ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3))) (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_3))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_3 : hol.term B => hol.not ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3)) (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_3))) (thm_536 B) (thm_541 A B a_1 x_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))) (Data.Bool.! \lambda b. (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_543 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_3))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (hol.forall B (x_3 : hol.term B => hol.not ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_4)) x_3))) (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (thm_535 A B a_1 x_2) (thm_542 A B a_1 x_2).

(; Theorem: |- ((= (Data.Bool.~ (\lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))) a))) (Data.Bool.! \lambda b. (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_544 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4))) a_1)) (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_3))))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.not ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4))) a_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (thm_533 B A a_1 x_2) (thm_543 A B a_1 x_2).

(; Theorem: |- ((= \lambda a. (Data.Bool.~ (\lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))) a))) \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_545 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => hol.not ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2)) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM A hol.bool (a_2 : hol.term A => hol.not ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2)) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (a_2 : hol.term A => thm_544 B A a_2 x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.~ (\lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))) a)))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_546 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => hol.not ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2))) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_2 : hol.term A => hol.not ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2)) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (thm_51 A) (thm_545 B A x_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_547 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.forall A (x_2 : hol.term A => hol.not ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_3 b_4))) x_2))) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (thm_531 B A x_1) (thm_546 B A x_1).

(; Theorem: |- ((= (Data.Bool.~ (\lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))) x))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_548 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) x_1)) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.not ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) x_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (thm_530 B A x_1) (thm_547 B A x_1).

(; Theorem: |- ((= \lambda x. (Data.Bool.~ (\lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))) x))) \lambda x. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_549 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.not ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) x_1)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.not ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) x_1)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_548 B A x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))) x)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b))))))) ;)

(; dict ;)

def thm_550 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.not ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) x_1))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.not ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) x_1)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (thm_528 B A) (thm_549 B A).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b))))))) ;)

(; dict ;)

def thm_551 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.not ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) x_1))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (thm_527 B A) (thm_550 B A).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b))))))) ;)

(; dict ;)

def thm_552 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (thm_551 B A) (thm_316 B A).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= x) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_553 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) -> hol.proof (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) => hol.EQ_MP (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (thm_552 B A) (thm_189 B A hyp_1).

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= _1181) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_554 : B : hol.type -> A : hol.type -> __1181_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))))) -> hol.proof (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_1 (HOLLight_2Emk__pair B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => __1181_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))))) => hol.EQ_MP (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))))) (thm_317 B A) (hol.EQ_MP (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))))) (thm_316 B A) (thm_553 B A hyp_1)) __1181_1.

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.~ ((= _1181) ((HOLLight.mk_pair _1182) b)))) ;)

(; dict ;)

def thm_555 : A : hol.type -> B : hol.type -> __1182_1 : hol.term A -> __1181_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_4 b_5)))))) -> hol.proof (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_2 (HOLLight_2Emk__pair B A __1182_1 b_3)))) :=
  A : hol.type => B : hol.type => __1182_1 : hol.term A => __1181_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_4 b_5)))))) => thm_554 B A __1181_2 hyp_1 __1182_1.

(; Theorem: |- (Data.Bool.~ ((= _1181) ((HOLLight.mk_pair _1182) _1183))) ;)

(; dict ;)

def thm_556 : B : hol.type -> A : hol.type -> __1183_1 : hol.term B -> __1182_2 : hol.term A -> __1181_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_4 (HOLLight_2Emk__pair B A a_5 b_6)))))) -> hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1))) :=
  B : hol.type => A : hol.type => __1183_1 : hol.term B => __1182_2 : hol.term A => __1181_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_4 (HOLLight_2Emk__pair B A a_5 b_6)))))) => thm_555 A B __1182_2 __1181_3 hyp_1 __1183_1.

(; Theorem: |- ((Data.Bool.==> ((= _1181) ((HOLLight.mk_pair _1182) _1183))) Data.Bool.F) ;)

(; dict ;)

def thm_557 : B : hol.type -> A : hol.type -> __1183_1 : hol.term B -> __1182_2 : hol.term A -> __1181_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_4 (HOLLight_2Emk__pair B A a_5 b_6)))))) -> hol.proof (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1)) hol.false) :=
  B : hol.type => A : hol.type => __1183_1 : hol.term B => __1182_2 : hol.term A => __1181_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_4 (HOLLight_2Emk__pair B A a_5 b_6)))))) => hol.EQ_MP (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1))) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1)) hol.false) (thm_315 B A __1183_1 __1182_2 __1181_3) (hol.EQ_MP (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1))) (thm_304 B A __1183_1 __1182_2 __1181_3) (thm_556 B A __1183_1 __1182_2 __1181_3 hyp_1)).

(; Theorem: |- ((Data.Bool.==> ((= ((HOLLight.mk_pair _1188) _1189)) ((HOLLight.mk_pair _1188) _1189))) Data.Bool.F) ;)

(; dict ;)

def thm_558 : B : hol.type -> A : hol.type -> __1189_1 : hol.term B -> __1188_2 : hol.term A -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_4 b_5)))))) -> hol.proof (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A __1188_2 __1189_1) (HOLLight_2Emk__pair B A __1188_2 __1189_1)) hol.false) :=
  B : hol.type => A : hol.type => __1189_1 : hol.term B => __1188_2 : hol.term A => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_4 b_5)))))) => (B : hol.type => A : hol.type => __1183_1 : hol.term B => __1182_2 : hol.term A => __1181_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_4 (HOLLight_2Emk__pair B A a_5 b_6)))))) => (B : hol.type => A : hol.type => __1183_1 : hol.term B => __1182_2 : hol.term A => __1181_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_4 (HOLLight_2Emk__pair B A a_5 b_6)))))) => hol.EQ_MP (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1)) hol.false) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1181_3 (HOLLight_2Emk__pair B A __1182_2 __1183_1)) hol.false) (thm_303 B A __1183_1 __1182_2 __1181_3) (thm_557 B A __1183_1 __1182_2 __1181_3 hyp_1)) B A __1183_1 __1182_2 __1181_3 hyp_1) B A __1189_1 __1188_2 (HOLLight_2Emk__pair B A __1188_2 __1189_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((= ((HOLLight.mk_pair _1188) _1189)) ((HOLLight.mk_pair _1188) _1189)))) ((= ((HOLLight.mk_pair _1188) _1189)) ((HOLLight.mk_pair _1188) _1189)))) ((= ((HOLLight.mk_pair _1188) _1189)) ((HOLLight.mk_pair _1188) _1189))) ;)

(; dict ;)

def thm_559 : B : hol.type -> A : hol.type -> __1189_1 : hol.term B -> __1188_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A __1188_2 __1189_1) (HOLLight_2Emk__pair B A __1188_2 __1189_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A __1188_2 __1189_1) (HOLLight_2Emk__pair B A __1188_2 __1189_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A __1188_2 __1189_1) (HOLLight_2Emk__pair B A __1188_2 __1189_1))) :=
  B : hol.type => A : hol.type => __1189_1 : hol.term B => __1188_2 : hol.term A => (p_1 : hol.term hol.bool => thm_299 p_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A __1188_2 __1189_1) (HOLLight_2Emk__pair B A __1188_2 __1189_1)).

(; Theorem: |- ((= ((= x) x)) ((= x) x)) ;)

(; dict ;)

def thm_560 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 x_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 x_1)) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 x_1).

(; Theorem: |- ((= ((= x) x)) ((= x) x)) ;)

(; dict ;)

def thm_561 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 x_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 x_1)) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 x_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 x_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 x_1) (thm_560 B A x_1) (thm_560 B A x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_562 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 x_1) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (A : hol.type => x_1 : hol.term A => thm_178 A x_1) (hol.arr A (hol.arr B hol.bool)) x_1.

(; Theorem: |- ((= ((HOLLight.mk_pair _1188) _1189)) ((HOLLight.mk_pair _1188) _1189)) ;)

(; dict ;)

def thm_563 : B : hol.type -> A : hol.type -> __1189_1 : hol.term B -> __1188_2 : hol.term A -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A __1188_2 __1189_1) (HOLLight_2Emk__pair B A __1188_2 __1189_1)) :=
  B : hol.type => A : hol.type => __1189_1 : hol.term B => __1188_2 : hol.term A => (B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 x_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 x_1) (thm_561 B A x_1) (thm_562 B A x_1)) B A x_1) B A (HOLLight_2Emk__pair B A __1188_2 __1189_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((= ((HOLLight.mk_pair _1188) _1189)) ((HOLLight.mk_pair _1188) _1189)))) ((= ((HOLLight.mk_pair _1188) _1189)) ((HOLLight.mk_pair _1188) _1189))) ;)

(; dict ;)

def thm_564 : B : hol.type -> A : hol.type -> __1189_1 : hol.term B -> __1188_2 : hol.term A -> hol.proof (hol.imp (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A __1188_2 __1189_1) (HOLLight_2Emk__pair B A __1188_2 __1189_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A __1188_2 __1189_1) (HOLLight_2Emk__pair B A __1188_2 __1189_1))) :=
  B : hol.type => A : hol.type => __1189_1 : hol.term B => __1188_2 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A __1188_2 __1189_1) (HOLLight_2Emk__pair B A __1188_2 __1189_1))) => thm_563 B A __1189_1 __1188_2.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_565 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) => thm_558 B A (hol.witness B) (hol.witness A) hyp_1 (hol.EQ_MP (hol.imp (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A (hol.witness A) (hol.witness B)) (HOLLight_2Emk__pair B A (hol.witness A) (hol.witness B)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A (hol.witness A) (hol.witness B)) (HOLLight_2Emk__pair B A (hol.witness A) (hol.witness B)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A (hol.witness A) (hol.witness B)) (HOLLight_2Emk__pair B A (hol.witness A) (hol.witness B))) (thm_559 B A (hol.witness B) (hol.witness A)) (thm_564 B A (hol.witness B) (hol.witness A))).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_566 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) -> hol.proof (hol.imp (hol.not hol.false) hol.false) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) => hyp_2 : hol.proof (hol.not hol.false) => hol.EQ_MP hol.false hol.false thm_301 (thm_565 B A hyp_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_567 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) => hol.PROVE_HYP (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false (thm_189 B A hyp_1) (hyp_2 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) => hol.EQ_MP (hol.imp (hol.not hol.false) hol.false) hol.false ((p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (thm_201 p_1) (hol.EQ_MP (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (thm_200 p_1) (hol.EQ_MP (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.not p_1) p_1) p_1) (thm_200 p_1) (thm_299 p_1)))) hol.false) (thm_566 B A hyp_2)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))))) Data.Bool.F) ;)

(; dict ;)

def thm_568 : B : hol.type -> A : hol.type -> hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) => thm_567 B A hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_569 : B : hol.type -> A : hol.type -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (thm_188 B A) (thm_568 B A).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_570 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) => hol.PROVE_HYP (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false (thm_189 B A hyp_1) (hyp_2 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) => hol.EQ_MP (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (thm_191 B A) ((B : hol.type => A : hol.type => hol.EQ_MP (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) (hol.imp (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false)) (thm_193 B A) (thm_198 B A (thm_199 B A))) B A (hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (thm_187 B A) (thm_569 B A))) (thm_189 B A hyp_2)).

(; Theorem: |- (\lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))) (select \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_571 : B : hol.type -> A : hol.type -> hol.proof ((x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.select (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) ((x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.select (hol.arr A (hol.arr B hol.bool)) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (thm_59 B A) (hol.EQ_MP (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) hol.false) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (thm_188 B A) (hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) => thm_570 B A hyp_1)).

(; Theorem: |- ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a) ;)

(; dict ;)

def thm_572 : B : hol.type -> A : hol.type -> a_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1) :=
  B : hol.type => A : hol.type => a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.EQ_MP (hol.eq (Data_2EPair_2E_2A A B) ((a_2 : hol.term (Data_2EPair_2E_2A A B) => HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_1) ((a_2 : hol.term (Data_2EPair_2E_2A A B) => a_2) a_1)) (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1) (hol.APP_THM (Data_2EPair_2E_2A A B) hol.bool (hol.eq (Data_2EPair_2E_2A A B) ((a_2 : hol.term (Data_2EPair_2E_2A A B) => HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_1)) (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1))) ((a_2 : hol.term (Data_2EPair_2E_2A A B) => a_2) a_1) a_1 (hol.APP_THM (Data_2EPair_2E_2A A B) (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (hol.eq (Data_2EPair_2E_2A A B)) (hol.eq (Data_2EPair_2E_2A A B)) ((a_2 : hol.term (Data_2EPair_2E_2A A B) => HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_1) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) (hol.REFL (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Data_2EPair_2E_2A A B) hol.bool)) (hol.eq (Data_2EPair_2E_2A A B))) (hol.BETA_CONV (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_1)) (hol.BETA_CONV (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => a_2) a_1)) (hol.APP_THM (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) (a_2 : hol.term (Data_2EPair_2E_2A A B) => a_2) a_1 a_1 (thm_29 B A) (hol.REFL (Data_2EPair_2E_2A A B) a_1)).

(; Theorem: |- ((= (\lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))) r)) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)) ;)

(; dict ;)

def thm_573 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) r_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.SYM hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1) ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) r_1) (hol.EQ_MP (hol.eq hol.bool ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2) r_1) ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (x_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_4 b_5)))) r_2) r_1)) (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1) ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) r_1)) (hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2) r_1)) (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (x_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_4 b_5)))) r_2) r_1) ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) r_1) (hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2) r_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1) thm_119 (hol.BETA_CONV (hol.arr A (hol.arr B hol.bool)) hol.bool (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2) r_1)) (hol.BETA_CONV (hol.arr A (hol.arr B hol.bool)) hol.bool (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (x_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_4 b_5)))) r_2) r_1)) (hol.APP_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (x_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_3 (HOLLight_2Emk__pair B A a_4 b_5)))) r_2) r_1 r_1 (thm_28 B A) (hol.REFL (hol.arr A (hol.arr B hol.bool)) r_1))).

(; Theorem: |- ((= Data.Pair.,) \lambda x. \lambda y. (HOLLight.ABS_prod ((HOLLight.mk_pair x) y))) ;)

(; dict ;)

def thm_574 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2E_2C B A) (x_1 : hol.term A => y_2 : hol.term B => HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2E_2C B A).

(; Theorem: |- ((= \lambda a. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))))) \lambda a. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))))) ;)

(; dict ;)

def thm_575 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4)))))) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4))))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr A hol.bool) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4)))))).

(; Theorem: |- ((= \lambda a. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))))) \lambda a. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))))) ;)

(; dict ;)

def thm_576 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4)))))) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4))))))) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr A hol.bool) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4)))))) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4)))))) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4)))))) (thm_575 B A) (thm_575 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))))) ;)

(; dict ;)

def thm_577 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4))))))) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4)))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4)))))) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4)))))) (thm_51 A) (thm_576 B A).

(; Theorem: |- ((= \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))) \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))) ;)

(; dict ;)

def thm_578 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4))))) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4)))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => hol.REFL (hol.arr B hol.bool) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4))))).

(; Theorem: |- ((= \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))) \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))) ;)

(; dict ;)

def thm_579 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4))))) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4)))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => hol.TRANS (hol.arr B hol.bool) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4))))) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4))))) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4))))) (thm_578 A B a_1) (thm_578 A B a_1).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))))) (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))))) ;)

(; dict ;)

def thm_580 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4)))))) (hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4))))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4))))) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4))))) (thm_536 B) (thm_579 A B a_1).

(; Theorem: |- ((= \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) ;)

(; dict ;)

def thm_581 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_2 a_27_3) (hol.eq B b_1 b_27_4)))) (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_2 a_27_3) (hol.eq B b_1 b_27_4))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.REFL (hol.arr A hol.bool) (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_2 a_27_3) (hol.eq B b_1 b_27_4)))).

(; Theorem: |- ((= \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) ;)

(; dict ;)

def thm_582 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_2 a_27_3) (hol.eq B b_1 b_27_4)))) (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_2 a_27_3) (hol.eq B b_1 b_27_4))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.TRANS (hol.arr A hol.bool) (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_2 a_27_3) (hol.eq B b_1 b_27_4)))) (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_2 a_27_3) (hol.eq B b_1 b_27_4)))) (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_2 a_27_3) (hol.eq B b_1 b_27_4)))) (thm_581 B A b_1 a_2) (thm_581 B A b_1 a_2).

(; Theorem: |- ((= (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))) (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))) ;)

(; dict ;)

def thm_583 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_2 a_27_3) (hol.eq B b_1 b_27_4))))) (hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_2 a_27_3) (hol.eq B b_1 b_27_4)))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_2 a_27_3) (hol.eq B b_1 b_27_4)))) (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_2 a_27_3) (hol.eq B b_1 b_27_4)))) (thm_51 A) (thm_582 B A b_1 a_2).

(; Theorem: |- ((= \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ;)

(; dict ;)

def thm_584 : A : hol.type -> B : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_1 b_27_4)) (hol.and (hol.eq A a_3 a_27_1) (hol.eq B b_2 b_27_4))) (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_1 b_27_4)) (hol.and (hol.eq A a_3 a_27_1) (hol.eq B b_2 b_27_4)))) :=
  A : hol.type => B : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => hol.REFL (hol.arr B hol.bool) (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_1 b_27_4)) (hol.and (hol.eq A a_3 a_27_1) (hol.eq B b_2 b_27_4))).

(; Theorem: |- ((= \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ;)

(; dict ;)

def thm_585 : A : hol.type -> B : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_1 b_27_4)) (hol.and (hol.eq A a_3 a_27_1) (hol.eq B b_2 b_27_4))) (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_1 b_27_4)) (hol.and (hol.eq A a_3 a_27_1) (hol.eq B b_2 b_27_4)))) :=
  A : hol.type => B : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => hol.TRANS (hol.arr B hol.bool) (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_1 b_27_4)) (hol.and (hol.eq A a_3 a_27_1) (hol.eq B b_2 b_27_4))) (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_1 b_27_4)) (hol.and (hol.eq A a_3 a_27_1) (hol.eq B b_2 b_27_4))) (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_1 b_27_4)) (hol.and (hol.eq A a_3 a_27_1) (hol.eq B b_2 b_27_4))) (thm_584 A B a_27_1 b_2 a_3) (thm_584 A B a_27_1 b_2 a_3).

(; Theorem: |- ((= (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) ;)

(; dict ;)

def thm_586 : A : hol.type -> B : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_1 b_27_4)) (hol.and (hol.eq A a_3 a_27_1) (hol.eq B b_2 b_27_4)))) (hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_1 b_27_4)) (hol.and (hol.eq A a_3 a_27_1) (hol.eq B b_2 b_27_4))))) :=
  A : hol.type => B : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_1 b_27_4)) (hol.and (hol.eq A a_3 a_27_1) (hol.eq B b_2 b_27_4))) (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_1 b_27_4)) (hol.and (hol.eq A a_3 a_27_1) (hol.eq B b_2 b_27_4))) (thm_536 B) (thm_585 A B a_27_1 b_2 a_3).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)) ;)

(; dict ;)

def thm_587 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1))) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => (p_1 : hol.term hol.bool => thm_186 p_1) (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1))).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)) ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))) ;)

(; dict ;)

def thm_588 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hol.SYM hol.bool (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1))) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (thm_587 B A b_27_1 b_2 a_27_3 a_4).

(; Theorem: |- (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))) ;)

(; dict ;)

def thm_589 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) -> hol.proof (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)) ;)

(; dict ;)

def thm_590 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hol.REFL hol.bool (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)) ;)

(; dict ;)

def thm_591 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hol.SYM hol.bool (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (thm_590 B A b_27_1 b_2 a_27_3 a_4).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F))) ;)

(; dict ;)

def thm_592 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hol.REFL hol.bool (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F))) ;)

(; dict ;)

def thm_593 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hol.TRANS hol.bool (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) (thm_592 B A b_27_1 b_2 a_27_3 a_4) (thm_592 B A b_27_1 b_2 a_27_3 a_4).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)) ;)

(; dict ;)

def thm_594 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) -> hol.proof (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F) ;)

(; dict ;)

def thm_595 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) -> hol.proof (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F) ;)

(; dict ;)

def thm_596 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) -> hyp_2 : hol.proof (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) -> hol.proof (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) => hyp_2 : hol.proof (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) => thm_594 B A b_27_1 b_2 a_27_3 a_4 hyp_2 (thm_595 B A b_27_1 b_2 a_27_3 a_4 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)) ;)

(; dict ;)

def thm_597 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) -> hol.proof (hol.imp (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) => hyp_2 : hol.proof (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) => thm_596 B A b_27_1 b_2 a_27_3 a_4 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F))) ;)

(; dict ;)

def thm_598 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.imp (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) => hyp_2 : hol.proof (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) => thm_597 B A b_27_1 b_2 a_27_3 a_4 hyp_2 (thm_594 B A b_27_1 b_2 a_27_3 a_4 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)) ;)

(; dict ;)

def thm_599 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) => thm_595 B A b_27_1 b_2 a_27_3 a_4 hyp_1.

(; Theorem: |- ((= \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)) \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))) ;)

(; dict ;)

def thm_600 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => hol.ABS_THM A hol.bool (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1))) (a_4 : hol.term A => thm_588 B A b_27_1 b_2 a_27_3 a_4).

(; Theorem: |- ((= (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F))) (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) ;)

(; dict ;)

def thm_601 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) (hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1))) (thm_51 A) (thm_600 B A b_27_1 b_2 a_27_3).

(; Theorem: |- ((= \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F))) \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) ;)

(; dict ;)

def thm_602 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false)) (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => hol.ABS_THM B hol.bool (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false)) (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) (b_3 : hol.term B => thm_601 B A b_27_1 b_3 a_27_2).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)))) (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))))) ;)

(; dict ;)

def thm_603 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false))) (hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false)) (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) (thm_536 B) (thm_602 A B b_27_1 a_27_2).

(; Theorem: |- ((= \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)))) \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))))) ;)

(; dict ;)

def thm_604 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> hol.proof (hol.eq (hol.arr A hol.bool) (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false))) (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => hol.ABS_THM A hol.bool (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false))) (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))) (a_27_2 : hol.term A => thm_603 A B b_27_1 a_27_2).

(; Theorem: |- ((= (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F))))) (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))))) ;)

(; dict ;)

def thm_605 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> hol.proof (hol.eq hol.bool (hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false)))) (hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false))) (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))) (thm_51 A) (thm_604 B A b_27_1).

(; Theorem: |- ((= \lambda b'. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F))))) \lambda b'. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))))) ;)

(; dict ;)

def thm_606 : A : hol.type -> B : hol.type -> hol.proof (hol.eq (hol.arr B hol.bool) (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false)))) (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))))) :=
  A : hol.type => B : hol.type => hol.ABS_THM B hol.bool (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false)))) (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))))) (b_27_1 : hol.term B => thm_605 B A b_27_1).

(; Theorem: |- ((= (Data.Bool.! \lambda b'. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)))))) (Data.Bool.! \lambda b'. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))))))) ;)

(; dict ;)

def thm_607 : A : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false))))) (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))))))) :=
  A : hol.type => B : hol.type => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false)))) (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))))) (thm_536 B) (thm_606 A B).

(; Theorem: |- ((= (Data.Bool.! \lambda b'. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))))))) (Data.Bool.! \lambda b'. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))))))) ;)

(; dict ;)

def thm_608 : A : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))))) (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))))))) :=
  A : hol.type => B : hol.type => hol.REFL hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))))).

(; Theorem: |- ((= (Data.Bool.! \lambda b'. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)))))) (Data.Bool.! \lambda b'. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))))))) ;)

(; dict ;)

def thm_609 : A : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false))))) (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))))))) :=
  A : hol.type => B : hol.type => hol.TRANS hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false))))) (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))))) (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))))) (thm_607 A B) (thm_608 A B).

(; Theorem: |- ((= (Data.Bool.! \lambda b'. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)))))) (Data.Bool.! \lambda b'. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))))))) ;)

(; dict ;)

def thm_610 : A : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false))))) (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))))))) :=
  A : hol.type => B : hol.type => hol.TRANS hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false))))) (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))))) (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))))) (thm_609 A B) (thm_608 A B).

(; Theorem: |- ((= (Data.Bool.! \lambda b'. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)))))) (Data.Bool.! \lambda b'. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))))))) ;)

(; dict ;)

def thm_611 : A : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false))))) (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))))))) :=
  A : hol.type => B : hol.type => hol.TRANS hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false))))) (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))))) (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))))) (thm_610 A B) (thm_608 A B).

(; Theorem: |- ((= (Data.Bool.! \lambda b'. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)))))) (Data.Bool.! \lambda b'. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))))))) ;)

(; dict ;)

def thm_612 : A : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false))))) (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))))))) :=
  A : hol.type => B : hol.type => hol.TRANS hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false))))) (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))))) (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))))) (thm_611 A B) (thm_608 A B).

(; Theorem: |- ((= (Data.Bool.! \lambda b'. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))))))) (Data.Bool.! \lambda b'. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)))))) ;)

(; dict ;)

def thm_613 : A : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))))) (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false)))))) :=
  A : hol.type => B : hol.type => hol.SYM hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false))))) (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))))) (thm_612 A B).

(; Theorem: |- ((= \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))))) \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))))) ;)

(; dict ;)

def thm_614 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> hol.proof (hol.eq (hol.arr A hol.bool) (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))) (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => hol.REFL (hol.arr A hol.bool) (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))).

(; Theorem: |- ((= \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))))) \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))))) ;)

(; dict ;)

def thm_615 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> hol.proof (hol.eq (hol.arr A hol.bool) (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))) (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => hol.TRANS (hol.arr A hol.bool) (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))) (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))) (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))) (thm_614 B A b_27_1) (thm_614 B A b_27_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))))) (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))))) ;)

(; dict ;)

def thm_616 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> hol.proof (hol.eq hol.bool (hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))))) (hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))) (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))) (thm_51 A) (thm_615 B A b_27_1).

(; Theorem: |- ((= \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) ;)

(; dict ;)

def thm_617 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => hol.REFL (hol.arr B hol.bool) (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))).

(; Theorem: |- ((= \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) ;)

(; dict ;)

def thm_618 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => hol.TRANS (hol.arr B hol.bool) (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) (thm_617 A B b_27_1 a_27_2) (thm_617 A B b_27_1 a_27_2).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))))) (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))))) ;)

(; dict ;)

def thm_619 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))) (hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) (thm_536 B) (thm_618 A B b_27_1 a_27_2).

(; Theorem: |- ((= \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))) \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))) ;)

(; dict ;)

def thm_620 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1))) (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => hol.REFL (hol.arr A hol.bool) (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1))).

(; Theorem: |- ((= \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))) \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))) ;)

(; dict ;)

def thm_621 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1))) (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => hol.TRANS (hol.arr A hol.bool) (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1))) (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1))) (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1))) (thm_620 B A b_27_1 b_2 a_27_3) (thm_620 B A b_27_1 b_2 a_27_3).

(; Theorem: |- ((= (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) ;)

(; dict ;)

def thm_622 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) (hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1))) (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1))) (thm_51 A) (thm_621 B A b_27_1 b_2 a_27_3).

(; Theorem: |- ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool.==> (Data.Bool.~ ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))) Data.Bool.F)) ;)

(; dict ;)

def thm_623 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) (hol.imp (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) hol.false)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => (p_1 : hol.term hol.bool => thm_186 p_1) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))) Data.Bool.F)) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ;)

(; dict ;)

def thm_624 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) hol.false) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.SYM hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) (hol.imp (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) hol.false) (thm_623 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- (Data.Bool.~ ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ;)

(; dict ;)

def thm_625 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) -> hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) => hyp_1.

(; Theorem: |- ((= ((= a) a')) ((= a) a')) ;)

(; dict ;)

def thm_626 : A : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A a_2 a_27_1) (hol.eq A a_2 a_27_1)) :=
  A : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => hol.REFL hol.bool (hol.eq A a_2 a_27_1).

(; Theorem: |- ((= (Data.Bool./\ ((= a) a'))) (Data.Bool./\ ((= a) a'))) ;)

(; dict ;)

def thm_627 : A : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.eq A a_2 a_27_1)) (hol.and (hol.eq A a_2 a_27_1))) :=
  A : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.eq A a_2 a_27_1) (hol.eq A a_2 a_27_1) thm_388 (thm_626 A a_27_1 a_2).

(; Theorem: |- ((= ((= b) b')) ((= b) b')) ;)

(; dict ;)

def thm_628 : B : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq B b_2 b_27_1) (hol.eq B b_2 b_27_1)) :=
  B : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => hol.REFL hol.bool (hol.eq B b_2 b_27_1).

(; Theorem: |- ((= ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((Data.Bool./\ ((= a) a')) ((= b) b'))) ;)

(; dict ;)

def thm_629 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and (hol.eq A a_4 a_27_3)) (hol.and (hol.eq A a_4 a_27_3)) (hol.eq B b_2 b_27_1) (hol.eq B b_2 b_27_1) (thm_627 A a_27_3 a_4) (thm_628 B b_27_1 b_2).

(; Theorem: |- ((= ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((Data.Bool./\ ((= a) a')) ((= b) b'))) ;)

(; dict ;)

def thm_630 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hol.TRANS hol.bool (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (thm_629 B A b_27_1 b_2 a_27_3 a_4) (thm_629 B A b_27_1 b_2 a_27_3 a_4).

(; Theorem: |- ((Data.Bool./\ ((= a) a')) ((= b) b')) ;)

(; dict ;)

def thm_631 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) -> hol.proof (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> ((= ((Data.Pair., a') b')) ((Data.Pair., a') b'))) Data.Bool.F)) ((Data.Bool.==> ((= ((Data.Pair., a') b')) ((Data.Pair., a') b'))) Data.Bool.F)) ;)

(; dict ;)

def thm_632 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) hol.false) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) hol.false)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => hol.REFL hol.bool (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) hol.false).

(; Theorem: |- ((= ((Data.Bool.==> ((= ((Data.Pair., a') b')) ((Data.Pair., a') b'))) Data.Bool.F)) ((Data.Bool.==> ((= ((Data.Pair., a') b')) ((Data.Pair., a') b'))) Data.Bool.F)) ;)

(; dict ;)

def thm_633 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) hol.false) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) hol.false)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => hol.TRANS hol.bool (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) hol.false) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) hol.false) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) hol.false) (thm_632 B A b_27_1 a_27_2) (thm_632 B A b_27_1 a_27_2).

(; Theorem: |- ((= (Data.Bool.~ ((= ((Data.Pair., a') b')) ((Data.Pair., a') b')))) (Data.Bool.~ ((= ((Data.Pair., a') b')) ((Data.Pair., a') b')))) ;)

(; dict ;)

def thm_634 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => hol.REFL hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1))).

(; Theorem: |- ((= (Data.Bool.~ ((= ((Data.Pair., a') b')) ((Data.Pair., a') b')))) ((Data.Bool.==> ((= ((Data.Pair., a') b')) ((Data.Pair., a') b'))) Data.Bool.F)) ;)

(; dict ;)

def thm_635 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) hol.false)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => (p_1 : hol.term hol.bool => thm_313 p_1) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)).

(; Theorem: |- ((= (Data.Bool.~ ((= ((Data.Pair., a') b')) ((Data.Pair., a') b')))) ((Data.Bool.==> ((= ((Data.Pair., a') b')) ((Data.Pair., a') b'))) Data.Bool.F)) ;)

(; dict ;)

def thm_636 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) hol.false)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => hol.TRANS hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) hol.false) (thm_634 B A b_27_1 a_27_2) (thm_635 B A b_27_1 a_27_2).

(; Theorem: |- ((= (= (\lambda _1223. (Data.Bool.~ ((= ((Data.Pair., _1223) b')) ((Data.Pair., a') b'))) a))) (= (\lambda _1223. (Data.Bool.~ ((= ((Data.Pair., _1223) b')) ((Data.Pair., a') b'))) a))) ;)

(; dict ;)

def thm_637 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> a_27_2 : hol.term A -> b_27_3 : hol.term B -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__1223_4 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_1)) (hol.eq hol.bool ((__1223_4 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_1))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => a_27_2 : hol.term A => b_27_3 : hol.term B => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__1223_4 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_1)).

(; Theorem: |- ((= (\lambda _1223. (Data.Bool.~ ((= ((Data.Pair., _1223) b')) ((Data.Pair., a') b'))) a')) (Data.Bool.~ ((= ((Data.Pair., a') b')) ((Data.Pair., a') b')))) ;)

(; dict ;)

def thm_638 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_27_2 : hol.term B -> hol.proof (hol.eq hol.bool ((__1223_3 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_3 b_27_2) (Data_2EPair_2E_2C B A a_27_1 b_27_2))) a_27_1) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_1 b_27_2) (Data_2EPair_2E_2C B A a_27_1 b_27_2)))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_27_2 : hol.term B => hol.BETA_CONV A hol.bool (__1223_3 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_3 b_27_2) (Data_2EPair_2E_2C B A a_27_1 b_27_2))) a_27_1.

(; Theorem: |- ((= ((= (\lambda _1223. (Data.Bool.~ ((= ((Data.Pair., _1223) b')) ((Data.Pair., a') b'))) a)) (\lambda _1223. (Data.Bool.~ ((= ((Data.Pair., _1223) b')) ((Data.Pair., a') b'))) a'))) ((= (\lambda _1223. (Data.Bool.~ ((= ((Data.Pair., _1223) b')) ((Data.Pair., a') b'))) a)) (Data.Bool.~ ((= ((Data.Pair., a') b')) ((Data.Pair., a') b'))))) ;)

(; dict ;)

def thm_639 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> a_27_2 : hol.term A -> b_27_3 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__1223_4 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_1) ((__1223_4 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_27_2)) (hol.eq hol.bool ((__1223_4 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_1) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => a_27_2 : hol.term A => b_27_3 : hol.term B => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__1223_4 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_1)) (hol.eq hol.bool ((__1223_4 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_1)) ((__1223_4 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_27_2) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) (thm_637 B A a_1 a_27_2 b_27_3) (thm_638 B A a_27_2 b_27_3).

(; Theorem: |- ((= (\lambda _1223. (Data.Bool.~ ((= ((Data.Pair., _1223) b')) ((Data.Pair., a') b'))) a)) (Data.Bool.~ ((= ((Data.Pair., a) b')) ((Data.Pair., a') b')))) ;)

(; dict ;)

def thm_640 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> a_27_2 : hol.term A -> b_27_3 : hol.term B -> hol.proof (hol.eq hol.bool ((__1223_4 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_1) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3)))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => a_27_2 : hol.term A => b_27_3 : hol.term B => hol.BETA_CONV A hol.bool (__1223_4 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_1.

(; Theorem: |- ((= (= (\lambda _1223. (Data.Bool.~ ((= ((Data.Pair., _1223) b')) ((Data.Pair., a') b'))) a))) (= (Data.Bool.~ ((= ((Data.Pair., a) b')) ((Data.Pair., a') b'))))) ;)

(; dict ;)

def thm_641 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> a_27_2 : hol.term A -> b_27_3 : hol.term B -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__1223_4 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_1)) (hol.eq hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => a_27_2 : hol.term A => b_27_3 : hol.term B => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__1223_4 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_1) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) thm_119 (thm_640 B A a_1 a_27_2 b_27_3).

(; Theorem: |- ((= ((= (\lambda _1223. (Data.Bool.~ ((= ((Data.Pair., _1223) b')) ((Data.Pair., a') b'))) a)) (Data.Bool.~ ((= ((Data.Pair., a') b')) ((Data.Pair., a') b'))))) ((= (Data.Bool.~ ((= ((Data.Pair., a) b')) ((Data.Pair., a') b')))) (Data.Bool.~ ((= ((Data.Pair., a') b')) ((Data.Pair., a') b'))))) ;)

(; dict ;)

def thm_642 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> a_27_2 : hol.term A -> b_27_3 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__1223_4 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_1) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3)))) (hol.eq hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => a_27_2 : hol.term A => b_27_3 : hol.term B => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__1223_4 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_1)) (hol.eq hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3)))) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) (thm_641 B A a_1 a_27_2 b_27_3) (thm_634 B A b_27_3 a_27_2).

(; Theorem: |- ((= ((= (\lambda _1223. (Data.Bool.~ ((= ((Data.Pair., _1223) b')) ((Data.Pair., a') b'))) a)) (\lambda _1223. (Data.Bool.~ ((= ((Data.Pair., _1223) b')) ((Data.Pair., a') b'))) a'))) ((= (Data.Bool.~ ((= ((Data.Pair., a) b')) ((Data.Pair., a') b')))) (Data.Bool.~ ((= ((Data.Pair., a') b')) ((Data.Pair., a') b'))))) ;)

(; dict ;)

def thm_643 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> a_27_2 : hol.term A -> b_27_3 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__1223_4 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_1) ((__1223_4 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_27_2)) (hol.eq hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => a_27_2 : hol.term A => b_27_3 : hol.term B => hol.TRANS hol.bool (hol.eq hol.bool ((__1223_4 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_1) ((__1223_4 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_27_2)) (hol.eq hol.bool ((__1223_4 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_1) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3)))) (hol.eq hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3)))) (thm_639 B A a_1 a_27_2 b_27_3) (thm_642 B A a_1 a_27_2 b_27_3).

(; Theorem: |- ((= \lambda _1223. (Data.Bool.~ ((= ((Data.Pair., _1223) b')) ((Data.Pair., a') b')))) \lambda _1223. (Data.Bool.~ ((= ((Data.Pair., _1223) b')) ((Data.Pair., a') b')))) ;)

(; dict ;)

def thm_644 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_27_2 : hol.term B -> hol.proof (hol.eq (hol.arr A hol.bool) (__1223_3 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_3 b_27_2) (Data_2EPair_2E_2C B A a_27_1 b_27_2))) (__1223_3 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_3 b_27_2) (Data_2EPair_2E_2C B A a_27_1 b_27_2)))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_27_2 : hol.term B => hol.REFL (hol.arr A hol.bool) (__1223_3 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_3 b_27_2) (Data_2EPair_2E_2C B A a_27_1 b_27_2))).

(; Theorem: |- ((= a) a') ;)

(; dict ;)

def thm_645 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) -> hol.proof (hol.eq A a_4 a_27_3) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_166 q_1 p_2 hyp_1) (hol.eq B b_2 b_27_1) (hol.eq A a_4 a_27_3) hyp_1.

(; Theorem: |- ((= a) a') ;)

(; dict ;)

def thm_646 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) -> hol.proof (hol.eq A a_4 a_27_3) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) => hol.PROVE_HYP (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq A a_4 a_27_3) (thm_631 B A b_27_1 b_2 a_27_3 a_4 hyp_1) (hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) => thm_645 B A b_27_1 b_2 a_27_3 a_4 hyp_2).

(; Theorem: |- ((= (\lambda _1223. (Data.Bool.~ ((= ((Data.Pair., _1223) b')) ((Data.Pair., a') b'))) a)) (\lambda _1223. (Data.Bool.~ ((= ((Data.Pair., _1223) b')) ((Data.Pair., a') b'))) a')) ;)

(; dict ;)

def thm_647 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> a_27_3 : hol.term A -> b_27_4 : hol.term B -> hyp_1 : hol.proof (hol.and (hol.eq A a_2 a_27_3) (hol.eq B b_1 b_27_4)) -> hol.proof (hol.eq hol.bool ((__1223_5 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_5 b_27_4) (Data_2EPair_2E_2C B A a_27_3 b_27_4))) a_2) ((__1223_5 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_5 b_27_4) (Data_2EPair_2E_2C B A a_27_3 b_27_4))) a_27_3)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => a_27_3 : hol.term A => b_27_4 : hol.term B => hyp_1 : hol.proof (hol.and (hol.eq A a_2 a_27_3) (hol.eq B b_1 b_27_4)) => hol.APP_THM A hol.bool (__1223_5 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_5 b_27_4) (Data_2EPair_2E_2C B A a_27_3 b_27_4))) (__1223_5 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_5 b_27_4) (Data_2EPair_2E_2C B A a_27_3 b_27_4))) a_2 a_27_3 (thm_644 B A a_27_3 b_27_4) (hol.EQ_MP (hol.eq A a_2 a_27_3) (hol.eq A a_2 a_27_3) (thm_626 A a_27_3 a_2) (hol.EQ_MP (hol.eq A a_2 a_27_3) (hol.eq A a_2 a_27_3) (thm_626 A a_27_3 a_2) (hol.EQ_MP (hol.eq A a_2 a_27_3) (hol.eq A a_2 a_27_3) (thm_626 A a_27_3 a_2) (thm_646 B A b_27_4 b_1 a_27_3 a_2 hyp_1)))).

(; Theorem: |- ((= (Data.Bool.~ ((= ((Data.Pair., a) b')) ((Data.Pair., a') b')))) (Data.Bool.~ ((= ((Data.Pair., a') b')) ((Data.Pair., a') b')))) ;)

(; dict ;)

def thm_648 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_27_2 : hol.term A -> b_27_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_1 b_27_3)) -> hol.proof (hol.eq hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_27_2 : hol.term A => b_27_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_1 b_27_3)) => hol.EQ_MP (hol.eq hol.bool ((__1223_5 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_5 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_4) ((__1223_5 : hol.term A => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A __1223_5 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) a_27_2)) (hol.eq hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3)))) (thm_643 B A a_4 a_27_2 b_27_3) (thm_647 B A b_1 a_4 a_27_2 b_27_3 hyp_1).

(; Theorem: |- ((= (= (\lambda _1217. (Data.Bool.~ ((= ((Data.Pair., a) _1217)) ((Data.Pair., a') b'))) b))) (= (\lambda _1217. (Data.Bool.~ ((= ((Data.Pair., a) _1217)) ((Data.Pair., a') b'))) b))) ;)

(; dict ;)

def thm_649 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_1)) (hol.eq hol.bool ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_1))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => b_27_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_1)).

(; Theorem: |- ((= (\lambda _1217. (Data.Bool.~ ((= ((Data.Pair., a) _1217)) ((Data.Pair., a') b'))) b')) (Data.Bool.~ ((= ((Data.Pair., a) b')) ((Data.Pair., a') b')))) ;)

(; dict ;)

def thm_650 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool ((__1217_4 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 __1217_4) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) b_27_1) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => a_3 : hol.term A => hol.BETA_CONV B hol.bool (__1217_4 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 __1217_4) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) b_27_1.

(; Theorem: |- ((= ((= (\lambda _1217. (Data.Bool.~ ((= ((Data.Pair., a) _1217)) ((Data.Pair., a') b'))) b)) (\lambda _1217. (Data.Bool.~ ((= ((Data.Pair., a) _1217)) ((Data.Pair., a') b'))) b'))) ((= (\lambda _1217. (Data.Bool.~ ((= ((Data.Pair., a) _1217)) ((Data.Pair., a') b'))) b)) (Data.Bool.~ ((= ((Data.Pair., a) b')) ((Data.Pair., a') b'))))) ;)

(; dict ;)

def thm_651 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_1) ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_27_2)) (hol.eq hol.bool ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_1) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_27_2) (Data_2EPair_2E_2C B A a_27_3 b_27_2))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => b_27_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_1)) (hol.eq hol.bool ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_1)) ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_27_2) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_27_2) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) (thm_649 A B b_1 b_27_2 a_27_3 a_4) (thm_650 A B b_27_2 a_27_3 a_4).

(; Theorem: |- ((= (\lambda _1217. (Data.Bool.~ ((= ((Data.Pair., a) _1217)) ((Data.Pair., a') b'))) b)) (Data.Bool.~ ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))) ;)

(; dict ;)

def thm_652 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_1) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_2)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => b_27_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hol.BETA_CONV B hol.bool (__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_1.

(; Theorem: |- ((= (= (\lambda _1217. (Data.Bool.~ ((= ((Data.Pair., a) _1217)) ((Data.Pair., a') b'))) b))) (= (Data.Bool.~ ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) ;)

(; dict ;)

def thm_653 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_1)) (hol.eq hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_2))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => b_27_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_1) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) thm_119 (thm_652 A B b_1 b_27_2 a_27_3 a_4).

(; Theorem: |- ((= (Data.Bool.~ ((= ((Data.Pair., a) b')) ((Data.Pair., a') b')))) (Data.Bool.~ ((= ((Data.Pair., a) b')) ((Data.Pair., a') b')))) ;)

(; dict ;)

def thm_654 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_27_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_27_2) (Data_2EPair_2E_2C B A a_27_1 b_27_2))) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_27_2) (Data_2EPair_2E_2C B A a_27_1 b_27_2)))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_27_2 : hol.term B => a_3 : hol.term A => hol.REFL hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_27_2) (Data_2EPair_2E_2C B A a_27_1 b_27_2))).

(; Theorem: |- ((= ((= (\lambda _1217. (Data.Bool.~ ((= ((Data.Pair., a) _1217)) ((Data.Pair., a') b'))) b)) (Data.Bool.~ ((= ((Data.Pair., a) b')) ((Data.Pair., a') b'))))) ((= (Data.Bool.~ ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))) (Data.Bool.~ ((= ((Data.Pair., a) b')) ((Data.Pair., a') b'))))) ;)

(; dict ;)

def thm_655 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_1) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_27_2) (Data_2EPair_2E_2C B A a_27_3 b_27_2)))) (hol.eq hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_27_2) (Data_2EPair_2E_2C B A a_27_3 b_27_2))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => b_27_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_1)) (hol.eq hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_2)))) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_27_2) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_27_2) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) (thm_653 A B b_1 b_27_2 a_27_3 a_4) (thm_654 B A a_27_3 b_27_2 a_4).

(; Theorem: |- ((= ((= (\lambda _1217. (Data.Bool.~ ((= ((Data.Pair., a) _1217)) ((Data.Pair., a') b'))) b)) (\lambda _1217. (Data.Bool.~ ((= ((Data.Pair., a) _1217)) ((Data.Pair., a') b'))) b'))) ((= (Data.Bool.~ ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))) (Data.Bool.~ ((= ((Data.Pair., a) b')) ((Data.Pair., a') b'))))) ;)

(; dict ;)

def thm_656 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_1) ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_27_2)) (hol.eq hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_27_2) (Data_2EPair_2E_2C B A a_27_3 b_27_2))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => b_27_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_1) ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_27_2)) (hol.eq hol.bool ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_1) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_27_2) (Data_2EPair_2E_2C B A a_27_3 b_27_2)))) (hol.eq hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_27_2) (Data_2EPair_2E_2C B A a_27_3 b_27_2)))) (thm_651 A B b_1 b_27_2 a_27_3 a_4) (thm_655 A B b_1 b_27_2 a_27_3 a_4).

(; Theorem: |- ((= \lambda _1217. (Data.Bool.~ ((= ((Data.Pair., a) _1217)) ((Data.Pair., a') b')))) \lambda _1217. (Data.Bool.~ ((= ((Data.Pair., a) _1217)) ((Data.Pair., a') b')))) ;)

(; dict ;)

def thm_657 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> a_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (__1217_4 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 __1217_4) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) (__1217_4 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 __1217_4) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => a_3 : hol.term A => hol.REFL (hol.arr B hol.bool) (__1217_4 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 __1217_4) (Data_2EPair_2E_2C B A a_27_2 b_27_1))).

(; Theorem: |- ((= b) b') ;)

(; dict ;)

def thm_658 : A : hol.type -> B : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> b_27_3 : hol.term B -> b_4 : hol.term B -> hyp_1 : hol.proof (hol.and (hol.eq A a_2 a_27_1) (hol.eq B b_4 b_27_3)) -> hol.proof (hol.eq B b_4 b_27_3) :=
  A : hol.type => B : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => b_27_3 : hol.term B => b_4 : hol.term B => hyp_1 : hol.proof (hol.and (hol.eq A a_2 a_27_1) (hol.eq B b_4 b_27_3)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_93 p_1 q_2 hyp_1) (hol.eq A a_2 a_27_1) (hol.eq B b_4 b_27_3) hyp_1.

(; Theorem: |- ((= b) b') ;)

(; dict ;)

def thm_659 : A : hol.type -> B : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> b_27_3 : hol.term B -> b_4 : hol.term B -> hyp_1 : hol.proof (hol.and (hol.eq A a_2 a_27_1) (hol.eq B b_4 b_27_3)) -> hol.proof (hol.eq B b_4 b_27_3) :=
  A : hol.type => B : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => b_27_3 : hol.term B => b_4 : hol.term B => hyp_1 : hol.proof (hol.and (hol.eq A a_2 a_27_1) (hol.eq B b_4 b_27_3)) => hol.PROVE_HYP (hol.and (hol.eq A a_2 a_27_1) (hol.eq B b_4 b_27_3)) (hol.eq B b_4 b_27_3) (thm_631 B A b_27_3 b_4 a_27_1 a_2 hyp_1) (hyp_2 : hol.proof (hol.and (hol.eq A a_2 a_27_1) (hol.eq B b_4 b_27_3)) => thm_658 A B a_27_1 a_2 b_27_3 b_4 hyp_2).

(; Theorem: |- ((= (\lambda _1217. (Data.Bool.~ ((= ((Data.Pair., a) _1217)) ((Data.Pair., a') b'))) b)) (\lambda _1217. (Data.Bool.~ ((= ((Data.Pair., a) _1217)) ((Data.Pair., a') b'))) b')) ;)

(; dict ;)

def thm_660 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_1 b_27_2)) -> hol.proof (hol.eq hol.bool ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_1) ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_27_2)) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => b_27_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_1 b_27_2)) => hol.APP_THM B hol.bool (__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) (__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_3 b_27_2))) b_1 b_27_2 (thm_657 A B b_27_2 a_27_3 a_4) (hol.EQ_MP (hol.eq B b_1 b_27_2) (hol.eq B b_1 b_27_2) (thm_628 B b_27_2 b_1) (hol.EQ_MP (hol.eq B b_1 b_27_2) (hol.eq B b_1 b_27_2) (thm_628 B b_27_2 b_1) (thm_659 A B a_27_3 a_4 b_27_2 b_1 hyp_1))).

(; Theorem: |- ((= (Data.Bool.~ ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))) (Data.Bool.~ ((= ((Data.Pair., a) b')) ((Data.Pair., a') b')))) ;)

(; dict ;)

def thm_661 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) -> hol.proof (hol.eq hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) => hol.EQ_MP (hol.eq hol.bool ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) b_3) ((__1217_5 : hol.term B => hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 __1217_5) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) b_27_1)) (hol.eq hol.bool (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) (thm_656 A B b_3 b_27_1 a_27_2 a_4) (thm_660 A B b_3 b_27_1 a_27_2 a_4 hyp_1).

(; Theorem: |- (Data.Bool.~ ((= ((Data.Pair., a) b')) ((Data.Pair., a') b'))) ;)

(; dict ;)

def thm_662 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_27_2 : hol.term A -> b_27_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_1) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) -> hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_1 b_27_3)) -> hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_27_2 : hol.term A => b_27_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_1) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) => hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_1 b_27_3)) => hol.EQ_MP (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_1) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_27_3) (Data_2EPair_2E_2C B A a_27_2 b_27_3))) (thm_661 B A b_27_3 a_27_2 b_1 a_4 hyp_2) (thm_625 B A b_27_3 a_27_2 b_1 a_4 hyp_1).

(; Theorem: |- (Data.Bool.~ ((= ((Data.Pair., a') b')) ((Data.Pair., a') b'))) ;)

(; dict ;)

def thm_663 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> b_27_3 : hol.term B -> a_27_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_3))) -> hyp_2 : hol.proof (hol.and (hol.eq A a_2 a_27_4) (hol.eq B b_1 b_27_3)) -> hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_4 b_27_3) (Data_2EPair_2E_2C B A a_27_4 b_27_3))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => b_27_3 : hol.term B => a_27_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_3))) => hyp_2 : hol.proof (hol.and (hol.eq A a_2 a_27_4) (hol.eq B b_1 b_27_3)) => hol.EQ_MP (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_27_3) (Data_2EPair_2E_2C B A a_27_4 b_27_3))) (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_4 b_27_3) (Data_2EPair_2E_2C B A a_27_4 b_27_3))) (thm_648 B A b_1 a_27_4 b_27_3 a_2 hyp_2) (thm_662 B A b_1 a_27_4 b_27_3 a_2 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((= ((Data.Pair., a') b')) ((Data.Pair., a') b'))) Data.Bool.F) ;)

(; dict ;)

def thm_664 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> b_27_3 : hol.term B -> a_27_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_3))) -> hyp_2 : hol.proof (hol.and (hol.eq A a_2 a_27_4) (hol.eq B b_1 b_27_3)) -> hol.proof (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_4 b_27_3) (Data_2EPair_2E_2C B A a_27_4 b_27_3)) hol.false) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => b_27_3 : hol.term B => a_27_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_3))) => hyp_2 : hol.proof (hol.and (hol.eq A a_2 a_27_4) (hol.eq B b_1 b_27_3)) => hol.EQ_MP (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_4 b_27_3) (Data_2EPair_2E_2C B A a_27_4 b_27_3))) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_4 b_27_3) (Data_2EPair_2E_2C B A a_27_4 b_27_3)) hol.false) (thm_636 B A b_27_3 a_27_4) (thm_663 B A b_1 a_2 b_27_3 a_27_4 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((= ((Data.Pair., a') b')) ((Data.Pair., a') b')))) ((= ((Data.Pair., a') b')) ((Data.Pair., a') b')))) ((= ((Data.Pair., a') b')) ((Data.Pair., a') b'))) ;)

(; dict ;)

def thm_665 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => (p_1 : hol.term hol.bool => thm_299 p_1) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)).

(; Theorem: |- ((= ((= x) x)) ((= x) x)) ;)

(; dict ;)

def thm_666 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) x_1 x_1) (hol.eq (Data_2EPair_2E_2A A B) x_1 x_1)) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.REFL hol.bool (hol.eq (Data_2EPair_2E_2A A B) x_1 x_1).

(; Theorem: |- ((= ((= x) x)) ((= x) x)) ;)

(; dict ;)

def thm_667 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) x_1 x_1) (hol.eq (Data_2EPair_2E_2A A B) x_1 x_1)) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.TRANS hol.bool (hol.eq (Data_2EPair_2E_2A A B) x_1 x_1) (hol.eq (Data_2EPair_2E_2A A B) x_1 x_1) (hol.eq (Data_2EPair_2E_2A A B) x_1 x_1) (thm_666 B A x_1) (thm_666 B A x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_668 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_1 x_1) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => (A : hol.type => x_1 : hol.term A => thm_178 A x_1) (Data_2EPair_2E_2A A B) x_1.

(; Theorem: |- ((= ((Data.Pair., a') b')) ((Data.Pair., a') b')) ;)

(; dict ;)

def thm_669 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => (B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => (B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.EQ_MP (hol.eq (Data_2EPair_2E_2A A B) x_1 x_1) (hol.eq (Data_2EPair_2E_2A A B) x_1 x_1) (thm_667 B A x_1) (thm_668 B A x_1)) B A x_1) B A (Data_2EPair_2E_2C B A a_27_2 b_27_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((= ((Data.Pair., a') b')) ((Data.Pair., a') b')))) ((= ((Data.Pair., a') b')) ((Data.Pair., a') b'))) ;)

(; dict ;)

def thm_670 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> hol.proof (hol.imp (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) => thm_669 B A b_27_1 a_27_2.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_671 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) -> hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) => hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) => hol.EQ_MP (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) hol.false) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) hol.false) (thm_633 B A b_27_1 a_27_2) (thm_664 B A b_3 a_4 b_27_1 a_27_2 hyp_1 hyp_2) (hol.EQ_MP (hol.imp (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) (thm_665 B A b_27_1 a_27_2) (thm_670 B A b_27_1 a_27_2)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_672 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) -> hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) -> hol.proof (hol.imp (hol.not hol.false) hol.false) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) => hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) => hyp_3 : hol.proof (hol.not hol.false) => hol.EQ_MP hol.false hol.false thm_300 (thm_671 B A b_27_1 a_27_2 b_3 a_4 hyp_1 hyp_2).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_673 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) -> hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) => hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) => hol.PROVE_HYP (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) hol.false (thm_625 B A b_27_1 a_27_2 b_3 a_4 hyp_1) (hyp_3 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) => hol.EQ_MP hol.false hol.false thm_300 (hol.EQ_MP hol.false hol.false thm_300 (hol.EQ_MP (hol.imp (hol.not hol.false) hol.false) hol.false thm_250 (thm_672 B A b_27_1 a_27_2 b_3 a_4 hyp_3 hyp_2)))).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_674 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) -> hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) => hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) => hol.PROVE_HYP (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) hol.false (thm_625 B A b_27_1 a_27_2 b_3 a_4 hyp_1) (hyp_3 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) => thm_673 B A b_27_1 a_27_2 b_3 a_4 hyp_3 hyp_2).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_675 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) -> hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) => hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) => hol.PROVE_HYP (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) hol.false (thm_625 B A b_27_1 a_27_2 b_3 a_4 hyp_1) (hyp_3 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) => thm_674 B A b_27_1 a_27_2 b_3 a_4 hyp_3 hyp_2).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_676 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) -> hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) => hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) => hol.PROVE_HYP (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) hol.false (thm_625 B A b_27_1 a_27_2 b_3 a_4 hyp_1) (hyp_3 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) => thm_675 B A b_27_1 a_27_2 b_3 a_4 hyp_3 hyp_2).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_677 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) -> hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) => hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) => hol.PROVE_HYP (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) hol.false (thm_631 B A b_27_1 b_3 a_27_2 a_4 hyp_2) (hyp_3 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) => thm_676 B A b_27_1 a_27_2 b_3 a_4 hyp_1 hyp_3).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_678 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) -> hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) => hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) => hol.PROVE_HYP (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) hol.false (thm_625 B A b_27_1 a_27_2 b_3 a_4 hyp_1) (hyp_3 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) => thm_677 B A b_27_1 a_27_2 b_3 a_4 hyp_3 hyp_2).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_679 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) -> hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) => hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) => hol.PROVE_HYP (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) hol.false (hol.EQ_MP (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (thm_630 B A b_27_1 b_3 a_27_2 a_4) (thm_631 B A b_27_1 b_3 a_27_2 a_4 hyp_2)) (hyp_3 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) => thm_678 B A b_27_1 a_27_2 b_3 a_4 hyp_1 hyp_3).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_680 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) -> hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) => hyp_2 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) => hol.PROVE_HYP (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) hol.false (thm_625 B A b_27_1 a_27_2 b_3 a_4 hyp_1) (hyp_3 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) => thm_679 B A b_27_1 a_27_2 b_3 a_4 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))) Data.Bool.F) ;)

(; dict ;)

def thm_681 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) -> hol.proof (hol.imp (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) hol.false) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) => hyp_2 : hol.proof (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) => thm_680 B A b_27_1 a_27_2 b_3 a_4 hyp_2 hyp_1.

(; Theorem: |- ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')) ;)

(; dict ;)

def thm_682 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) => hol.EQ_MP (hol.imp (hol.not (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) hol.false) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) (thm_624 B A b_27_1 a_27_2 b_3 a_4) (thm_681 B A b_27_1 a_27_2 b_3 a_4 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ;)

(; dict ;)

def thm_683 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) => thm_682 B A b_27_1 a_27_3 b_2 a_4 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))) ;)

(; dict ;)

def thm_684 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> hol.proof (hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => thm_683 B A b_27_1 b_2 a_27_3 a_4.

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) ;)

(; dict ;)

def thm_685 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> hol.proof (hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => hol.EQ_MP (hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) (hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) (thm_622 B A b_27_1 b_3 a_27_2) (thm_684 B A b_27_1 b_3 a_27_2).

(; Theorem: |- (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))))) ;)

(; dict ;)

def thm_686 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> hol.proof (hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => hol.EQ_MP (hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))) (hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))) (thm_619 A B b_27_1 a_27_2) (thm_685 A B b_27_1 a_27_2).

(; Theorem: |- (Data.Bool.! \lambda b'. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))))) ;)

(; dict ;)

def thm_687 : A : hol.type -> B : hol.type -> hol.proof (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => hol.EQ_MP (hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))))) (hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))))) (thm_616 B A b_27_1) (thm_686 B A b_27_1).

(; Theorem: |- (Data.Bool.! \lambda b'. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F))))) ;)

(; dict ;)

def thm_688 : A : hol.type -> B : hol.type -> hol.proof (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false))))) :=
  A : hol.type => B : hol.type => hol.EQ_MP (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))))) (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false))))) (thm_613 A B) (hol.EQ_MP (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))))) (hol.forall B (b_27_1 : hol.term B => hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))))))) (thm_608 A B) (thm_687 A B)).

(; Theorem: |- (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)))) ;)

(; dict ;)

def thm_689 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> hol.proof (hol.forall A (a_27_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => thm_688 A B b_27_1.

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F))) ;)

(; dict ;)

def thm_690 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> hol.proof (hol.forall B (b_3 : hol.term B => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => thm_689 B A b_27_1 a_27_2.

(; Theorem: |- (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F)) ;)

(; dict ;)

def thm_691 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> hol.proof (hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => thm_690 A B b_27_1 a_27_3 b_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) Data.Bool.F) ;)

(; dict ;)

def thm_692 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => thm_691 B A b_27_1 b_2 a_27_3 a_4.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_693 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) => hol.EQ_MP (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (thm_591 B A b_27_1 b_2 a_27_3 a_4) ((B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hol.EQ_MP (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) (hol.imp (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false)) (thm_593 B A b_27_1 b_2 a_27_3 a_4) (thm_598 B A b_27_1 b_2 a_27_3 a_4 (thm_599 B A b_27_1 b_2 a_27_3 a_4))) B A b_27_1 b_2 a_27_3 a_4 (thm_692 B A b_27_1 b_2 a_27_3 a_4)) (thm_589 B A b_27_1 b_2 a_27_3 a_4 hyp_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_694 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) => hol.PROVE_HYP (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) hol.false (thm_589 B A b_27_1 b_2 a_27_3 a_4 hyp_1) (hyp_2 : hol.proof (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)))) => thm_693 B A b_27_1 b_2 a_27_3 a_4 hyp_2).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_695 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Data_2EPair_2E_2A A B) hol.bool)) (hol.eq (Data_2EPair_2E_2A A B)) (hol.eq (Data_2EPair_2E_2A A B))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Data_2EPair_2E_2A A B) hol.bool)) (hol.eq (Data_2EPair_2E_2A A B)).

(; Theorem: |- ((= ((= ((Data.Pair., x) y)) (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((= ((Data.Pair., x) y)) (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ;)

(; dict ;)

def thm_696 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A x_2 y_1) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A x_2 y_1) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1)))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.REFL hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A x_2 y_1) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))).

(; Theorem: |- ((= ((= ((Data.Pair., x) y)) (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((= ((Data.Pair., x) y)) (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ;)

(; dict ;)

def thm_697 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A x_2 y_1) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A x_2 y_1) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1)))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A x_2 y_1) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A x_2 y_1) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A x_2 y_1) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (thm_696 B A y_1 x_2) (thm_696 B A y_1 x_2).

(; Theorem: |- ((= (Data.Pair., x)) (\lambda x. \lambda y. (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)) x)) ;)

(; dict ;)

def thm_698 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr B (Data_2EPair_2E_2A A B)) (Data_2EPair_2E_2C B A x_1) ((x_2 : hol.term A => y_3 : hol.term B => HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3)) x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.APP_THM A (hol.arr B (Data_2EPair_2E_2A A B)) (Data_2EPair_2E_2C B A) (x_2 : hol.term A => y_3 : hol.term B => HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3)) x_1 x_1 (thm_574 B A) (thm_178 A x_1).

(; Theorem: |- ((= (\lambda x. \lambda y. (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)) x)) \lambda y. (HOLLight.ABS_prod ((HOLLight.mk_pair x) y))) ;)

(; dict ;)

def thm_699 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr B (Data_2EPair_2E_2A A B)) ((x_2 : hol.term A => y_3 : hol.term B => HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3)) x_1) (y_2 : hol.term B => HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.BETA_CONV A (hol.arr B (Data_2EPair_2E_2A A B)) (x_2 : hol.term A => y_3 : hol.term B => HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3)) x_1.

(; Theorem: |- ((= (Data.Pair., x)) \lambda y. (HOLLight.ABS_prod ((HOLLight.mk_pair x) y))) ;)

(; dict ;)

def thm_700 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr B (Data_2EPair_2E_2A A B)) (Data_2EPair_2E_2C B A x_1) (y_2 : hol.term B => HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.TRANS (hol.arr B (Data_2EPair_2E_2A A B)) (Data_2EPair_2E_2C B A x_1) ((x_2 : hol.term A => y_3 : hol.term B => HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3)) x_1) (y_2 : hol.term B => HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2)) (thm_698 A B x_1) (thm_699 A B x_1).

(; Theorem: |- ((= y) y) ;)

(; dict ;)

def thm_701 : B : hol.type -> y_1 : hol.term B -> hol.proof (hol.eq B y_1 y_1) :=
  B : hol.type => y_1 : hol.term B => hol.REFL B y_1.

(; Theorem: |- ((= ((Data.Pair., x) y)) (\lambda y. (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)) y)) ;)

(; dict ;)

def thm_702 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A x_2 y_1) ((y_3 : hol.term B => HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3)) y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.APP_THM B (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A x_2) (y_3 : hol.term B => HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3)) y_1 y_1 (thm_700 A B x_2) (thm_701 B y_1).

(; Theorem: |- ((= (\lambda y. (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)) y)) (HOLLight.ABS_prod ((HOLLight.mk_pair x) y))) ;)

(; dict ;)

def thm_703 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) ((y_3 : hol.term B => HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3)) y_1) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.BETA_CONV B (Data_2EPair_2E_2A A B) (y_3 : hol.term B => HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3)) y_1.

(; Theorem: |- ((= ((Data.Pair., x) y)) (HOLLight.ABS_prod ((HOLLight.mk_pair x) y))) ;)

(; dict ;)

def thm_704 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A x_2 y_1) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.TRANS (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A x_2 y_1) ((y_3 : hol.term B => HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3)) y_1) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1)) (thm_702 B A y_1 x_2) (thm_703 B A y_1 x_2).

(; Theorem: |- (Data.Bool.! \lambda y. ((= ((Data.Pair., x) y)) (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ;)

(; dict ;)

def thm_705 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.forall B (y_2 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A x_1 y_2) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => y_2 : hol.term B => thm_704 B A y_2 x_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((Data.Pair., x) y)) (HOLLight.ABS_prod ((HOLLight.mk_pair x) y))))) ;)

(; dict ;)

def thm_706 : B : hol.type -> A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A x_1 y_2) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => thm_705 A B x_1.

(; Theorem: |- ((= ((Data.Pair., a) b)) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) ;)

(; dict ;)

def thm_707 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => (B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => (B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.EQ_MP (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A x_2 y_1) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A x_2 y_1) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (thm_697 B A y_1 x_2) (thm_706 B A x_2 y_1)) B A y_1 x_2) B A b_1 a_2.

(; Theorem: |- ((= (= ((Data.Pair., a) b))) (= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_708 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1)) (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM (Data_2EPair_2E_2A A B) (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (hol.eq (Data_2EPair_2E_2A A B)) (hol.eq (Data_2EPair_2E_2A A B)) (Data_2EPair_2E_2C B A a_2 b_1) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (thm_695 B A) (thm_707 B A b_1 a_2).

(; Theorem: |- ((= ((Data.Pair., a') b')) (HOLLight.ABS_prod ((HOLLight.mk_pair a') b'))) ;)

(; dict ;)

def thm_709 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => (B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => thm_704 B A y_1 x_2) B A b_27_1 a_27_2.

(; Theorem: |- ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a') b')))) ;)

(; dict ;)

def thm_710 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM (Data_2EPair_2E_2A A B) hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3)) (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3))) (Data_2EPair_2E_2C B A a_27_2 b_27_1) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1)) (thm_708 B A b_3 a_4) (thm_709 B A b_27_1 a_27_2).

(; Theorem: |- ((= (Data.Bool.==> ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')))) (Data.Bool.==> ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a') b'))))) ;)

(; dict ;)

def thm_711 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1))) thm_387 (thm_710 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= ((Data.Bool.==> ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ((Data.Bool.==> ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a') b')))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ;)

(; dict ;)

def thm_712 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1)))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (thm_711 B A b_27_1 a_27_2 b_3 a_4) (thm_629 B A b_27_1 b_3 a_27_2 a_4).

(; Theorem: |- ((= ((Data.Bool.==> ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a') b')))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ((Data.Bool.==> ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ;)

(; dict ;)

def thm_713 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.SYM hol.bool (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (thm_712 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_714 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool)) (hol.eq (hol.arr A (hol.arr B hol.bool))) (hol.eq (hol.arr A (hol.arr B hol.bool)))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A (hol.arr B hol.bool)) (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool)) (hol.eq (hol.arr A (hol.arr B hol.bool))).

(; Theorem: |- ((= ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) ;)

(; dict ;)

def thm_715 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.REFL hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)).

(; Theorem: |- ((= ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) ;)

(; dict ;)

def thm_716 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) (thm_715 B A y_1 x_2) (thm_715 B A y_1 x_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) Data.Bool.F)) ;)

(; dict ;)

def thm_717 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) hol.false)) :=
  B : hol.type => A : hol.type => (p_1 : hol.term hol.bool => thm_186 p_1) (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) Data.Bool.F)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))))) ;)

(; dict ;)

def thm_718 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) hol.false) (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) hol.false) (thm_717 B A).

(; Theorem: |- (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))))) ;)

(; dict ;)

def thm_719 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) -> hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ;)

(; dict ;)

def thm_720 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) :=
  B : hol.type => A : hol.type => hol.REFL hol.bool (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ;)

(; dict ;)

def thm_721 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (thm_720 B A).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F)))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F)))) ;)

(; dict ;)

def thm_722 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)))) :=
  B : hol.type => A : hol.type => hol.REFL hol.bool (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F)))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F)))) ;)

(; dict ;)

def thm_723 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) (thm_722 B A) (thm_722 B A).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ;)

(; dict ;)

def thm_724 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) -> hol.proof (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F)) ;)

(; dict ;)

def thm_725 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) -> hol.proof (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F)) ;)

(; dict ;)

def thm_726 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) -> hyp_2 : hol.proof (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) -> hol.proof (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) => hyp_2 : hol.proof (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) => thm_724 B A hyp_2 (thm_725 B A hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F)))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ;)

(; dict ;)

def thm_727 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) -> hol.proof (hol.imp (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) => hyp_2 : hol.proof (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) => thm_726 B A hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F)))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F)))) ;)

(; dict ;)

def thm_728 : B : hol.type -> A : hol.type -> hol.proof (hol.imp (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)))) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) => hyp_2 : hol.proof (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) => thm_727 B A hyp_2 (thm_724 B A hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ;)

(; dict ;)

def thm_729 : B : hol.type -> A : hol.type -> hol.proof (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) => thm_725 B A hyp_1.

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))))))) (Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))))))) ;)

(; dict ;)

def thm_730 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))))) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))))).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F)) (Data.Bool.~ ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_731 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) :=
  B : hol.type => A : hol.type => (t_1 : hol.term hol.bool => thm_136 t_1) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) (Data.Bool.~ ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_732 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool hol.bool (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))))) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (thm_730 B A) (thm_731 B A).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) (Data.Bool.~ ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) (Data.Bool.~ ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_733 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))))) :=
  B : hol.type => A : hol.type => hol.REFL hol.bool (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) (Data.Bool.~ ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_734 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) (thm_732 B A) (thm_733 B A).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) (Data.Bool.~ ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_735 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) (thm_734 B A) (thm_733 B A).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) (Data.Bool.~ ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_736 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) (thm_735 B A) (thm_733 B A).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) (Data.Bool.~ ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_737 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) (thm_736 B A) (thm_733 B A).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) (Data.Bool.~ ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F))) ;)

(; dict ;)

def thm_738 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) (thm_737 B A).

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_739 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_740 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) => hol.EQ_MP p_1 q_2 (thm_739 q_2 p_1 hyp_2) (thm_87 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_741 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.imp p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_2 : hol.proof p_2 => thm_740 p_2 q_1 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= p) q)) ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_742 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 q_1) (hol.imp p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => thm_741 q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ((Data.Bool.==> (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_743 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_742 q_1 p_2) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1).

(; Theorem: |- ((= (= (Data.Bool.? P))) (= (Data.Bool.? P))) ;)

(; dict ;)

def thm_744 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)).

(; Theorem: |- ((= (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_745 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1.

(; Theorem: |- ((= ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P))) ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_746 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_744 A P_1) (thm_745 A P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_747 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) P_1 P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) P_1.

(; Theorem: |- ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) ;)

(; dict ;)

def thm_748 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1 P_1 (thm_30 A) (thm_747 A P_1).

(; Theorem: |- ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_749 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (thm_746 A P_1) (thm_748 A P_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_750 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => thm_743 A P_1 (thm_749 A P_1).

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_751 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)) ;)

(; dict ;)

def thm_752 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => thm_750 A P_1 (thm_751 A P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_753 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) => thm_752 A P_2 hyp_1 Q_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q)) ;)

(; dict ;)

def thm_754 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_755 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) Q_2)) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof Q_2 :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => Q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) Q_2)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => thm_753 A Q_2 P_1 hyp_2 (thm_754 A Q_2 P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? P)) Q) ;)

(; dict ;)

def thm_756 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) => thm_755 A P_2 Q_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) ((Data.Bool.==> (Data.Bool.? P)) Q)) ;)

(; dict ;)

def thm_757 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => thm_756 A Q_1 P_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) x)) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) Data.Bool.F)) ;)

(; dict ;)

def thm_758 : B : hol.type -> A : hol.type -> hol.proof (hol.imp (hol.forall (hol.arr (hol.arr A (hol.arr B hol.bool)) A) (x_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.imp ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))))) x_1) hol.false)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) hol.false)) :=
  B : hol.type => A : hol.type => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_757 A Q_1 P_2) (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.false (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) x)) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) Data.Bool.F)) ;)

(; dict ;)

def thm_759 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.imp (hol.forall (hol.arr (hol.arr A (hol.arr B hol.bool)) B) (x_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.imp ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) x_2) hol.false)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) hol.false)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_757 A Q_1 P_2) (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.false (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) x)) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) Data.Bool.F)) ;)

(; dict ;)

def thm_760 : B : hol.type -> A : hol.type -> hol.proof (hol.imp (hol.forall A (x_1 : hol.term A => hol.imp ((x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3)))) x_1) hol.false)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) hol.false)) :=
  B : hol.type => A : hol.type => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_757 A Q_1 P_2) A hol.false (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) x)) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))))) Data.Bool.F)) ;)

(; dict ;)

def thm_761 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.imp (hol.forall B (x_2 : hol.term B => hol.imp ((y_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_3))) (HOLLight_2Emk__pair B A x_1 y_3))) x_2) hol.false)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))) hol.false)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_757 A Q_1 P_2) B hol.false (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_762 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) hol.bool) (hol.forall (Data_2EPair_2E_2A A B)) (hol.forall (Data_2EPair_2E_2A A B))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) hol.bool) (hol.forall (Data_2EPair_2E_2A A B)).

(; Theorem: |- ((= HOLLight.ABS_prod) HOLLight.ABS_prod) ;)

(; dict ;)

def thm_763 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) (Data_2EPair_2E_2A A B)) (HOLLight_2EABS__prod B A) (HOLLight_2EABS__prod B A)) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A (hol.arr B hol.bool)) (Data_2EPair_2E_2A A B)) (HOLLight_2EABS__prod B A).

(; Theorem: |- ((= HOLLight.REP_prod) HOLLight.REP_prod) ;)

(; dict ;)

def thm_764 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) (hol.arr A (hol.arr B hol.bool))) (HOLLight_2EREP__prod B A) (HOLLight_2EREP__prod B A)) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (Data_2EPair_2E_2A A B) (hol.arr A (hol.arr B hol.bool))) (HOLLight_2EREP__prod B A).

(; Theorem: |- ((= a) a) ;)

(; dict ;)

def thm_765 : B : hol.type -> A : hol.type -> a_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) a_1 a_1) :=
  B : hol.type => A : hol.type => a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.REFL (Data_2EPair_2E_2A A B) a_1.

(; Theorem: |- ((= (HOLLight.REP_prod a)) (HOLLight.REP_prod a)) ;)

(; dict ;)

def thm_766 : B : hol.type -> A : hol.type -> a_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A a_1) (HOLLight_2EREP__prod B A a_1)) :=
  B : hol.type => A : hol.type => a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM (Data_2EPair_2E_2A A B) (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A) (HOLLight_2EREP__prod B A) a_1 a_1 (thm_764 B A) (thm_765 B A a_1).

(; Theorem: |- ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) (HOLLight.ABS_prod (HOLLight.REP_prod a))) ;)

(; dict ;)

def thm_767 : B : hol.type -> A : hol.type -> a_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1))) :=
  B : hol.type => A : hol.type => a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM (hol.arr A (hol.arr B hol.bool)) (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A) (HOLLight_2EABS__prod B A) (HOLLight_2EREP__prod B A a_1) (HOLLight_2EREP__prod B A a_1) (thm_763 B A) (thm_766 B A a_1).

(; Theorem: |- ((= (= (HOLLight.ABS_prod (HOLLight.REP_prod a)))) (= (HOLLight.ABS_prod (HOLLight.REP_prod a)))) ;)

(; dict ;)

def thm_768 : B : hol.type -> A : hol.type -> a_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1))) (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)))) :=
  B : hol.type => A : hol.type => a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM (Data_2EPair_2E_2A A B) (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (hol.eq (Data_2EPair_2E_2A A B)) (hol.eq (Data_2EPair_2E_2A A B)) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) (thm_695 B A) (thm_767 B A a_1).

(; Theorem: |- ((= ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a)) ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a)) ;)

(; dict ;)

def thm_769 : B : hol.type -> A : hol.type -> a_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1) (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) :=
  B : hol.type => A : hol.type => a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM (Data_2EPair_2E_2A A B) hol.bool (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1))) (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1))) a_1 a_1 (thm_768 B A a_1) (thm_765 B A a_1).

(; Theorem: |- ((= \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a)) \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a)) ;)

(; dict ;)

def thm_770 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) :=
  B : hol.type => A : hol.type => hol.ABS_THM (Data_2EPair_2E_2A A B) hol.bool (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1) (a_1 : hol.term (Data_2EPair_2E_2A A B) => thm_769 B A a_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ;)

(; dict ;)

def thm_771 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (Data_2EPair_2E_2A A B) hol.bool) hol.bool (hol.forall (Data_2EPair_2E_2A A B)) (hol.forall (Data_2EPair_2E_2A A B)) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1) (thm_762 B A) (thm_770 B A).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a)))) (Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a)))) ;)

(; dict ;)

def thm_772 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) thm_388 (thm_771 B A).

(; Theorem: |- ((= r) r) ;)

(; dict ;)

def thm_773 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 r_1) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL (hol.arr A (hol.arr B hol.bool)) r_1.

(; Theorem: |- ((= (= r)) (= r)) ;)

(; dict ;)

def thm_774 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1)) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A (hol.arr B hol.bool)) (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (hol.eq (hol.arr A (hol.arr B hol.bool))) (hol.eq (hol.arr A (hol.arr B hol.bool))) r_1 r_1 (thm_714 B A) (thm_773 B A r_1).

(; Theorem: |- ((= HOLLight.mk_pair) HOLLight.mk_pair) ;)

(; dict ;)

def thm_775 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr B (hol.arr A (hol.arr B hol.bool)))) (HOLLight_2Emk__pair B A) (HOLLight_2Emk__pair B A)) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr A (hol.arr B (hol.arr A (hol.arr B hol.bool)))) (HOLLight_2Emk__pair B A).

(; Theorem: |- ((= f) f) ;)

(; dict ;)

def thm_776 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) A) f_1 f_1) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.REFL (hol.arr (hol.arr A (hol.arr B hol.bool)) A) f_1.

(; Theorem: |- ((= (f r)) (f r)) ;)

(; dict ;)

def thm_777 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq A (f_2 r_1) (f_2 r_1)) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM (hol.arr A (hol.arr B hol.bool)) A f_2 f_2 r_1 r_1 (thm_776 B A f_2) (thm_773 B A r_1).

(; Theorem: |- ((= (HOLLight.mk_pair (f r))) (HOLLight.mk_pair (f r))) ;)

(; dict ;)

def thm_778 : A : hol.type -> B : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr B (hol.arr A (hol.arr B hol.bool))) (HOLLight_2Emk__pair B A (f_2 r_1)) (HOLLight_2Emk__pair B A (f_2 r_1))) :=
  A : hol.type => B : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM A (hol.arr B (hol.arr A (hol.arr B hol.bool))) (HOLLight_2Emk__pair B A) (HOLLight_2Emk__pair B A) (f_2 r_1) (f_2 r_1) (thm_775 B A) (thm_777 B A r_1 f_2).

(; Theorem: |- ((= f') f') ;)

(; dict ;)

def thm_779 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) B) f_27_1 f_27_1) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.REFL (hol.arr (hol.arr A (hol.arr B hol.bool)) B) f_27_1.

(; Theorem: |- ((= (f' r)) (f' r)) ;)

(; dict ;)

def thm_780 : A : hol.type -> B : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> f_27_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> hol.proof (hol.eq B (f_27_2 r_1) (f_27_2 r_1)) :=
  A : hol.type => B : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => f_27_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.APP_THM (hol.arr A (hol.arr B hol.bool)) B f_27_2 f_27_2 r_1 r_1 (thm_779 B A f_27_2) (thm_773 B A r_1).

(; Theorem: |- ((= ((HOLLight.mk_pair (f r)) (f' r))) ((HOLLight.mk_pair (f r)) (f' r))) ;)

(; dict ;)

def thm_781 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A (f_3 r_2) (f_27_1 r_2)) (HOLLight_2Emk__pair B A (f_3 r_2) (f_27_1 r_2))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM B (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A (f_3 r_2)) (HOLLight_2Emk__pair B A (f_3 r_2)) (f_27_1 r_2) (f_27_1 r_2) (thm_778 A B r_2 f_3) (thm_780 A B r_2 f_27_1).

(; Theorem: |- ((= ((= r) ((HOLLight.mk_pair (f r)) (f' r)))) ((= r) ((HOLLight.mk_pair (f r)) (f' r)))) ;)

(; dict ;)

def thm_782 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3)))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3) (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3) (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3)) (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3)) (thm_774 B A r_3) (thm_781 B A f_27_1 r_3 f_2).

(; Theorem: |- ((= (Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f' r))))) (Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f' r))))) ;)

(; dict ;)

def thm_783 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3)))) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) thm_431 (thm_782 B A f_27_1 f_2 r_3).

(; Theorem: |- ((= (HOLLight.ABS_prod r)) (HOLLight.ABS_prod r)) ;)

(; dict ;)

def thm_784 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A r_1) (HOLLight_2EABS__prod B A r_1)) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A (hol.arr B hol.bool)) (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A) (HOLLight_2EABS__prod B A) r_1 r_1 (thm_763 B A) (thm_773 B A r_1).

(; Theorem: |- ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) (HOLLight.REP_prod (HOLLight.ABS_prod r))) ;)

(; dict ;)

def thm_785 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (Data_2EPair_2E_2A A B) (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A) (HOLLight_2EREP__prod B A) (HOLLight_2EABS__prod B A r_1) (HOLLight_2EABS__prod B A r_1) (thm_764 B A) (thm_784 B A r_1).

(; Theorem: |- ((= (= (HOLLight.REP_prod (HOLLight.ABS_prod r)))) (= (HOLLight.REP_prod (HOLLight.ABS_prod r)))) ;)

(; dict ;)

def thm_786 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A (hol.arr B hol.bool)) (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (hol.eq (hol.arr A (hol.arr B hol.bool))) (hol.eq (hol.arr A (hol.arr B hol.bool))) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) (thm_714 B A) (thm_785 B A r_1).

(; Theorem: |- ((= ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)) ;)

(; dict ;)

def thm_787 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1))) r_1 r_1 (thm_786 B A r_1) (thm_773 B A r_1).

(; Theorem: |- ((= (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ;)

(; dict ;)

def thm_788 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1) thm_247 (thm_787 B A r_1).

(; Theorem: |- ((= ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f' r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f' r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_789 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3)))) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)) (thm_783 B A f_27_1 f_2 r_3) (thm_788 B A r_3).

(; Theorem: |- ((= \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f' r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f' r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_790 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.ABS_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_789 B A f_27_1 f_2 r_3).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f' r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f' r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_791 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) (thm_528 B A) (thm_790 B A f_27_1 f_2).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f' r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f' r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_792 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) thm_388 (thm_791 B A f_27_1 f_2).

(; Theorem: |- ((= a) a) ;)

(; dict ;)

def thm_793 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq A a_1 a_1) :=
  A : hol.type => a_1 : hol.term A => hol.REFL A a_1.

(; Theorem: |- ((= (HOLLight.mk_pair a)) (HOLLight.mk_pair a)) ;)

(; dict ;)

def thm_794 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr B (hol.arr A (hol.arr B hol.bool))) (HOLLight_2Emk__pair B A a_1) (HOLLight_2Emk__pair B A a_1)) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => hol.APP_THM A (hol.arr B (hol.arr A (hol.arr B hol.bool))) (HOLLight_2Emk__pair B A) (HOLLight_2Emk__pair B A) a_1 a_1 (thm_775 B A) (thm_793 A a_1).

(; Theorem: |- ((= b) b) ;)

(; dict ;)

def thm_795 : B : hol.type -> b_1 : hol.term B -> hol.proof (hol.eq B b_1 b_1) :=
  B : hol.type => b_1 : hol.term B => hol.REFL B b_1.

(; Theorem: |- ((= ((HOLLight.mk_pair a) b)) ((HOLLight.mk_pair a) b)) ;)

(; dict ;)

def thm_796 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_2 b_1) (HOLLight_2Emk__pair B A a_2 b_1)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM B (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_2) (HOLLight_2Emk__pair B A a_2) b_1 b_1 (thm_794 A B a_2) (thm_795 B b_1).

(; Theorem: |- ((= ((= r) ((HOLLight.mk_pair a) b))) ((= r) ((HOLLight.mk_pair a) b))) ;)

(; dict ;)

def thm_797 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3) (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3) (HOLLight_2Emk__pair B A a_2 b_1) (HOLLight_2Emk__pair B A a_2 b_1) (thm_774 B A r_3) (thm_796 B A b_1 a_2).

(; Theorem: |- ((= (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_798 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1)) thm_247 (thm_797 B A b_1 a_2 r_3).

(; Theorem: |- ((= \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_799 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM B hol.bool (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (b_3 : hol.term B => thm_798 B A b_3 a_1 r_2).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_800 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (thm_536 B) (thm_799 A B a_1 r_2).

(; Theorem: |- ((= \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_801 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM A hol.bool (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (a_2 : hol.term A => thm_800 A B a_2 r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_802 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (thm_51 A) (thm_801 B A r_1).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))))) (Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))))) ;)

(; dict ;)

def thm_803 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) thm_431 (thm_802 B A r_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ;)

(; dict ;)

def thm_804 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1) (thm_803 B A r_1) (thm_787 B A r_1).

(; Theorem: |- ((= \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ;)

(; dict ;)

def thm_805 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_804 B A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_806 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (thm_528 B A) (thm_805 B A).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f' r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f' r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_807 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) (thm_792 B A f_27_1 f_2) (thm_806 B A).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f' r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f' r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_808 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (thm_772 B A) (thm_807 B A f_27_1 f_2).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f' r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_809 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) -> hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) ;)

(; dict ;)

def thm_810 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) thm_247 (thm_715 B A y_1 x_2).

(; Theorem: |- (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) ;)

(; dict ;)

def thm_811 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) -> hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) Data.Bool.F)) ((Data.Bool.==> ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) Data.Bool.F)) ;)

(; dict ;)

def thm_812 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) hol.false) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) hol.false)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.REFL hol.bool (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) hol.false).

(; Theorem: |- ((= ((Data.Bool.==> ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) Data.Bool.F)) ((Data.Bool.==> ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) Data.Bool.F)) ;)

(; dict ;)

def thm_813 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) hol.false) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) hol.false)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.TRANS hol.bool (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) hol.false) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) hol.false) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) hol.false) (thm_812 B A y_1 x_2) (thm_812 B A y_1 x_2).

(; Theorem: |- ((= (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) ((Data.Bool.==> ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) Data.Bool.F)) ;)

(; dict ;)

def thm_814 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) hol.false)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => (p_1 : hol.term hol.bool => thm_313 p_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)).

(; Theorem: |- ((= (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) ((Data.Bool.==> ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) Data.Bool.F)) ;)

(; dict ;)

def thm_815 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) hol.false)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.TRANS hol.bool (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) hol.false) (thm_810 B A y_1 x_2) (thm_814 B A y_1 x_2).

(; Theorem: |- ((Data.Bool.==> ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) Data.Bool.F) ;)

(; dict ;)

def thm_816 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) -> hol.proof (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) hol.false) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) => hol.EQ_MP (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) hol.false) (thm_815 B A y_1 x_2) (thm_811 B A y_1 x_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) ;)

(; dict ;)

def thm_817 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => (p_1 : hol.term hol.bool => thm_299 p_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)).

(; Theorem: |- ((= ((Data.Bool.==> ((= _1192) ((HOLLight.mk_pair _1193) _1194))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192))) ((Data.Bool.==> ((= _1192) ((HOLLight.mk_pair _1193) _1194))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192))) ;)

(; dict ;)

def thm_818 : B : hol.type -> A : hol.type -> __1194_1 : hol.term B -> __1193_2 : hol.term A -> __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3))) :=
  B : hol.type => A : hol.type => __1194_1 : hol.term B => __1193_2 : hol.term A => __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)).

(; Theorem: |- ((= ((Data.Bool.==> ((= _1192) ((HOLLight.mk_pair _1193) _1194))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192))) ((Data.Bool.==> ((= _1192) ((HOLLight.mk_pair _1193) _1194))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192))) ;)

(; dict ;)

def thm_819 : B : hol.type -> A : hol.type -> __1194_1 : hol.term B -> __1193_2 : hol.term A -> __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3))) :=
  B : hol.type => A : hol.type => __1194_1 : hol.term B => __1193_2 : hol.term A => __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)) (thm_818 B A __1194_1 __1193_2 __1192_3) (thm_818 B A __1194_1 __1193_2 __1192_3).

(; Theorem: |- ((= ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a))) ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a))) ;)

(; dict ;)

def thm_820 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)).

(; Theorem: |- ((= ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a))) ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a))) ;)

(; dict ;)

def thm_821 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) (thm_820 b_1 a_2) (thm_820 b_1 a_2).

(; Theorem: |- ((= (= (\lambda _606. ((= ((Data.Bool.\/ _606) b)) ((Data.Bool.==> (Data.Bool.~ b)) _606)) a))) (= (\lambda _606. ((= ((Data.Bool.\/ _606) b)) ((Data.Bool.==> (Data.Bool.~ b)) _606)) a))) ;)

(; dict ;)

def thm_822 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) a_1)) (hol.eq hol.bool ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) a_1))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) a_1)).

(; Theorem: |- ((= (\lambda _606. ((= ((Data.Bool.\/ _606) b)) ((Data.Bool.==> (Data.Bool.~ b)) _606)) Data.Bool.F)) ((= ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.F))) ;)

(; dict ;)

def thm_823 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__606_2 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_2 b_1) (hol.imp (hol.not b_1) __606_2)) hol.false) (hol.eq hol.bool (hol.or hol.false b_1) (hol.imp (hol.not b_1) hol.false))) :=
  b_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__606_2 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_2 b_1) (hol.imp (hol.not b_1) __606_2)) hol.false.

(; Theorem: |- ((= ((= (\lambda _606. ((= ((Data.Bool.\/ _606) b)) ((Data.Bool.==> (Data.Bool.~ b)) _606)) a)) (\lambda _606. ((= ((Data.Bool.\/ _606) b)) ((Data.Bool.==> (Data.Bool.~ b)) _606)) Data.Bool.F))) ((= (\lambda _606. ((= ((Data.Bool.\/ _606) b)) ((Data.Bool.==> (Data.Bool.~ b)) _606)) a)) ((= ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.F)))) ;)

(; dict ;)

def thm_824 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) a_1) ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) hol.false)) (hol.eq hol.bool ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) a_1) (hol.eq hol.bool (hol.or hol.false b_2) (hol.imp (hol.not b_2) hol.false)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) a_1)) (hol.eq hol.bool ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) a_1)) ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) hol.false) (hol.eq hol.bool (hol.or hol.false b_2) (hol.imp (hol.not b_2) hol.false)) (thm_822 a_1 b_2) (thm_823 b_2).

(; Theorem: |- ((= (\lambda _606. ((= ((Data.Bool.\/ _606) b)) ((Data.Bool.==> (Data.Bool.~ b)) _606)) a)) ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a))) ;)

(; dict ;)

def thm_825 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) a_1) (hol.eq hol.bool (hol.or a_1 b_2) (hol.imp (hol.not b_2) a_1))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) a_1.

(; Theorem: |- ((= (= (\lambda _606. ((= ((Data.Bool.\/ _606) b)) ((Data.Bool.==> (Data.Bool.~ b)) _606)) a))) (= ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a)))) ;)

(; dict ;)

def thm_826 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) a_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_1 b_2) (hol.imp (hol.not b_2) a_1)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) a_1) (hol.eq hol.bool (hol.or a_1 b_2) (hol.imp (hol.not b_2) a_1)) thm_119 (thm_825 a_1 b_2).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.F))) ((= ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.F))) ;)

(; dict ;)

def thm_827 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.false b_1) (hol.imp (hol.not b_1) hol.false)) (hol.eq hol.bool (hol.or hol.false b_1) (hol.imp (hol.not b_1) hol.false))) :=
  b_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or hol.false b_1) (hol.imp (hol.not b_1) hol.false)).

(; Theorem: |- ((= ((= (\lambda _606. ((= ((Data.Bool.\/ _606) b)) ((Data.Bool.==> (Data.Bool.~ b)) _606)) a)) ((= ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.F)))) ((= ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a))) ((= ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.F)))) ;)

(; dict ;)

def thm_828 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) a_1) (hol.eq hol.bool (hol.or hol.false b_2) (hol.imp (hol.not b_2) hol.false))) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_1 b_2) (hol.imp (hol.not b_2) a_1)) (hol.eq hol.bool (hol.or hol.false b_2) (hol.imp (hol.not b_2) hol.false)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) a_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_1 b_2) (hol.imp (hol.not b_2) a_1))) (hol.eq hol.bool (hol.or hol.false b_2) (hol.imp (hol.not b_2) hol.false)) (hol.eq hol.bool (hol.or hol.false b_2) (hol.imp (hol.not b_2) hol.false)) (thm_826 a_1 b_2) (thm_827 b_2).

(; Theorem: |- ((= ((= (\lambda _606. ((= ((Data.Bool.\/ _606) b)) ((Data.Bool.==> (Data.Bool.~ b)) _606)) a)) (\lambda _606. ((= ((Data.Bool.\/ _606) b)) ((Data.Bool.==> (Data.Bool.~ b)) _606)) Data.Bool.F))) ((= ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a))) ((= ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.F)))) ;)

(; dict ;)

def thm_829 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) a_1) ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_1 b_2) (hol.imp (hol.not b_2) a_1)) (hol.eq hol.bool (hol.or hol.false b_2) (hol.imp (hol.not b_2) hol.false)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) a_1) ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) hol.false)) (hol.eq hol.bool ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) a_1) (hol.eq hol.bool (hol.or hol.false b_2) (hol.imp (hol.not b_2) hol.false))) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_1 b_2) (hol.imp (hol.not b_2) a_1)) (hol.eq hol.bool (hol.or hol.false b_2) (hol.imp (hol.not b_2) hol.false))) (thm_824 a_1 b_2) (thm_828 a_1 b_2).

(; Theorem: |- ((= \lambda _606. ((= ((Data.Bool.\/ _606) b)) ((Data.Bool.==> (Data.Bool.~ b)) _606))) \lambda _606. ((= ((Data.Bool.\/ _606) b)) ((Data.Bool.==> (Data.Bool.~ b)) _606))) ;)

(; dict ;)

def thm_830 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__606_2 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_2 b_1) (hol.imp (hol.not b_1) __606_2)) (__606_2 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_2 b_1) (hol.imp (hol.not b_1) __606_2))) :=
  b_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__606_2 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_2 b_1) (hol.imp (hol.not b_1) __606_2)).

(; Theorem: |- ((= a) Data.Bool.F) ;)

(; dict ;)

def thm_831 : a_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) -> hol.proof (hol.eq hol.bool a_1 hol.false) :=
  a_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) => hyp_1.

(; Theorem: |- ((= (\lambda _606. ((= ((Data.Bool.\/ _606) b)) ((Data.Bool.==> (Data.Bool.~ b)) _606)) a)) (\lambda _606. ((= ((Data.Bool.\/ _606) b)) ((Data.Bool.==> (Data.Bool.~ b)) _606)) Data.Bool.F)) ;)

(; dict ;)

def thm_832 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) -> hol.proof (hol.eq hol.bool ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) a_1) ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) hol.false)) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) => hol.APP_THM hol.bool hol.bool (__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) (__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_2) (hol.imp (hol.not b_2) __606_3)) a_1 hol.false (thm_830 b_2) (thm_831 a_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a))) ((= ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.F))) ;)

(; dict ;)

def thm_833 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) (hol.eq hol.bool (hol.or hol.false b_1) (hol.imp (hol.not b_1) hol.false))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_1) (hol.imp (hol.not b_1) __606_3)) a_2) ((__606_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __606_3 b_1) (hol.imp (hol.not b_1) __606_3)) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) (hol.eq hol.bool (hol.or hol.false b_1) (hol.imp (hol.not b_1) hol.false))) (thm_829 a_2 b_1) (thm_832 a_2 b_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.F))) ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a))) ;)

(; dict ;)

def thm_834 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.false b_2) (hol.imp (hol.not b_2) hol.false)) (hol.eq hol.bool (hol.or a_1 b_2) (hol.imp (hol.not b_2) a_1))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) => hol.SYM hol.bool (hol.eq hol.bool (hol.or a_1 b_2) (hol.imp (hol.not b_2) a_1)) (hol.eq hol.bool (hol.or hol.false b_2) (hol.imp (hol.not b_2) hol.false)) (thm_833 b_2 a_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ;)

(; dict ;)

def thm_835 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or hol.false t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ;)

(; dict ;)

def thm_836 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (thm_835 t_1) (thm_835 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_837 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_838 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) thm_837 thm_837.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))))) ;)

(; dict ;)

def thm_839 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) thm_65 thm_838.

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_840 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or hol.true t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_841 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (thm_840 t_1) (thm_840 t_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T) ;)

(; dict ;)

def thm_842 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) :=
  t_1 : hol.term hol.bool => thm_31 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_843 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_844 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (thm_841 t_1) (thm_842 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) => thm_843 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_845 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or t_1 hol.true) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_846 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (thm_845 t_1) (thm_845 t_1).

(; Theorem: |- ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_847 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => thm_32 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ;)

(; dict ;)

def thm_848 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ;)

(; dict ;)

def thm_849 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (thm_846 t_1) (thm_847 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) => thm_848 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) t)) t) ;)

(; dict ;)

def thm_850 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_33 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_851 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_852 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (thm_835 t_1) (thm_850 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) => thm_851 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ;)

(; dict ;)

def thm_853 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or t_1 hol.false) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ;)

(; dict ;)

def thm_854 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (thm_853 t_1) (thm_853 t_1).

(; Theorem: |- ((= ((Data.Bool.\/ t) Data.Bool.F)) t) ;)

(; dict ;)

def thm_855 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) :=
  t_1 : hol.term hol.bool => thm_34 t_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_856 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_857 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.EQ_MP (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (thm_854 t_1) (thm_855 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) => thm_856 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) t)) t)) ((= ((Data.Bool.\/ t) t)) t)) ;)

(; dict ;)

def thm_858 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) t)) t)) ((= ((Data.Bool.\/ t) t)) t)) ;)

(; dict ;)

def thm_859 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1) (thm_858 t_1) (thm_858 t_1).

(; Theorem: |- ((= ((Data.Bool.\/ t) t)) t) ;)

(; dict ;)

def thm_860 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_35 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)) ;)

(; dict ;)

def thm_861 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (thm_857 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1) (thm_859 t_1) (thm_860 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_862 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (thm_852 t_1) (thm_861 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_863 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (thm_849 t_1) (thm_862 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ;)

(; dict ;)

def thm_864 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (thm_844 t_1) (thm_863 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_865 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => thm_864 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_866 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_93 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_867 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_2) hol.true) (hol.and (hol.eq hol.bool (hol.or t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_2) t_2) (hol.and (hol.eq hol.bool (hol.or t_2 hol.false) t_2) (hol.eq hol.bool (hol.or t_2 t_2) t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_2) hol.true) (hol.and (hol.eq hol.bool (hol.or t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_2) t_2) (hol.and (hol.eq hol.bool (hol.or t_2 hol.false) t_2) (hol.eq hol.bool (hol.or t_2 t_2) t_2)))))) thm_839 thm_865 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) => thm_866 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_868 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) -> hol.proof (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_93 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_869 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (thm_867 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) => thm_868 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) t)) t) ;)

(; dict ;)

def thm_870 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) -> hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_166 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.eq hol.bool (hol.or hol.false t_1) t_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) t)) t) ;)

(; dict ;)

def thm_871 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (thm_869 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) => thm_870 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) b)) b) ;)

(; dict ;)

def thm_872 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false b_1) b_1) :=
  b_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (thm_836 t_1) (thm_871 t_1)) b_1.

(; Theorem: |- ((= (= ((Data.Bool.\/ Data.Bool.F) b))) (= b)) ;)

(; dict ;)

def thm_873 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or hol.false b_1)) (hol.eq hol.bool b_1)) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.or hol.false b_1) b_1 thm_119 (thm_872 b_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.F)) (Data.Bool.~ (Data.Bool.~ b))) ;)

(; dict ;)

def thm_874 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.not b_1) hol.false) (hol.not (hol.not b_1))) :=
  b_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_136 t_1) (hol.not b_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ b))) b) ;)

(; dict ;)

def thm_875 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.not b_1)) b_1) :=
  b_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_169 t_1) b_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.F)) b) ;)

(; dict ;)

def thm_876 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.not b_1) hol.false) b_1) :=
  b_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.imp (hol.not b_1) hol.false) (hol.not (hol.not b_1)) b_1 (thm_874 b_1) (thm_875 b_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.F))) ((= b) b)) ;)

(; dict ;)

def thm_877 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.false b_1) (hol.imp (hol.not b_1) hol.false)) (hol.eq hol.bool b_1 b_1)) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or hol.false b_1)) (hol.eq hol.bool b_1) (hol.imp (hol.not b_1) hol.false) b_1 (thm_873 b_1) (thm_876 b_1).

(; Theorem: |- ((= ((= b) b)) Data.Bool.T) ;)

(; dict ;)

def thm_878 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool b_1 b_1) hol.true) :=
  b_1 : hol.term hol.bool => (x_1 : hol.term hol.bool => thm_181 x_1) b_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.F))) Data.Bool.T) ;)

(; dict ;)

def thm_879 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.false b_1) (hol.imp (hol.not b_1) hol.false)) hol.true) :=
  b_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or hol.false b_1) (hol.imp (hol.not b_1) hol.false)) (hol.eq hol.bool b_1 b_1) hol.true (thm_877 b_1) (thm_878 b_1).

(; Theorem: |- ((= Data.Bool.T) ((= ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.F))) ;)

(; dict ;)

def thm_880 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.or hol.false b_1) (hol.imp (hol.not b_1) hol.false))) :=
  b_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.or hol.false b_1) (hol.imp (hol.not b_1) hol.false)) hol.true (thm_879 b_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.F)) ;)

(; dict ;)

def thm_881 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false b_1) (hol.imp (hol.not b_1) hol.false)) :=
  b_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.or hol.false b_1) (hol.imp (hol.not b_1) hol.false)) (thm_880 b_1) thm_5.

(; Theorem: |- ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a)) ;)

(; dict ;)

def thm_882 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.false) => hol.EQ_MP (hol.eq hol.bool (hol.or hol.false b_1) (hol.imp (hol.not b_1) hol.false)) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) (thm_834 a_2 b_1 hyp_1) (thm_881 b_1).

(; Theorem: |- ((Data.Bool.==> ((= a) Data.Bool.F)) ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a))) ;)

(; dict ;)

def thm_883 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.false) => thm_882 b_1 a_2 hyp_1.

(; Theorem: |- ((= (= (\lambda _604. ((= ((Data.Bool.\/ _604) b)) ((Data.Bool.==> (Data.Bool.~ b)) _604)) a))) (= (\lambda _604. ((= ((Data.Bool.\/ _604) b)) ((Data.Bool.==> (Data.Bool.~ b)) _604)) a))) ;)

(; dict ;)

def thm_884 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) a_1)) (hol.eq hol.bool ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) a_1))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) a_1)).

(; Theorem: |- ((= (\lambda _604. ((= ((Data.Bool.\/ _604) b)) ((Data.Bool.==> (Data.Bool.~ b)) _604)) Data.Bool.T)) ((= ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.T))) ;)

(; dict ;)

def thm_885 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__604_2 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_2 b_1) (hol.imp (hol.not b_1) __604_2)) hol.true) (hol.eq hol.bool (hol.or hol.true b_1) (hol.imp (hol.not b_1) hol.true))) :=
  b_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__604_2 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_2 b_1) (hol.imp (hol.not b_1) __604_2)) hol.true.

(; Theorem: |- ((= ((= (\lambda _604. ((= ((Data.Bool.\/ _604) b)) ((Data.Bool.==> (Data.Bool.~ b)) _604)) a)) (\lambda _604. ((= ((Data.Bool.\/ _604) b)) ((Data.Bool.==> (Data.Bool.~ b)) _604)) Data.Bool.T))) ((= (\lambda _604. ((= ((Data.Bool.\/ _604) b)) ((Data.Bool.==> (Data.Bool.~ b)) _604)) a)) ((= ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.T)))) ;)

(; dict ;)

def thm_886 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) a_1) ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) hol.true)) (hol.eq hol.bool ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) a_1) (hol.eq hol.bool (hol.or hol.true b_2) (hol.imp (hol.not b_2) hol.true)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) a_1)) (hol.eq hol.bool ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) a_1)) ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) hol.true) (hol.eq hol.bool (hol.or hol.true b_2) (hol.imp (hol.not b_2) hol.true)) (thm_884 a_1 b_2) (thm_885 b_2).

(; Theorem: |- ((= (\lambda _604. ((= ((Data.Bool.\/ _604) b)) ((Data.Bool.==> (Data.Bool.~ b)) _604)) a)) ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a))) ;)

(; dict ;)

def thm_887 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) a_1) (hol.eq hol.bool (hol.or a_1 b_2) (hol.imp (hol.not b_2) a_1))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) a_1.

(; Theorem: |- ((= (= (\lambda _604. ((= ((Data.Bool.\/ _604) b)) ((Data.Bool.==> (Data.Bool.~ b)) _604)) a))) (= ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a)))) ;)

(; dict ;)

def thm_888 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) a_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_1 b_2) (hol.imp (hol.not b_2) a_1)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) a_1) (hol.eq hol.bool (hol.or a_1 b_2) (hol.imp (hol.not b_2) a_1)) thm_119 (thm_887 a_1 b_2).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.T))) ((= ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.T))) ;)

(; dict ;)

def thm_889 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.true b_1) (hol.imp (hol.not b_1) hol.true)) (hol.eq hol.bool (hol.or hol.true b_1) (hol.imp (hol.not b_1) hol.true))) :=
  b_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or hol.true b_1) (hol.imp (hol.not b_1) hol.true)).

(; Theorem: |- ((= ((= (\lambda _604. ((= ((Data.Bool.\/ _604) b)) ((Data.Bool.==> (Data.Bool.~ b)) _604)) a)) ((= ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.T)))) ((= ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a))) ((= ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.T)))) ;)

(; dict ;)

def thm_890 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) a_1) (hol.eq hol.bool (hol.or hol.true b_2) (hol.imp (hol.not b_2) hol.true))) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_1 b_2) (hol.imp (hol.not b_2) a_1)) (hol.eq hol.bool (hol.or hol.true b_2) (hol.imp (hol.not b_2) hol.true)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) a_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_1 b_2) (hol.imp (hol.not b_2) a_1))) (hol.eq hol.bool (hol.or hol.true b_2) (hol.imp (hol.not b_2) hol.true)) (hol.eq hol.bool (hol.or hol.true b_2) (hol.imp (hol.not b_2) hol.true)) (thm_888 a_1 b_2) (thm_889 b_2).

(; Theorem: |- ((= ((= (\lambda _604. ((= ((Data.Bool.\/ _604) b)) ((Data.Bool.==> (Data.Bool.~ b)) _604)) a)) (\lambda _604. ((= ((Data.Bool.\/ _604) b)) ((Data.Bool.==> (Data.Bool.~ b)) _604)) Data.Bool.T))) ((= ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a))) ((= ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.T)))) ;)

(; dict ;)

def thm_891 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) a_1) ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_1 b_2) (hol.imp (hol.not b_2) a_1)) (hol.eq hol.bool (hol.or hol.true b_2) (hol.imp (hol.not b_2) hol.true)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) a_1) ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) hol.true)) (hol.eq hol.bool ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) a_1) (hol.eq hol.bool (hol.or hol.true b_2) (hol.imp (hol.not b_2) hol.true))) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_1 b_2) (hol.imp (hol.not b_2) a_1)) (hol.eq hol.bool (hol.or hol.true b_2) (hol.imp (hol.not b_2) hol.true))) (thm_886 a_1 b_2) (thm_890 a_1 b_2).

(; Theorem: |- ((= \lambda _604. ((= ((Data.Bool.\/ _604) b)) ((Data.Bool.==> (Data.Bool.~ b)) _604))) \lambda _604. ((= ((Data.Bool.\/ _604) b)) ((Data.Bool.==> (Data.Bool.~ b)) _604))) ;)

(; dict ;)

def thm_892 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__604_2 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_2 b_1) (hol.imp (hol.not b_1) __604_2)) (__604_2 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_2 b_1) (hol.imp (hol.not b_1) __604_2))) :=
  b_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__604_2 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_2 b_1) (hol.imp (hol.not b_1) __604_2)).

(; Theorem: |- ((= a) Data.Bool.T) ;)

(; dict ;)

def thm_893 : a_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) -> hol.proof (hol.eq hol.bool a_1 hol.true) :=
  a_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) => hyp_1.

(; Theorem: |- ((= (\lambda _604. ((= ((Data.Bool.\/ _604) b)) ((Data.Bool.==> (Data.Bool.~ b)) _604)) a)) (\lambda _604. ((= ((Data.Bool.\/ _604) b)) ((Data.Bool.==> (Data.Bool.~ b)) _604)) Data.Bool.T)) ;)

(; dict ;)

def thm_894 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) -> hol.proof (hol.eq hol.bool ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) a_1) ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) hol.true)) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) => hol.APP_THM hol.bool hol.bool (__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) (__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_2) (hol.imp (hol.not b_2) __604_3)) a_1 hol.true (thm_892 b_2) (thm_893 a_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a))) ((= ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.T))) ;)

(; dict ;)

def thm_895 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) (hol.eq hol.bool (hol.or hol.true b_1) (hol.imp (hol.not b_1) hol.true))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_1) (hol.imp (hol.not b_1) __604_3)) a_2) ((__604_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __604_3 b_1) (hol.imp (hol.not b_1) __604_3)) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) (hol.eq hol.bool (hol.or hol.true b_1) (hol.imp (hol.not b_1) hol.true))) (thm_891 a_2 b_1) (thm_894 a_2 b_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.T))) ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a))) ;)

(; dict ;)

def thm_896 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.true b_2) (hol.imp (hol.not b_2) hol.true)) (hol.eq hol.bool (hol.or a_1 b_2) (hol.imp (hol.not b_2) a_1))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) => hol.SYM hol.bool (hol.eq hol.bool (hol.or a_1 b_2) (hol.imp (hol.not b_2) a_1)) (hol.eq hol.bool (hol.or hol.true b_2) (hol.imp (hol.not b_2) hol.true)) (thm_895 b_2 a_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) b)) Data.Bool.T) ;)

(; dict ;)

def thm_897 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.true b_1) hol.true) :=
  b_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_842 t_1) b_1.

(; Theorem: |- ((= (= ((Data.Bool.\/ Data.Bool.T) b))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_898 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or hol.true b_1)) (hol.eq hol.bool hol.true)) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.or hol.true b_1) hol.true thm_119 (thm_897 b_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_899 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.not b_1) hol.true) hol.true) :=
  b_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_106 t_1) (hol.not b_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.T))) ((= Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_900 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.true b_1) (hol.imp (hol.not b_1) hol.true)) (hol.eq hol.bool hol.true hol.true)) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or hol.true b_1)) (hol.eq hol.bool hol.true) (hol.imp (hol.not b_1) hol.true) hol.true (thm_898 b_1) (thm_899 b_1).

(; Theorem: |- ((= ((= Data.Bool.T) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_901 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true hol.true) hol.true) :=
  (t_1 : hol.term hol.bool => thm_222 t_1) hol.true.

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.T))) Data.Bool.T) ;)

(; dict ;)

def thm_902 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.true b_1) (hol.imp (hol.not b_1) hol.true)) hol.true) :=
  b_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or hol.true b_1) (hol.imp (hol.not b_1) hol.true)) (hol.eq hol.bool hol.true hol.true) hol.true (thm_900 b_1) thm_901.

(; Theorem: |- ((= Data.Bool.T) ((= ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.T))) ;)

(; dict ;)

def thm_903 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.or hol.true b_1) (hol.imp (hol.not b_1) hol.true))) :=
  b_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.or hol.true b_1) (hol.imp (hol.not b_1) hol.true)) hol.true (thm_902 b_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.==> (Data.Bool.~ b)) Data.Bool.T)) ;)

(; dict ;)

def thm_904 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.true b_1) (hol.imp (hol.not b_1) hol.true)) :=
  b_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.or hol.true b_1) (hol.imp (hol.not b_1) hol.true)) (thm_903 b_1) thm_5.

(; Theorem: |- ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a)) ;)

(; dict ;)

def thm_905 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.true) => hol.EQ_MP (hol.eq hol.bool (hol.or hol.true b_1) (hol.imp (hol.not b_1) hol.true)) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) (thm_896 a_2 b_1 hyp_1) (thm_904 b_1).

(; Theorem: |- ((Data.Bool.==> ((= a) Data.Bool.T)) ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a))) ;)

(; dict ;)

def thm_906 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.true) => thm_905 b_1 a_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((= a) Data.Bool.T)) ((= a) Data.Bool.F)) ;)

(; dict ;)

def thm_907 : a_1 : hol.term hol.bool -> hol.proof (hol.or (hol.eq hol.bool a_1 hol.true) (hol.eq hol.bool a_1 hol.false)) :=
  a_1 : hol.term hol.bool => thm_16 a_1.

(; Theorem: |- ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a)) ;)

(; dict ;)

def thm_908 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool a_2 hol.false)) -> hol.proof (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool a_2 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a)) ;)

(; dict ;)

def thm_909 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2))) -> hol.proof (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool a_2 hol.false)) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) (thm_907 a_2) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool a_2 hol.false)) => thm_908 b_1 a_2 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a)) ;)

(; dict ;)

def thm_910 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2))) -> hol.proof (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2))) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) (thm_906 b_1 a_2) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2))) => thm_909 b_1 a_2 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool.\/ a) b)) ((Data.Bool.==> (Data.Bool.~ b)) a)) ;)

(; dict ;)

def thm_911 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2))) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) (thm_883 b_1 a_2) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2))) => thm_910 b_1 a_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192)) (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194))))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192))) ;)

(; dict ;)

def thm_912 : B : hol.type -> A : hol.type -> __1194_1 : hol.term B -> __1193_2 : hol.term A -> __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))) (hol.imp (hol.not (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3))) :=
  B : hol.type => A : hol.type => __1194_1 : hol.term B => __1193_2 : hol.term A => __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) (thm_821 b_1 a_2) (hol.EQ_MP (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) (thm_820 b_1 a_2) (hol.EQ_MP (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) (hol.eq hol.bool (hol.or a_2 b_1) (hol.imp (hol.not b_1) a_2)) (thm_820 b_1 a_2) (thm_911 b_1 a_2)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ a))) a)) ((= (Data.Bool.~ (Data.Bool.~ a))) a)) ;)

(; dict ;)

def thm_913 : a_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not a_1)) a_1) (hol.eq hol.bool (hol.not (hol.not a_1)) a_1)) :=
  a_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.not a_1)) a_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ a))) a)) ((= (Data.Bool.~ (Data.Bool.~ a))) a)) ;)

(; dict ;)

def thm_914 : a_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not a_1)) a_1) (hol.eq hol.bool (hol.not (hol.not a_1)) a_1)) :=
  a_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.not a_1)) a_1) (hol.eq hol.bool (hol.not (hol.not a_1)) a_1) (hol.eq hol.bool (hol.not (hol.not a_1)) a_1) (thm_913 a_1) (thm_913 a_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ a))) a) ;)

(; dict ;)

def thm_915 : a_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.not a_1)) a_1) :=
  a_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_169 t_1) a_1.

(; Theorem: |- ((= (= (Data.Bool.~ (Data.Bool.~ a)))) (= a)) ;)

(; dict ;)

def thm_916 : a_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.not a_1))) (hol.eq hol.bool a_1)) :=
  a_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.not a_1)) a_1 thm_119 (thm_915 a_1).

(; Theorem: |- ((= a) a) ;)

(; dict ;)

def thm_917 : a_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool a_1 a_1) :=
  a_1 : hol.term hol.bool => hol.REFL hol.bool a_1.

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ a))) a)) ((= a) a)) ;)

(; dict ;)

def thm_918 : a_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not a_1)) a_1) (hol.eq hol.bool a_1 a_1)) :=
  a_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.not a_1))) (hol.eq hol.bool a_1) a_1 a_1 (thm_916 a_1) (thm_917 a_1).

(; Theorem: |- ((= ((= a) a)) Data.Bool.T) ;)

(; dict ;)

def thm_919 : a_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool a_1 a_1) hol.true) :=
  a_1 : hol.term hol.bool => (x_1 : hol.term hol.bool => thm_181 x_1) a_1.

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ a))) a)) Data.Bool.T) ;)

(; dict ;)

def thm_920 : a_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not a_1)) a_1) hol.true) :=
  a_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.not a_1)) a_1) (hol.eq hol.bool a_1 a_1) hol.true (thm_918 a_1) (thm_919 a_1).

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ (Data.Bool.~ a))) a)) ;)

(; dict ;)

def thm_921 : a_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (hol.not a_1)) a_1)) :=
  a_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.not a_1)) a_1) hol.true (thm_920 a_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194))))) ((= _1192) ((HOLLight.mk_pair _1193) _1194))) ;)

(; dict ;)

def thm_922 : B : hol.type -> A : hol.type -> __1194_1 : hol.term B -> __1193_2 : hol.term A -> __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))) :=
  B : hol.type => A : hol.type => __1194_1 : hol.term B => __1193_2 : hol.term A => __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (a_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.not a_1)) a_1) (hol.eq hol.bool (hol.not (hol.not a_1)) a_1) (thm_914 a_1) (hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (hol.not a_1)) a_1) (thm_921 a_1) thm_5)) (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.~ (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194)))))) (Data.Bool.==> ((= _1192) ((HOLLight.mk_pair _1193) _1194)))) ;)

(; dict ;)

def thm_923 : B : hol.type -> A : hol.type -> __1194_1 : hol.term B -> __1193_2 : hol.term A -> __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.not (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))))) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))) :=
  B : hol.type => A : hol.type => __1194_1 : hol.term B => __1193_2 : hol.term A => __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.not (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)) thm_387 (thm_922 B A __1194_1 __1193_2 __1192_3).

(; Theorem: |- ((= ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192)) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192)) ;)

(; dict ;)

def thm_924 : B : hol.type -> A : hol.type -> __1192_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_1)) __1192_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_1)) __1192_1)) :=
  B : hol.type => A : hol.type => __1192_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_1)) __1192_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192))) ((Data.Bool.==> ((= _1192) ((HOLLight.mk_pair _1193) _1194))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192))) ;)

(; dict ;)

def thm_925 : B : hol.type -> A : hol.type -> __1194_1 : hol.term B -> __1193_2 : hol.term A -> __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3))) :=
  B : hol.type => A : hol.type => __1194_1 : hol.term B => __1193_2 : hol.term A => __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.not (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))))) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (thm_923 B A __1194_1 __1193_2 __1192_3) (thm_924 B A __1192_3).

(; Theorem: |- ((= ((Data.Bool.\/ ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192)) (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194))))) ((Data.Bool.==> ((= _1192) ((HOLLight.mk_pair _1193) _1194))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192))) ;)

(; dict ;)

def thm_926 : B : hol.type -> A : hol.type -> __1194_1 : hol.term B -> __1193_2 : hol.term A -> __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3))) :=
  B : hol.type => A : hol.type => __1194_1 : hol.term B => __1193_2 : hol.term A => __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))) (hol.imp (hol.not (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)) (thm_912 B A __1194_1 __1193_2 __1192_3) (thm_925 B A __1194_1 __1193_2 __1192_3).

(; Theorem: |- ((= ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ;)

(; dict ;)

def thm_927 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)).

(; Theorem: |- ((= ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ;)

(; dict ;)

def thm_928 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (thm_927 q_1 p_2) (thm_927 q_1 p_2).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))))))) ;)

(; dict ;)

def thm_929 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)))))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))))))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)))))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))))))) ;)

(; dict ;)

def thm_930 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)))))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))))))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)))))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)))))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)))))))) thm_929 thm_929.

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))))))))) ;)

(; dict ;)

def thm_931 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))))))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)))))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)))))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)))))))) thm_65 thm_930.

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))))))) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))))))) ;)

(; dict ;)

def thm_932 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))))))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)))))))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))))))).

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))))))) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))))))) ;)

(; dict ;)

def thm_933 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))))))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)))))))) :=
  p_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))))))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))))))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))))))) (thm_932 p_1) (thm_932 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))))))) (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))))))) ;)

(; dict ;)

def thm_934 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)))))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))))))))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))))))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))))))) thm_65 (thm_933 p_1).

(; Theorem: |- ((= \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))))) \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))))) ;)

(; dict ;)

def thm_935 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_2 q_1) r_3) (hol.or p_2 (hol.or q_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)))))) (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_2 q_1) r_3) (hol.or p_2 (hol.or q_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1))))))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_2 q_1) r_3) (hol.or p_2 (hol.or q_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)))))).

(; Theorem: |- ((= \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))))) \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))))) ;)

(; dict ;)

def thm_936 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_2 q_1) r_3) (hol.or p_2 (hol.or q_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)))))) (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_2 q_1) r_3) (hol.or p_2 (hol.or q_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1))))))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_2 q_1) r_3) (hol.or p_2 (hol.or q_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)))))) (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_2 q_1) r_3) (hol.or p_2 (hol.or q_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)))))) (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_2 q_1) r_3) (hol.or p_2 (hol.or q_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)))))) (thm_935 q_1 p_2) (thm_935 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))))))) (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))))))) ;)

(; dict ;)

def thm_937 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_2 q_1) r_3) (hol.or p_2 (hol.or q_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1))))))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_2 q_1) r_3) (hol.or p_2 (hol.or q_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)))))))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_2 q_1) r_3) (hol.or p_2 (hol.or q_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)))))) (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_2 q_1) r_3) (hol.or p_2 (hol.or q_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)))))) thm_65 (thm_936 q_1 p_2).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1))) ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1))) ;)

(; dict ;)

def thm_938 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t1_2 t2_1) (hol.or t2_1 t1_2)) (hol.eq hol.bool (hol.or t1_2 t2_1) (hol.or t2_1 t1_2))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or t1_2 t2_1) (hol.or t2_1 t1_2)).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1))) ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1))) ;)

(; dict ;)

def thm_939 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t1_2 t2_1) (hol.or t2_1 t1_2)) (hol.eq hol.bool (hol.or t1_2 t2_1) (hol.or t2_1 t1_2))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or t1_2 t2_1) (hol.or t2_1 t1_2)) (hol.eq hol.bool (hol.or t1_2 t2_1) (hol.or t2_1 t1_2)) (hol.eq hol.bool (hol.or t1_2 t2_1) (hol.or t2_1 t1_2)) (thm_938 t2_1 t1_2) (thm_938 t2_1 t1_2).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1))) ;)

(; dict ;)

def thm_940 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1))) :=
  t1_1 : hol.term hol.bool => thm_36 t1_1.

(; Theorem: |- ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1)) ;)

(; dict ;)

def thm_941 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t1_2 t2_1) (hol.or t2_1 t1_2)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_940 t1_2 t2_1.

(; Theorem: |- ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p)) ;)

(; dict ;)

def thm_942 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or t1_2 t2_1) (hol.or t2_1 t1_2)) (hol.eq hol.bool (hol.or t1_2 t2_1) (hol.or t2_1 t1_2)) (thm_939 t2_1 t1_2) (thm_941 t2_1 t1_2)) q_1 p_2.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))))) ;)

(; dict ;)

def thm_943 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or p_3 q_2) (hol.or q_2 p_3)) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2))))) (hol.and (hol.eq hol.bool (hol.or p_3 q_2) (hol.or q_2 p_3)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2))))))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or p_3 q_2) (hol.or q_2 p_3)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or p_3 q_2) (hol.or q_2 p_3)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2))))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))))) ;)

(; dict ;)

def thm_944 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2))))) (hol.and (hol.eq hol.bool (hol.or p_3 q_2) (hol.or q_2 p_3)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2))))))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or p_3 q_2) (hol.or q_2 p_3)) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2))))) (hol.and (hol.eq hol.bool (hol.or p_3 q_2) (hol.or q_2 p_3)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2))))))) (thm_942 q_2 p_3) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or p_3 q_2) (hol.or q_2 p_3)) => thm_943 r_1 q_2 p_3 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))) ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))) ;)

(; dict ;)

def thm_945 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1))) (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1)))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))) ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))) ;)

(; dict ;)

def thm_946 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1))) (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1)))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1))) (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1))) (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1))) (thm_945 t3_1 t2_2 t1_3) (thm_945 t3_1 t2_2 t1_3).

(; Theorem: |- (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))))) ;)

(; dict ;)

def thm_947 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3))))) :=
  t1_1 : hol.term hol.bool => thm_37 t1_1.

(; Theorem: |- (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))) ;)

(; dict ;)

def thm_948 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_2 t2_1) t3_3) (hol.or t1_2 (hol.or t2_1 t3_3)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_947 t1_2 t2_1.

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ;)

(; dict ;)

def thm_949 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => thm_948 t2_2 t1_3 t3_1.

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ;)

(; dict ;)

def thm_950 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => (t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1))) (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1))) (thm_946 t3_1 t2_2 t1_3) (thm_949 t3_1 t2_2 t1_3)) r_1 q_2 p_3.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))))) ;)

(; dict ;)

def thm_951 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2)))) (hol.and (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2)))))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))))) ;)

(; dict ;)

def thm_952 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2)))) (hol.and (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2)))))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2)))) (hol.and (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2)))))) (thm_950 r_1 q_2 p_3) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) => thm_951 r_1 q_2 p_3 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ;)

(; dict ;)

def thm_953 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1)))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ;)

(; dict ;)

def thm_954 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1)))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (thm_953 r_1 q_2 p_3) (thm_953 r_1 q_2 p_3).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))))) ;)

(; dict ;)

def thm_955 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))))) ;)

(; dict ;)

def thm_956 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))))) thm_955 thm_955.

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r))))))) ;)

(; dict ;)

def thm_957 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))))) thm_65 thm_956.

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r))))) \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r))))) ;)

(; dict ;)

def thm_958 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3)))).

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r))))) \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r))))) ;)

(; dict ;)

def thm_959 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))))) :=
  p_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3)))) (thm_958 p_1) (thm_958 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))))) (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))))) ;)

(; dict ;)

def thm_960 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3)))))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3)))) thm_65 (thm_959 p_1).

(; Theorem: |- ((= \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ;)

(; dict ;)

def thm_961 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))).

(; Theorem: |- ((= \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ;)

(; dict ;)

def thm_962 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))) (thm_961 q_1 p_2) (thm_961 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r))))) (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r))))) ;)

(; dict ;)

def thm_963 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3)))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))) thm_65 (thm_962 q_1 p_2).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3))) ((= ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3))) ;)

(; dict ;)

def thm_964 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1)) (hol.eq hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1)).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3))) ((= ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3))) ;)

(; dict ;)

def thm_965 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1)) (hol.eq hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1)) (hol.eq hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1)) (hol.eq hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1)) (thm_964 t3_1 t2_2 t1_3) (thm_964 t3_1 t2_2 t1_3).

(; Theorem: |- ((= ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ;)

(; dict ;)

def thm_966 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1)) -> hol.proof (hol.eq hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1)) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ;)

(; dict ;)

def thm_967 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1)) -> hol.proof (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1)) => hol.SYM hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1) (thm_966 t3_1 t2_2 t1_3 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ;)

(; dict ;)

def thm_968 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1))) -> hol.proof (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1))) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ;)

(; dict ;)

def thm_969 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1))) -> hol.proof (hol.eq hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1))) => hol.SYM hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1)) (thm_968 t3_1 t2_2 t1_3 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))) ((= ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3))) ;)

(; dict ;)

def thm_970 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1))) (hol.eq hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.PROP_EXT (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1))) (hol.eq hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1)) => thm_967 t3_1 t2_2 t1_3 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1))) => thm_969 t3_1 t2_2 t1_3 hyp_1).

(; Theorem: |- ((= \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))) \lambda t3. ((= ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3))) ;)

(; dict ;)

def thm_971 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_2 t2_1) t3_3) (hol.or t1_2 (hol.or t2_1 t3_3))) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_2 (hol.or t2_1 t3_3)) (hol.or (hol.or t1_2 t2_1) t3_3))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.ABS_THM hol.bool hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_2 t2_1) t3_3) (hol.or t1_2 (hol.or t2_1 t3_3))) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_2 (hol.or t2_1 t3_3)) (hol.or (hol.or t1_2 t2_1) t3_3)) (t3_3 : hol.term hol.bool => thm_970 t3_3 t2_1 t1_2).

(; Theorem: |- ((= (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))))) (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)))) ;)

(; dict ;)

def thm_972 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_2 t2_1) t3_3) (hol.or t1_2 (hol.or t2_1 t3_3)))) (hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_2 (hol.or t2_1 t3_3)) (hol.or (hol.or t1_2 t2_1) t3_3)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_2 t2_1) t3_3) (hol.or t1_2 (hol.or t2_1 t3_3))) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_2 (hol.or t2_1 t3_3)) (hol.or (hol.or t1_2 t2_1) t3_3)) thm_65 (thm_971 t2_1 t1_2).

(; Theorem: |- ((= \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))))) \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)))) ;)

(; dict ;)

def thm_973 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 (hol.or t2_2 t3_3)) (hol.or (hol.or t1_1 t2_2) t3_3)))) :=
  t1_1 : hol.term hol.bool => hol.ABS_THM hol.bool hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 (hol.or t2_2 t3_3)) (hol.or (hol.or t1_1 t2_2) t3_3))) (t2_2 : hol.term hol.bool => thm_972 t2_2 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))))) (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3))))) ;)

(; dict ;)

def thm_974 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3))))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 (hol.or t2_2 t3_3)) (hol.or (hol.or t1_1 t2_2) t3_3))))) :=
  t1_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 (hol.or t2_2 t3_3)) (hol.or (hol.or t1_1 t2_2) t3_3))) thm_65 (thm_973 t1_1).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))))) \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3))))) ;)

(; dict ;)

def thm_975 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 (hol.or t2_2 t3_3)) (hol.or (hol.or t1_1 t2_2) t3_3))))) :=
  hol.ABS_THM hol.bool hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 (hol.or t2_2 t3_3)) (hol.or (hol.or t1_1 t2_2) t3_3)))) (t1_1 : hol.term hol.bool => thm_974 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)))))) ;)

(; dict ;)

def thm_976 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 (hol.or t2_2 t3_3)) (hol.or (hol.or t1_1 t2_2) t3_3)))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 (hol.or t2_2 t3_3)) (hol.or (hol.or t1_1 t2_2) t3_3)))) thm_65 thm_975.

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3))))) ;)

(; dict ;)

def thm_977 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 (hol.or t2_2 t3_3)) (hol.or (hol.or t1_1 t2_2) t3_3))))) :=
  hol.EQ_MP (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 (hol.or t2_2 t3_3)) (hol.or (hol.or t1_1 t2_2) t3_3))))) thm_976 thm_37.

(; Theorem: |- (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)))) ;)

(; dict ;)

def thm_978 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 (hol.or t2_2 t3_3)) (hol.or (hol.or t1_1 t2_2) t3_3)))) :=
  t1_1 : hol.term hol.bool => thm_977 t1_1.

(; Theorem: |- (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3))) ;)

(; dict ;)

def thm_979 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_2 (hol.or t2_1 t3_3)) (hol.or (hol.or t1_2 t2_1) t3_3))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_978 t1_2 t2_1.

(; Theorem: |- ((= ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ;)

(; dict ;)

def thm_980 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => thm_979 t2_2 t1_3 t3_1.

(; Theorem: |- ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ;)

(; dict ;)

def thm_981 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or (hol.or p_3 q_2) r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => (t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1)) (hol.eq hol.bool (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1)) (thm_965 t3_1 t2_2 t1_3) (thm_980 t3_1 t2_2 t1_3)) r_1 q_2 p_3.

(; Theorem: |- ((= (= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) (= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r))) ;)

(; dict ;)

def thm_982 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1))) (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.or p_3 (hol.or q_2 r_1)) (hol.or (hol.or p_3 q_2) r_1) thm_119 (thm_981 r_1 q_2 p_3).

(; Theorem: |- ((= ((Data.Bool.\/ q) ((Data.Bool.\/ p) r))) ((Data.Bool.\/ ((Data.Bool.\/ q) p)) r)) ;)

(; dict ;)

def thm_983 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or q_3 (hol.or p_2 r_1)) (hol.or (hol.or q_3 p_2) r_1)) :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => (t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => thm_980 t3_1 t2_2 t1_3) r_1 p_2 q_3.

(; Theorem: |- ((= ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool.\/ q) p)) r))) ;)

(; dict ;)

def thm_984 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or (hol.or q_2 p_3) r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1))) (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1)) (hol.or q_2 (hol.or p_3 r_1)) (hol.or (hol.or q_2 p_3) r_1) (thm_982 r_1 q_2 p_3) (thm_983 r_1 p_3 q_2).

(; Theorem: |- ((= ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool.\/ q) p)) r))) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ;)

(; dict ;)

def thm_985 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or (hol.or q_2 p_3) r_1)) (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1)))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or (hol.or q_2 p_3) r_1)) (thm_984 r_1 q_2 p_3).

(; Theorem: |- ((= (Data.Bool.\/ ((Data.Bool.\/ p) q))) (Data.Bool.\/ ((Data.Bool.\/ q) p))) ;)

(; dict ;)

def thm_986 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.or p_2 q_1)) (hol.or (hol.or q_1 p_2))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.or p_2 q_1) (hol.or q_1 p_2) thm_431 (thm_942 q_1 p_2).

(; Theorem: |- ((= r) r) ;)

(; dict ;)

def thm_987 : r_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool r_1 r_1) :=
  r_1 : hol.term hol.bool => hol.REFL hol.bool r_1.

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool.\/ q) p)) r)) ;)

(; dict ;)

def thm_988 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or (hol.or q_2 p_3) r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.or (hol.or p_3 q_2)) (hol.or (hol.or q_2 p_3)) r_1 r_1 (thm_986 q_2 p_3) (thm_987 r_1).

(; Theorem: |- ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r))) ;)

(; dict ;)

def thm_989 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or (hol.or q_2 p_3) r_1)) (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (thm_985 r_1 q_2 p_3) (thm_988 r_1 q_2 p_3).

(; Theorem: |- (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ;)

(; dict ;)

def thm_990 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => thm_989 r_3 q_1 p_2.

(; Theorem: |- (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r))))) ;)

(; dict ;)

def thm_991 : p_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3)))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3)))) (thm_963 q_2 p_1) (thm_990 q_2 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))))) ;)

(; dict ;)

def thm_992 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3)))))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))))) (thm_960 p_1) (thm_991 p_1).

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))) ;)

(; dict ;)

def thm_993 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2))))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))) ;)

(; dict ;)

def thm_994 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2))))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2))))) (hol.EQ_MP (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (thm_954 r_1 q_2 p_3) (hol.EQ_MP (hol.forall hol.bool (p_4 : hol.term hol.bool => hol.forall hol.bool (q_5 : hol.term hol.bool => hol.forall hol.bool (r_6 : hol.term hol.bool => hol.eq hol.bool (hol.or p_4 (hol.or q_5 r_6)) (hol.or q_5 (hol.or p_4 r_6)))))) (hol.forall hol.bool (p_4 : hol.term hol.bool => hol.forall hol.bool (q_5 : hol.term hol.bool => hol.forall hol.bool (r_6 : hol.term hol.bool => hol.eq hol.bool (hol.or p_4 (hol.or q_5 r_6)) (hol.or q_5 (hol.or p_4 r_6)))))) thm_957 thm_992 p_3 q_2 r_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) => thm_993 r_1 q_2 p_3 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ p) p)) p) ;)

(; dict ;)

def thm_995 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or p_1 p_1) p_1) :=
  p_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_860 t_1) p_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))) ;)

(; dict ;)

def thm_996 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or p_2 p_2) p_2) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)) (hol.and (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or p_2 p_2) p_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))) ;)

(; dict ;)

def thm_997 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)) (hol.and (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)) (hol.and (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)))) (thm_995 p_2) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or p_2 p_2) p_2) => thm_996 q_1 p_2 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))) ;)

(; dict ;)

def thm_998 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)).

(; Theorem: |- ((= ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))) ;)

(; dict ;)

def thm_999 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)) (thm_998 q_1 p_2) (thm_998 q_1 p_2).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))) ;)

(; dict ;)

def thm_1000 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))) ;)

(; dict ;)

def thm_1001 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))) thm_1000 thm_1000.

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))) ;)

(; dict ;)

def thm_1002 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))) thm_65 thm_1001.

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))) \lambda q. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))) ;)

(; dict ;)

def thm_1003 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))) \lambda q. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))) ;)

(; dict ;)

def thm_1004 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))) :=
  p_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)) (thm_1003 p_1) (thm_1003 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))) (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))) ;)

(; dict ;)

def thm_1005 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)) thm_65 (thm_1004 p_1).

(; Theorem: |- ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ ((Data.Bool.\/ p) p)) q)) ;)

(; dict ;)

def thm_1006 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or (hol.or p_2 p_2) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => (t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => thm_980 t3_1 t2_2 t1_3) q_1 p_2 p_2.

(; Theorem: |- ((= (= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q)))) (= ((Data.Bool.\/ ((Data.Bool.\/ p) p)) q))) ;)

(; dict ;)

def thm_1007 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1))) (hol.eq hol.bool (hol.or (hol.or p_2 p_2) q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.or p_2 (hol.or p_2 q_1)) (hol.or (hol.or p_2 p_2) q_1) thm_119 (thm_1006 q_1 p_2).

(; Theorem: |- ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) q)) ;)

(; dict ;)

def thm_1008 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or p_2 q_1) (hol.or p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.or p_2 q_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))) ((= ((Data.Bool.\/ ((Data.Bool.\/ p) p)) q)) ((Data.Bool.\/ p) q))) ;)

(; dict ;)

def thm_1009 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)) (hol.eq hol.bool (hol.or (hol.or p_2 p_2) q_1) (hol.or p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1))) (hol.eq hol.bool (hol.or (hol.or p_2 p_2) q_1)) (hol.or p_2 q_1) (hol.or p_2 q_1) (thm_1007 q_1 p_2) (thm_1008 q_1 p_2).

(; Theorem: |- ((= ((= ((Data.Bool.\/ ((Data.Bool.\/ p) p)) q)) ((Data.Bool.\/ p) q))) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))) ;)

(; dict ;)

def thm_1010 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.or p_2 p_2) q_1) (hol.or p_2 q_1)) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)) (hol.eq hol.bool (hol.or (hol.or p_2 p_2) q_1) (hol.or p_2 q_1)) (thm_1009 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.\/ ((Data.Bool.\/ p) p))) (Data.Bool.\/ p)) ;)

(; dict ;)

def thm_1011 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.or p_1 p_1)) (hol.or p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.or p_1 p_1) p_1 thm_431 (thm_995 p_1).

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ p) p)) q)) ((Data.Bool.\/ p) q)) ;)

(; dict ;)

def thm_1012 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.or p_2 p_2) q_1) (hol.or p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.or (hol.or p_2 p_2)) (hol.or p_2) q_1 q_1 (thm_1011 p_2) (thm_81 q_1).

(; Theorem: |- ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)) ;)

(; dict ;)

def thm_1013 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or (hol.or p_2 p_2) q_1) (hol.or p_2 q_1)) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)) (thm_1010 q_1 p_2) (thm_1012 q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))) ;)

(; dict ;)

def thm_1014 : p_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => thm_1013 q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))) ;)

(; dict ;)

def thm_1015 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))) (thm_1005 p_1) (thm_1014 p_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))) ;)

(; dict ;)

def thm_1016 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)) (hol.and (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1))) (thm_997 q_1 p_2) (hol.EQ_MP (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)) (thm_999 q_1 p_2) (hol.EQ_MP (hol.forall hol.bool (p_3 : hol.term hol.bool => hol.forall hol.bool (q_4 : hol.term hol.bool => hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_4)) (hol.or p_3 q_4)))) (hol.forall hol.bool (p_3 : hol.term hol.bool => hol.forall hol.bool (q_4 : hol.term hol.bool => hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_4)) (hol.or p_3 q_4)))) thm_1002 thm_1015 p_2 q_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))) ;)

(; dict ;)

def thm_1017 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2)))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2)))) (thm_994 r_1 q_2 p_3) (thm_1016 q_2 p_3).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))) ;)

(; dict ;)

def thm_1018 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2))))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2)))) (hol.and (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2))))) (thm_952 r_1 q_2 p_3) (thm_1017 r_1 q_2 p_3).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))))) ;)

(; dict ;)

def thm_1019 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or p_3 q_2) (hol.or q_2 p_3)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2)))))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2))))) (hol.and (hol.eq hol.bool (hol.or p_3 q_2) (hol.or q_2 p_3)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2)))))) (thm_944 r_1 q_2 p_3) (thm_1018 r_1 q_2 p_3).

(; Theorem: |- (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))))) ;)

(; dict ;)

def thm_1020 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_2 q_1) r_3) (hol.or p_2 (hol.or q_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 (hol.or q_1 r_3)) (hol.or q_1 (hol.or p_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1))))))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => thm_1019 r_3 q_1 p_2.

(; Theorem: |- (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q)))))))) ;)

(; dict ;)

def thm_1021 : p_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)))))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))))))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))))))) (thm_937 q_2 p_1) (thm_1020 q_2 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p))) ((Data.Bool./\ ((= ((Data.Bool.\/ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ p) ((Data.Bool.\/ q) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ q) ((Data.Bool.\/ p) r)))) ((Data.Bool./\ ((= ((Data.Bool.\/ p) p)) p)) ((= ((Data.Bool.\/ p) ((Data.Bool.\/ p) q))) ((Data.Bool.\/ p) q))))))))) ;)

(; dict ;)

def thm_1022 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2))))))))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)))))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_1 q_2) (hol.or q_2 p_1)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_1 q_2) r_3) (hol.or p_1 (hol.or q_2 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 (hol.or q_2 r_3)) (hol.or q_2 (hol.or p_1 r_3))) (hol.and (hol.eq hol.bool (hol.or p_1 p_1) p_1) (hol.eq hol.bool (hol.or p_1 (hol.or p_1 q_2)) (hol.or p_1 q_2)))))))) (thm_934 p_1) (thm_1021 p_1).

(; Theorem: |- ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p)) ;)

(; dict ;)

def thm_1023 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or p_3 q_2) (hol.or q_2 p_3)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2)))))) -> hol.proof (hol.eq hol.bool (hol.or p_3 q_2) (hol.or q_2 p_3)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or p_3 q_2) (hol.or q_2 p_3)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2)))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_166 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.or (hol.or p_3 q_2) r_1) (hol.or p_3 (hol.or q_2 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_2 r_1)) (hol.or q_2 (hol.or p_3 r_1))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2))))) (hol.eq hol.bool (hol.or p_3 q_2) (hol.or q_2 p_3)) hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ p) q)) ((Data.Bool.\/ q) p)) ;)

(; dict ;)

def thm_1024 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_2 q_1) (hol.witness hol.bool)) (hol.or p_2 (hol.or q_1 (hol.witness hol.bool)))) (hol.and (hol.eq hol.bool (hol.or p_2 (hol.or q_1 (hol.witness hol.bool))) (hol.or q_1 (hol.or p_2 (hol.witness hol.bool)))) (hol.and (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)))))) (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.EQ_MP (hol.forall hol.bool (p_3 : hol.term hol.bool => hol.forall hol.bool (q_4 : hol.term hol.bool => hol.forall hol.bool (r_5 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_3 q_4) (hol.or q_4 p_3)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_3 q_4) r_5) (hol.or p_3 (hol.or q_4 r_5))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_4 r_5)) (hol.or q_4 (hol.or p_3 r_5))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_4)) (hol.or p_3 q_4))))))))) (hol.forall hol.bool (p_3 : hol.term hol.bool => hol.forall hol.bool (q_4 : hol.term hol.bool => hol.forall hol.bool (r_5 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or p_3 q_4) (hol.or q_4 p_3)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_3 q_4) r_5) (hol.or p_3 (hol.or q_4 r_5))) (hol.and (hol.eq hol.bool (hol.or p_3 (hol.or q_4 r_5)) (hol.or q_4 (hol.or p_3 r_5))) (hol.and (hol.eq hol.bool (hol.or p_3 p_3) p_3) (hol.eq hol.bool (hol.or p_3 (hol.or p_3 q_4)) (hol.or p_3 q_4))))))))) thm_931 thm_1022 p_2 q_1 (hol.witness hol.bool)) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.and (hol.eq hol.bool (hol.or (hol.or p_2 q_1) (hol.witness hol.bool)) (hol.or p_2 (hol.or q_1 (hol.witness hol.bool)))) (hol.and (hol.eq hol.bool (hol.or p_2 (hol.or q_1 (hol.witness hol.bool))) (hol.or q_1 (hol.or p_2 (hol.witness hol.bool)))) (hol.and (hol.eq hol.bool (hol.or p_2 p_2) p_2) (hol.eq hol.bool (hol.or p_2 (hol.or p_2 q_1)) (hol.or p_2 q_1)))))) => thm_1023 (hol.witness hol.bool) q_1 p_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192))) ((Data.Bool.\/ ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192)) (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194))))) ;)

(; dict ;)

def thm_1025 : B : hol.type -> A : hol.type -> __1194_1 : hol.term B -> __1193_2 : hol.term A -> __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))))) :=
  B : hol.type => A : hol.type => __1194_1 : hol.term B => __1193_2 : hol.term A => __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (hol.eq hol.bool (hol.or p_2 q_1) (hol.or q_1 p_2)) (thm_928 q_1 p_2) (thm_1024 q_1 p_2)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))).

(; Theorem: |- ((= (= ((Data.Bool.\/ (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192)))) (= ((Data.Bool.\/ ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192)) (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194)))))) ;)

(; dict ;)

def thm_1026 : B : hol.type -> A : hol.type -> __1194_1 : hol.term B -> __1193_2 : hol.term A -> __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3))) (hol.eq hol.bool (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))))) :=
  B : hol.type => A : hol.type => __1194_1 : hol.term B => __1193_2 : hol.term A => __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))) thm_119 (thm_1025 B A __1194_1 __1193_2 __1192_3).

(; Theorem: |- ((= ((Data.Bool.\/ ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192)) (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194))))) ((Data.Bool.\/ ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192)) (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194))))) ;)

(; dict ;)

def thm_1027 : B : hol.type -> A : hol.type -> __1194_1 : hol.term B -> __1193_2 : hol.term A -> __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))))) :=
  B : hol.type => A : hol.type => __1194_1 : hol.term B => __1193_2 : hol.term A => __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192))) ((Data.Bool.\/ ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192)) (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194)))))) ((= ((Data.Bool.\/ ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192)) (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194))))) ((Data.Bool.\/ ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192)) (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194)))))) ;)

(; dict ;)

def thm_1028 : B : hol.type -> A : hol.type -> __1194_1 : hol.term B -> __1193_2 : hol.term A -> __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))))) (hol.eq hol.bool (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))))) :=
  B : hol.type => A : hol.type => __1194_1 : hol.term B => __1193_2 : hol.term A => __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3))) (hol.eq hol.bool (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))))) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))) (thm_1026 B A __1194_1 __1193_2 __1192_3) (thm_1027 B A __1194_1 __1193_2 __1192_3).

(; Theorem: |- ((= ((= ((Data.Bool.\/ ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192)) (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194))))) ((Data.Bool.\/ ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192)) (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194)))))) Data.Bool.T) ;)

(; dict ;)

def thm_1029 : B : hol.type -> A : hol.type -> __1194_1 : hol.term B -> __1193_2 : hol.term A -> __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))))) hol.true) :=
  B : hol.type => A : hol.type => __1194_1 : hol.term B => __1193_2 : hol.term A => __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (x_1 : hol.term hol.bool => thm_181 x_1) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192))) ((Data.Bool.\/ ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192)) (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194)))))) Data.Bool.T) ;)

(; dict ;)

def thm_1030 : B : hol.type -> A : hol.type -> __1194_1 : hol.term B -> __1193_2 : hol.term A -> __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))))) hol.true) :=
  B : hol.type => A : hol.type => __1194_1 : hol.term B => __1193_2 : hol.term A => __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.eq hol.bool (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))))) (hol.eq hol.bool (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))))) hol.true (thm_1028 B A __1194_1 __1193_2 __1192_3) (thm_1029 B A __1194_1 __1193_2 __1192_3).

(; Theorem: |- ((= Data.Bool.T) ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192))) ((Data.Bool.\/ ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192)) (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194)))))) ;)

(; dict ;)

def thm_1031 : B : hol.type -> A : hol.type -> __1194_1 : hol.term B -> __1193_2 : hol.term A -> __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))))) :=
  B : hol.type => A : hol.type => __1194_1 : hol.term B => __1193_2 : hol.term A => __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.SYM hol.bool (hol.eq hol.bool (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))))) hol.true (thm_1030 B A __1194_1 __1193_2 __1192_3).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194))))) (Data.Bool.\/ (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194))))) ;)

(; dict ;)

def thm_1032 : B : hol.type -> A : hol.type -> __1194_1 : hol.term B -> __1193_2 : hol.term A -> __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))) (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))))) :=
  B : hol.type => A : hol.type => __1194_1 : hol.term B => __1193_2 : hol.term A => __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL (hol.arr hol.bool hol.bool) (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192))) ((Data.Bool.\/ (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192))) ;)

(; dict ;)

def thm_1033 : B : hol.type -> A : hol.type -> __1194_1 : hol.term B -> __1193_2 : hol.term A -> __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)) (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3))) :=
  B : hol.type => A : hol.type => __1194_1 : hol.term B => __1193_2 : hol.term A => __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))) (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3) (thm_1032 B A __1194_1 __1193_2 __1192_3) (thm_924 B A __1192_3).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192))) ((Data.Bool.\/ (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192))) ;)

(; dict ;)

def thm_1034 : B : hol.type -> A : hol.type -> __1194_1 : hol.term B -> __1193_2 : hol.term A -> __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)) (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3))) :=
  B : hol.type => A : hol.type => __1194_1 : hol.term B => __1193_2 : hol.term A => __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)) (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)) (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A __1193_2 __1194_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)) (thm_1033 B A __1194_1 __1193_2 __1192_3) (thm_1033 B A __1194_1 __1193_2 __1192_3).

(; Theorem: |- ((= (\lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) a)) (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_1035 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) a_1) (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV A hol.bool (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) a_1.

(; Theorem: |- ((= \lambda a. (\lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) a)) \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_1036 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM A hol.bool (a_2 : hol.term A => (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (a_2 : hol.term A => thm_1035 B A a_2 r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (\lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) a))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_1037 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2)) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_2 : hol.term A => (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (thm_51 A) (thm_1036 B A r_1).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.! \lambda a. (\lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) a)))) (Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))))) ;)

(; dict ;)

def thm_1038 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.forall A (a_2 : hol.term A => (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.forall A (a_2 : hol.term A => (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2)) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) thm_431 (thm_1037 B A r_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (\lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) a))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ;)

(; dict ;)

def thm_1039 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall A (a_2 : hol.term A => (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.or (hol.forall A (a_2 : hol.term A => (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1) (thm_1038 B A r_1) (thm_787 B A r_1).

(; Theorem: |- ((= (= ((Data.Bool.\/ (Data.Bool.! \lambda a. (\lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) a))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1040 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or (hol.forall A (a_2 : hol.term A => (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.eq hol.bool (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.or (hol.forall A (a_2 : hol.term A => (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) thm_119 (thm_1039 B A r_1).

(; Theorem: |- ((= (Data.Bool.\/ (\lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) a))) (Data.Bool.\/ (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_1041 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or ((a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) a_1)) (hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or ((a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) a_1) (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) thm_431 (thm_1035 B A a_1 r_2).

(; Theorem: |- ((= ((Data.Bool.\/ (\lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) a)) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ((Data.Bool.\/ (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ;)

(; dict ;)

def thm_1042 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or ((a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) a_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.or ((a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) a_1)) (hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2) (thm_1041 B A a_1 r_2) (thm_787 B A r_2).

(; Theorem: |- ((= \lambda a. ((Data.Bool.\/ (\lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) a)) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) \lambda a. ((Data.Bool.\/ (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ;)

(; dict ;)

def thm_1043 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => hol.or ((a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (a_2 : hol.term A => hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM A hol.bool (a_2 : hol.term A => hol.or ((a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (a_2 : hol.term A => hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (a_2 : hol.term A => thm_1042 B A a_2 r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. ((Data.Bool.\/ (\lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) a)) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (Data.Bool.! \lambda a. ((Data.Bool.\/ (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1044 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => hol.or ((a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.forall A (a_2 : hol.term A => hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_2 : hol.term A => hol.or ((a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (a_2 : hol.term A => hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (thm_51 A) (thm_1043 B A r_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (\lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) a))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) (Data.Bool.! \lambda a. ((Data.Bool.\/ (\lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) a)) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) (Data.Bool.! \lambda a. ((Data.Bool.\/ (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1045 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_2 : hol.term A => (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.forall A (a_2 : hol.term A => hol.or ((a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.eq hol.bool (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.forall A (a_2 : hol.term A => hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_2 : hol.term A => (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.eq hol.bool (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.forall A (a_2 : hol.term A => hol.or ((a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.forall A (a_2 : hol.term A => hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (thm_1040 B A r_1) (thm_1044 B A r_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) ;)

(; dict ;)

def thm_1046 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (p a))) q)) (Data.Bool.! \lambda a. ((Data.Bool.\/ (p a)) q)))) ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (p a))) q)) (Data.Bool.! \lambda a. ((Data.Bool.\/ (p a)) q)))) ;)

(; dict ;)

def thm_1047 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => p_2 a_3)) q_1) (hol.forall A (a_3 : hol.term A => hol.or (p_2 a_3) q_1))) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => p_2 a_3)) q_1) (hol.forall A (a_3 : hol.term A => hol.or (p_2 a_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => p_2 a_3)) q_1) (hol.forall A (a_3 : hol.term A => hol.or (p_2 a_3) q_1))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (p a))) q)) (Data.Bool.! \lambda a. ((Data.Bool.\/ (p a)) q)))) ;)

(; dict ;)

def thm_1048 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => p_2 a_3)) q_1) (hol.forall A (a_3 : hol.term A => hol.or (p_2 a_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => p_2 a_3)) q_1) (hol.forall A (a_3 : hol.term A => hol.or (p_2 a_3) q_1))) (thm_1046 A q_1 p_2) (thm_1047 A q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) ;)

(; dict ;)

def thm_1049 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_38 A p_1.

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ;)

(; dict ;)

def thm_1050 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_1049 A p_2 q_1.

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (p a))) q)) (Data.Bool.! \lambda a. ((Data.Bool.\/ (p a)) q))) ;)

(; dict ;)

def thm_1051 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => p_2 a_3)) q_1) (hol.forall A (a_3 : hol.term A => hol.or (p_2 a_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => p_2 a_3)) q_1) (hol.forall A (a_3 : hol.term A => hol.or (p_2 a_3) q_1))) (thm_1048 A q_1 p_2) (thm_1050 A q_1 p_2).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (\lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) a))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) (Data.Bool.! \lambda a. ((Data.Bool.\/ (\lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) a)) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1052 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall A (a_2 : hol.term A => (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.forall A (a_2 : hol.term A => hol.or ((a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_1051 A q_1 p_2) A q_1 p_2) A (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) (Data.Bool.! \lambda a. ((Data.Bool.\/ (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1053 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.forall A (a_2 : hol.term A => hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq hol.bool (hol.or (hol.forall A (a_2 : hol.term A => (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.forall A (a_2 : hol.term A => hol.or ((a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4)))) a_2) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.eq hol.bool (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.forall A (a_2 : hol.term A => hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (thm_1045 B A r_1) (thm_1052 B A r_1).

(; Theorem: |- ((= (\lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))) b)) (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_1054 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_4))) b_1) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_4))) b_1.

(; Theorem: |- ((= \lambda b. (\lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))) b)) \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_1055 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (b_3 : hol.term B => (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3) (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM B hol.bool (b_3 : hol.term B => (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3) (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (b_3 : hol.term B => thm_1054 A B b_3 a_1 r_2).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (\lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))) b))) (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_1056 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall B (b_3 : hol.term B => (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3)) (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_3 : hol.term B => (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3) (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (thm_536 B) (thm_1055 A B a_1 r_2).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.! \lambda b. (\lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))) b)))) (Data.Bool.\/ (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_1057 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.forall B (b_3 : hol.term B => (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3))) (hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.forall B (b_3 : hol.term B => (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3)) (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) thm_431 (thm_1056 A B a_1 r_2).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda b. (\lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))) b))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ((Data.Bool.\/ (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ;)

(; dict ;)

def thm_1058 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall B (b_3 : hol.term B => (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.or (hol.forall B (b_3 : hol.term B => (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3))) (hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2) (thm_1057 A B a_1 r_2) (thm_787 B A r_2).

(; Theorem: |- ((= (= ((Data.Bool.\/ (Data.Bool.! \lambda b. (\lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))) b))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (= ((Data.Bool.\/ (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1059 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or (hol.forall B (b_3 : hol.term B => (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (hol.eq hol.bool (hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.or (hol.forall B (b_3 : hol.term B => (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) thm_119 (thm_1058 A B a_1 r_2).

(; Theorem: |- ((= (Data.Bool.\/ (\lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))) b))) (Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_1060 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or ((b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_4))) b_1)) (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or ((b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_4))) b_1) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1))) thm_431 (thm_1054 A B b_1 a_2 r_3).

(; Theorem: |- ((= ((Data.Bool.\/ (\lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))) b)) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ;)

(; dict ;)

def thm_1061 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or ((b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_4))) b_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)) (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.or ((b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_4))) b_1)) (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3) (thm_1060 A B b_1 a_2 r_3) (thm_787 B A r_3).

(; Theorem: |- ((= \lambda b. ((Data.Bool.\/ (\lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))) b)) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ;)

(; dict ;)

def thm_1062 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (b_3 : hol.term B => hol.or ((b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM B hol.bool (b_3 : hol.term B => hol.or ((b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (b_3 : hol.term B => thm_1061 A B b_3 a_1 r_2).

(; Theorem: |- ((= (Data.Bool.! \lambda b. ((Data.Bool.\/ (\lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))) b)) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1063 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall B (b_3 : hol.term B => hol.or ((b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_3 : hol.term B => hol.or ((b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (thm_536 B) (thm_1062 A B a_1 r_2).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda b. (\lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))) b))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) (Data.Bool.! \lambda b. ((Data.Bool.\/ (\lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))) b)) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ((= ((Data.Bool.\/ (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1064 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall B (b_3 : hol.term B => (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (hol.forall B (b_3 : hol.term B => hol.or ((b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (hol.eq hol.bool (hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or (hol.forall B (b_3 : hol.term B => (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (hol.eq hol.bool (hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (hol.forall B (b_3 : hol.term B => hol.or ((b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (thm_1059 A B a_1 r_2) (thm_1063 A B a_1 r_2).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda b. (p b))) q)) (Data.Bool.! \lambda b. ((Data.Bool.\/ (p b)) q)))) ((= ((Data.Bool.\/ (Data.Bool.! \lambda b. (p b))) q)) (Data.Bool.! \lambda b. ((Data.Bool.\/ (p b)) q)))) ;)

(; dict ;)

def thm_1065 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (b_3 : hol.term A => p_2 b_3)) q_1) (hol.forall A (b_3 : hol.term A => hol.or (p_2 b_3) q_1))) (hol.eq hol.bool (hol.or (hol.forall A (b_3 : hol.term A => p_2 b_3)) q_1) (hol.forall A (b_3 : hol.term A => hol.or (p_2 b_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.or (hol.forall A (b_3 : hol.term A => p_2 b_3)) q_1) (hol.forall A (b_3 : hol.term A => hol.or (p_2 b_3) q_1))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) ((= ((Data.Bool.\/ (Data.Bool.! \lambda b. (p b))) q)) (Data.Bool.! \lambda b. ((Data.Bool.\/ (p b)) q)))) ;)

(; dict ;)

def thm_1066 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (hol.forall A (b_3 : hol.term A => p_2 b_3)) q_1) (hol.forall A (b_3 : hol.term A => hol.or (p_2 b_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (hol.forall A (b_3 : hol.term A => p_2 b_3)) q_1) (hol.forall A (b_3 : hol.term A => hol.or (p_2 b_3) q_1))) (thm_1046 A q_1 p_2) (thm_1065 A q_1 p_2).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda b. (p b))) q)) (Data.Bool.! \lambda b. ((Data.Bool.\/ (p b)) q))) ;)

(; dict ;)

def thm_1067 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall A (b_3 : hol.term A => p_2 b_3)) q_1) (hol.forall A (b_3 : hol.term A => hol.or (p_2 b_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (hol.forall A (b_3 : hol.term A => p_2 b_3)) q_1) (hol.forall A (b_3 : hol.term A => hol.or (p_2 b_3) q_1))) (thm_1066 A q_1 p_2) (thm_1050 A q_1 p_2).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda b. (p b))) q)) (Data.Bool.! \lambda b. ((Data.Bool.\/ (p b)) q))) ;)

(; dict ;)

def thm_1068 : B : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall B (b_3 : hol.term B => p_2 b_3)) q_1) (hol.forall B (b_3 : hol.term B => hol.or (p_2 b_3) q_1))) :=
  B : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr B hol.bool) => (A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_1067 A q_1 p_2) B q_1 p_2.

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda b. (\lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))) b))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) (Data.Bool.! \lambda b. ((Data.Bool.\/ (\lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))) b)) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1069 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall B (b_3 : hol.term B => (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (hol.forall B (b_3 : hol.term B => hol.or ((b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (B : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr B hol.bool) => thm_1068 B q_1 p_2) B (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2) (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1070 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq hol.bool (hol.or (hol.forall B (b_3 : hol.term B => (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (hol.forall B (b_3 : hol.term B => hol.or ((b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4))) b_3) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (hol.eq hol.bool (hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (thm_1064 A B a_1 r_2) (thm_1069 A B a_1 r_2).

(; Theorem: |- ((= \lambda a. ((Data.Bool.\/ (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1071 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM A hol.bool (a_2 : hol.term A => hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (a_2 : hol.term A => thm_1070 A B a_2 r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. ((Data.Bool.\/ (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1072 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_2 : hol.term A => hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (thm_51 A) (thm_1071 B A r_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1073 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.forall A (a_2 : hol.term A => hol.or (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (thm_1053 B A r_1) (thm_1072 B A r_1).

(; Theorem: |- ((= \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) \lambda r. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1074 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1073 B A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (Data.Bool.! \lambda r. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1075 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (thm_528 B A) (thm_1074 B A).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_1076 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1)))) (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1))) thm_431 (thm_798 B A b_1 a_2 r_3).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ;)

(; dict ;)

def thm_1077 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)) (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1)))) (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3) (thm_1076 B A b_1 a_2 r_3) (thm_787 B A r_3).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ;)

(; dict ;)

def thm_1078 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)) (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)) (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)) (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)) (thm_1077 B A b_1 a_2 r_3) (thm_1077 B A b_1 a_2 r_3).

(; Theorem: |- ((= \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ;)

(; dict ;)

def thm_1079 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM B hol.bool (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (b_3 : hol.term B => thm_1078 B A b_3 a_1 r_2).

(; Theorem: |- ((= (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1080 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (thm_536 B) (thm_1079 A B a_1 r_2).

(; Theorem: |- ((= \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1081 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM A hol.bool (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (a_2 : hol.term A => thm_1080 A B a_2 r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1082 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (thm_51 A) (thm_1081 B A r_1).

(; Theorem: |- ((= \lambda r. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) \lambda r. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1083 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1082 B A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda r. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool.! \lambda r. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1084 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (thm_528 B A) (thm_1083 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (Data.Bool.! \lambda r. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1085 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (thm_1075 B A) (thm_1084 B A).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f' r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1086 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) -> hol.proof (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_93 p_1 q_2 hyp_1) (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f' r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1087 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) -> hol.proof (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) => hol.PROVE_HYP (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (thm_809 B A f_27_1 f_2 hyp_1) (hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) => thm_1086 B A f_27_1 f_2 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ;)

(; dict ;)

def thm_1088 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) -> hol.proof (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_93 p_1 q_2 hyp_1) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ;)

(; dict ;)

def thm_1089 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) -> hol.proof (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) => hol.PROVE_HYP (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) (thm_1087 B A f_27_1 f_2 hyp_1) (hyp_2 : hol.proof (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) => thm_1088 B A f_27_1 f_2 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda r. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1090 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) -> hol.proof (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) => hol.EQ_MP (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (thm_1085 B A) (thm_1089 B A f_27_1 f_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair a) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192)))) ;)

(; dict ;)

def thm_1091 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_27_1 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) -> hol.proof (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_3 (HOLLight_2Emk__pair B A a_4 b_5))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_3)) __1192_3)))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => __1192_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_27_1 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) => thm_1090 B A f_27_1 f_2 hyp_1 __1192_3.

(; Theorem: |- (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) b)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192))) ;)

(; dict ;)

def thm_1092 : A : hol.type -> B : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> __1193_3 : hol.term A -> __1192_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) -> hol.proof (hol.forall B (b_5 : hol.term B => hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_4 (HOLLight_2Emk__pair B A __1193_3 b_5))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_4)) __1192_4))) :=
  A : hol.type => B : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => __1193_3 : hol.term A => __1192_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) => thm_1091 B A f_27_1 f_2 __1192_4 hyp_1 __1193_3.

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192)) ;)

(; dict ;)

def thm_1093 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> __1194_3 : hol.term B -> __1193_4 : hol.term A -> __1192_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_6 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_6)) a_6)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_6 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_6 (HOLLight_2Emk__pair B A (f_2 r_6) (f_27_1 r_6))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_6)) r_6)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_6 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_7 : hol.term A => hol.forall B (b_8 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_6 (HOLLight_2Emk__pair B A a_7 b_8))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_6)) r_6))))) -> hol.proof (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_5 (HOLLight_2Emk__pair B A __1193_4 __1194_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_5)) __1192_5)) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => __1194_3 : hol.term B => __1193_4 : hol.term A => __1192_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_6 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_6)) a_6)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_6 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_6 (HOLLight_2Emk__pair B A (f_2 r_6) (f_27_1 r_6))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_6)) r_6)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_6 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_7 : hol.term A => hol.forall B (b_8 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_6 (HOLLight_2Emk__pair B A a_7 b_8))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_6)) r_6))))) => thm_1092 A B f_27_1 f_2 __1193_4 __1192_5 hyp_1 __1194_3.

(; Theorem: |- ((Data.Bool.\/ ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192)) (Data.Bool.~ ((= _1192) ((HOLLight.mk_pair _1193) _1194)))) ;)

(; dict ;)

def thm_1094 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> __1194_3 : hol.term B -> __1193_4 : hol.term A -> __1192_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_6 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_6)) a_6)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_6 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_6 (HOLLight_2Emk__pair B A (f_2 r_6) (f_27_1 r_6))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_6)) r_6)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_6 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_7 : hol.term A => hol.forall B (b_8 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_6 (HOLLight_2Emk__pair B A a_7 b_8))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_6)) r_6))))) -> hol.proof (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_5)) __1192_5) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_5 (HOLLight_2Emk__pair B A __1193_4 __1194_3)))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => __1194_3 : hol.term B => __1193_4 : hol.term A => __1192_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_6 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_6)) a_6)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_6 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_6 (HOLLight_2Emk__pair B A (f_2 r_6) (f_27_1 r_6))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_6)) r_6)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_6 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_7 : hol.term A => hol.forall B (b_8 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_6 (HOLLight_2Emk__pair B A a_7 b_8))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_6)) r_6))))) => hol.EQ_MP (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_5 (HOLLight_2Emk__pair B A __1193_4 __1194_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_5)) __1192_5)) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_5)) __1192_5) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_5 (HOLLight_2Emk__pair B A __1193_4 __1194_3)))) (hol.EQ_MP hol.true (hol.eq hol.bool (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_5 (HOLLight_2Emk__pair B A __1193_4 __1194_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_5)) __1192_5)) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_5)) __1192_5) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_5 (HOLLight_2Emk__pair B A __1193_4 __1194_3))))) (thm_1031 B A __1194_3 __1193_4 __1192_5) thm_5) (hol.EQ_MP (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_5 (HOLLight_2Emk__pair B A __1193_4 __1194_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_5)) __1192_5)) (hol.or (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_5 (HOLLight_2Emk__pair B A __1193_4 __1194_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_5)) __1192_5)) (thm_1034 B A __1194_3 __1193_4 __1192_5) (thm_1093 B A f_27_1 f_2 __1194_3 __1193_4 __1192_5 hyp_1)).

(; Theorem: |- ((Data.Bool.==> ((= _1192) ((HOLLight.mk_pair _1193) _1194))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod _1192))) _1192)) ;)

(; dict ;)

def thm_1095 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> __1194_3 : hol.term B -> __1193_4 : hol.term A -> __1192_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_6 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_6)) a_6)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_6 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_6 (HOLLight_2Emk__pair B A (f_2 r_6) (f_27_1 r_6))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_6)) r_6)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_6 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_7 : hol.term A => hol.forall B (b_8 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_6 (HOLLight_2Emk__pair B A a_7 b_8))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_6)) r_6))))) -> hol.proof (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_5 (HOLLight_2Emk__pair B A __1193_4 __1194_3)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_5)) __1192_5)) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => __1194_3 : hol.term B => __1193_4 : hol.term A => __1192_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_6 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_6)) a_6)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_6 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_6 (HOLLight_2Emk__pair B A (f_2 r_6) (f_27_1 r_6))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_6)) r_6)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_6 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_7 : hol.term A => hol.forall B (b_8 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_6 (HOLLight_2Emk__pair B A a_7 b_8))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_6)) r_6))))) => hol.EQ_MP (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_5)) __1192_5) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_5 (HOLLight_2Emk__pair B A __1193_4 __1194_3)))) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_5 (HOLLight_2Emk__pair B A __1193_4 __1194_3)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_5)) __1192_5)) (thm_926 B A __1194_3 __1193_4 __1192_5) (thm_1094 B A f_27_1 f_2 __1194_3 __1193_4 __1192_5 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((= ((HOLLight.mk_pair x) y)) ((HOLLight.mk_pair x) y))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) ;)

(; dict ;)

def thm_1096 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> y_3 : hol.term B -> x_4 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) -> hol.proof (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_4 y_3) (HOLLight_2Emk__pair B A x_4 y_3)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => y_3 : hol.term B => x_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) => (B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => __1194_3 : hol.term B => __1193_4 : hol.term A => __1192_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_6 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_6)) a_6)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_6 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_6 (HOLLight_2Emk__pair B A (f_2 r_6) (f_27_1 r_6))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_6)) r_6)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_6 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_7 : hol.term A => hol.forall B (b_8 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_6 (HOLLight_2Emk__pair B A a_7 b_8))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_6)) r_6))))) => (B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => __1194_3 : hol.term B => __1193_4 : hol.term A => __1192_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_6 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_6)) a_6)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_6 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_6 (HOLLight_2Emk__pair B A (f_2 r_6) (f_27_1 r_6))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_6)) r_6)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_6 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_7 : hol.term A => hol.forall B (b_8 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_6 (HOLLight_2Emk__pair B A a_7 b_8))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_6)) r_6))))) => hol.EQ_MP (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_5 (HOLLight_2Emk__pair B A __1193_4 __1194_3)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_5)) __1192_5)) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) __1192_5 (HOLLight_2Emk__pair B A __1193_4 __1194_3)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A __1192_5)) __1192_5)) (thm_819 B A __1194_3 __1193_4 __1192_5) (thm_1095 B A f_27_1 f_2 __1194_3 __1193_4 __1192_5 hyp_1)) B A f_27_1 f_2 __1194_3 __1193_4 __1192_5 hyp_1) B A f_27_1 f_2 y_3 x_4 (HOLLight_2Emk__pair B A x_4 y_3) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((= ((HOLLight.mk_pair x) y)) ((HOLLight.mk_pair x) y)))) ((= ((HOLLight.mk_pair x) y)) ((HOLLight.mk_pair x) y)))) ((= ((HOLLight.mk_pair x) y)) ((HOLLight.mk_pair x) y))) ;)

(; dict ;)

def thm_1097 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) (HOLLight_2Emk__pair B A x_2 y_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) (HOLLight_2Emk__pair B A x_2 y_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) (HOLLight_2Emk__pair B A x_2 y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => (p_1 : hol.term hol.bool => thm_299 p_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) (HOLLight_2Emk__pair B A x_2 y_1)).

(; Theorem: |- ((= ((HOLLight.mk_pair x) y)) ((HOLLight.mk_pair x) y)) ;)

(; dict ;)

def thm_1098 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) (HOLLight_2Emk__pair B A x_2 y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => (B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_562 B A x_1) B A (HOLLight_2Emk__pair B A x_2 y_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((= ((HOLLight.mk_pair x) y)) ((HOLLight.mk_pair x) y)))) ((= ((HOLLight.mk_pair x) y)) ((HOLLight.mk_pair x) y))) ;)

(; dict ;)

def thm_1099 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.imp (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) (HOLLight_2Emk__pair B A x_2 y_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) (HOLLight_2Emk__pair B A x_2 y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) (HOLLight_2Emk__pair B A x_2 y_1))) => thm_1098 B A y_1 x_2.

(; Theorem: |- ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)) ;)

(; dict ;)

def thm_1100 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> y_3 : hol.term B -> x_4 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3)) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => y_3 : hol.term B => x_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) => thm_1096 B A f_27_1 f_2 y_3 x_4 hyp_1 (hol.EQ_MP (hol.imp (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_4 y_3) (HOLLight_2Emk__pair B A x_4 y_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_4 y_3) (HOLLight_2Emk__pair B A x_4 y_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_4 y_3) (HOLLight_2Emk__pair B A x_4 y_3)) (thm_1097 B A y_3 x_4) (thm_1099 B A y_3 x_4)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) ;)

(; dict ;)

def thm_1101 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> y_3 : hol.term B -> x_4 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) -> hol.proof (hol.imp (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => y_3 : hol.term B => x_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) => hyp_2 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) => (B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => y_3 : hol.term B => x_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) => hol.EQ_MP (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3)) (thm_715 B A y_3 x_4) (thm_1100 B A f_27_1 f_2 y_3 x_4 hyp_1)) B A f_27_1 f_2 y_3 x_4 hyp_1.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1102 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> y_3 : hol.term B -> x_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) -> hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => y_3 : hol.term B => x_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) => hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) => hol.EQ_MP (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3)) hol.false) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3)) hol.false) (thm_813 B A y_3 x_4) (thm_816 B A y_3 x_4 hyp_1) (hol.EQ_MP (hol.imp (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3)) (thm_817 B A y_3 x_4) (thm_1101 B A f_27_1 f_2 y_3 x_4 hyp_2)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_1103 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> y_3 : hol.term B -> x_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) -> hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) -> hol.proof (hol.imp (hol.not hol.false) hol.false) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => y_3 : hol.term B => x_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) => hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) => hyp_3 : hol.proof (hol.not hol.false) => hol.EQ_MP hol.false hol.false thm_300 (thm_1102 B A f_27_1 f_2 y_3 x_4 hyp_1 hyp_2).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1104 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> y_3 : hol.term B -> x_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) -> hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => y_3 : hol.term B => x_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) => hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) => hol.PROVE_HYP (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) hol.false (thm_811 B A y_3 x_4 hyp_1) (hyp_3 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) => hol.EQ_MP (hol.imp (hol.not hol.false) hol.false) hol.false thm_250 (thm_1103 B A f_27_1 f_2 y_3 x_4 hyp_3 hyp_2)).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1105 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> y_3 : hol.term B -> x_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) -> hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => y_3 : hol.term B => x_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) => hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) => hol.PROVE_HYP (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) hol.false (thm_811 B A y_3 x_4 hyp_1) (hyp_3 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) => thm_1104 B A f_27_1 f_2 y_3 x_4 hyp_3 hyp_2).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1106 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> y_3 : hol.term B -> x_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) -> hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => y_3 : hol.term B => x_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) => hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) => hol.PROVE_HYP (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) hol.false (thm_811 B A y_3 x_4 hyp_1) (hyp_3 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) => thm_1105 B A f_27_1 f_2 y_3 x_4 hyp_3 hyp_2).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1107 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> y_3 : hol.term B -> x_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) -> hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => y_3 : hol.term B => x_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) => hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) => hol.PROVE_HYP (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) hol.false (hol.EQ_MP (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) (thm_810 B A y_3 x_4) (thm_811 B A y_3 x_4 hyp_1)) (hyp_3 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) => thm_1106 B A f_27_1 f_2 y_3 x_4 hyp_3 hyp_2).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1108 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> y_3 : hol.term B -> x_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) -> hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => y_3 : hol.term B => x_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) => hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) => hol.PROVE_HYP (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) hol.false (hol.EQ_MP (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) (thm_808 B A f_27_1 f_2) (thm_809 B A f_27_1 f_2 hyp_2)) (hyp_3 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) => thm_1107 B A f_27_1 f_2 y_3 x_4 hyp_1 hyp_3).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) Data.Bool.F) ;)

(; dict ;)

def thm_1109 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> y_3 : hol.term B -> x_4 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) -> hol.proof (hol.imp (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) hol.false) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => y_3 : hol.term B => x_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) => hyp_2 : hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_3))) (HOLLight_2Emk__pair B A x_4 y_3))) => thm_1108 B A f_27_1 f_2 y_3 x_4 hyp_2 hyp_1.

(; Theorem: |- ((= (\lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) y)) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) ;)

(; dict ;)

def thm_1110 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool ((y_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))) y_1) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.BETA_CONV B hol.bool (y_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))) y_1.

(; Theorem: |- (\lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) y) ;)

(; dict ;)

def thm_1111 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hyp_1 : hol.proof ((y_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))) y_1) -> hol.proof ((y_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))) y_1) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => hyp_1 : hol.proof ((y_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))) y_1) => hyp_1.

(; Theorem: |- (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) ;)

(; dict ;)

def thm_1112 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hyp_1 : hol.proof ((y_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))) y_1) -> hol.proof (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hyp_1 : hol.proof ((y_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))) y_1) => hol.EQ_MP ((y_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))) y_1) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) (thm_1110 A B y_1 x_2) (thm_1111 A B y_1 x_2 hyp_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1113 : A : hol.type -> B : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> y_3 : hol.term B -> x_4 : hol.term A -> hyp_1 : hol.proof ((y_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_5))) (HOLLight_2Emk__pair B A x_4 y_5))) y_3) -> hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) -> hol.proof hol.false :=
  A : hol.type => B : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => y_3 : hol.term B => x_4 : hol.term A => hyp_1 : hol.proof ((y_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_5))) (HOLLight_2Emk__pair B A x_4 y_5))) y_3) => hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) => thm_1109 B A f_27_1 f_2 y_3 x_4 hyp_2 (thm_1112 B A y_3 x_4 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) y)) Data.Bool.F) ;)

(; dict ;)

def thm_1114 : A : hol.type -> B : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> y_3 : hol.term B -> x_4 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) -> hol.proof (hol.imp ((y_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_5))) (HOLLight_2Emk__pair B A x_4 y_5))) y_3) hol.false) :=
  A : hol.type => B : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => y_3 : hol.term B => x_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_5)) a_5)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A (f_2 r_5) (f_27_1 r_5))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_6 : hol.term A => hol.forall B (b_7 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_5 (HOLLight_2Emk__pair B A a_6 b_7))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_5)) r_5))))) => hyp_2 : hol.proof ((y_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_5))) (HOLLight_2Emk__pair B A x_4 y_5))) y_3) => thm_1113 A B f_27_1 f_2 y_3 x_4 hyp_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda y. ((Data.Bool.==> (\lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) y)) Data.Bool.F)) ;)

(; dict ;)

def thm_1115 : A : hol.type -> B : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_27_1 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) -> hol.proof (hol.forall B (y_4 : hol.term B => hol.imp ((y_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_3 y_5))) (HOLLight_2Emk__pair B A x_3 y_5))) y_4) hol.false)) :=
  A : hol.type => B : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => x_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_27_1 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) => y_4 : hol.term B => thm_1114 A B f_27_1 f_2 y_4 x_3 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))))) Data.Bool.F) ;)

(; dict ;)

def thm_1116 : A : hol.type -> B : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_27_1 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_3 y_4))) (HOLLight_2Emk__pair B A x_3 y_4)))) hol.false) :=
  A : hol.type => B : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => x_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_27_1 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) => thm_761 A B x_3 (thm_1115 A B f_27_1 f_2 x_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) ;)

(; dict ;)

def thm_1117 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))) => hyp_1.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1118 : A : hol.type -> B : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> x_3 : hol.term A -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_3 y_4))) (HOLLight_2Emk__pair B A x_3 y_4)))) -> hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_27_1 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) -> hol.proof hol.false :=
  A : hol.type => B : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => x_3 : hol.term A => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_3 y_4))) (HOLLight_2Emk__pair B A x_3 y_4)))) => hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_27_1 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) => thm_1116 A B f_27_1 f_2 x_3 hyp_2 (thm_1117 A B x_3 hyp_1).

(; Theorem: |- ((= (\lambda x. (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) x)) (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))))) ;)

(; dict ;)

def thm_1119 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool ((x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3)))) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => hol.BETA_CONV A hol.bool (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3)))) x_1.

(; Theorem: |- (\lambda x. (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) x) ;)

(; dict ;)

def thm_1120 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> hyp_1 : hol.proof ((x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3)))) x_1) -> hol.proof ((x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3)))) x_1) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => hyp_1 : hol.proof ((x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3)))) x_1) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) ;)

(; dict ;)

def thm_1121 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hyp_1 : hol.proof ((x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3)))) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hyp_1 : hol.proof ((x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3)))) x_1) => hol.EQ_MP ((x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3)))) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))) (thm_1119 B A x_1) (thm_1120 B A x_1 hyp_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1122 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> x_3 : hol.term A -> hyp_1 : hol.proof ((x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_5))) (HOLLight_2Emk__pair B A x_4 y_5)))) x_3) -> hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_27_1 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => x_3 : hol.term A => hyp_1 : hol.proof ((x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_5))) (HOLLight_2Emk__pair B A x_4 y_5)))) x_3) => hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_27_1 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) => (hyp_3 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_3 y_4))) (HOLLight_2Emk__pair B A x_3 y_4)))) => thm_1118 A B f_27_1 f_2 x_3 hyp_3 hyp_2) (thm_1121 A B x_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) x)) Data.Bool.F) ;)

(; dict ;)

def thm_1123 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_27_1 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) -> hol.proof (hol.imp ((x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_5))) (HOLLight_2Emk__pair B A x_4 y_5)))) x_3) hol.false) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => x_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_27_1 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) => hyp_2 : hol.proof ((x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_5))) (HOLLight_2Emk__pair B A x_4 y_5)))) x_3) => thm_1122 B A f_27_1 f_2 x_3 hyp_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) x)) Data.Bool.F)) ;)

(; dict ;)

def thm_1124 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_4 y_5))) (HOLLight_2Emk__pair B A x_4 y_5)))) x_3) hol.false)) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) => x_3 : hol.term A => thm_1123 B A f_27_1 f_2 x_3 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) Data.Bool.F) ;)

(; dict ;)

def thm_1125 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_3 y_4))) (HOLLight_2Emk__pair B A x_3 y_4))))) hol.false) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) => thm_760 B A (thm_1124 B A f_27_1 f_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) (Data.Bool.? \lambda x. (Data.Bool.~ (\lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) x)))) ;)

(; dict ;)

def thm_1126 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => hol.not ((x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))) x_1)))) :=
  B : hol.type => A : hol.type => (A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => thm_347 A P_1) A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))).

(; Theorem: |- ((= (\lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) x)) (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) ;)

(; dict ;)

def thm_1127 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool ((x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))) x_1) (hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => hol.BETA_CONV A hol.bool (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))) x_1.

(; Theorem: |- ((= (Data.Bool.~ (\lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) x))) (Data.Bool.~ (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))))) ;)

(; dict ;)

def thm_1128 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not ((x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))) x_1)) (hol.not (hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => hol.APP_THM hol.bool hol.bool hol.not hol.not ((x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))) x_1) (hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))) thm_247 (thm_1127 B A x_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! P))) (Data.Bool.? \lambda x. (Data.Bool.~ (P x)))) ;)

(; dict ;)

def thm_1129 : B : hol.type -> P_1 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall B P_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (x_2 : hol.term B => hol.not (P_1 x_2)))) :=
  B : hol.type => P_1 : hol.term (hol.arr B hol.bool) => (A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => thm_347 A P_1) B P_1.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))))) (Data.Bool.? \lambda x. (Data.Bool.~ (\lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)) x)))) ;)

(; dict ;)

def thm_1130 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (x_2 : hol.term B => hol.not ((y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_3))) (HOLLight_2Emk__pair B A x_1 y_3)) x_2)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => (B : hol.type => P_1 : hol.term (hol.arr B hol.bool) => thm_1129 B P_1) B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)).

(; Theorem: |- ((= Data.Bool.?) Data.Bool.?) ;)

(; dict ;)

def thm_1131 : B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool))) :=
  B : hol.type => hol.REFL (hol.arr (hol.arr B hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)).

(; Theorem: |- ((= (\lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)) y)) ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) ;)

(; dict ;)

def thm_1132 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool ((y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3)) y_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.BETA_CONV B hol.bool (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3)) y_1.

(; Theorem: |- ((= (Data.Bool.~ (\lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)) y))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) ;)

(; dict ;)

def thm_1133 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not ((y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3)) y_1)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.APP_THM hol.bool hol.bool hol.not hol.not ((y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3)) y_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) thm_247 (thm_1132 A B y_1 x_2).

(; Theorem: |- ((= (Data.Bool.~ (\lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)) y))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) ;)

(; dict ;)

def thm_1134 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not ((y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3)) y_1)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.TRANS hol.bool (hol.not ((y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3)) y_1)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1))) (thm_1133 A B y_1 x_2) (thm_810 B A y_1 x_2).

(; Theorem: |- ((= \lambda y. (Data.Bool.~ (\lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)) y))) \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) ;)

(; dict ;)

def thm_1135 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (y_2 : hol.term B => hol.not ((y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_3))) (HOLLight_2Emk__pair B A x_1 y_3)) y_2)) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.ABS_THM B hol.bool (y_2 : hol.term B => hol.not ((y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_3))) (HOLLight_2Emk__pair B A x_1 y_3)) y_2)) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))) (y_2 : hol.term B => thm_1134 A B y_2 x_1).

(; Theorem: |- ((= (Data.Bool.? \lambda y. (Data.Bool.~ (\lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)) y)))) (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))))) ;)

(; dict ;)

def thm_1136 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not ((y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_3))) (HOLLight_2Emk__pair B A x_1 y_3)) y_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (y_2 : hol.term B => hol.not ((y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_3))) (HOLLight_2Emk__pair B A x_1 y_3)) y_2)) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))) (thm_1131 B) (thm_1135 A B x_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))))) (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))))) ;)

(; dict ;)

def thm_1137 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.not (hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (x_2 : hol.term B => hol.not ((y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_3))) (HOLLight_2Emk__pair B A x_1 y_3)) x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))) (thm_1130 A B x_1) (thm_1136 A B x_1).

(; Theorem: |- ((= (Data.Bool.~ (\lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) x))) (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))))) ;)

(; dict ;)

def thm_1138 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not ((x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))) x_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.not ((x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))) x_1)) (hol.not (hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))) (thm_1128 B A x_1) (thm_1137 A B x_1).

(; Theorem: |- ((= \lambda x. (Data.Bool.~ (\lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) x))) \lambda x. (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))))) ;)

(; dict ;)

def thm_1139 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.not ((x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))) x_1)) (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) :=
  B : hol.type => A : hol.type => hol.ABS_THM A hol.bool (x_1 : hol.term A => hol.not ((x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))) x_1)) (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))) (x_1 : hol.term A => thm_1138 B A x_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ (\lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) x)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ;)

(; dict ;)

def thm_1140 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => hol.not ((x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))) x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_1 : hol.term A => hol.not ((x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))) x_1)) (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))) (thm_350 A) (thm_1139 B A).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ;)

(; dict ;)

def thm_1141 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => hol.not ((x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))) x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (thm_1126 B A) (thm_1140 B A).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ;)

(; dict ;)

def thm_1142 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))))) :=
  B : hol.type => A : hol.type => hol.REFL hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ;)

(; dict ;)

def thm_1143 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (thm_1142 B A) (thm_1142 B A).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ;)

(; dict ;)

def thm_1144 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (thm_1141 B A) (thm_1143 B A).

(; Theorem: |- (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))))) ;)

(; dict ;)

def thm_1145 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) => hol.EQ_MP (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (thm_1144 B A) (thm_719 B A hyp_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1146 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_3 y_4))) (HOLLight_2Emk__pair B A x_3 y_4))))) -> hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_3 y_4))) (HOLLight_2Emk__pair B A x_3 y_4))))) => hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) => thm_1125 B A f_27_1 f_2 hyp_2 (thm_1145 B A hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f' r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) Data.Bool.F) ;)

(; dict ;)

def thm_1147 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_3 y_4))) (HOLLight_2Emk__pair B A x_3 y_4))))) -> hol.proof (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) hol.false) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_3 y_4))) (HOLLight_2Emk__pair B A x_3 y_4))))) => hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) => thm_1146 B A f_27_1 f_2 hyp_1 hyp_2.

(; Theorem: |- ((= (\lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f')) ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f' r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1148 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_27_1) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.BETA_CONV (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_27_1.

(; Theorem: |- (\lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f') ;)

(; dict ;)

def thm_1149 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_27_1) -> hol.proof ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_27_1) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_27_1) => hyp_1.

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f' r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1150 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_27_1) -> hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_27_1) => hol.EQ_MP ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_27_1) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_27_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (thm_1148 B A f_27_1 f_2) (thm_1149 B A f_27_1 f_2 hyp_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1151 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_3 y_4))) (HOLLight_2Emk__pair B A x_3 y_4))))) -> hyp_2 : hol.proof ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_27_1) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_3 y_4))) (HOLLight_2Emk__pair B A x_3 y_4))))) => hyp_2 : hol.proof ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_27_1) => thm_1147 B A f_27_1 f_2 hyp_1 (thm_1150 B A f_27_1 f_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (\lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f')) Data.Bool.F) ;)

(; dict ;)

def thm_1152 : B : hol.type -> A : hol.type -> f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_3 y_4))) (HOLLight_2Emk__pair B A x_3 y_4))))) -> hol.proof (hol.imp ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_27_1) hol.false) :=
  B : hol.type => A : hol.type => f_27_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_3 y_4))) (HOLLight_2Emk__pair B A x_3 y_4))))) => hyp_2 : hol.proof ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_27_1) => thm_1151 B A f_27_1 f_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda f'. ((Data.Bool.==> (\lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f')) Data.Bool.F)) ;)

(; dict ;)

def thm_1153 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))))) -> hol.proof (hol.forall (hol.arr (hol.arr A (hol.arr B hol.bool)) B) (f_27_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.imp ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_27_2) hol.false)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))))) => f_27_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => thm_1152 B A f_27_2 f_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) Data.Bool.F) ;)

(; dict ;)

def thm_1154 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))))) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) hol.false) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))))) => thm_759 B A f_1 (thm_1153 B A f_1 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1155 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) => hyp_1.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1156 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) -> hyp_2 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) => hyp_2 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))))) => thm_1154 B A f_1 hyp_2 (thm_1155 B A f_1 hyp_1).

(; Theorem: |- ((= (\lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) f)) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1157 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))))) f_1) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.BETA_CONV (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))))) f_1.

(; Theorem: |- (\lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) f) ;)

(; dict ;)

def thm_1158 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))))) f_1) -> hol.proof ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))))) f_1) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))))) f_1) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1159 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))))) f_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))))) f_1) => hol.EQ_MP ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))))) f_1) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (thm_1157 B A f_1) (thm_1158 B A f_1 hyp_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1160 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))))) -> hyp_2 : hol.proof ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))))) f_1) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))))) => hyp_2 : hol.proof ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))))) f_1) => (hyp_3 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) => thm_1156 B A f_1 hyp_3 hyp_1) (thm_1159 B A f_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> (\lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) f)) Data.Bool.F) ;)

(; dict ;)

def thm_1161 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))))) -> hol.proof (hol.imp ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))))) f_1) hol.false) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hyp_1 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_3))) (HOLLight_2Emk__pair B A x_2 y_3))))) => hyp_2 : hol.proof ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))))) f_1) => thm_1160 B A f_1 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda f. ((Data.Bool.==> (\lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) f)) Data.Bool.F)) ;)

(; dict ;)

def thm_1162 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) -> hol.proof (hol.forall (hol.arr (hol.arr A (hol.arr B hol.bool)) A) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.imp ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_4)) a_4)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))))) f_1) hol.false)) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => thm_1161 B A f_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) Data.Bool.F) ;)

(; dict ;)

def thm_1163 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) hol.false) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) => thm_758 B A (thm_1162 B A hyp_1).

(; Theorem: |- ((= ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q)))) ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q)))) ;)

(; dict ;)

def thm_1164 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))).

(; Theorem: |- ((= ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q)))) ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q)))) ;)

(; dict ;)

def thm_1165 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) (thm_1164 q_1 p_2).

(; Theorem: |- ((= (= (\lambda _554. ((= ((= _554) q)) ((Data.Bool./\ ((Data.Bool.\/ _554) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _554)) q))) p))) (= (\lambda _554. ((= ((= _554) q)) ((Data.Bool./\ ((Data.Bool.\/ _554) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _554)) q))) p))) ;)

(; dict ;)

def thm_1166 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) p_1)) (hol.eq hol.bool ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) p_1))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) p_1)).

(; Theorem: |- ((= (\lambda _554. ((= ((= _554) q)) ((Data.Bool./\ ((Data.Bool.\/ _554) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _554)) q))) Data.Bool.F)) ((= ((= Data.Bool.F) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) q)))) ;)

(; dict ;)

def thm_1167 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__554_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_2 q_1) (hol.and (hol.or __554_2 (hol.not q_1)) (hol.or (hol.not __554_2) q_1))) hol.false) (hol.eq hol.bool (hol.eq hol.bool hol.false q_1) (hol.and (hol.or hol.false (hol.not q_1)) (hol.or (hol.not hol.false) q_1)))) :=
  q_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__554_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_2 q_1) (hol.and (hol.or __554_2 (hol.not q_1)) (hol.or (hol.not __554_2) q_1))) hol.false.

(; Theorem: |- ((= ((= (\lambda _554. ((= ((= _554) q)) ((Data.Bool./\ ((Data.Bool.\/ _554) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _554)) q))) p)) (\lambda _554. ((= ((= _554) q)) ((Data.Bool./\ ((Data.Bool.\/ _554) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _554)) q))) Data.Bool.F))) ((= (\lambda _554. ((= ((= _554) q)) ((Data.Bool./\ ((Data.Bool.\/ _554) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _554)) q))) p)) ((= ((= Data.Bool.F) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) q))))) ;)

(; dict ;)

def thm_1168 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) p_1) ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) hol.false)) (hol.eq hol.bool ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) p_1) (hol.eq hol.bool (hol.eq hol.bool hol.false q_2) (hol.and (hol.or hol.false (hol.not q_2)) (hol.or (hol.not hol.false) q_2))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) p_1)) (hol.eq hol.bool ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) p_1)) ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) hol.false) (hol.eq hol.bool (hol.eq hol.bool hol.false q_2) (hol.and (hol.or hol.false (hol.not q_2)) (hol.or (hol.not hol.false) q_2))) (thm_1166 p_1 q_2) (thm_1167 q_2).

(; Theorem: |- ((= (\lambda _554. ((= ((= _554) q)) ((Data.Bool./\ ((Data.Bool.\/ _554) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _554)) q))) p)) ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q)))) ;)

(; dict ;)

def thm_1169 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) p_1) (hol.eq hol.bool (hol.eq hol.bool p_1 q_2) (hol.and (hol.or p_1 (hol.not q_2)) (hol.or (hol.not p_1) q_2)))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) p_1.

(; Theorem: |- ((= (= (\lambda _554. ((= ((= _554) q)) ((Data.Bool./\ ((Data.Bool.\/ _554) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _554)) q))) p))) (= ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q))))) ;)

(; dict ;)

def thm_1170 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) p_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool p_1 q_2) (hol.and (hol.or p_1 (hol.not q_2)) (hol.or (hol.not p_1) q_2))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) p_1) (hol.eq hol.bool (hol.eq hol.bool p_1 q_2) (hol.and (hol.or p_1 (hol.not q_2)) (hol.or (hol.not p_1) q_2))) thm_119 (thm_1169 p_1 q_2).

(; Theorem: |- ((= ((= ((= Data.Bool.F) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) q)))) ((= ((= Data.Bool.F) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) q)))) ;)

(; dict ;)

def thm_1171 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false q_1) (hol.and (hol.or hol.false (hol.not q_1)) (hol.or (hol.not hol.false) q_1))) (hol.eq hol.bool (hol.eq hol.bool hol.false q_1) (hol.and (hol.or hol.false (hol.not q_1)) (hol.or (hol.not hol.false) q_1)))) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false q_1) (hol.and (hol.or hol.false (hol.not q_1)) (hol.or (hol.not hol.false) q_1))).

(; Theorem: |- ((= ((= (\lambda _554. ((= ((= _554) q)) ((Data.Bool./\ ((Data.Bool.\/ _554) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _554)) q))) p)) ((= ((= Data.Bool.F) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) q))))) ((= ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q)))) ((= ((= Data.Bool.F) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) q))))) ;)

(; dict ;)

def thm_1172 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) p_1) (hol.eq hol.bool (hol.eq hol.bool hol.false q_2) (hol.and (hol.or hol.false (hol.not q_2)) (hol.or (hol.not hol.false) q_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool p_1 q_2) (hol.and (hol.or p_1 (hol.not q_2)) (hol.or (hol.not p_1) q_2))) (hol.eq hol.bool (hol.eq hol.bool hol.false q_2) (hol.and (hol.or hol.false (hol.not q_2)) (hol.or (hol.not hol.false) q_2))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) p_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool p_1 q_2) (hol.and (hol.or p_1 (hol.not q_2)) (hol.or (hol.not p_1) q_2)))) (hol.eq hol.bool (hol.eq hol.bool hol.false q_2) (hol.and (hol.or hol.false (hol.not q_2)) (hol.or (hol.not hol.false) q_2))) (hol.eq hol.bool (hol.eq hol.bool hol.false q_2) (hol.and (hol.or hol.false (hol.not q_2)) (hol.or (hol.not hol.false) q_2))) (thm_1170 p_1 q_2) (thm_1171 q_2).

(; Theorem: |- ((= ((= (\lambda _554. ((= ((= _554) q)) ((Data.Bool./\ ((Data.Bool.\/ _554) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _554)) q))) p)) (\lambda _554. ((= ((= _554) q)) ((Data.Bool./\ ((Data.Bool.\/ _554) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _554)) q))) Data.Bool.F))) ((= ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q)))) ((= ((= Data.Bool.F) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) q))))) ;)

(; dict ;)

def thm_1173 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) p_1) ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool p_1 q_2) (hol.and (hol.or p_1 (hol.not q_2)) (hol.or (hol.not p_1) q_2))) (hol.eq hol.bool (hol.eq hol.bool hol.false q_2) (hol.and (hol.or hol.false (hol.not q_2)) (hol.or (hol.not hol.false) q_2))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) p_1) ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) hol.false)) (hol.eq hol.bool ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) p_1) (hol.eq hol.bool (hol.eq hol.bool hol.false q_2) (hol.and (hol.or hol.false (hol.not q_2)) (hol.or (hol.not hol.false) q_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool p_1 q_2) (hol.and (hol.or p_1 (hol.not q_2)) (hol.or (hol.not p_1) q_2))) (hol.eq hol.bool (hol.eq hol.bool hol.false q_2) (hol.and (hol.or hol.false (hol.not q_2)) (hol.or (hol.not hol.false) q_2)))) (thm_1168 p_1 q_2) (thm_1172 p_1 q_2).

(; Theorem: |- ((= \lambda _554. ((= ((= _554) q)) ((Data.Bool./\ ((Data.Bool.\/ _554) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _554)) q)))) \lambda _554. ((= ((= _554) q)) ((Data.Bool./\ ((Data.Bool.\/ _554) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _554)) q)))) ;)

(; dict ;)

def thm_1174 : q_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__554_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_2 q_1) (hol.and (hol.or __554_2 (hol.not q_1)) (hol.or (hol.not __554_2) q_1))) (__554_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_2 q_1) (hol.and (hol.or __554_2 (hol.not q_1)) (hol.or (hol.not __554_2) q_1)))) :=
  q_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__554_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_2 q_1) (hol.and (hol.or __554_2 (hol.not q_1)) (hol.or (hol.not __554_2) q_1))).

(; Theorem: |- ((= (\lambda _554. ((= ((= _554) q)) ((Data.Bool./\ ((Data.Bool.\/ _554) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _554)) q))) p)) (\lambda _554. ((= ((= _554) q)) ((Data.Bool./\ ((Data.Bool.\/ _554) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _554)) q))) Data.Bool.F)) ;)

(; dict ;)

def thm_1175 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) -> hol.proof (hol.eq hol.bool ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) p_1) ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) hol.false)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) => hol.APP_THM hol.bool hol.bool (__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) (__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_2) (hol.and (hol.or __554_3 (hol.not q_2)) (hol.or (hol.not __554_3) q_2))) p_1 hol.false (thm_1174 q_2) (thm_211 p_1 hyp_1).

(; Theorem: |- ((= ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q)))) ((= ((= Data.Bool.F) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) q)))) ;)

(; dict ;)

def thm_1176 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) (hol.eq hol.bool (hol.eq hol.bool hol.false q_1) (hol.and (hol.or hol.false (hol.not q_1)) (hol.or (hol.not hol.false) q_1)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_1) (hol.and (hol.or __554_3 (hol.not q_1)) (hol.or (hol.not __554_3) q_1))) p_2) ((__554_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __554_3 q_1) (hol.and (hol.or __554_3 (hol.not q_1)) (hol.or (hol.not __554_3) q_1))) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) (hol.eq hol.bool (hol.eq hol.bool hol.false q_1) (hol.and (hol.or hol.false (hol.not q_1)) (hol.or (hol.not hol.false) q_1)))) (thm_1173 p_2 q_1) (thm_1175 p_2 q_1 hyp_1).

(; Theorem: |- ((= ((= ((= Data.Bool.F) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) q)))) ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q)))) ;)

(; dict ;)

def thm_1177 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false q_2) (hol.and (hol.or hol.false (hol.not q_2)) (hol.or (hol.not hol.false) q_2))) (hol.eq hol.bool (hol.eq hol.bool p_1 q_2) (hol.and (hol.or p_1 (hol.not q_2)) (hol.or (hol.not p_1) q_2)))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) => hol.SYM hol.bool (hol.eq hol.bool (hol.eq hol.bool p_1 q_2) (hol.and (hol.or p_1 (hol.not q_2)) (hol.or (hol.not p_1) q_2))) (hol.eq hol.bool (hol.eq hol.bool hol.false q_2) (hol.and (hol.or hol.false (hol.not q_2)) (hol.or (hol.not hol.false) q_2))) (thm_1176 q_2 p_1 hyp_1).

(; Theorem: |- ((= ((= Data.Bool.F) q)) (Data.Bool.~ q)) ;)

(; dict ;)

def thm_1178 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false q_1) (hol.not q_1)) :=
  q_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_232 t_1) q_1.

(; Theorem: |- ((= (= ((= Data.Bool.F) q))) (= (Data.Bool.~ q))) ;)

(; dict ;)

def thm_1179 : q_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.eq hol.bool hol.false q_1)) (hol.eq hol.bool (hol.not q_1))) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.eq hol.bool hol.false q_1) (hol.not q_1) thm_119 (thm_1178 q_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) (Data.Bool.~ q))) (Data.Bool.~ q)) ;)

(; dict ;)

def thm_1180 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false (hol.not q_1)) (hol.not q_1)) :=
  q_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_850 t_1) (hol.not q_1).

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) (Data.Bool.~ q)))) (Data.Bool./\ (Data.Bool.~ q))) ;)

(; dict ;)

def thm_1181 : q_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.or hol.false (hol.not q_1))) (hol.and (hol.not q_1))) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.or hol.false (hol.not q_1)) (hol.not q_1) thm_388 (thm_1180 q_1).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.~ Data.Bool.F))) (Data.Bool.\/ Data.Bool.T)) ;)

(; dict ;)

def thm_1182 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.not hol.false)) (hol.or hol.true)) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.not hol.false) hol.true thm_431 thm_10.

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) q)) ((Data.Bool.\/ Data.Bool.T) q)) ;)

(; dict ;)

def thm_1183 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.not hol.false) q_1) (hol.or hol.true q_1)) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.or (hol.not hol.false)) (hol.or hol.true) q_1 q_1 thm_1182 (thm_81 q_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) q)) Data.Bool.T) ;)

(; dict ;)

def thm_1184 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.true q_1) hol.true) :=
  q_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_842 t_1) q_1.

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) q)) Data.Bool.T) ;)

(; dict ;)

def thm_1185 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.not hol.false) q_1) hol.true) :=
  q_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.or (hol.not hol.false) q_1) (hol.or hol.true q_1) hol.true (thm_1183 q_1) (thm_1184 q_1).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) q))) ((Data.Bool./\ (Data.Bool.~ q)) Data.Bool.T)) ;)

(; dict ;)

def thm_1186 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.or hol.false (hol.not q_1)) (hol.or (hol.not hol.false) q_1)) (hol.and (hol.not q_1) hol.true)) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and (hol.or hol.false (hol.not q_1))) (hol.and (hol.not q_1)) (hol.or (hol.not hol.false) q_1) hol.true (thm_1181 q_1) (thm_1185 q_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_1187 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_1188 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_1187 t_1) (thm_1187 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_1189 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_1190 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_1189 thm_1189.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) ;)

(; dict ;)

def thm_1191 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_65 thm_1190.

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_1192 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_1193 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_1192 t_1) (thm_1192 t_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_1194 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_39 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_1195 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_1196 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_1193 t_1) (thm_1194 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => thm_1195 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_1197 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_40 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_1198 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_1199 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_1187 t_1) (thm_1197 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => thm_1198 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_1200 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_1201 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_1200 t_1) (thm_1200 t_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_1202 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => thm_41 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_1203 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_1204 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_1201 t_1) (thm_1202 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => thm_1203 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_1205 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_1206 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_1205 t_1) (thm_1205 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_1207 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => thm_42 t_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_1208 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_1209 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_1206 t_1) (thm_1207 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => thm_1208 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_1210 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_1211 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_1210 t_1) (thm_1210 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) t)) t) ;)

(; dict ;)

def thm_1212 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_43 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_1213 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (thm_1209 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_1211 t_1) (thm_1212 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_1214 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (thm_1204 t_1) (thm_1213 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_1215 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (thm_1199 t_1) (thm_1214 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_1216 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (thm_1196 t_1) (thm_1215 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_1217 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => thm_1216 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_1218 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_93 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_1219 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) thm_1191 thm_1217 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => thm_1218 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_1220 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_166 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_1221 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_1219 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) => thm_1220 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.~ q)) Data.Bool.T)) (Data.Bool.~ q)) ;)

(; dict ;)

def thm_1222 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.not q_1) hol.true) (hol.not q_1)) :=
  q_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_1188 t_1) (thm_1221 t_1)) (hol.not q_1).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) q))) (Data.Bool.~ q)) ;)

(; dict ;)

def thm_1223 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.or hol.false (hol.not q_1)) (hol.or (hol.not hol.false) q_1)) (hol.not q_1)) :=
  q_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.and (hol.or hol.false (hol.not q_1)) (hol.or (hol.not hol.false) q_1)) (hol.and (hol.not q_1) hol.true) (hol.not q_1) (thm_1186 q_1) (thm_1222 q_1).

(; Theorem: |- ((= ((= ((= Data.Bool.F) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) q)))) ((= (Data.Bool.~ q)) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_1224 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false q_1) (hol.and (hol.or hol.false (hol.not q_1)) (hol.or (hol.not hol.false) q_1))) (hol.eq hol.bool (hol.not q_1) (hol.not q_1))) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false q_1)) (hol.eq hol.bool (hol.not q_1)) (hol.and (hol.or hol.false (hol.not q_1)) (hol.or (hol.not hol.false) q_1)) (hol.not q_1) (thm_1179 q_1) (thm_1223 q_1).

(; Theorem: |- ((= ((= (Data.Bool.~ q)) (Data.Bool.~ q))) Data.Bool.T) ;)

(; dict ;)

def thm_1225 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not q_1) (hol.not q_1)) hol.true) :=
  q_1 : hol.term hol.bool => (x_1 : hol.term hol.bool => thm_181 x_1) (hol.not q_1).

(; Theorem: |- ((= ((= ((= Data.Bool.F) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) q)))) Data.Bool.T) ;)

(; dict ;)

def thm_1226 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false q_1) (hol.and (hol.or hol.false (hol.not q_1)) (hol.or (hol.not hol.false) q_1))) hol.true) :=
  q_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false q_1) (hol.and (hol.or hol.false (hol.not q_1)) (hol.or (hol.not hol.false) q_1))) (hol.eq hol.bool (hol.not q_1) (hol.not q_1)) hol.true (thm_1224 q_1) (thm_1225 q_1).

(; Theorem: |- ((= Data.Bool.T) ((= ((= Data.Bool.F) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) q)))) ;)

(; dict ;)

def thm_1227 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.eq hol.bool hol.false q_1) (hol.and (hol.or hol.false (hol.not q_1)) (hol.or (hol.not hol.false) q_1)))) :=
  q_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false q_1) (hol.and (hol.or hol.false (hol.not q_1)) (hol.or (hol.not hol.false) q_1))) hol.true (thm_1226 q_1).

(; Theorem: |- ((= ((= Data.Bool.F) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) q))) ;)

(; dict ;)

def thm_1228 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false q_1) (hol.and (hol.or hol.false (hol.not q_1)) (hol.or (hol.not hol.false) q_1))) :=
  q_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.eq hol.bool hol.false q_1) (hol.and (hol.or hol.false (hol.not q_1)) (hol.or (hol.not hol.false) q_1))) (thm_1227 q_1) thm_5.

(; Theorem: |- ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q))) ;)

(; dict ;)

def thm_1229 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.false) => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.false q_1) (hol.and (hol.or hol.false (hol.not q_1)) (hol.or (hol.not hol.false) q_1))) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) (thm_1177 p_2 q_1 hyp_1) (thm_1228 q_1).

(; Theorem: |- ((Data.Bool.==> ((= p) Data.Bool.F)) ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q)))) ;)

(; dict ;)

def thm_1230 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.false) => thm_1229 q_1 p_2 hyp_1.

(; Theorem: |- ((= (= (\lambda _552. ((= ((= _552) q)) ((Data.Bool./\ ((Data.Bool.\/ _552) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _552)) q))) p))) (= (\lambda _552. ((= ((= _552) q)) ((Data.Bool./\ ((Data.Bool.\/ _552) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _552)) q))) p))) ;)

(; dict ;)

def thm_1231 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) p_1)) (hol.eq hol.bool ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) p_1))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) p_1)).

(; Theorem: |- ((= (\lambda _552. ((= ((= _552) q)) ((Data.Bool./\ ((Data.Bool.\/ _552) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _552)) q))) Data.Bool.T)) ((= ((= Data.Bool.T) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) q)))) ;)

(; dict ;)

def thm_1232 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__552_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_2 q_1) (hol.and (hol.or __552_2 (hol.not q_1)) (hol.or (hol.not __552_2) q_1))) hol.true) (hol.eq hol.bool (hol.eq hol.bool hol.true q_1) (hol.and (hol.or hol.true (hol.not q_1)) (hol.or (hol.not hol.true) q_1)))) :=
  q_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__552_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_2 q_1) (hol.and (hol.or __552_2 (hol.not q_1)) (hol.or (hol.not __552_2) q_1))) hol.true.

(; Theorem: |- ((= ((= (\lambda _552. ((= ((= _552) q)) ((Data.Bool./\ ((Data.Bool.\/ _552) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _552)) q))) p)) (\lambda _552. ((= ((= _552) q)) ((Data.Bool./\ ((Data.Bool.\/ _552) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _552)) q))) Data.Bool.T))) ((= (\lambda _552. ((= ((= _552) q)) ((Data.Bool./\ ((Data.Bool.\/ _552) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _552)) q))) p)) ((= ((= Data.Bool.T) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) q))))) ;)

(; dict ;)

def thm_1233 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) p_1) ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) hol.true)) (hol.eq hol.bool ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) p_1) (hol.eq hol.bool (hol.eq hol.bool hol.true q_2) (hol.and (hol.or hol.true (hol.not q_2)) (hol.or (hol.not hol.true) q_2))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) p_1)) (hol.eq hol.bool ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) p_1)) ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) hol.true) (hol.eq hol.bool (hol.eq hol.bool hol.true q_2) (hol.and (hol.or hol.true (hol.not q_2)) (hol.or (hol.not hol.true) q_2))) (thm_1231 p_1 q_2) (thm_1232 q_2).

(; Theorem: |- ((= (\lambda _552. ((= ((= _552) q)) ((Data.Bool./\ ((Data.Bool.\/ _552) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _552)) q))) p)) ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q)))) ;)

(; dict ;)

def thm_1234 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) p_1) (hol.eq hol.bool (hol.eq hol.bool p_1 q_2) (hol.and (hol.or p_1 (hol.not q_2)) (hol.or (hol.not p_1) q_2)))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) p_1.

(; Theorem: |- ((= (= (\lambda _552. ((= ((= _552) q)) ((Data.Bool./\ ((Data.Bool.\/ _552) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _552)) q))) p))) (= ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q))))) ;)

(; dict ;)

def thm_1235 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) p_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool p_1 q_2) (hol.and (hol.or p_1 (hol.not q_2)) (hol.or (hol.not p_1) q_2))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) p_1) (hol.eq hol.bool (hol.eq hol.bool p_1 q_2) (hol.and (hol.or p_1 (hol.not q_2)) (hol.or (hol.not p_1) q_2))) thm_119 (thm_1234 p_1 q_2).

(; Theorem: |- ((= ((= ((= Data.Bool.T) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) q)))) ((= ((= Data.Bool.T) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) q)))) ;)

(; dict ;)

def thm_1236 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true q_1) (hol.and (hol.or hol.true (hol.not q_1)) (hol.or (hol.not hol.true) q_1))) (hol.eq hol.bool (hol.eq hol.bool hol.true q_1) (hol.and (hol.or hol.true (hol.not q_1)) (hol.or (hol.not hol.true) q_1)))) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true q_1) (hol.and (hol.or hol.true (hol.not q_1)) (hol.or (hol.not hol.true) q_1))).

(; Theorem: |- ((= ((= (\lambda _552. ((= ((= _552) q)) ((Data.Bool./\ ((Data.Bool.\/ _552) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _552)) q))) p)) ((= ((= Data.Bool.T) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) q))))) ((= ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q)))) ((= ((= Data.Bool.T) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) q))))) ;)

(; dict ;)

def thm_1237 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) p_1) (hol.eq hol.bool (hol.eq hol.bool hol.true q_2) (hol.and (hol.or hol.true (hol.not q_2)) (hol.or (hol.not hol.true) q_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool p_1 q_2) (hol.and (hol.or p_1 (hol.not q_2)) (hol.or (hol.not p_1) q_2))) (hol.eq hol.bool (hol.eq hol.bool hol.true q_2) (hol.and (hol.or hol.true (hol.not q_2)) (hol.or (hol.not hol.true) q_2))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) p_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool p_1 q_2) (hol.and (hol.or p_1 (hol.not q_2)) (hol.or (hol.not p_1) q_2)))) (hol.eq hol.bool (hol.eq hol.bool hol.true q_2) (hol.and (hol.or hol.true (hol.not q_2)) (hol.or (hol.not hol.true) q_2))) (hol.eq hol.bool (hol.eq hol.bool hol.true q_2) (hol.and (hol.or hol.true (hol.not q_2)) (hol.or (hol.not hol.true) q_2))) (thm_1235 p_1 q_2) (thm_1236 q_2).

(; Theorem: |- ((= ((= (\lambda _552. ((= ((= _552) q)) ((Data.Bool./\ ((Data.Bool.\/ _552) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _552)) q))) p)) (\lambda _552. ((= ((= _552) q)) ((Data.Bool./\ ((Data.Bool.\/ _552) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _552)) q))) Data.Bool.T))) ((= ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q)))) ((= ((= Data.Bool.T) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) q))))) ;)

(; dict ;)

def thm_1238 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) p_1) ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool p_1 q_2) (hol.and (hol.or p_1 (hol.not q_2)) (hol.or (hol.not p_1) q_2))) (hol.eq hol.bool (hol.eq hol.bool hol.true q_2) (hol.and (hol.or hol.true (hol.not q_2)) (hol.or (hol.not hol.true) q_2))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) p_1) ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) hol.true)) (hol.eq hol.bool ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) p_1) (hol.eq hol.bool (hol.eq hol.bool hol.true q_2) (hol.and (hol.or hol.true (hol.not q_2)) (hol.or (hol.not hol.true) q_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool p_1 q_2) (hol.and (hol.or p_1 (hol.not q_2)) (hol.or (hol.not p_1) q_2))) (hol.eq hol.bool (hol.eq hol.bool hol.true q_2) (hol.and (hol.or hol.true (hol.not q_2)) (hol.or (hol.not hol.true) q_2)))) (thm_1233 p_1 q_2) (thm_1237 p_1 q_2).

(; Theorem: |- ((= \lambda _552. ((= ((= _552) q)) ((Data.Bool./\ ((Data.Bool.\/ _552) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _552)) q)))) \lambda _552. ((= ((= _552) q)) ((Data.Bool./\ ((Data.Bool.\/ _552) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _552)) q)))) ;)

(; dict ;)

def thm_1239 : q_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__552_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_2 q_1) (hol.and (hol.or __552_2 (hol.not q_1)) (hol.or (hol.not __552_2) q_1))) (__552_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_2 q_1) (hol.and (hol.or __552_2 (hol.not q_1)) (hol.or (hol.not __552_2) q_1)))) :=
  q_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__552_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_2 q_1) (hol.and (hol.or __552_2 (hol.not q_1)) (hol.or (hol.not __552_2) q_1))).

(; Theorem: |- ((= (\lambda _552. ((= ((= _552) q)) ((Data.Bool./\ ((Data.Bool.\/ _552) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _552)) q))) p)) (\lambda _552. ((= ((= _552) q)) ((Data.Bool./\ ((Data.Bool.\/ _552) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ _552)) q))) Data.Bool.T)) ;)

(; dict ;)

def thm_1240 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) -> hol.proof (hol.eq hol.bool ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) p_1) ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) hol.true)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) => hol.APP_THM hol.bool hol.bool (__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) (__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_2) (hol.and (hol.or __552_3 (hol.not q_2)) (hol.or (hol.not __552_3) q_2))) p_1 hol.true (thm_1239 q_2) (thm_266 p_1 hyp_1).

(; Theorem: |- ((= ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q)))) ((= ((= Data.Bool.T) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) q)))) ;)

(; dict ;)

def thm_1241 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) (hol.eq hol.bool (hol.eq hol.bool hol.true q_1) (hol.and (hol.or hol.true (hol.not q_1)) (hol.or (hol.not hol.true) q_1)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_1) (hol.and (hol.or __552_3 (hol.not q_1)) (hol.or (hol.not __552_3) q_1))) p_2) ((__552_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __552_3 q_1) (hol.and (hol.or __552_3 (hol.not q_1)) (hol.or (hol.not __552_3) q_1))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) (hol.eq hol.bool (hol.eq hol.bool hol.true q_1) (hol.and (hol.or hol.true (hol.not q_1)) (hol.or (hol.not hol.true) q_1)))) (thm_1238 p_2 q_1) (thm_1240 p_2 q_1 hyp_1).

(; Theorem: |- ((= ((= ((= Data.Bool.T) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) q)))) ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q)))) ;)

(; dict ;)

def thm_1242 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true q_2) (hol.and (hol.or hol.true (hol.not q_2)) (hol.or (hol.not hol.true) q_2))) (hol.eq hol.bool (hol.eq hol.bool p_1 q_2) (hol.and (hol.or p_1 (hol.not q_2)) (hol.or (hol.not p_1) q_2)))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) => hol.SYM hol.bool (hol.eq hol.bool (hol.eq hol.bool p_1 q_2) (hol.and (hol.or p_1 (hol.not q_2)) (hol.or (hol.not p_1) q_2))) (hol.eq hol.bool (hol.eq hol.bool hol.true q_2) (hol.and (hol.or hol.true (hol.not q_2)) (hol.or (hol.not hol.true) q_2))) (thm_1241 q_2 p_1 hyp_1).

(; Theorem: |- ((= ((= Data.Bool.T) q)) q) ;)

(; dict ;)

def thm_1243 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true q_1) q_1) :=
  q_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_222 t_1) q_1.

(; Theorem: |- ((= (= ((= Data.Bool.T) q))) (= q)) ;)

(; dict ;)

def thm_1244 : q_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.eq hol.bool hol.true q_1)) (hol.eq hol.bool q_1)) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.eq hol.bool hol.true q_1) q_1 thm_119 (thm_1243 q_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) (Data.Bool.~ q))) Data.Bool.T) ;)

(; dict ;)

def thm_1245 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.true (hol.not q_1)) hol.true) :=
  q_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_842 t_1) (hol.not q_1).

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) (Data.Bool.~ q)))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_1246 : q_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.or hol.true (hol.not q_1))) (hol.and hol.true)) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.or hol.true (hol.not q_1)) hol.true thm_388 (thm_1245 q_1).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.~ Data.Bool.T))) (Data.Bool.\/ Data.Bool.F)) ;)

(; dict ;)

def thm_1247 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.not hol.true)) (hol.or hol.false)) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.not hol.true) hol.false thm_431 thm_9.

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) q)) ((Data.Bool.\/ Data.Bool.F) q)) ;)

(; dict ;)

def thm_1248 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.not hol.true) q_1) (hol.or hol.false q_1)) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.or (hol.not hol.true)) (hol.or hol.false) q_1 q_1 thm_1247 (thm_81 q_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) q)) q) ;)

(; dict ;)

def thm_1249 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false q_1) q_1) :=
  q_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_850 t_1) q_1.

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) q)) q) ;)

(; dict ;)

def thm_1250 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.not hol.true) q_1) q_1) :=
  q_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.or (hol.not hol.true) q_1) (hol.or hol.false q_1) q_1 (thm_1248 q_1) (thm_1249 q_1).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) q))) ((Data.Bool./\ Data.Bool.T) q)) ;)

(; dict ;)

def thm_1251 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.or hol.true (hol.not q_1)) (hol.or (hol.not hol.true) q_1)) (hol.and hol.true q_1)) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and (hol.or hol.true (hol.not q_1))) (hol.and hol.true) (hol.or (hol.not hol.true) q_1) q_1 (thm_1246 q_1) (thm_1250 q_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) q)) q) ;)

(; dict ;)

def thm_1252 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true q_1) q_1) :=
  q_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_1194 t_1) q_1.

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) q))) q) ;)

(; dict ;)

def thm_1253 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.or hol.true (hol.not q_1)) (hol.or (hol.not hol.true) q_1)) q_1) :=
  q_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.and (hol.or hol.true (hol.not q_1)) (hol.or (hol.not hol.true) q_1)) (hol.and hol.true q_1) q_1 (thm_1251 q_1) (thm_1252 q_1).

(; Theorem: |- ((= ((= ((= Data.Bool.T) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) q)))) ((= q) q)) ;)

(; dict ;)

def thm_1254 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true q_1) (hol.and (hol.or hol.true (hol.not q_1)) (hol.or (hol.not hol.true) q_1))) (hol.eq hol.bool q_1 q_1)) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true q_1)) (hol.eq hol.bool q_1) (hol.and (hol.or hol.true (hol.not q_1)) (hol.or (hol.not hol.true) q_1)) q_1 (thm_1244 q_1) (thm_1253 q_1).

(; Theorem: |- ((= ((= q) q)) Data.Bool.T) ;)

(; dict ;)

def thm_1255 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool q_1 q_1) hol.true) :=
  q_1 : hol.term hol.bool => (x_1 : hol.term hol.bool => thm_181 x_1) q_1.

(; Theorem: |- ((= ((= ((= Data.Bool.T) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) q)))) Data.Bool.T) ;)

(; dict ;)

def thm_1256 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true q_1) (hol.and (hol.or hol.true (hol.not q_1)) (hol.or (hol.not hol.true) q_1))) hol.true) :=
  q_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true q_1) (hol.and (hol.or hol.true (hol.not q_1)) (hol.or (hol.not hol.true) q_1))) (hol.eq hol.bool q_1 q_1) hol.true (thm_1254 q_1) (thm_1255 q_1).

(; Theorem: |- ((= Data.Bool.T) ((= ((= Data.Bool.T) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) q)))) ;)

(; dict ;)

def thm_1257 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.eq hol.bool hol.true q_1) (hol.and (hol.or hol.true (hol.not q_1)) (hol.or (hol.not hol.true) q_1)))) :=
  q_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true q_1) (hol.and (hol.or hol.true (hol.not q_1)) (hol.or (hol.not hol.true) q_1))) hol.true (thm_1256 q_1).

(; Theorem: |- ((= ((= Data.Bool.T) q)) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) q))) ;)

(; dict ;)

def thm_1258 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true q_1) (hol.and (hol.or hol.true (hol.not q_1)) (hol.or (hol.not hol.true) q_1))) :=
  q_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.eq hol.bool hol.true q_1) (hol.and (hol.or hol.true (hol.not q_1)) (hol.or (hol.not hol.true) q_1))) (thm_1257 q_1) thm_5.

(; Theorem: |- ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q))) ;)

(; dict ;)

def thm_1259 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.true) => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.true q_1) (hol.and (hol.or hol.true (hol.not q_1)) (hol.or (hol.not hol.true) q_1))) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) (thm_1242 p_2 q_1 hyp_1) (thm_1258 q_1).

(; Theorem: |- ((Data.Bool.==> ((= p) Data.Bool.T)) ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q)))) ;)

(; dict ;)

def thm_1260 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.true) => thm_1259 q_1 p_2 hyp_1.

(; Theorem: |- ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q))) ;)

(; dict ;)

def thm_1261 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1)))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool p_2 hol.false)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1)))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool p_2 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q))) ;)

(; dict ;)

def thm_1262 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1)))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1)))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool p_2 hol.false)) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) (thm_276 p_2) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool p_2 hol.false)) => thm_1261 q_1 p_2 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q))) ;)

(; dict ;)

def thm_1263 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1)))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1)))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1)))) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) (thm_1260 q_1 p_2) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1)))) => thm_1262 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= ((= p) q)) ((Data.Bool./\ ((Data.Bool.\/ p) (Data.Bool.~ q))) ((Data.Bool.\/ (Data.Bool.~ p)) q))) ;)

(; dict ;)

def thm_1264 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1)))) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) (thm_1230 q_1 p_2) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1)))) => thm_1263 q_1 p_2 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ (Data.Bool.~ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1265 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) (thm_1165 q_1 p_2) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) (hol.eq hol.bool (hol.eq hol.bool p_2 q_1) (hol.and (hol.or p_2 (hol.not q_1)) (hol.or (hol.not p_2) q_1))) (thm_1164 q_1 p_2) (thm_1264 q_1 p_2))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))).

(; Theorem: |- ((= \lambda b. ((= r) ((HOLLight.mk_pair a) b))) \lambda b. ((= r) ((HOLLight.mk_pair a) b))) ;)

(; dict ;)

def thm_1266 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM B hol.bool (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)) (b_3 : hol.term B => thm_797 B A b_3 a_1 r_2).

(; Theorem: |- ((= (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))) (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_1267 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)) (thm_1131 B) (thm_1266 A B a_1 r_2).

(; Theorem: |- ((= \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))) \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_1268 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM A hol.bool (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (a_2 : hol.term A => thm_1267 A B a_2 r_1).

(; Theorem: |- ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_1269 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (thm_350 A) (thm_1268 B A r_1).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))))) (Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_1270 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) thm_431 (thm_1269 B A r_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1271 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (thm_1270 B A r_1) (thm_788 B A r_1).

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool./\ ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1272 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) thm_388 (thm_1271 B A r_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))))) (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))) x)))) ;)

(; dict ;)

def thm_1273 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.forall A (x_2 : hol.term A => hol.not ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) x_2)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => thm_366 A P_1) A (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))).

(; Theorem: |- ((= (\lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))) a)) (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_1274 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))) a_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV A hol.bool (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))) a_1.

(; Theorem: |- ((= (Data.Bool.~ (\lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))) a))) (Data.Bool.~ (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_1275 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))) a_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool hol.not hol.not ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))) a_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) thm_247 (thm_1274 B A a_1 r_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda b. ((= r) ((HOLLight.mk_pair a) b)) x)))) ;)

(; dict ;)

def thm_1276 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (hol.forall B (x_3 : hol.term B => hol.not ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) x_3)))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (B : hol.type => P_1 : hol.term (hol.arr B hol.bool) => thm_534 B P_1) B (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)).

(; Theorem: |- ((= (\lambda b. ((= r) ((HOLLight.mk_pair a) b)) b)) ((= r) ((HOLLight.mk_pair a) b))) ;)

(; dict ;)

def thm_1277 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_4)) b_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_4)) b_1.

(; Theorem: |- ((= (Data.Bool.~ (\lambda b. ((= r) ((HOLLight.mk_pair a) b)) b))) (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_1278 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_4)) b_1)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool hol.not hol.not ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_4)) b_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1)) thm_247 (thm_1277 A B b_1 a_2 r_3).

(; Theorem: |- ((= (Data.Bool.~ (\lambda b. ((= r) ((HOLLight.mk_pair a) b)) b))) (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_1279 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_4)) b_1)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.not ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_4)) b_1)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1))) (thm_1278 A B b_1 a_2 r_3) (thm_798 B A b_1 a_2 r_3).

(; Theorem: |- ((= \lambda b. (Data.Bool.~ (\lambda b. ((= r) ((HOLLight.mk_pair a) b)) b))) \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_1280 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (b_3 : hol.term B => hol.not ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3)) (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM B hol.bool (b_3 : hol.term B => hol.not ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3)) (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (b_3 : hol.term B => thm_1279 A B b_3 a_1 r_2).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (Data.Bool.~ (\lambda b. ((= r) ((HOLLight.mk_pair a) b)) b)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_1281 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall B (b_3 : hol.term B => hol.not ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3))) (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_3 : hol.term B => hol.not ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3)) (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (thm_536 B) (thm_1280 A B a_1 r_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_1282 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (hol.forall B (x_3 : hol.term B => hol.not ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) x_3))) (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (thm_1276 A B a_1 r_2) (thm_1281 A B a_1 r_2).

(; Theorem: |- ((= (Data.Bool.~ (\lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))) a))) (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_1283 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))) a_1)) (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.not ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))) a_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (thm_1275 B A a_1 r_2) (thm_1282 A B a_1 r_2).

(; Theorem: |- ((= \lambda a. (Data.Bool.~ (\lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))) a))) \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_1284 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => hol.not ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2)) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM A hol.bool (a_2 : hol.term A => hol.not ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2)) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (a_2 : hol.term A => thm_1283 B A a_2 r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.~ (\lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))) a)))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_1285 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => hol.not ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2))) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_2 : hol.term A => hol.not ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2)) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (thm_51 A) (thm_1284 B A r_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_1286 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.forall A (x_2 : hol.term A => hol.not ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) x_2))) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (thm_1273 B A r_1) (thm_1285 B A r_1).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.~ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))))) (Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b))))))) ;)

(; dict ;)

def thm_1287 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) thm_431 (thm_1286 B A r_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ;)

(; dict ;)

def thm_1288 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.or (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1) (thm_1287 B A r_1) (thm_787 B A r_1).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ (Data.Bool.~ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1289 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.or (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (thm_1272 B A r_1) (thm_1288 B A r_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1290 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (thm_1265 B A r_1) (thm_1289 B A r_1).

(; Theorem: |- ((= \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) \lambda r. ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1291 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1290 B A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (Data.Bool.! \lambda r. ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1292 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (thm_528 B A) (thm_1291 B A).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1293 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (thm_772 B A) (thm_1292 B A).

(; Theorem: |- ((= (\lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r)) ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1294 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV (hol.arr A (hol.arr B hol.bool)) hol.bool (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1.

(; Theorem: |- ((= (Data.Bool./\ (\lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r))) (Data.Bool./\ ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1295 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1)) (hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) thm_388 (thm_1294 B A r_1).

(; Theorem: |- ((= (\lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)) r)) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ;)

(; dict ;)

def thm_1296 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV (hol.arr A (hol.arr B hol.bool)) hol.bool (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1.

(; Theorem: |- ((= ((Data.Bool./\ (\lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r)) (\lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)) r))) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1297 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.and ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1) ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1)) (hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.and ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1)) (hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (thm_1295 B A r_1) (thm_1296 B A r_1).

(; Theorem: |- ((= \lambda r. ((Data.Bool./\ (\lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r)) (\lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)) r))) \lambda r. ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1298 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1) ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1) ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1297 B A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((Data.Bool./\ (\lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r)) (\lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)) r)))) (Data.Bool.! \lambda r. ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1299 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1) ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1) ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (thm_528 B A) (thm_1298 B A).

(; Theorem: |- ((= (= (Data.Bool.! \lambda r. ((Data.Bool./\ (\lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r)) (\lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)) r))))) (= (Data.Bool.! \lambda r. ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1300 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1) ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1)))) (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1) ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) thm_119 (thm_1299 B A).

(; Theorem: |- ((= \lambda r. (\lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r)) \lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1301 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1294 B A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda r. (\lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1302 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (thm_528 B A) (thm_1301 B A).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.! \lambda r. (\lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r)))) (Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1303 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) thm_388 (thm_1302 B A).

(; Theorem: |- ((= \lambda r. (\lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)) r)) \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ;)

(; dict ;)

def thm_1304 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1296 B A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda r. (\lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)) r))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1305 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (thm_528 B A) (thm_1304 B A).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda r. (\lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r))) (Data.Bool.! \lambda r. (\lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)) r)))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1306 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (thm_1303 B A) (thm_1305 B A).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda r. ((Data.Bool./\ (\lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r)) (\lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)) r)))) ((Data.Bool./\ (Data.Bool.! \lambda r. (\lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r))) (Data.Bool.! \lambda r. (\lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)) r))))) ((= (Data.Bool.! \lambda r. ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1307 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1) ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1)))) (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1) ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1)))) (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (thm_1300 B A) (thm_1306 B A).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_1308 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda r. ((Data.Bool./\ (p r)) (q r)))) ((Data.Bool./\ (Data.Bool.! \lambda r. (p r))) (Data.Bool.! \lambda r. (q r))))) ((= (Data.Bool.! \lambda r. ((Data.Bool./\ (p r)) (q r)))) ((Data.Bool./\ (Data.Bool.! \lambda r. (p r))) (Data.Bool.! \lambda r. (q r))))) ;)

(; dict ;)

def thm_1309 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (r_3 : hol.term A => hol.and (p_2 r_3) (q_1 r_3))) (hol.and (hol.forall A (r_3 : hol.term A => p_2 r_3)) (hol.forall A (r_3 : hol.term A => q_1 r_3)))) (hol.eq hol.bool (hol.forall A (r_3 : hol.term A => hol.and (p_2 r_3) (q_1 r_3))) (hol.and (hol.forall A (r_3 : hol.term A => p_2 r_3)) (hol.forall A (r_3 : hol.term A => q_1 r_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (r_3 : hol.term A => hol.and (p_2 r_3) (q_1 r_3))) (hol.and (hol.forall A (r_3 : hol.term A => p_2 r_3)) (hol.forall A (r_3 : hol.term A => q_1 r_3)))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ((= (Data.Bool.! \lambda r. ((Data.Bool./\ (p r)) (q r)))) ((Data.Bool./\ (Data.Bool.! \lambda r. (p r))) (Data.Bool.! \lambda r. (q r))))) ;)

(; dict ;)

def thm_1310 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.forall A (r_3 : hol.term A => hol.and (p_2 r_3) (q_1 r_3))) (hol.and (hol.forall A (r_3 : hol.term A => p_2 r_3)) (hol.forall A (r_3 : hol.term A => q_1 r_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.forall A (r_3 : hol.term A => hol.and (p_2 r_3) (q_1 r_3))) (hol.and (hol.forall A (r_3 : hol.term A => p_2 r_3)) (hol.forall A (r_3 : hol.term A => q_1 r_3)))) (thm_1308 A q_1 p_2) (thm_1309 A q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_1311 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_44 A p_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) ;)

(; dict ;)

def thm_1312 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => thm_1311 A p_2 q_1.

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((Data.Bool./\ (p r)) (q r)))) ((Data.Bool./\ (Data.Bool.! \lambda r. (p r))) (Data.Bool.! \lambda r. (q r)))) ;)

(; dict ;)

def thm_1313 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (r_3 : hol.term A => hol.and (p_2 r_3) (q_1 r_3))) (hol.and (hol.forall A (r_3 : hol.term A => p_2 r_3)) (hol.forall A (r_3 : hol.term A => q_1 r_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.forall A (r_3 : hol.term A => hol.and (p_2 r_3) (q_1 r_3))) (hol.and (hol.forall A (r_3 : hol.term A => p_2 r_3)) (hol.forall A (r_3 : hol.term A => q_1 r_3)))) (thm_1310 A q_1 p_2) (thm_1312 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((Data.Bool./\ (p r)) (q r)))) ((Data.Bool./\ (Data.Bool.! \lambda r. (p r))) (Data.Bool.! \lambda r. (q r)))) ;)

(; dict ;)

def thm_1314 : B : hol.type -> A : hol.type -> q_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) -> p_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (p_2 r_3) (q_1 r_3))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_2 r_3)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => q_1 r_3)))) :=
  B : hol.type => A : hol.type => q_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) => p_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => thm_1313 A q_1 p_2) (hol.arr A (hol.arr B hol.bool)) q_1 p_2.

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((Data.Bool./\ (\lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r)) (\lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)) r)))) ((Data.Bool./\ (Data.Bool.! \lambda r. (\lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r))) (Data.Bool.! \lambda r. (\lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)) r)))) ;)

(; dict ;)

def thm_1315 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1) ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1)))) :=
  B : hol.type => A : hol.type => (B : hol.type => A : hol.type => q_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) => p_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) => thm_1314 B A q_1 p_2) B A (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1316 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1) ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) r_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) r_1)))) (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (thm_1307 B A) (thm_1315 B A).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1317 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (thm_772 B A) (thm_1316 B A).

(; Theorem: |- ((= \lambda a. (\lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))) a)) \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_1318 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM A hol.bool (a_2 : hol.term A => (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (a_2 : hol.term A => thm_1274 B A a_2 r_1).

(; Theorem: |- ((= (Data.Bool.? \lambda a. (\lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))) a))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_1319 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (a_2 : hol.term A => (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (thm_350 A) (thm_1318 B A r_1).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.? \lambda a. (\lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))) a)))) (Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_1320 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) thm_431 (thm_1319 B A r_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.? \lambda a. (\lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))) a))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1321 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (thm_1320 B A r_1) (thm_788 B A r_1).

(; Theorem: |- ((= (= ((Data.Bool.\/ (Data.Bool.? \lambda a. (\lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))) a))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (= ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1322 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) thm_119 (thm_1321 B A r_1).

(; Theorem: |- ((= (Data.Bool.\/ (\lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))) a))) (Data.Bool.\/ (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_1323 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))) a_1)) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))) a_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) thm_431 (thm_1274 B A a_1 r_2).

(; Theorem: |- ((= ((Data.Bool.\/ (\lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))) a)) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1324 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))) a_1) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.or ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))) a_1)) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (thm_1323 B A a_1 r_2) (thm_788 B A r_2).

(; Theorem: |- ((= \lambda a. ((Data.Bool.\/ (\lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))) a)) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) \lambda a. ((Data.Bool.\/ (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1325 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => hol.or ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (a_2 : hol.term A => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM A hol.bool (a_2 : hol.term A => hol.or ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (a_2 : hol.term A => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (a_2 : hol.term A => thm_1324 B A a_2 r_1).

(; Theorem: |- ((= (Data.Bool.? \lambda a. ((Data.Bool.\/ (\lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))) a)) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.? \lambda a. ((Data.Bool.\/ (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1326 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.or ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (a_2 : hol.term A => hol.or ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (a_2 : hol.term A => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (thm_350 A) (thm_1325 B A r_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.? \lambda a. (\lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))) a))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (Data.Bool.? \lambda a. ((Data.Bool.\/ (\lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))) a)) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ((= ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (Data.Bool.? \lambda a. ((Data.Bool.\/ (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1327 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.or ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.or ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (thm_1322 B A r_1) (thm_1326 B A r_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)))) ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)))) ;)

(; dict ;)

def thm_1328 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.? \lambda a. (p a))) q)) (Data.Bool.? \lambda a. ((Data.Bool.\/ (p a)) q)))) ((= ((Data.Bool.\/ (Data.Bool.? \lambda a. (p a))) q)) (Data.Bool.? \lambda a. ((Data.Bool.\/ (p a)) q)))) ;)

(; dict ;)

def thm_1329 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => p_2 a_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.or (p_2 a_3) q_1))) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => p_2 a_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.or (p_2 a_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => p_2 a_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.or (p_2 a_3) q_1))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)))) ((= ((Data.Bool.\/ (Data.Bool.? \lambda a. (p a))) q)) (Data.Bool.? \lambda a. ((Data.Bool.\/ (p a)) q)))) ;)

(; dict ;)

def thm_1330 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => p_2 a_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.or (p_2 a_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => p_2 a_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.or (p_2 a_3) q_1))) (thm_1328 A q_1 p_2) (thm_1329 A q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)))) ;)

(; dict ;)

def thm_1331 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_45 A p_1.

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q))) ;)

(; dict ;)

def thm_1332 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_1331 A p_2 q_1.

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.? \lambda a. (p a))) q)) (Data.Bool.? \lambda a. ((Data.Bool.\/ (p a)) q))) ;)

(; dict ;)

def thm_1333 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => p_2 a_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.or (p_2 a_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => p_2 a_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.or (p_2 a_3) q_1))) (thm_1330 A q_1 p_2) (thm_1332 A q_1 p_2).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.? \lambda a. (\lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))) a))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (Data.Bool.? \lambda a. ((Data.Bool.\/ (\lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))) a)) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1334 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.or ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_1333 A q_1 p_2) A q_1 p_2) A (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (Data.Bool.? \lambda a. ((Data.Bool.\/ (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1335 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.or ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_3 b_4))) a_2) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (thm_1327 B A r_1) (thm_1334 B A r_1).

(; Theorem: |- ((= \lambda b. (\lambda b. ((= r) ((HOLLight.mk_pair a) b)) b)) \lambda b. ((= r) ((HOLLight.mk_pair a) b))) ;)

(; dict ;)

def thm_1336 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (b_3 : hol.term B => (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM B hol.bool (b_3 : hol.term B => (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)) (b_3 : hol.term B => thm_1277 A B b_3 a_1 r_2).

(; Theorem: |- ((= (Data.Bool.? \lambda b. (\lambda b. ((= r) ((HOLLight.mk_pair a) b)) b))) (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_1337 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (b_3 : hol.term B => (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)) (thm_1131 B) (thm_1336 A B a_1 r_2).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.? \lambda b. (\lambda b. ((= r) ((HOLLight.mk_pair a) b)) b)))) (Data.Bool.\/ (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_1338 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) thm_431 (thm_1337 A B a_1 r_2).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.? \lambda b. (\lambda b. ((= r) ((HOLLight.mk_pair a) b)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1339 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (thm_1338 A B a_1 r_2) (thm_788 B A r_2).

(; Theorem: |- ((= (= ((Data.Bool.\/ (Data.Bool.? \lambda b. (\lambda b. ((= r) ((HOLLight.mk_pair a) b)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (= ((Data.Bool.\/ (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1340 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) thm_119 (thm_1339 A B a_1 r_2).

(; Theorem: |- ((= (Data.Bool.\/ (\lambda b. ((= r) ((HOLLight.mk_pair a) b)) b))) (Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_1341 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_4)) b_1)) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_4)) b_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1)) thm_431 (thm_1277 A B b_1 a_2 r_3).

(; Theorem: |- ((= ((Data.Bool.\/ (\lambda b. ((= r) ((HOLLight.mk_pair a) b)) b)) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1342 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_4)) b_1) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.or ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_4)) b_1)) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_2 b_1))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)) (thm_1341 A B b_1 a_2 r_3) (thm_788 B A r_3).

(; Theorem: |- ((= \lambda b. ((Data.Bool.\/ (\lambda b. ((= r) ((HOLLight.mk_pair a) b)) b)) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1343 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (b_3 : hol.term B => hol.or ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM B hol.bool (b_3 : hol.term B => hol.or ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (b_3 : hol.term B => thm_1342 A B b_3 a_1 r_2).

(; Theorem: |- ((= (Data.Bool.? \lambda b. ((Data.Bool.\/ (\lambda b. ((= r) ((HOLLight.mk_pair a) b)) b)) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1344 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (b_3 : hol.term B => hol.or ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (thm_1131 B) (thm_1343 A B a_1 r_2).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.? \lambda b. (\lambda b. ((= r) ((HOLLight.mk_pair a) b)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (Data.Bool.? \lambda b. ((Data.Bool.\/ (\lambda b. ((= r) ((HOLLight.mk_pair a) b)) b)) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ((= ((Data.Bool.\/ (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1345 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (thm_1340 A B a_1 r_2) (thm_1344 A B a_1 r_2).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.? \lambda b. (p b))) q)) (Data.Bool.? \lambda b. ((Data.Bool.\/ (p b)) q)))) ((= ((Data.Bool.\/ (Data.Bool.? \lambda b. (p b))) q)) (Data.Bool.? \lambda b. ((Data.Bool.\/ (p b)) q)))) ;)

(; dict ;)

def thm_1346 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_3 : hol.term A => p_2 b_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_3 : hol.term A => hol.or (p_2 b_3) q_1))) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_3 : hol.term A => p_2 b_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_3 : hol.term A => hol.or (p_2 b_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_3 : hol.term A => p_2 b_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_3 : hol.term A => hol.or (p_2 b_3) q_1))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)))) ((= ((Data.Bool.\/ (Data.Bool.? \lambda b. (p b))) q)) (Data.Bool.? \lambda b. ((Data.Bool.\/ (p b)) q)))) ;)

(; dict ;)

def thm_1347 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_3 : hol.term A => p_2 b_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_3 : hol.term A => hol.or (p_2 b_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_3 : hol.term A => p_2 b_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_3 : hol.term A => hol.or (p_2 b_3) q_1))) (thm_1328 A q_1 p_2) (thm_1346 A q_1 p_2).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.? \lambda b. (p b))) q)) (Data.Bool.? \lambda b. ((Data.Bool.\/ (p b)) q))) ;)

(; dict ;)

def thm_1348 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_3 : hol.term A => p_2 b_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_3 : hol.term A => hol.or (p_2 b_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_3 : hol.term A => p_2 b_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_3 : hol.term A => hol.or (p_2 b_3) q_1))) (thm_1347 A q_1 p_2) (thm_1332 A q_1 p_2).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.? \lambda b. (p b))) q)) (Data.Bool.? \lambda b. ((Data.Bool.\/ (p b)) q))) ;)

(; dict ;)

def thm_1349 : B : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => p_2 b_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (p_2 b_3) q_1))) :=
  B : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr B hol.bool) => (A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_1348 A q_1 p_2) B q_1 p_2.

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.? \lambda b. (\lambda b. ((= r) ((HOLLight.mk_pair a) b)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (Data.Bool.? \lambda b. ((Data.Bool.\/ (\lambda b. ((= r) ((HOLLight.mk_pair a) b)) b)) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1350 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (B : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr B hol.bool) => thm_1349 B q_1 p_2) B (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1351 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_4)) b_3) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) (thm_1345 A B a_1 r_2) (thm_1350 A B a_1 r_2).

(; Theorem: |- ((= \lambda a. ((Data.Bool.\/ (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1352 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM A hol.bool (a_2 : hol.term A => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (a_2 : hol.term A => thm_1351 A B a_2 r_1).

(; Theorem: |- ((= (Data.Bool.? \lambda a. ((Data.Bool.\/ (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1353 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (a_2 : hol.term A => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (thm_350 A) (thm_1352 B A r_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1354 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (thm_1335 B A r_1) (thm_1353 B A r_1).

(; Theorem: |- ((= \lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) \lambda r. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1355 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1354 B A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1356 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (thm_528 B A) (thm_1355 B A).

(; Theorem: |- ((= (\lambda r. \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) r)) \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1357 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) ((r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) r_1) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV (hol.arr A (hol.arr B hol.bool)) (hol.arr A hol.bool) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) r_1.

(; Theorem: |- ((= ((\lambda r. \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) r) a)) (\lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) a)) ;)

(; dict ;)

def thm_1358 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_2 a_1) ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) a_1)) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM A hol.bool ((r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_2) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) a_1 a_1 (thm_1357 B A r_2) (thm_793 A a_1).

(; Theorem: |- ((= (\lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) a)) (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1359 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) a_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV A hol.bool (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) a_1.

(; Theorem: |- ((= ((\lambda r. \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) r) a)) (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1360 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_2 a_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool ((r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_2 a_1) ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) a_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_1 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (thm_1358 B A a_1 r_2) (thm_1359 B A a_1 r_2).

(; Theorem: |- ((= \lambda a. ((\lambda r. \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) r) a)) \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1361 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_1 a_2) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM A hol.bool (a_2 : hol.term A => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_1 a_2) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (a_2 : hol.term A => thm_1360 B A a_2 r_1).

(; Theorem: |- ((= (Data.Bool.? \lambda a. ((\lambda r. \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) r) a))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1362 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_1 a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (a_2 : hol.term A => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_1 a_2) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (thm_350 A) (thm_1361 B A r_1).

(; Theorem: |- ((= \lambda r. (Data.Bool.? \lambda a. ((\lambda r. \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) r) a))) \lambda r. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1363 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_1 a_2)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_1 a_2)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1362 B A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda a. ((\lambda r. \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) r) a)))) (Data.Bool.! \lambda r. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1364 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_1 a_2))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_1 a_2)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (thm_528 B A) (thm_1363 B A).

(; Theorem: |- ((= (= (Data.Bool.! \lambda r. (Data.Bool.? \lambda a. ((\lambda r. \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) r) a))))) (= (Data.Bool.! \lambda r. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) ;)

(; dict ;)

def thm_1365 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_1 a_2)))) (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_1 a_2))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) thm_119 (thm_1364 B A).

(; Theorem: |- ((= Data.Bool.?) Data.Bool.?) ;)

(; dict ;)

def thm_1366 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool)).

(; Theorem: |- ((= ((\lambda r. \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) r) (f r))) (\lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (f r))) ;)

(; dict ;)

def thm_1367 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_2 (f_1 r_2)) ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (f_1 r_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM A hol.bool ((r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_2) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (f_1 r_2) (f_1 r_2) (thm_1357 B A r_2) (thm_777 B A r_2 f_1).

(; Theorem: |- ((= (\lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) (f r))) (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1368 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (f_1 r_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV A hol.bool (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (f_1 r_2).

(; Theorem: |- ((= ((\lambda r. \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) r) (f r))) (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1369 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_2 (f_1 r_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool ((r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_2 (f_1 r_2)) ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (f_1 r_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (thm_1367 B A f_1 r_2) (thm_1368 B A f_1 r_2).

(; Theorem: |- ((= \lambda r. ((\lambda r. \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) r) (f r))) \lambda r. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1370 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_2 (f_1 r_2)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.ABS_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_2 (f_1 r_2)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1369 B A f_1 r_2).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((\lambda r. \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) r) (f r)))) (Data.Bool.! \lambda r. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1371 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_2 (f_1 r_2))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_2 (f_1 r_2)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (thm_528 B A) (thm_1370 B A f_1).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda r. ((\lambda r. \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) r) (f r)))) \lambda f. (Data.Bool.! \lambda r. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1372 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_2 (f_1 r_2))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_2 (f_1 r_2))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => thm_1371 B A f_1).

(; Theorem: |- ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((\lambda r. \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) r) (f r))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1373 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_2 (f_1 r_2)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool)) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_2 (f_1 r_2))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) (thm_1366 B A) (thm_1372 B A).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda a. ((\lambda r. \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) r) a)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((\lambda r. \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) r) (f r)))))) ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) ;)

(; dict ;)

def thm_1374 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_1 a_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_2 (f_1 r_2))))) (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_1 a_2)))) (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_2 (f_1 r_2)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))))) (thm_1365 B A) (thm_1373 B A).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x)))))) ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x)))))) ;)

(; dict ;)

def thm_1375 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda a. ((r r) a)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((r r) (f r)))))) ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda a. ((r r) a)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((r r) (f r)))))) ;)

(; dict ;)

def thm_1376 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (a_3 : hol.term B => r_1 r_2 a_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (r_3 : hol.term A => r_1 r_3 (f_2 r_3))))) (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (a_3 : hol.term B => r_1 r_2 a_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (r_3 : hol.term A => r_1 r_3 (f_2 r_3)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (a_3 : hol.term B => r_1 r_2 a_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (r_3 : hol.term A => r_1 r_3 (f_2 r_3))))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x)))))) ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda a. ((r r) a)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((r r) (f r)))))) ;)

(; dict ;)

def thm_1377 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (a_3 : hol.term B => r_1 r_2 a_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (r_3 : hol.term A => r_1 r_3 (f_2 r_3)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (a_3 : hol.term B => r_1 r_2 a_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (r_3 : hol.term A => r_1 r_3 (f_2 r_3))))) (thm_1375 B A r_1) (thm_1376 B A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))) ;)

(; dict ;)

def thm_1378 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_46 B A r_1.

(; Theorem: |- ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda a. ((r r) a)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((r r) (f r))))) ;)

(; dict ;)

def thm_1379 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (a_3 : hol.term B => r_1 r_2 a_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (r_3 : hol.term A => r_1 r_3 (f_2 r_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (a_3 : hol.term B => r_1 r_2 a_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (r_3 : hol.term A => r_1 r_3 (f_2 r_3))))) (thm_1377 B A r_1) (thm_1378 B A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda a. ((r r) a)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((r r) (f r))))) ;)

(; dict ;)

def thm_1380 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => r_1 r_2 a_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => r_1 r_3 (f_2 r_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) (hol.arr A hol.bool)) => (B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1379 B A r_1) A (hol.arr A (hol.arr B hol.bool)) r_1.

(; Theorem: |- ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda a. ((\lambda r. \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) r) a)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((\lambda r. \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) r) (f r))))) ;)

(; dict ;)

def thm_1381 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_1 a_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_2 (f_1 r_2))))) :=
  B : hol.type => A : hol.type => (B : hol.type => A : hol.type => r_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) (hol.arr A hol.bool)) => thm_1380 B A r_1) B A (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))).

(; Theorem: |- ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1382 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_1 a_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) r_2 (f_1 r_2))))) (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))))) (thm_1374 B A) (thm_1381 B A).

(; Theorem: |- ((= (\lambda r. \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r)) \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1383 : A : hol.type -> B : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr B hol.bool) ((r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) r_1) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A (f_2 r_1) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  A : hol.type => B : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.BETA_CONV (hol.arr A (hol.arr B hol.bool)) (hol.arr B hol.bool) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) r_1.

(; Theorem: |- ((= ((\lambda r. \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r) b)) (\lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) b)) ;)

(; dict ;)

def thm_1384 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool ((r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_3 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_2 b_1) ((b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_3 r_2) b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) b_1)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM B hol.bool ((r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_3 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_2) (b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_3 r_2) b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) b_1 b_1 (thm_1383 A B r_2 f_3) (thm_795 B b_1).

(; Theorem: |- ((= (\lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) b)) ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1385 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) b_1) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) b_1)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) b_1.

(; Theorem: |- ((= ((\lambda r. \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r) b)) ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1386 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool ((r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_3 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_2 b_1) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_3 r_2) b_1)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.TRANS hol.bool ((r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_3 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_2 b_1) ((b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_3 r_2) b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) b_1) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_3 r_2) b_1)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (thm_1384 B A b_1 r_2 f_3) (thm_1385 A B b_1 f_3 r_2).

(; Theorem: |- ((= \lambda b. ((\lambda r. \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r) b)) \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1387 : A : hol.type -> B : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr B hol.bool) (b_3 : hol.term B => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_1 b_3) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A (f_2 r_1) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  A : hol.type => B : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.ABS_THM B hol.bool (b_3 : hol.term B => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_1 b_3) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A (f_2 r_1) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (b_3 : hol.term B => thm_1386 B A b_3 r_1 f_2).

(; Theorem: |- ((= (Data.Bool.? \lambda b. ((\lambda r. \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r) b))) (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1388 : A : hol.type -> B : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_1 b_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A (f_2 r_1) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  A : hol.type => B : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (b_3 : hol.term B => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_1 b_3) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A (f_2 r_1) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (thm_1131 B) (thm_1387 A B r_1 f_2).

(; Theorem: |- ((= \lambda r. (Data.Bool.? \lambda b. ((\lambda r. \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r) b))) \lambda r. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1389 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_2 b_3)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.ABS_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_2 b_3)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1388 A B r_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda b. ((\lambda r. \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r) b)))) (Data.Bool.! \lambda r. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1390 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_2 b_3))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_2 b_3)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (thm_528 B A) (thm_1389 B A f_1).

(; Theorem: |- ((= (= (Data.Bool.! \lambda r. (Data.Bool.? \lambda b. ((\lambda r. \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r) b))))) (= (Data.Bool.! \lambda r. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1391 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_2 b_3)))) (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_2 b_3))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) thm_119 (thm_1390 B A f_1).

(; Theorem: |- ((= Data.Bool.?) Data.Bool.?) ;)

(; dict ;)

def thm_1392 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool)).

(; Theorem: |- ((= (f r)) (f r)) ;)

(; dict ;)

def thm_1393 : A : hol.type -> B : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> hol.proof (hol.eq B (f_2 r_1) (f_2 r_1)) :=
  A : hol.type => B : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.REFL B (f_2 r_1).

(; Theorem: |- ((= ((\lambda r. \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r) (f r))) (\lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) (f r))) ;)

(; dict ;)

def thm_1394 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool ((r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_3 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_2 (f_1 r_2)) ((b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_3 r_2) b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (f_1 r_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM B hol.bool ((r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_3 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_2) (b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_3 r_2) b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (f_1 r_2) (f_1 r_2) (thm_1383 A B r_2 f_3) (thm_1393 A B r_2 f_1).

(; Theorem: |- ((= (\lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) (f r))) ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1395 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) (f_1 r_3)) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) (f_1 r_3).

(; Theorem: |- ((= ((\lambda r. \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r) (f r))) ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1396 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool ((r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_3 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_2 (f_1 r_2)) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_3 r_2) (f_1 r_2))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.TRANS hol.bool ((r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_3 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_2 (f_1 r_2)) ((b_4 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_3 r_2) b_4)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (f_1 r_2)) (hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_3 r_2) (f_1 r_2))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (thm_1394 B A f_1 r_2 f_3) (thm_1395 A B f_1 f_3 r_2).

(; Theorem: |- ((= \lambda r. ((\lambda r. \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r) (f r))) \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1397 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_3 (f_1 r_3)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.ABS_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_3 (f_1 r_3)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1396 B A f_1 r_3 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((\lambda r. \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r) (f r)))) (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1398 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_3 (f_1 r_3))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_3 (f_1 r_3)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) (thm_528 B A) (thm_1397 B A f_1 f_2).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda r. ((\lambda r. \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r) (f r)))) \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1399 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_3 (f_2 r_3))) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.ABS_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_3 (f_2 r_3))) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => thm_1398 B A f_2 f_1).

(; Theorem: |- ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((\lambda r. \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r) (f r))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1400 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_3 (f_2 r_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool)) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_3 (f_2 r_3))) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (thm_1392 B A) (thm_1399 B A f_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda b. ((\lambda r. \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r) b)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((\lambda r. \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r) (f r)))))) ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1401 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_2 b_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_3 (f_2 r_3))))) (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_2 b_3)))) (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_3 (f_2 r_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (thm_1391 B A f_1) (thm_1400 B A f_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda b. ((r r) b)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((r r) (f r)))))) ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda b. ((r r) b)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((r r) (f r)))))) ;)

(; dict ;)

def thm_1402 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => r_1 r_2 b_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (r_3 : hol.term A => r_1 r_3 (f_2 r_3))))) (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => r_1 r_2 b_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (r_3 : hol.term A => r_1 r_3 (f_2 r_3)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => r_1 r_2 b_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (r_3 : hol.term A => r_1 r_3 (f_2 r_3))))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x)))))) ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda b. ((r r) b)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((r r) (f r)))))) ;)

(; dict ;)

def thm_1403 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => r_1 r_2 b_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (r_3 : hol.term A => r_1 r_3 (f_2 r_3)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => r_1 r_2 b_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (r_3 : hol.term A => r_1 r_3 (f_2 r_3))))) (thm_1375 B A r_1) (thm_1402 B A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda b. ((r r) b)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((r r) (f r))))) ;)

(; dict ;)

def thm_1404 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => r_1 r_2 b_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (r_3 : hol.term A => r_1 r_3 (f_2 r_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => r_1 r_2 b_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (r_3 : hol.term A => r_1 r_3 (f_2 r_3))))) (thm_1403 B A r_1) (thm_1378 B A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda b. ((r r) b)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((r r) (f r))))) ;)

(; dict ;)

def thm_1405 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => r_1 r_2 b_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => r_1 r_3 (f_2 r_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) (hol.arr B hol.bool)) => (B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1404 B A r_1) B (hol.arr A (hol.arr B hol.bool)) r_1.

(; Theorem: |- ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda b. ((\lambda r. \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r) b)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((\lambda r. \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) r) (f r))))) ;)

(; dict ;)

def thm_1406 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_2 b_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_3 (f_2 r_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (B : hol.type => A : hol.type => r_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) (hol.arr B hol.bool)) => thm_1405 B A r_1) B A (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))).

(; Theorem: |- ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1407 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.EQ_MP (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_2 b_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_5 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) b_5)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))) r_3 (f_2 r_3))))) (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (thm_1401 B A f_1) (thm_1406 B A f_1).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda r. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) \lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1408 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => thm_1407 B A f_1).

(; Theorem: |- ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1409 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool)) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (thm_1366 B A) (thm_1408 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda r. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair a) b))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1410 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A (f_1 r_2) b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (thm_1382 B A) (thm_1409 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1411 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (thm_1356 B A) (thm_1410 B A).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) ;)

(; dict ;)

def thm_1412 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) thm_388 (thm_1411 B A).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1413 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (thm_1412 B A) (thm_806 B A).

(; Theorem: |- ((= (\lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f)) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1414 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.BETA_CONV (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1.

(; Theorem: |- ((= \lambda f. (\lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f)) \lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1415 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => thm_1414 B A f_1).

(; Theorem: |- ((= (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f))) (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1416 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool)) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (thm_1366 B A) (thm_1415 B A).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f)))) (Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) ;)

(; dict ;)

def thm_1417 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) thm_388 (thm_1416 B A).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1418 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (thm_1417 B A) (thm_806 B A).

(; Theorem: |- ((= (= ((Data.Bool./\ (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (= ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1419 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) thm_119 (thm_1418 B A).

(; Theorem: |- ((= (Data.Bool./\ (\lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f))) (Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1420 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) thm_388 (thm_1414 B A f_1).

(; Theorem: |- ((= ((Data.Bool./\ (\lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f)) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1421 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.and ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM hol.bool hol.bool (hol.and ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (thm_1420 B A f_1) (thm_806 B A).

(; Theorem: |- ((= \lambda f. ((Data.Bool./\ (\lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f)) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) \lambda f. ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1422 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => thm_1421 B A f_1).

(; Theorem: |- ((= (Data.Bool.? \lambda f. ((Data.Bool./\ (\lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f)) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1423 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool)) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (thm_1366 B A) (thm_1422 B A).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.? \lambda f. ((Data.Bool./\ (\lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f)) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1424 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) (thm_1419 B A) (thm_1423 B A).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q)))) ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q)))) ;)

(; dict ;)

def thm_1425 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1))).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (p f))) q)) (Data.Bool.? \lambda f. ((Data.Bool./\ (p f)) q)))) ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (p f))) q)) (Data.Bool.? \lambda f. ((Data.Bool./\ (p f)) q)))) ;)

(; dict ;)

def thm_1426 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => p_2 f_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => hol.and (p_2 f_3) q_1))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => p_2 f_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => hol.and (p_2 f_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => p_2 f_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => hol.and (p_2 f_3) q_1))).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q)))) ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (p f))) q)) (Data.Bool.? \lambda f. ((Data.Bool./\ (p f)) q)))) ;)

(; dict ;)

def thm_1427 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => p_2 f_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => hol.and (p_2 f_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => p_2 f_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => hol.and (p_2 f_3) q_1))) (thm_1425 A q_1 p_2) (thm_1426 A q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q)))) ;)

(; dict ;)

def thm_1428 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_47 A p_1.

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ;)

(; dict ;)

def thm_1429 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_1428 A p_2 q_1.

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (p f))) q)) (Data.Bool.? \lambda f. ((Data.Bool./\ (p f)) q))) ;)

(; dict ;)

def thm_1430 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => p_2 f_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => hol.and (p_2 f_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => p_2 f_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => hol.and (p_2 f_3) q_1))) (thm_1427 A q_1 p_2) (thm_1429 A q_1 p_2).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (p f))) q)) (Data.Bool.? \lambda f. ((Data.Bool./\ (p f)) q))) ;)

(; dict ;)

def thm_1431 : B : hol.type -> A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => p_2 f_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (p_2 f_3) q_1))) :=
  B : hol.type => A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) => (A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_1430 A q_1 p_2) (hol.arr (hol.arr A (hol.arr B hol.bool)) A) q_1 p_2.

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.? \lambda f. ((Data.Bool./\ (\lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f)) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1432 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))))) :=
  B : hol.type => A : hol.type => (B : hol.type => A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) => thm_1431 B A q_1 p_2) B A (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1433 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))))) (thm_1424 B A) (thm_1432 B A).

(; Theorem: |- ((= (\lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f)) (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1434 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_1) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.BETA_CONV (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_1.

(; Theorem: |- ((= \lambda f. (\lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f)) \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1435 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.ABS_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => thm_1434 B A f_2 f_1).

(; Theorem: |- ((= (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1436 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool)) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (thm_1392 B A) (thm_1435 B A f_1).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f)))) (Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1437 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) thm_388 (thm_1436 B A f_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1438 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM hol.bool hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (thm_1437 B A f_1) (thm_806 B A).

(; Theorem: |- ((= (= ((Data.Bool./\ (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (= ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1439 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) thm_119 (thm_1438 B A f_1).

(; Theorem: |- ((= (Data.Bool./\ (\lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f))) (Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1440 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_1)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_1) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) thm_388 (thm_1434 B A f_1 f_2).

(; Theorem: |- ((= ((Data.Bool./\ (\lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f)) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1441 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.and ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_1) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM hol.bool hol.bool (hol.and ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_1)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))) (thm_1440 B A f_1 f_2) (thm_806 B A).

(; Theorem: |- ((= \lambda f. ((Data.Bool./\ (\lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f)) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1442 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.ABS_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => thm_1441 B A f_2 f_1).

(; Theorem: |- ((= (Data.Bool.? \lambda f. ((Data.Bool./\ (\lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f)) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1443 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool)) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (thm_1392 B A) (thm_1442 B A f_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.? \lambda f. ((Data.Bool./\ (\lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f)) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1444 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (thm_1439 B A f_1) (thm_1443 B A f_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (p f))) q)) (Data.Bool.? \lambda f. ((Data.Bool./\ (p f)) q))) ;)

(; dict ;)

def thm_1445 : B : hol.type -> A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => p_2 f_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (p_2 f_3) q_1))) :=
  B : hol.type => A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) => (A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_1430 A q_1 p_2) (hol.arr (hol.arr A (hol.arr B hol.bool)) B) q_1 p_2.

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.? \lambda f. ((Data.Bool./\ (\lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f)) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1446 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (B : hol.type => A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) => thm_1445 B A q_1 p_2) B A (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1447 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.EQ_MP (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (thm_1444 B A f_1) (thm_1446 B A f_1).

(; Theorem: |- ((= \lambda f. ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1448 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => thm_1447 B A f_1).

(; Theorem: |- ((= (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1449 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool)) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2)))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (thm_1366 B A) (thm_1448 B A).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1450 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_2 (HOLLight_2Emk__pair B A a_3 b_4))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_2)) r_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (thm_1433 B A) (thm_1449 B A).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1451 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (thm_1413 B A) (thm_1450 B A).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) ;)

(; dict ;)

def thm_1452 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1))) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (thm_772 B A) (thm_1451 B A).

(; Theorem: |- ((= (\lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f)) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1453 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.BETA_CONV (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1.

(; Theorem: |- ((= \lambda f. (\lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f)) \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1454 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => thm_1453 B A f_1).

(; Theorem: |- ((= (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f))) (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1455 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool)) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (thm_1366 B A) (thm_1454 B A).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f)))) ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) ;)

(; dict ;)

def thm_1456 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (thm_772 B A) (thm_1455 B A).

(; Theorem: |- ((= (= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f))))) (= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))))) ;)

(; dict ;)

def thm_1457 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)))) (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) thm_119 (thm_1456 B A).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (\lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f))) ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1458 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2))) ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (thm_772 B A) (thm_1453 B A f_1).

(; Theorem: |- ((= \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (\lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f))) \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1459 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => thm_1458 B A f_1).

(; Theorem: |- ((= (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (\lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f)))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) ;)

(; dict ;)

def thm_1460 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool)) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (thm_1366 B A) (thm_1459 B A).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f)))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (\lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f))))) ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))))) ;)

(; dict ;)

def thm_1461 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)))) (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)))) (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) (thm_1457 B A) (thm_1460 B A).

(; Theorem: |- ((= ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x))))) ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x))))) ;)

(; dict ;)

def thm_1462 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))).

(; Theorem: |- ((= ((= ((Data.Bool./\ p) (Data.Bool.? \lambda f. (q f)))) (Data.Bool.? \lambda f. ((Data.Bool./\ p) (q f))))) ((= ((Data.Bool./\ p) (Data.Bool.? \lambda f. (q f)))) (Data.Bool.? \lambda f. ((Data.Bool./\ p) (q f))))) ;)

(; dict ;)

def thm_1463 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => q_1 f_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => hol.and p_2 (q_1 f_3)))) (hol.eq hol.bool (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => q_1 f_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => hol.and p_2 (q_1 f_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => q_1 f_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => hol.and p_2 (q_1 f_3)))).

(; Theorem: |- ((= ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x))))) ((= ((Data.Bool./\ p) (Data.Bool.? \lambda f. (q f)))) (Data.Bool.? \lambda f. ((Data.Bool./\ p) (q f))))) ;)

(; dict ;)

def thm_1464 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => q_1 f_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => hol.and p_2 (q_1 f_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => q_1 f_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => hol.and p_2 (q_1 f_3)))) (thm_1462 A q_1 p_2) (thm_1463 A q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x))))) ;)

(; dict ;)

def thm_1465 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => thm_48 A p_1.

(; Theorem: |- ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ;)

(; dict ;)

def thm_1466 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => thm_1465 A p_2 q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) (Data.Bool.? \lambda f. (q f)))) (Data.Bool.? \lambda f. ((Data.Bool./\ p) (q f)))) ;)

(; dict ;)

def thm_1467 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => q_1 f_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => hol.and p_2 (q_1 f_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => q_1 f_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_3 : hol.term A => hol.and p_2 (q_1 f_3)))) (thm_1464 A q_1 p_2) (thm_1466 A q_1 p_2).

(; Theorem: |- ((= ((Data.Bool./\ p) (Data.Bool.? \lambda f. (q f)))) (Data.Bool.? \lambda f. ((Data.Bool./\ p) (q f)))) ;)

(; dict ;)

def thm_1468 : B : hol.type -> A : hol.type -> q_1 : hol.term (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => q_1 f_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and p_2 (q_1 f_3)))) :=
  B : hol.type => A : hol.type => q_1 : hol.term (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) => p_2 : hol.term hol.bool => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => thm_1467 A q_1 p_2) (hol.arr (hol.arr A (hol.arr B hol.bool)) A) q_1 p_2.

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f)))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (\lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) f)))) ;)

(; dict ;)

def thm_1469 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)))) :=
  B : hol.type => A : hol.type => (B : hol.type => A : hol.type => q_1 : hol.term (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) => p_2 : hol.term hol.bool => thm_1468 B A q_1 p_2) B A (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) ;)

(; dict ;)

def thm_1470 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) ((f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4))))) f_1)))) (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))))) (thm_1461 B A) (thm_1469 B A).

(; Theorem: |- ((= (\lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f)) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1471 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_1) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.BETA_CONV (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_1.

(; Theorem: |- ((= \lambda f. (\lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f)) \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1472 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.ABS_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => thm_1471 B A f_2 f_1).

(; Theorem: |- ((= (Data.Bool.? \lambda f. (\lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1473 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool)) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (thm_1392 B A) (thm_1472 B A f_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. (\lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f)))) ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1474 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (thm_772 B A) (thm_1473 B A f_1).

(; Theorem: |- ((= (= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. (\lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f))))) (= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) ;)

(; dict ;)

def thm_1475 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2)))) (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) thm_119 (thm_1474 B A f_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (\lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f))) ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1476 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) -> f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_1)) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3))) ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_2 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_1) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_2 r_3) (f_1 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (thm_772 B A) (thm_1471 B A f_1 f_2).

(; Theorem: |- ((= \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (\lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f))) \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1477 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2)) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.ABS_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2)) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => thm_1476 B A f_2 f_1).

(; Theorem: |- ((= (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (\lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f)))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1478 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool)) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2)) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))) (thm_1392 B A) (thm_1477 B A f_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. (\lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f)))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (\lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f))))) ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) ;)

(; dict ;)

def thm_1479 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2)))) (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2)))) (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (thm_1475 B A f_1) (thm_1478 B A f_1).

(; Theorem: |- ((= ((Data.Bool./\ p) (Data.Bool.? \lambda f. (q f)))) (Data.Bool.? \lambda f. ((Data.Bool./\ p) (q f)))) ;)

(; dict ;)

def thm_1480 : B : hol.type -> A : hol.type -> q_1 : hol.term (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => q_1 f_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and p_2 (q_1 f_3)))) :=
  B : hol.type => A : hol.type => q_1 : hol.term (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) => p_2 : hol.term hol.bool => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => thm_1467 A q_1 p_2) (hol.arr (hol.arr A (hol.arr B hol.bool)) B) q_1 p_2.

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. (\lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f)))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (\lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) f)))) ;)

(; dict ;)

def thm_1481 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => (B : hol.type => A : hol.type => q_1 : hol.term (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) => p_2 : hol.term hol.bool => thm_1480 B A q_1 p_2) B A (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1482 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.EQ_MP (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => (f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) ((f_3 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A (f_1 r_4) (f_3 r_4))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_5 : hol.term A => hol.forall B (b_6 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_4 (HOLLight_2Emk__pair B A a_5 b_6))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_4)) r_4)))) f_2)))) (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) (thm_1479 B A f_1) (thm_1481 B A f_1).

(; Theorem: |- ((= \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1483 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => thm_1482 B A f_1).

(; Theorem: |- ((= (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) ;)

(; dict ;)

def thm_1484 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool)) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))) (thm_1366 B A) (thm_1483 B A).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) ;)

(; dict ;)

def thm_1485 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_2)) a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) (thm_1470 B A) (thm_1484 B A).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) ;)

(; dict ;)

def thm_1486 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) (thm_1452 B A) (thm_1485 B A).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) ;)

(; dict ;)

def thm_1487 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) (thm_1317 B A) (thm_1486 B A).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))))) ;)

(; dict ;)

def thm_1488 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.and (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.or (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) (thm_1293 B A) (thm_1487 B A).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1489 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) -> hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda f. (Data.Bool.? \lambda f. ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) ((Data.Bool./\ (Data.Bool.! \lambda r. ((Data.Bool.\/ ((= r) ((HOLLight.mk_pair (f r)) (f r)))) (Data.Bool.~ ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) (Data.Bool.! \lambda r. ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= r) ((HOLLight.mk_pair a) b)))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))))) ;)

(; dict ;)

def thm_1490 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) => hol.EQ_MP (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) A) hol.bool) hol.bool) (f_1 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) A) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr (hol.arr A (hol.arr B hol.bool)) B) => hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_3)) a_3)) (hol.and (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A (f_1 r_3) (f_2 r_3))) (hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3)))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.or (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => hol.not (hol.eq (hol.arr A (hol.arr B hol.bool)) r_3 (HOLLight_2Emk__pair B A a_4 b_5))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_3)) r_3))))))) (thm_1488 B A) (thm_1489 B A hyp_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1491 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) -> hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) => hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) => thm_1163 B A hyp_1 (thm_1490 B A hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F) ;)

(; dict ;)

def thm_1492 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) -> hol.proof (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) => hyp_2 : hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) => thm_1491 B A hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.~ ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1493 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) -> hol.proof (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) => hol.EQ_MP (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (thm_731 B A) (thm_1492 B A hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) (Data.Bool.~ ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))))) ;)

(; dict ;)

def thm_1494 : B : hol.type -> A : hol.type -> hol.proof (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) => thm_1493 B A hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) Data.Bool.F)) ;)

(; dict ;)

def thm_1495 : B : hol.type -> A : hol.type -> hol.proof (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.not (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))))) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (thm_738 B A) (thm_1494 B A).

(; Theorem: |- (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a)) ;)

(; dict ;)

def thm_1496 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) :=
  B : hol.type => A : hol.type => a_1 : hol.term (Data_2EPair_2E_2A A B) => thm_572 B A a_1.

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1497 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))))) ;)

(; dict ;)

def thm_1498 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) :=
  B : hol.type => A : hol.type => hol.PROVE_HYP (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))))) (thm_1496 B A) (hyp_1 : hol.proof (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) => thm_1497 B A hyp_1).

(; Theorem: |- ((= (\lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))) r)) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_1499 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) r_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV (hol.arr A (hol.arr B hol.bool)) hol.bool (x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) r_1.

(; Theorem: |- ((= (= (\lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))) r))) (= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_1500 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) r_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) r_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) thm_119 (thm_1499 B A r_1).

(; Theorem: |- ((= ((= (\lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((HOLLight.mk_pair a) b)))) r)) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ;)

(; dict ;)

def thm_1501 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) r_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) r_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1) (thm_1500 B A r_1) (thm_787 B A r_1).

(; Theorem: |- ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)) ;)

(; dict ;)

def thm_1502 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq hol.bool ((x_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) x_2 (HOLLight_2Emk__pair B A a_3 b_4)))) r_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)) (thm_1501 B A r_1) (thm_573 B A r_1).

(; Theorem: |- (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r))) ;)

(; dict ;)

def thm_1503 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1502 B A r_1.

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.ABS_prod (HOLLight.REP_prod a))) a))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= r) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod r))) r)))) ;)

(; dict ;)

def thm_1504 : B : hol.type -> A : hol.type -> hol.proof (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1))) (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) (thm_1498 B A) (thm_1503 B A).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1505 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) => hol.EQ_MP (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (thm_721 B A) ((B : hol.type => A : hol.type => hol.EQ_MP (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) (hol.imp (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false)) (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) (hol.imp (hol.and (hol.forall (Data_2EPair_2E_2A A B) (a_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A a_1)) a_1)) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) r_1 (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A r_1)) r_1)))) hol.false))) (thm_723 B A) (thm_728 B A (thm_729 B A))) B A (thm_1495 B A)) (thm_719 B A hyp_1) ((B : hol.type => A : hol.type => thm_1504 B A) B A).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1506 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) => hol.PROVE_HYP (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) hol.false (thm_719 B A hyp_1) (hyp_2 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) => thm_1505 B A hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))))) Data.Bool.F) ;)

(; dict ;)

def thm_1507 : B : hol.type -> A : hol.type -> hol.proof (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) hol.false) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) => thm_1506 B A hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)))) ;)

(; dict ;)

def thm_1508 : B : hol.type -> A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.imp (hol.not (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))))) hol.false) (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2)))) (thm_718 B A) (thm_1507 B A).

(; Theorem: |- (Data.Bool.! \lambda y. ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y))) ;)

(; dict ;)

def thm_1509 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_1 y_2))) (HOLLight_2Emk__pair B A x_1 y_2))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => thm_1508 B A x_1.

(; Theorem: |- ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair x) y)))) ((HOLLight.mk_pair x) y)) ;)

(; dict ;)

def thm_1510 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => thm_1509 A B x_2 y_1.

(; Theorem: |- ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) ((HOLLight.mk_pair a) b)) ;)

(; dict ;)

def thm_1511 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) (HOLLight_2Emk__pair B A a_2 b_1)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => (B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => (B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.EQ_MP (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A x_2 y_1))) (HOLLight_2Emk__pair B A x_2 y_1)) (thm_716 B A y_1 x_2) (thm_1510 B A y_1 x_2)) B A y_1 x_2) B A b_1 a_2.

(; Theorem: |- ((= (= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) (= ((HOLLight.mk_pair a) b))) ;)

(; dict ;)

def thm_1512 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM (hol.arr A (hol.arr B hol.bool)) (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (hol.eq (hol.arr A (hol.arr B hol.bool))) (hol.eq (hol.arr A (hol.arr B hol.bool))) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) (HOLLight_2Emk__pair B A a_2 b_1) (thm_714 B A) (thm_1511 B A b_1 a_2).

(; Theorem: |- ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair a') b')))) ((HOLLight.mk_pair a') b')) ;)

(; dict ;)

def thm_1513 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1))) (HOLLight_2Emk__pair B A a_27_2 b_27_1)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => (B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => thm_1510 B A y_1 x_2) B A b_27_1 a_27_2.

(; Theorem: |- ((= ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair a') b'))))) ((= ((HOLLight.mk_pair a) b)) ((HOLLight.mk_pair a') b'))) ;)

(; dict ;)

def thm_1514 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3))) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_4 b_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_4 b_3)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1))) (HOLLight_2Emk__pair B A a_27_2 b_27_1) (thm_1512 B A b_3 a_4) (thm_1513 B A b_27_1 a_27_2).

(; Theorem: |- ((= (Data.Bool.==> ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair a') b')))))) (Data.Bool.==> ((= ((HOLLight.mk_pair a) b)) ((HOLLight.mk_pair a') b')))) ;)

(; dict ;)

def thm_1515 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3))) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1))))) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_4 b_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3))) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_4 b_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1)) thm_387 (thm_1514 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= ((Data.Bool.==> ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair a') b'))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ((Data.Bool.==> ((= ((HOLLight.mk_pair a) b)) ((HOLLight.mk_pair a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ;)

(; dict ;)

def thm_1516 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3))) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1)))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_4 b_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3))) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1))))) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_4 b_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (thm_1515 B A b_27_1 a_27_2 b_3 a_4) (thm_629 B A b_27_1 b_3 a_27_2 a_4).

(; Theorem: |- ((= ((Data.Bool.==> ((= ((HOLLight.mk_pair a) b)) ((HOLLight.mk_pair a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ((Data.Bool.==> ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair a') b'))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ;)

(; dict ;)

def thm_1517 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_4 b_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3))) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1)))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.SYM hol.bool (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3))) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1)))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_4 b_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (thm_1516 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_1518 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))).

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_1519 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (thm_1518 B A g_1 f_2) (thm_1518 B A g_1 f_2).

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_1520 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => (y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => thm_479 y_1 x_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1).

(; Theorem: |- ((= \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_1521 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM (hol.arr A B) hol.bool (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)) (g_2 : hol.term (hol.arr A B) => thm_1520 B A g_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)))) ;)

(; dict ;)

def thm_1522 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)) (thm_320 B A) (thm_1521 B A f_1).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)))) ;)

(; dict ;)

def thm_1523 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A B) hol.bool (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) (f_1 : hol.term (hol.arr A B) => thm_1522 B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) ;)

(; dict ;)

def thm_1524 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) (thm_320 B A) (thm_1523 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))))) ;)

(; dict ;)

def thm_1525 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (thm_1524 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) ;)

(; dict ;)

def thm_1526 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (thm_1525 B A) (thm_49 B A).

(; Theorem: |- (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_1527 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => thm_1526 B A f_1.

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_1528 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => thm_1527 B A f_2 g_1.

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_1529 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> f_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq (hol.arr B hol.bool) (f_2 x_3) (g_1 x_3)))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => f_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (thm_1519 B A g_1 f_2) (thm_1528 B A g_1 f_2)) (hol.arr B hol.bool) A g_1 f_2.

(; Theorem: |- ((= ((= ((HOLLight.mk_pair a) b)) ((HOLLight.mk_pair a') b'))) (Data.Bool.! \lambda x. ((= (((HOLLight.mk_pair a) b) x)) (((HOLLight.mk_pair a') b') x)))) ;)

(; dict ;)

def thm_1530 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_4 b_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1)) (hol.forall A (x_5 : hol.term A => hol.eq (hol.arr B hol.bool) (HOLLight_2Emk__pair B A a_4 b_3 x_5) (HOLLight_2Emk__pair B A a_27_2 b_27_1 x_5)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => f_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1529 B A g_1 f_2) B A (HOLLight_2Emk__pair B A a_27_2 b_27_1) (HOLLight_2Emk__pair B A a_4 b_3).

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_1531 : B : hol.type -> g_1 : hol.term (hol.arr B hol.bool) -> f_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr B hol.bool) f_2 g_1) (hol.forall B (x_3 : hol.term B => hol.eq hol.bool (f_2 x_3) (g_1 x_3)))) :=
  B : hol.type => g_1 : hol.term (hol.arr B hol.bool) => f_2 : hol.term (hol.arr B hol.bool) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => thm_1528 B A g_1 f_2) hol.bool B g_1 f_2.

(; Theorem: |- ((= ((= (((HOLLight.mk_pair a) b) x)) (((HOLLight.mk_pair a') b') x))) (Data.Bool.! \lambda x. ((= ((((HOLLight.mk_pair a) b) x) x)) ((((HOLLight.mk_pair a') b') x) x)))) ;)

(; dict ;)

def thm_1532 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> x_3 : hol.term A -> b_4 : hol.term B -> a_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr B hol.bool) (HOLLight_2Emk__pair B A a_5 b_4 x_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1 x_3)) (hol.forall B (x_6 : hol.term B => hol.eq hol.bool (HOLLight_2Emk__pair B A a_5 b_4 x_3 x_6) (HOLLight_2Emk__pair B A a_27_2 b_27_1 x_3 x_6)))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => x_3 : hol.term A => b_4 : hol.term B => a_5 : hol.term A => (B : hol.type => g_1 : hol.term (hol.arr B hol.bool) => f_2 : hol.term (hol.arr B hol.bool) => thm_1531 B g_1 f_2) B (HOLLight_2Emk__pair B A a_27_2 b_27_1 x_3) (HOLLight_2Emk__pair B A a_5 b_4 x_3).

(; Theorem: |- ((= ((= ((HOLLight.mk_pair x) y)) \lambda a. \lambda b. ((Data.Bool./\ ((= a) x)) ((= b) y)))) ((= ((HOLLight.mk_pair x) y)) \lambda a. \lambda b. ((Data.Bool./\ ((= a) x)) ((= b) y)))) ;)

(; dict ;)

def thm_1533 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) (a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 x_2) (hol.eq B b_4 y_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) (a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 x_2) (hol.eq B b_4 y_1)))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.REFL hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) (a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 x_2) (hol.eq B b_4 y_1))).

(; Theorem: |- ((= ((= ((HOLLight.mk_pair x) y)) \lambda a. \lambda b. ((Data.Bool./\ ((= a) x)) ((= b) y)))) ((= ((HOLLight.mk_pair x) y)) \lambda a. \lambda b. ((Data.Bool./\ ((= a) x)) ((= b) y)))) ;)

(; dict ;)

def thm_1534 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) (a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 x_2) (hol.eq B b_4 y_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) (a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 x_2) (hol.eq B b_4 y_1)))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) (a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 x_2) (hol.eq B b_4 y_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) (a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 x_2) (hol.eq B b_4 y_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) (a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 x_2) (hol.eq B b_4 y_1))) (thm_1533 B A y_1 x_2) (thm_1533 B A y_1 x_2).

(; Theorem: |- ((= (HOLLight.mk_pair x)) (\lambda x. \lambda y. \lambda a. \lambda b. ((Data.Bool./\ ((= a) x)) ((= b) y)) x)) ;)

(; dict ;)

def thm_1535 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr B (hol.arr A (hol.arr B hol.bool))) (HOLLight_2Emk__pair B A x_1) ((x_2 : hol.term A => y_3 : hol.term B => a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 x_2) (hol.eq B b_5 y_3)) x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.APP_THM A (hol.arr B (hol.arr A (hol.arr B hol.bool))) (HOLLight_2Emk__pair B A) (x_2 : hol.term A => y_3 : hol.term B => a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 x_2) (hol.eq B b_5 y_3)) x_1 x_1 (thm_55 B A) (thm_178 A x_1).

(; Theorem: |- ((= (\lambda x. \lambda y. \lambda a. \lambda b. ((Data.Bool./\ ((= a) x)) ((= b) y)) x)) \lambda y. \lambda a. \lambda b. ((Data.Bool./\ ((= a) x)) ((= b) y))) ;)

(; dict ;)

def thm_1536 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr B (hol.arr A (hol.arr B hol.bool))) ((x_2 : hol.term A => y_3 : hol.term B => a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 x_2) (hol.eq B b_5 y_3)) x_1) (y_2 : hol.term B => a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 x_1) (hol.eq B b_4 y_2))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.BETA_CONV A (hol.arr B (hol.arr A (hol.arr B hol.bool))) (x_2 : hol.term A => y_3 : hol.term B => a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 x_2) (hol.eq B b_5 y_3)) x_1.

(; Theorem: |- ((= (HOLLight.mk_pair x)) \lambda y. \lambda a. \lambda b. ((Data.Bool./\ ((= a) x)) ((= b) y))) ;)

(; dict ;)

def thm_1537 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr B (hol.arr A (hol.arr B hol.bool))) (HOLLight_2Emk__pair B A x_1) (y_2 : hol.term B => a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 x_1) (hol.eq B b_4 y_2))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.TRANS (hol.arr B (hol.arr A (hol.arr B hol.bool))) (HOLLight_2Emk__pair B A x_1) ((x_2 : hol.term A => y_3 : hol.term B => a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 x_2) (hol.eq B b_5 y_3)) x_1) (y_2 : hol.term B => a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 x_1) (hol.eq B b_4 y_2)) (thm_1535 A B x_1) (thm_1536 A B x_1).

(; Theorem: |- ((= ((HOLLight.mk_pair x) y)) (\lambda y. \lambda a. \lambda b. ((Data.Bool./\ ((= a) x)) ((= b) y)) y)) ;)

(; dict ;)

def thm_1538 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) ((y_3 : hol.term B => a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 x_2) (hol.eq B b_5 y_3)) y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.APP_THM B (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2) (y_3 : hol.term B => a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 x_2) (hol.eq B b_5 y_3)) y_1 y_1 (thm_1537 A B x_2) (thm_701 B y_1).

(; Theorem: |- ((= (\lambda y. \lambda a. \lambda b. ((Data.Bool./\ ((= a) x)) ((= b) y)) y)) \lambda a. \lambda b. ((Data.Bool./\ ((= a) x)) ((= b) y))) ;)

(; dict ;)

def thm_1539 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) ((y_3 : hol.term B => a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 x_2) (hol.eq B b_5 y_3)) y_1) (a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 x_2) (hol.eq B b_4 y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.BETA_CONV B (hol.arr A (hol.arr B hol.bool)) (y_3 : hol.term B => a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 x_2) (hol.eq B b_5 y_3)) y_1.

(; Theorem: |- ((= ((HOLLight.mk_pair x) y)) \lambda a. \lambda b. ((Data.Bool./\ ((= a) x)) ((= b) y))) ;)

(; dict ;)

def thm_1540 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) (a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 x_2) (hol.eq B b_4 y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.TRANS (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) ((y_3 : hol.term B => a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 x_2) (hol.eq B b_5 y_3)) y_1) (a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 x_2) (hol.eq B b_4 y_1)) (thm_1538 B A y_1 x_2) (thm_1539 B A y_1 x_2).

(; Theorem: |- (Data.Bool.! \lambda y. ((= ((HOLLight.mk_pair x) y)) \lambda a. \lambda b. ((Data.Bool./\ ((= a) x)) ((= b) y)))) ;)

(; dict ;)

def thm_1541 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_1 y_2) (a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 x_1) (hol.eq B b_4 y_2)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => y_2 : hol.term B => thm_1540 B A y_2 x_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((HOLLight.mk_pair x) y)) \lambda a. \lambda b. ((Data.Bool./\ ((= a) x)) ((= b) y))))) ;)

(; dict ;)

def thm_1542 : B : hol.type -> A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_1 y_2) (a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 x_1) (hol.eq B b_4 y_2))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => thm_1541 A B x_1.

(; Theorem: |- ((= ((HOLLight.mk_pair a) b)) \lambda a_1. \lambda b_1. ((Data.Bool./\ ((= a_1) a)) ((= b_1) b))) ;)

(; dict ;)

def thm_1543 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_2 b_1) (a__1_3 : hol.term A => b__1_4 : hol.term B => hol.and (hol.eq A a__1_3 a_2) (hol.eq B b__1_4 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => (B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => (B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.EQ_MP (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) (a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 x_2) (hol.eq B b_4 y_1))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A x_2 y_1) (a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 x_2) (hol.eq B b_4 y_1))) (thm_1534 B A y_1 x_2) (thm_1542 B A x_2 y_1)) B A y_1 x_2) B A b_1 a_2.

(; Theorem: |- ((= (((HOLLight.mk_pair a) b) x)) (\lambda a_1. \lambda b_1. ((Data.Bool./\ ((= a_1) a)) ((= b_1) b)) x)) ;)

(; dict ;)

def thm_1544 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (HOLLight_2Emk__pair B A a_3 b_2 x_1) ((a__1_4 : hol.term A => b__1_5 : hol.term B => hol.and (hol.eq A a__1_4 a_3) (hol.eq B b__1_5 b_2)) x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => hol.APP_THM A (hol.arr B hol.bool) (HOLLight_2Emk__pair B A a_3 b_2) (a__1_4 : hol.term A => b__1_5 : hol.term B => hol.and (hol.eq A a__1_4 a_3) (hol.eq B b__1_5 b_2)) x_1 x_1 (thm_1543 B A b_2 a_3) (thm_178 A x_1).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_1545 : B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B hol.bool) (hol.arr (hol.arr B hol.bool) hol.bool)) (hol.eq (hol.arr B hol.bool)) (hol.eq (hol.arr B hol.bool))) :=
  B : hol.type => hol.REFL (hol.arr (hol.arr B hol.bool) (hol.arr (hol.arr B hol.bool) hol.bool)) (hol.eq (hol.arr B hol.bool)).

(; Theorem: |- ((= (\lambda a'. \lambda b'. ((Data.Bool./\ ((= a') a)) ((= b') b)) a')) \lambda b'. ((Data.Bool./\ ((= a') a)) ((= b') b))) ;)

(; dict ;)

def thm_1546 : A : hol.type -> B : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) ((a_27_4 : hol.term A => b_27_5 : hol.term B => hol.and (hol.eq A a_27_4 a_3) (hol.eq B b_27_5 b_2)) a_27_1) (b_27_4 : hol.term B => hol.and (hol.eq A a_27_1 a_3) (hol.eq B b_27_4 b_2))) :=
  A : hol.type => B : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => hol.BETA_CONV A (hol.arr B hol.bool) (a_27_4 : hol.term A => b_27_5 : hol.term B => hol.and (hol.eq A a_27_4 a_3) (hol.eq B b_27_5 b_2)) a_27_1.

(; Theorem: |- ((= \lambda a'. (\lambda a'. \lambda b'. ((Data.Bool./\ ((= a') a)) ((= b') b)) a')) \lambda a'. \lambda b'. ((Data.Bool./\ ((= a') a)) ((= b') b))) ;)

(; dict ;)

def thm_1547 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (a_27_3 : hol.term A => (a_27_4 : hol.term A => b_27_5 : hol.term B => hol.and (hol.eq A a_27_4 a_2) (hol.eq B b_27_5 b_1)) a_27_3) (a_27_3 : hol.term A => b_27_4 : hol.term B => hol.and (hol.eq A a_27_3 a_2) (hol.eq B b_27_4 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.ABS_THM A (hol.arr B hol.bool) (a_27_3 : hol.term A => (a_27_4 : hol.term A => b_27_5 : hol.term B => hol.and (hol.eq A a_27_4 a_2) (hol.eq B b_27_5 b_1)) a_27_3) (a_27_3 : hol.term A => b_27_4 : hol.term B => hol.and (hol.eq A a_27_3 a_2) (hol.eq B b_27_4 b_1)) (a_27_3 : hol.term A => thm_1546 A B a_27_3 b_1 a_2).

(; Theorem: |- ((= (\lambda a'. (\lambda a'. \lambda b'. ((Data.Bool./\ ((= a') a)) ((= b') b)) a') x)) (\lambda a'. \lambda b'. ((Data.Bool./\ ((= a') a)) ((= b') b)) x)) ;)

(; dict ;)

def thm_1548 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) ((a_27_4 : hol.term A => (a_27_5 : hol.term A => b_27_6 : hol.term B => hol.and (hol.eq A a_27_5 a_3) (hol.eq B b_27_6 b_2)) a_27_4) x_1) ((a_27_4 : hol.term A => b_27_5 : hol.term B => hol.and (hol.eq A a_27_4 a_3) (hol.eq B b_27_5 b_2)) x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => hol.APP_THM A (hol.arr B hol.bool) (a_27_4 : hol.term A => (a_27_5 : hol.term A => b_27_6 : hol.term B => hol.and (hol.eq A a_27_5 a_3) (hol.eq B b_27_6 b_2)) a_27_4) (a_27_4 : hol.term A => b_27_5 : hol.term B => hol.and (hol.eq A a_27_4 a_3) (hol.eq B b_27_5 b_2)) x_1 x_1 (thm_1547 B A b_2 a_3) (thm_178 A x_1).

(; Theorem: |- ((= (= (\lambda a'. (\lambda a'. \lambda b'. ((Data.Bool./\ ((= a') a)) ((= b') b)) a') x))) (= (\lambda a'. \lambda b'. ((Data.Bool./\ ((= a') a)) ((= b') b)) x))) ;)

(; dict ;)

def thm_1549 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq (hol.arr (hol.arr B hol.bool) hol.bool) (hol.eq (hol.arr B hol.bool) ((a_27_4 : hol.term A => (a_27_5 : hol.term A => b_27_6 : hol.term B => hol.and (hol.eq A a_27_5 a_3) (hol.eq B b_27_6 b_2)) a_27_4) x_1)) (hol.eq (hol.arr B hol.bool) ((a_27_4 : hol.term A => b_27_5 : hol.term B => hol.and (hol.eq A a_27_4 a_3) (hol.eq B b_27_5 b_2)) x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => hol.APP_THM (hol.arr B hol.bool) (hol.arr (hol.arr B hol.bool) hol.bool) (hol.eq (hol.arr B hol.bool)) (hol.eq (hol.arr B hol.bool)) ((a_27_4 : hol.term A => (a_27_5 : hol.term A => b_27_6 : hol.term B => hol.and (hol.eq A a_27_5 a_3) (hol.eq B b_27_6 b_2)) a_27_4) x_1) ((a_27_4 : hol.term A => b_27_5 : hol.term B => hol.and (hol.eq A a_27_4 a_3) (hol.eq B b_27_5 b_2)) x_1) (thm_1545 B) (thm_1548 A B x_1 b_2 a_3).

(; Theorem: |- ((= (\lambda a'. \lambda b'. ((Data.Bool./\ ((= a') a)) ((= b') b)) x)) \lambda b'. ((Data.Bool./\ ((= x) a)) ((= b') b))) ;)

(; dict ;)

def thm_1550 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) ((a_27_4 : hol.term A => b_27_5 : hol.term B => hol.and (hol.eq A a_27_4 a_3) (hol.eq B b_27_5 b_2)) x_1) (b_27_4 : hol.term B => hol.and (hol.eq A x_1 a_3) (hol.eq B b_27_4 b_2))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => hol.BETA_CONV A (hol.arr B hol.bool) (a_27_4 : hol.term A => b_27_5 : hol.term B => hol.and (hol.eq A a_27_4 a_3) (hol.eq B b_27_5 b_2)) x_1.

(; Theorem: |- ((= ((= (\lambda a'. (\lambda a'. \lambda b'. ((Data.Bool./\ ((= a') a)) ((= b') b)) a') x)) (\lambda a'. \lambda b'. ((Data.Bool./\ ((= a') a)) ((= b') b)) x))) ((= (\lambda a'. \lambda b'. ((Data.Bool./\ ((= a') a)) ((= b') b)) x)) \lambda b'. ((Data.Bool./\ ((= x) a)) ((= b') b)))) ;)

(; dict ;)

def thm_1551 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr B hol.bool) ((a_27_4 : hol.term A => (a_27_5 : hol.term A => b_27_6 : hol.term B => hol.and (hol.eq A a_27_5 a_3) (hol.eq B b_27_6 b_2)) a_27_4) x_1) ((a_27_4 : hol.term A => b_27_5 : hol.term B => hol.and (hol.eq A a_27_4 a_3) (hol.eq B b_27_5 b_2)) x_1)) (hol.eq (hol.arr B hol.bool) ((a_27_4 : hol.term A => b_27_5 : hol.term B => hol.and (hol.eq A a_27_4 a_3) (hol.eq B b_27_5 b_2)) x_1) (b_27_4 : hol.term B => hol.and (hol.eq A x_1 a_3) (hol.eq B b_27_4 b_2)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.eq (hol.arr B hol.bool) ((a_27_4 : hol.term A => (a_27_5 : hol.term A => b_27_6 : hol.term B => hol.and (hol.eq A a_27_5 a_3) (hol.eq B b_27_6 b_2)) a_27_4) x_1)) (hol.eq (hol.arr B hol.bool) ((a_27_4 : hol.term A => b_27_5 : hol.term B => hol.and (hol.eq A a_27_4 a_3) (hol.eq B b_27_5 b_2)) x_1)) ((a_27_4 : hol.term A => b_27_5 : hol.term B => hol.and (hol.eq A a_27_4 a_3) (hol.eq B b_27_5 b_2)) x_1) (b_27_4 : hol.term B => hol.and (hol.eq A x_1 a_3) (hol.eq B b_27_4 b_2)) (thm_1549 A B x_1 b_2 a_3) (thm_1550 A B x_1 b_2 a_3).

(; Theorem: |- ((= (((HOLLight.mk_pair a) b) x)) \lambda b'. ((Data.Bool./\ ((= x) a)) ((= b') b))) ;)

(; dict ;)

def thm_1552 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (HOLLight_2Emk__pair B A a_3 b_2 x_1) (b_27_4 : hol.term B => hol.and (hol.eq A x_1 a_3) (hol.eq B b_27_4 b_2))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => hol.TRANS (hol.arr B hol.bool) (HOLLight_2Emk__pair B A a_3 b_2 x_1) ((a__1_4 : hol.term A => b__1_5 : hol.term B => hol.and (hol.eq A a__1_4 a_3) (hol.eq B b__1_5 b_2)) x_1) (b_27_4 : hol.term B => hol.and (hol.eq A x_1 a_3) (hol.eq B b_27_4 b_2)) (thm_1544 A B x_1 b_2 a_3) (hol.EQ_MP (hol.eq (hol.arr B hol.bool) ((a_27_4 : hol.term A => (a_27_5 : hol.term A => b_27_6 : hol.term B => hol.and (hol.eq A a_27_5 a_3) (hol.eq B b_27_6 b_2)) a_27_4) x_1) ((a_27_4 : hol.term A => b_27_5 : hol.term B => hol.and (hol.eq A a_27_4 a_3) (hol.eq B b_27_5 b_2)) x_1)) (hol.eq (hol.arr B hol.bool) ((a_27_4 : hol.term A => b_27_5 : hol.term B => hol.and (hol.eq A a_27_4 a_3) (hol.eq B b_27_5 b_2)) x_1) (b_27_4 : hol.term B => hol.and (hol.eq A x_1 a_3) (hol.eq B b_27_4 b_2))) (thm_1551 A B x_1 b_2 a_3) (thm_1548 A B x_1 b_2 a_3)).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_1553 : B : hol.type -> x_1 : hol.term B -> hol.proof (hol.eq B x_1 x_1) :=
  B : hol.type => x_1 : hol.term B => hol.REFL B x_1.

(; Theorem: |- ((= ((((HOLLight.mk_pair a) b) x) x)) (\lambda b'. ((Data.Bool./\ ((= x) a)) ((= b') b)) x)) ;)

(; dict ;)

def thm_1554 : B : hol.type -> A : hol.type -> x_1 : hol.term B -> x_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (HOLLight_2Emk__pair B A a_4 b_3 x_2 x_1) ((b_27_5 : hol.term B => hol.and (hol.eq A x_2 a_4) (hol.eq B b_27_5 b_3)) x_1)) :=
  B : hol.type => A : hol.type => x_1 : hol.term B => x_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM B hol.bool (HOLLight_2Emk__pair B A a_4 b_3 x_2) (b_27_5 : hol.term B => hol.and (hol.eq A x_2 a_4) (hol.eq B b_27_5 b_3)) x_1 x_1 (thm_1552 A B x_2 b_3 a_4) (thm_1553 B x_1).

(; Theorem: |- ((= (\lambda b'. ((Data.Bool./\ ((= x) a)) ((= b') b)) b')) ((Data.Bool./\ ((= x) a)) ((= b') b))) ;)

(; dict ;)

def thm_1555 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool ((b_27_5 : hol.term B => hol.and (hol.eq A x_4 a_3) (hol.eq B b_27_5 b_2)) b_27_1) (hol.and (hol.eq A x_4 a_3) (hol.eq B b_27_1 b_2))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => x_4 : hol.term A => hol.BETA_CONV B hol.bool (b_27_5 : hol.term B => hol.and (hol.eq A x_4 a_3) (hol.eq B b_27_5 b_2)) b_27_1.

(; Theorem: |- ((= \lambda b'. (\lambda b'. ((Data.Bool./\ ((= x) a)) ((= b') b)) b')) \lambda b'. ((Data.Bool./\ ((= x) a)) ((= b') b))) ;)

(; dict ;)

def thm_1556 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (b_27_4 : hol.term B => (b_27_5 : hol.term B => hol.and (hol.eq A x_3 a_2) (hol.eq B b_27_5 b_1)) b_27_4) (b_27_4 : hol.term B => hol.and (hol.eq A x_3 a_2) (hol.eq B b_27_4 b_1))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term A => hol.ABS_THM B hol.bool (b_27_4 : hol.term B => (b_27_5 : hol.term B => hol.and (hol.eq A x_3 a_2) (hol.eq B b_27_5 b_1)) b_27_4) (b_27_4 : hol.term B => hol.and (hol.eq A x_3 a_2) (hol.eq B b_27_4 b_1)) (b_27_4 : hol.term B => thm_1555 A B b_27_4 b_1 a_2 x_3).

(; Theorem: |- ((= (\lambda b'. (\lambda b'. ((Data.Bool./\ ((= x) a)) ((= b') b)) b') x)) (\lambda b'. ((Data.Bool./\ ((= x) a)) ((= b') b)) x)) ;)

(; dict ;)

def thm_1557 : A : hol.type -> B : hol.type -> x_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool ((b_27_5 : hol.term B => (b_27_6 : hol.term B => hol.and (hol.eq A x_4 a_3) (hol.eq B b_27_6 b_2)) b_27_5) x_1) ((b_27_5 : hol.term B => hol.and (hol.eq A x_4 a_3) (hol.eq B b_27_5 b_2)) x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => x_4 : hol.term A => hol.APP_THM B hol.bool (b_27_5 : hol.term B => (b_27_6 : hol.term B => hol.and (hol.eq A x_4 a_3) (hol.eq B b_27_6 b_2)) b_27_5) (b_27_5 : hol.term B => hol.and (hol.eq A x_4 a_3) (hol.eq B b_27_5 b_2)) x_1 x_1 (thm_1556 A B b_2 a_3 x_4) (thm_1553 B x_1).

(; Theorem: |- ((= (= (\lambda b'. (\lambda b'. ((Data.Bool./\ ((= x) a)) ((= b') b)) b') x))) (= (\lambda b'. ((Data.Bool./\ ((= x) a)) ((= b') b)) x))) ;)

(; dict ;)

def thm_1558 : A : hol.type -> B : hol.type -> x_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((b_27_5 : hol.term B => (b_27_6 : hol.term B => hol.and (hol.eq A x_4 a_3) (hol.eq B b_27_6 b_2)) b_27_5) x_1)) (hol.eq hol.bool ((b_27_5 : hol.term B => hol.and (hol.eq A x_4 a_3) (hol.eq B b_27_5 b_2)) x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => x_4 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((b_27_5 : hol.term B => (b_27_6 : hol.term B => hol.and (hol.eq A x_4 a_3) (hol.eq B b_27_6 b_2)) b_27_5) x_1) ((b_27_5 : hol.term B => hol.and (hol.eq A x_4 a_3) (hol.eq B b_27_5 b_2)) x_1) thm_119 (thm_1557 A B x_1 b_2 a_3 x_4).

(; Theorem: |- ((= (\lambda b'. ((Data.Bool./\ ((= x) a)) ((= b') b)) x)) ((Data.Bool./\ ((= x) a)) ((= x) b))) ;)

(; dict ;)

def thm_1559 : A : hol.type -> B : hol.type -> x_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool ((b_27_5 : hol.term B => hol.and (hol.eq A x_4 a_3) (hol.eq B b_27_5 b_2)) x_1) (hol.and (hol.eq A x_4 a_3) (hol.eq B x_1 b_2))) :=
  A : hol.type => B : hol.type => x_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => x_4 : hol.term A => hol.BETA_CONV B hol.bool (b_27_5 : hol.term B => hol.and (hol.eq A x_4 a_3) (hol.eq B b_27_5 b_2)) x_1.

(; Theorem: |- ((= ((= (\lambda b'. (\lambda b'. ((Data.Bool./\ ((= x) a)) ((= b') b)) b') x)) (\lambda b'. ((Data.Bool./\ ((= x) a)) ((= b') b)) x))) ((= (\lambda b'. ((Data.Bool./\ ((= x) a)) ((= b') b)) x)) ((Data.Bool./\ ((= x) a)) ((= x) b)))) ;)

(; dict ;)

def thm_1560 : A : hol.type -> B : hol.type -> x_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((b_27_5 : hol.term B => (b_27_6 : hol.term B => hol.and (hol.eq A x_4 a_3) (hol.eq B b_27_6 b_2)) b_27_5) x_1) ((b_27_5 : hol.term B => hol.and (hol.eq A x_4 a_3) (hol.eq B b_27_5 b_2)) x_1)) (hol.eq hol.bool ((b_27_5 : hol.term B => hol.and (hol.eq A x_4 a_3) (hol.eq B b_27_5 b_2)) x_1) (hol.and (hol.eq A x_4 a_3) (hol.eq B x_1 b_2)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => x_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((b_27_5 : hol.term B => (b_27_6 : hol.term B => hol.and (hol.eq A x_4 a_3) (hol.eq B b_27_6 b_2)) b_27_5) x_1)) (hol.eq hol.bool ((b_27_5 : hol.term B => hol.and (hol.eq A x_4 a_3) (hol.eq B b_27_5 b_2)) x_1)) ((b_27_5 : hol.term B => hol.and (hol.eq A x_4 a_3) (hol.eq B b_27_5 b_2)) x_1) (hol.and (hol.eq A x_4 a_3) (hol.eq B x_1 b_2)) (thm_1558 A B x_1 b_2 a_3 x_4) (thm_1559 A B x_1 b_2 a_3 x_4).

(; Theorem: |- ((= ((((HOLLight.mk_pair a) b) x) x)) ((Data.Bool./\ ((= x) a)) ((= x) b))) ;)

(; dict ;)

def thm_1561 : B : hol.type -> A : hol.type -> x_1 : hol.term B -> x_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (HOLLight_2Emk__pair B A a_4 b_3 x_2 x_1) (hol.and (hol.eq A x_2 a_4) (hol.eq B x_1 b_3))) :=
  B : hol.type => A : hol.type => x_1 : hol.term B => x_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.TRANS hol.bool (HOLLight_2Emk__pair B A a_4 b_3 x_2 x_1) ((b_27_5 : hol.term B => hol.and (hol.eq A x_2 a_4) (hol.eq B b_27_5 b_3)) x_1) (hol.and (hol.eq A x_2 a_4) (hol.eq B x_1 b_3)) (thm_1554 B A x_1 x_2 b_3 a_4) (hol.EQ_MP (hol.eq hol.bool ((b_27_5 : hol.term B => (b_27_6 : hol.term B => hol.and (hol.eq A x_2 a_4) (hol.eq B b_27_6 b_3)) b_27_5) x_1) ((b_27_5 : hol.term B => hol.and (hol.eq A x_2 a_4) (hol.eq B b_27_5 b_3)) x_1)) (hol.eq hol.bool ((b_27_5 : hol.term B => hol.and (hol.eq A x_2 a_4) (hol.eq B b_27_5 b_3)) x_1) (hol.and (hol.eq A x_2 a_4) (hol.eq B x_1 b_3))) (thm_1560 A B x_1 b_3 a_4 x_2) (thm_1557 A B x_1 b_3 a_4 x_2)).

(; Theorem: |- ((= (= ((((HOLLight.mk_pair a) b) x) x))) (= ((Data.Bool./\ ((= x) a)) ((= x) b)))) ;)

(; dict ;)

def thm_1562 : B : hol.type -> A : hol.type -> x_1 : hol.term B -> x_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (HOLLight_2Emk__pair B A a_4 b_3 x_2 x_1)) (hol.eq hol.bool (hol.and (hol.eq A x_2 a_4) (hol.eq B x_1 b_3)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term B => x_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (HOLLight_2Emk__pair B A a_4 b_3 x_2 x_1) (hol.and (hol.eq A x_2 a_4) (hol.eq B x_1 b_3)) thm_119 (thm_1561 B A x_1 x_2 b_3 a_4).

(; Theorem: |- ((= ((HOLLight.mk_pair a') b')) \lambda a. \lambda b. ((Data.Bool./\ ((= a) a')) ((= b) b'))) ;)

(; dict ;)

def thm_1563 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_27_2 b_27_1) (a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 a_27_2) (hol.eq B b_4 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => (B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => thm_1540 B A y_1 x_2) B A b_27_1 a_27_2.

(; Theorem: |- ((= (((HOLLight.mk_pair a') b') x)) (\lambda a. \lambda b. ((Data.Bool./\ ((= a) a')) ((= b) b')) x)) ;)

(; dict ;)

def thm_1564 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (HOLLight_2Emk__pair B A a_27_3 b_27_2 x_1) ((a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => b_27_2 : hol.term B => a_27_3 : hol.term A => hol.APP_THM A (hol.arr B hol.bool) (HOLLight_2Emk__pair B A a_27_3 b_27_2) (a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1 x_1 (thm_1563 B A b_27_2 a_27_3) (thm_178 A x_1).

(; Theorem: |- ((= (\lambda a. \lambda b. ((Data.Bool./\ ((= a) a')) ((= b) b')) a)) \lambda b. ((Data.Bool./\ ((= a) a')) ((= b) b'))) ;)

(; dict ;)

def thm_1565 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) ((a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_5 b_27_2)) a_1) (b_4 : hol.term B => hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_4 b_27_2))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => b_27_2 : hol.term B => a_27_3 : hol.term A => hol.BETA_CONV A (hol.arr B hol.bool) (a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_5 b_27_2)) a_1.

(; Theorem: |- ((= \lambda a. (\lambda a. \lambda b. ((Data.Bool./\ ((= a) a')) ((= b) b')) a)) \lambda a. \lambda b. ((Data.Bool./\ ((= a) a')) ((= b) b'))) ;)

(; dict ;)

def thm_1566 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (a_3 : hol.term A => (a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_5 b_27_1)) a_3) (a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 a_27_2) (hol.eq B b_4 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => hol.ABS_THM A (hol.arr B hol.bool) (a_3 : hol.term A => (a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_5 b_27_1)) a_3) (a_3 : hol.term A => b_4 : hol.term B => hol.and (hol.eq A a_3 a_27_2) (hol.eq B b_4 b_27_1)) (a_3 : hol.term A => thm_1565 A B a_3 b_27_1 a_27_2).

(; Theorem: |- ((= (\lambda a. (\lambda a. \lambda b. ((Data.Bool./\ ((= a) a')) ((= b) b')) a) x)) (\lambda a. \lambda b. ((Data.Bool./\ ((= a) a')) ((= b) b')) x)) ;)

(; dict ;)

def thm_1567 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) ((a_4 : hol.term A => (a_5 : hol.term A => b_6 : hol.term B => hol.and (hol.eq A a_5 a_27_3) (hol.eq B b_6 b_27_2)) a_4) x_1) ((a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => b_27_2 : hol.term B => a_27_3 : hol.term A => hol.APP_THM A (hol.arr B hol.bool) (a_4 : hol.term A => (a_5 : hol.term A => b_6 : hol.term B => hol.and (hol.eq A a_5 a_27_3) (hol.eq B b_6 b_27_2)) a_4) (a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1 x_1 (thm_1566 B A b_27_2 a_27_3) (thm_178 A x_1).

(; Theorem: |- ((= (= (\lambda a. (\lambda a. \lambda b. ((Data.Bool./\ ((= a) a')) ((= b) b')) a) x))) (= (\lambda a. \lambda b. ((Data.Bool./\ ((= a) a')) ((= b) b')) x))) ;)

(; dict ;)

def thm_1568 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> hol.proof (hol.eq (hol.arr (hol.arr B hol.bool) hol.bool) (hol.eq (hol.arr B hol.bool) ((a_4 : hol.term A => (a_5 : hol.term A => b_6 : hol.term B => hol.and (hol.eq A a_5 a_27_3) (hol.eq B b_6 b_27_2)) a_4) x_1)) (hol.eq (hol.arr B hol.bool) ((a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => b_27_2 : hol.term B => a_27_3 : hol.term A => hol.APP_THM (hol.arr B hol.bool) (hol.arr (hol.arr B hol.bool) hol.bool) (hol.eq (hol.arr B hol.bool)) (hol.eq (hol.arr B hol.bool)) ((a_4 : hol.term A => (a_5 : hol.term A => b_6 : hol.term B => hol.and (hol.eq A a_5 a_27_3) (hol.eq B b_6 b_27_2)) a_4) x_1) ((a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1) (thm_1545 B) (thm_1567 A B x_1 b_27_2 a_27_3).

(; Theorem: |- ((= (\lambda a. \lambda b. ((Data.Bool./\ ((= a) a')) ((= b) b')) x)) \lambda b. ((Data.Bool./\ ((= x) a')) ((= b) b'))) ;)

(; dict ;)

def thm_1569 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) ((a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1) (b_4 : hol.term B => hol.and (hol.eq A x_1 a_27_3) (hol.eq B b_4 b_27_2))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => b_27_2 : hol.term B => a_27_3 : hol.term A => hol.BETA_CONV A (hol.arr B hol.bool) (a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1.

(; Theorem: |- ((= ((= (\lambda a. (\lambda a. \lambda b. ((Data.Bool./\ ((= a) a')) ((= b) b')) a) x)) (\lambda a. \lambda b. ((Data.Bool./\ ((= a) a')) ((= b) b')) x))) ((= (\lambda a. \lambda b. ((Data.Bool./\ ((= a) a')) ((= b) b')) x)) \lambda b. ((Data.Bool./\ ((= x) a')) ((= b) b')))) ;)

(; dict ;)

def thm_1570 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr B hol.bool) ((a_4 : hol.term A => (a_5 : hol.term A => b_6 : hol.term B => hol.and (hol.eq A a_5 a_27_3) (hol.eq B b_6 b_27_2)) a_4) x_1) ((a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1)) (hol.eq (hol.arr B hol.bool) ((a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1) (b_4 : hol.term B => hol.and (hol.eq A x_1 a_27_3) (hol.eq B b_4 b_27_2)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => b_27_2 : hol.term B => a_27_3 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.eq (hol.arr B hol.bool) ((a_4 : hol.term A => (a_5 : hol.term A => b_6 : hol.term B => hol.and (hol.eq A a_5 a_27_3) (hol.eq B b_6 b_27_2)) a_4) x_1)) (hol.eq (hol.arr B hol.bool) ((a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1)) ((a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1) (b_4 : hol.term B => hol.and (hol.eq A x_1 a_27_3) (hol.eq B b_4 b_27_2)) (thm_1568 A B x_1 b_27_2 a_27_3) (thm_1569 A B x_1 b_27_2 a_27_3).

(; Theorem: |- ((= (((HOLLight.mk_pair a') b') x)) \lambda b. ((Data.Bool./\ ((= x) a')) ((= b) b'))) ;)

(; dict ;)

def thm_1571 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (HOLLight_2Emk__pair B A a_27_3 b_27_2 x_1) (b_4 : hol.term B => hol.and (hol.eq A x_1 a_27_3) (hol.eq B b_4 b_27_2))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => b_27_2 : hol.term B => a_27_3 : hol.term A => hol.TRANS (hol.arr B hol.bool) (HOLLight_2Emk__pair B A a_27_3 b_27_2 x_1) ((a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1) (b_4 : hol.term B => hol.and (hol.eq A x_1 a_27_3) (hol.eq B b_4 b_27_2)) (thm_1564 A B x_1 b_27_2 a_27_3) (hol.EQ_MP (hol.eq (hol.arr B hol.bool) ((a_4 : hol.term A => (a_5 : hol.term A => b_6 : hol.term B => hol.and (hol.eq A a_5 a_27_3) (hol.eq B b_6 b_27_2)) a_4) x_1) ((a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1)) (hol.eq (hol.arr B hol.bool) ((a_4 : hol.term A => b_5 : hol.term B => hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1) (b_4 : hol.term B => hol.and (hol.eq A x_1 a_27_3) (hol.eq B b_4 b_27_2))) (thm_1570 A B x_1 b_27_2 a_27_3) (thm_1567 A B x_1 b_27_2 a_27_3)).

(; Theorem: |- ((= ((((HOLLight.mk_pair a') b') x) x)) (\lambda b. ((Data.Bool./\ ((= x) a')) ((= b) b')) x)) ;)

(; dict ;)

def thm_1572 : B : hol.type -> A : hol.type -> x_1 : hol.term B -> x_2 : hol.term A -> b_27_3 : hol.term B -> a_27_4 : hol.term A -> hol.proof (hol.eq hol.bool (HOLLight_2Emk__pair B A a_27_4 b_27_3 x_2 x_1) ((b_5 : hol.term B => hol.and (hol.eq A x_2 a_27_4) (hol.eq B b_5 b_27_3)) x_1)) :=
  B : hol.type => A : hol.type => x_1 : hol.term B => x_2 : hol.term A => b_27_3 : hol.term B => a_27_4 : hol.term A => hol.APP_THM B hol.bool (HOLLight_2Emk__pair B A a_27_4 b_27_3 x_2) (b_5 : hol.term B => hol.and (hol.eq A x_2 a_27_4) (hol.eq B b_5 b_27_3)) x_1 x_1 (thm_1571 A B x_2 b_27_3 a_27_4) (thm_1553 B x_1).

(; Theorem: |- ((= (\lambda b. ((Data.Bool./\ ((= x) a')) ((= b) b')) b)) ((Data.Bool./\ ((= x) a')) ((= b) b'))) ;)

(; dict ;)

def thm_1573 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool ((b_5 : hol.term B => hol.and (hol.eq A x_4 a_27_3) (hol.eq B b_5 b_27_2)) b_1) (hol.and (hol.eq A x_4 a_27_3) (hol.eq B b_1 b_27_2))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => b_27_2 : hol.term B => a_27_3 : hol.term A => x_4 : hol.term A => hol.BETA_CONV B hol.bool (b_5 : hol.term B => hol.and (hol.eq A x_4 a_27_3) (hol.eq B b_5 b_27_2)) b_1.

(; Theorem: |- ((= \lambda b. (\lambda b. ((Data.Bool./\ ((= x) a')) ((= b) b')) b)) \lambda b. ((Data.Bool./\ ((= x) a')) ((= b) b'))) ;)

(; dict ;)

def thm_1574 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (b_4 : hol.term B => (b_5 : hol.term B => hol.and (hol.eq A x_3 a_27_2) (hol.eq B b_5 b_27_1)) b_4) (b_4 : hol.term B => hol.and (hol.eq A x_3 a_27_2) (hol.eq B b_4 b_27_1))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => x_3 : hol.term A => hol.ABS_THM B hol.bool (b_4 : hol.term B => (b_5 : hol.term B => hol.and (hol.eq A x_3 a_27_2) (hol.eq B b_5 b_27_1)) b_4) (b_4 : hol.term B => hol.and (hol.eq A x_3 a_27_2) (hol.eq B b_4 b_27_1)) (b_4 : hol.term B => thm_1573 A B b_4 b_27_1 a_27_2 x_3).

(; Theorem: |- ((= (\lambda b. (\lambda b. ((Data.Bool./\ ((= x) a')) ((= b) b')) b) x)) (\lambda b. ((Data.Bool./\ ((= x) a')) ((= b) b')) x)) ;)

(; dict ;)

def thm_1575 : A : hol.type -> B : hol.type -> x_1 : hol.term B -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool ((b_5 : hol.term B => (b_6 : hol.term B => hol.and (hol.eq A x_4 a_27_3) (hol.eq B b_6 b_27_2)) b_5) x_1) ((b_5 : hol.term B => hol.and (hol.eq A x_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term B => b_27_2 : hol.term B => a_27_3 : hol.term A => x_4 : hol.term A => hol.APP_THM B hol.bool (b_5 : hol.term B => (b_6 : hol.term B => hol.and (hol.eq A x_4 a_27_3) (hol.eq B b_6 b_27_2)) b_5) (b_5 : hol.term B => hol.and (hol.eq A x_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1 x_1 (thm_1574 A B b_27_2 a_27_3 x_4) (thm_1553 B x_1).

(; Theorem: |- ((= (= (\lambda b. (\lambda b. ((Data.Bool./\ ((= x) a')) ((= b) b')) b) x))) (= (\lambda b. ((Data.Bool./\ ((= x) a')) ((= b) b')) x))) ;)

(; dict ;)

def thm_1576 : A : hol.type -> B : hol.type -> x_1 : hol.term B -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((b_5 : hol.term B => (b_6 : hol.term B => hol.and (hol.eq A x_4 a_27_3) (hol.eq B b_6 b_27_2)) b_5) x_1)) (hol.eq hol.bool ((b_5 : hol.term B => hol.and (hol.eq A x_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term B => b_27_2 : hol.term B => a_27_3 : hol.term A => x_4 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((b_5 : hol.term B => (b_6 : hol.term B => hol.and (hol.eq A x_4 a_27_3) (hol.eq B b_6 b_27_2)) b_5) x_1) ((b_5 : hol.term B => hol.and (hol.eq A x_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1) thm_119 (thm_1575 A B x_1 b_27_2 a_27_3 x_4).

(; Theorem: |- ((= (\lambda b. ((Data.Bool./\ ((= x) a')) ((= b) b')) x)) ((Data.Bool./\ ((= x) a')) ((= x) b'))) ;)

(; dict ;)

def thm_1577 : A : hol.type -> B : hol.type -> x_1 : hol.term B -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool ((b_5 : hol.term B => hol.and (hol.eq A x_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1) (hol.and (hol.eq A x_4 a_27_3) (hol.eq B x_1 b_27_2))) :=
  A : hol.type => B : hol.type => x_1 : hol.term B => b_27_2 : hol.term B => a_27_3 : hol.term A => x_4 : hol.term A => hol.BETA_CONV B hol.bool (b_5 : hol.term B => hol.and (hol.eq A x_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1.

(; Theorem: |- ((= ((= (\lambda b. (\lambda b. ((Data.Bool./\ ((= x) a')) ((= b) b')) b) x)) (\lambda b. ((Data.Bool./\ ((= x) a')) ((= b) b')) x))) ((= (\lambda b. ((Data.Bool./\ ((= x) a')) ((= b) b')) x)) ((Data.Bool./\ ((= x) a')) ((= x) b')))) ;)

(; dict ;)

def thm_1578 : A : hol.type -> B : hol.type -> x_1 : hol.term B -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((b_5 : hol.term B => (b_6 : hol.term B => hol.and (hol.eq A x_4 a_27_3) (hol.eq B b_6 b_27_2)) b_5) x_1) ((b_5 : hol.term B => hol.and (hol.eq A x_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1)) (hol.eq hol.bool ((b_5 : hol.term B => hol.and (hol.eq A x_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1) (hol.and (hol.eq A x_4 a_27_3) (hol.eq B x_1 b_27_2)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term B => b_27_2 : hol.term B => a_27_3 : hol.term A => x_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((b_5 : hol.term B => (b_6 : hol.term B => hol.and (hol.eq A x_4 a_27_3) (hol.eq B b_6 b_27_2)) b_5) x_1)) (hol.eq hol.bool ((b_5 : hol.term B => hol.and (hol.eq A x_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1)) ((b_5 : hol.term B => hol.and (hol.eq A x_4 a_27_3) (hol.eq B b_5 b_27_2)) x_1) (hol.and (hol.eq A x_4 a_27_3) (hol.eq B x_1 b_27_2)) (thm_1576 A B x_1 b_27_2 a_27_3 x_4) (thm_1577 A B x_1 b_27_2 a_27_3 x_4).

(; Theorem: |- ((= ((((HOLLight.mk_pair a') b') x) x)) ((Data.Bool./\ ((= x) a')) ((= x) b'))) ;)

(; dict ;)

def thm_1579 : B : hol.type -> A : hol.type -> x_1 : hol.term B -> x_2 : hol.term A -> b_27_3 : hol.term B -> a_27_4 : hol.term A -> hol.proof (hol.eq hol.bool (HOLLight_2Emk__pair B A a_27_4 b_27_3 x_2 x_1) (hol.and (hol.eq A x_2 a_27_4) (hol.eq B x_1 b_27_3))) :=
  B : hol.type => A : hol.type => x_1 : hol.term B => x_2 : hol.term A => b_27_3 : hol.term B => a_27_4 : hol.term A => hol.TRANS hol.bool (HOLLight_2Emk__pair B A a_27_4 b_27_3 x_2 x_1) ((b_5 : hol.term B => hol.and (hol.eq A x_2 a_27_4) (hol.eq B b_5 b_27_3)) x_1) (hol.and (hol.eq A x_2 a_27_4) (hol.eq B x_1 b_27_3)) (thm_1572 B A x_1 x_2 b_27_3 a_27_4) (hol.EQ_MP (hol.eq hol.bool ((b_5 : hol.term B => (b_6 : hol.term B => hol.and (hol.eq A x_2 a_27_4) (hol.eq B b_6 b_27_3)) b_5) x_1) ((b_5 : hol.term B => hol.and (hol.eq A x_2 a_27_4) (hol.eq B b_5 b_27_3)) x_1)) (hol.eq hol.bool ((b_5 : hol.term B => hol.and (hol.eq A x_2 a_27_4) (hol.eq B b_5 b_27_3)) x_1) (hol.and (hol.eq A x_2 a_27_4) (hol.eq B x_1 b_27_3))) (thm_1578 A B x_1 b_27_3 a_27_4 x_2) (thm_1575 A B x_1 b_27_3 a_27_4 x_2)).

(; Theorem: |- ((= ((= ((((HOLLight.mk_pair a) b) x) x)) ((((HOLLight.mk_pair a') b') x) x))) ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) ;)

(; dict ;)

def thm_1580 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> x_3 : hol.term B -> x_4 : hol.term A -> b_5 : hol.term B -> a_6 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (HOLLight_2Emk__pair B A a_6 b_5 x_4 x_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1 x_4 x_3)) (hol.eq hol.bool (hol.and (hol.eq A x_4 a_6) (hol.eq B x_3 b_5)) (hol.and (hol.eq A x_4 a_27_2) (hol.eq B x_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => x_3 : hol.term B => x_4 : hol.term A => b_5 : hol.term B => a_6 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (HOLLight_2Emk__pair B A a_6 b_5 x_4 x_3)) (hol.eq hol.bool (hol.and (hol.eq A x_4 a_6) (hol.eq B x_3 b_5))) (HOLLight_2Emk__pair B A a_27_2 b_27_1 x_4 x_3) (hol.and (hol.eq A x_4 a_27_2) (hol.eq B x_3 b_27_1)) (thm_1562 B A x_3 x_4 b_5 a_6) (thm_1579 B A x_3 x_4 b_27_1 a_27_2).

(; Theorem: |- ((= \lambda x. ((= ((((HOLLight.mk_pair a) b) x) x)) ((((HOLLight.mk_pair a') b') x) x))) \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) ;)

(; dict ;)

def thm_1581 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> x_3 : hol.term A -> b_4 : hol.term B -> a_5 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (x_6 : hol.term B => hol.eq hol.bool (HOLLight_2Emk__pair B A a_5 b_4 x_3 x_6) (HOLLight_2Emk__pair B A a_27_2 b_27_1 x_3 x_6)) (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_3 a_5) (hol.eq B x_6 b_4)) (hol.and (hol.eq A x_3 a_27_2) (hol.eq B x_6 b_27_1)))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => x_3 : hol.term A => b_4 : hol.term B => a_5 : hol.term A => hol.ABS_THM B hol.bool (x_6 : hol.term B => hol.eq hol.bool (HOLLight_2Emk__pair B A a_5 b_4 x_3 x_6) (HOLLight_2Emk__pair B A a_27_2 b_27_1 x_3 x_6)) (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_3 a_5) (hol.eq B x_6 b_4)) (hol.and (hol.eq A x_3 a_27_2) (hol.eq B x_6 b_27_1))) (x_6 : hol.term B => thm_1580 B A b_27_1 a_27_2 x_6 x_3 b_4 a_5).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((((HOLLight.mk_pair a) b) x) x)) ((((HOLLight.mk_pair a') b') x) x)))) (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))) ;)

(; dict ;)

def thm_1582 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> x_3 : hol.term A -> b_4 : hol.term B -> a_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (x_6 : hol.term B => hol.eq hol.bool (HOLLight_2Emk__pair B A a_5 b_4 x_3 x_6) (HOLLight_2Emk__pair B A a_27_2 b_27_1 x_3 x_6))) (hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_3 a_5) (hol.eq B x_6 b_4)) (hol.and (hol.eq A x_3 a_27_2) (hol.eq B x_6 b_27_1))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => x_3 : hol.term A => b_4 : hol.term B => a_5 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (x_6 : hol.term B => hol.eq hol.bool (HOLLight_2Emk__pair B A a_5 b_4 x_3 x_6) (HOLLight_2Emk__pair B A a_27_2 b_27_1 x_3 x_6)) (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_3 a_5) (hol.eq B x_6 b_4)) (hol.and (hol.eq A x_3 a_27_2) (hol.eq B x_6 b_27_1))) (thm_536 B) (thm_1581 A B b_27_1 a_27_2 x_3 b_4 a_5).

(; Theorem: |- ((= ((= (((HOLLight.mk_pair a) b) x)) (((HOLLight.mk_pair a') b') x))) (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))) ;)

(; dict ;)

def thm_1583 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> x_3 : hol.term A -> b_4 : hol.term B -> a_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr B hol.bool) (HOLLight_2Emk__pair B A a_5 b_4 x_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1 x_3)) (hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_3 a_5) (hol.eq B x_6 b_4)) (hol.and (hol.eq A x_3 a_27_2) (hol.eq B x_6 b_27_1))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => x_3 : hol.term A => b_4 : hol.term B => a_5 : hol.term A => hol.TRANS hol.bool (hol.eq (hol.arr B hol.bool) (HOLLight_2Emk__pair B A a_5 b_4 x_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1 x_3)) (hol.forall B (x_6 : hol.term B => hol.eq hol.bool (HOLLight_2Emk__pair B A a_5 b_4 x_3 x_6) (HOLLight_2Emk__pair B A a_27_2 b_27_1 x_3 x_6))) (hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_3 a_5) (hol.eq B x_6 b_4)) (hol.and (hol.eq A x_3 a_27_2) (hol.eq B x_6 b_27_1)))) (thm_1532 A B b_27_1 a_27_2 x_3 b_4 a_5) (thm_1582 A B b_27_1 a_27_2 x_3 b_4 a_5).

(; Theorem: |- ((= \lambda x. ((= (((HOLLight.mk_pair a) b) x)) (((HOLLight.mk_pair a') b') x))) \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))) ;)

(; dict ;)

def thm_1584 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_5 : hol.term A => hol.eq (hol.arr B hol.bool) (HOLLight_2Emk__pair B A a_4 b_3 x_5) (HOLLight_2Emk__pair B A a_27_2 b_27_1 x_5)) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.ABS_THM A hol.bool (x_5 : hol.term A => hol.eq (hol.arr B hol.bool) (HOLLight_2Emk__pair B A a_4 b_3 x_5) (HOLLight_2Emk__pair B A a_27_2 b_27_1 x_5)) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))) (x_5 : hol.term A => thm_1583 A B b_27_1 a_27_2 x_5 b_3 a_4).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (((HOLLight.mk_pair a) b) x)) (((HOLLight.mk_pair a') b') x)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ;)

(; dict ;)

def thm_1585 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.eq (hol.arr B hol.bool) (HOLLight_2Emk__pair B A a_4 b_3 x_5) (HOLLight_2Emk__pair B A a_27_2 b_27_1 x_5))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_5 : hol.term A => hol.eq (hol.arr B hol.bool) (HOLLight_2Emk__pair B A a_4 b_3 x_5) (HOLLight_2Emk__pair B A a_27_2 b_27_1 x_5)) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))) (thm_51 A) (thm_1584 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= ((= ((HOLLight.mk_pair a) b)) ((HOLLight.mk_pair a') b'))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ;)

(; dict ;)

def thm_1586 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_4 b_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1)) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.TRANS hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_4 b_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1)) (hol.forall A (x_5 : hol.term A => hol.eq (hol.arr B hol.bool) (HOLLight_2Emk__pair B A a_4 b_3 x_5) (HOLLight_2Emk__pair B A a_27_2 b_27_1 x_5))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (thm_1530 B A b_27_1 a_27_2 b_3 a_4) (thm_1585 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= (Data.Bool.==> ((= ((HOLLight.mk_pair a) b)) ((HOLLight.mk_pair a') b')))) (Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))))) ;)

(; dict ;)

def thm_1587 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_4 b_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1))) (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_4 b_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1)) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) thm_387 (thm_1586 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= ((Data.Bool.==> ((= ((HOLLight.mk_pair a) b)) ((HOLLight.mk_pair a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ;)

(; dict ;)

def thm_1588 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_4 b_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_4 b_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1))) (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (thm_1587 B A b_27_1 a_27_2 b_3 a_4) (thm_629 B A b_27_1 b_3 a_27_2 a_4).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ((Data.Bool.==> ((= ((HOLLight.mk_pair a) b)) ((HOLLight.mk_pair a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ;)

(; dict ;)

def thm_1589 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_4 b_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.SYM hol.bool (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_4 b_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (thm_1588 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)) ;)

(; dict ;)

def thm_1590 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => (p_1 : hol.term hol.bool => thm_186 p_1) (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ;)

(; dict ;)

def thm_1591 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.SYM hol.bool (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (thm_1590 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ;)

(; dict ;)

def thm_1592 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) -> hol.proof (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)) ;)

(; dict ;)

def thm_1593 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.REFL hol.bool (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)) ;)

(; dict ;)

def thm_1594 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.SYM hol.bool (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (thm_1593 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F))) ;)

(; dict ;)

def thm_1595 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.REFL hol.bool (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F))) ;)

(; dict ;)

def thm_1596 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.TRANS hol.bool (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) (thm_1595 B A b_27_1 a_27_2 b_3 a_4) (thm_1595 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)) ;)

(; dict ;)

def thm_1597 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) -> hol.proof (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F) ;)

(; dict ;)

def thm_1598 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) -> hol.proof (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F) ;)

(; dict ;)

def thm_1599 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) -> hyp_2 : hol.proof (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) -> hol.proof (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) => hyp_2 : hol.proof (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) => thm_1597 B A b_27_1 a_27_2 b_3 a_4 hyp_2 (thm_1598 B A b_27_1 a_27_2 b_3 a_4 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)) ;)

(; dict ;)

def thm_1600 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) -> hol.proof (hol.imp (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) => hyp_2 : hol.proof (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) => thm_1599 B A b_27_1 a_27_2 b_3 a_4 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F))) ;)

(; dict ;)

def thm_1601 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.imp (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) => hyp_2 : hol.proof (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) => thm_1600 B A b_27_1 a_27_2 b_3 a_4 hyp_2 (thm_1597 B A b_27_1 a_27_2 b_3 a_4 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)) ;)

(; dict ;)

def thm_1602 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) => thm_1598 B A b_27_1 a_27_2 b_3 a_4 hyp_1.

(; Theorem: |- ((= \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)) \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ;)

(; dict ;)

def thm_1603 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> hol.proof (hol.eq (hol.arr A hol.bool) (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => hol.ABS_THM A hol.bool (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (a_4 : hol.term A => thm_1591 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F))) (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) ;)

(; dict ;)

def thm_1604 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> hol.proof (hol.eq hol.bool (hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) (hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (thm_51 A) (thm_1603 B A b_27_1 a_27_2 b_3).

(; Theorem: |- ((= \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F))) \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) ;)

(; dict ;)

def thm_1605 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> hol.proof (hol.eq (hol.arr A hol.bool) (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false)) (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => hol.ABS_THM A hol.bool (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false)) (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) (a_27_3 : hol.term A => thm_1604 B A b_27_1 a_27_3 b_2).

(; Theorem: |- ((= (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)))) (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))) ;)

(; dict ;)

def thm_1606 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false))) (hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false)) (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) (thm_51 A) (thm_1605 B A b_27_1 b_2).

(; Theorem: |- ((= \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)))) \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))) ;)

(; dict ;)

def thm_1607 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> hol.proof (hol.eq (hol.arr B hol.bool) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false))) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => hol.ABS_THM B hol.bool (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false))) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))) (b_2 : hol.term B => thm_1606 B A b_27_1 b_2).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F))))) (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))))) ;)

(; dict ;)

def thm_1608 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> hol.proof (hol.eq hol.bool (hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false)))) (hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false))) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))) (thm_536 B) (thm_1607 A B b_27_1).

(; Theorem: |- ((= \lambda b'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F))))) \lambda b'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))))) ;)

(; dict ;)

def thm_1609 : A : hol.type -> B : hol.type -> hol.proof (hol.eq (hol.arr B hol.bool) (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false)))) (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))))) :=
  A : hol.type => B : hol.type => hol.ABS_THM B hol.bool (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false)))) (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))))) (b_27_1 : hol.term B => thm_1608 A B b_27_1).

(; Theorem: |- ((= (Data.Bool.! \lambda b'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)))))) (Data.Bool.! \lambda b'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))))) ;)

(; dict ;)

def thm_1610 : A : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false))))) (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))))))) :=
  A : hol.type => B : hol.type => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false)))) (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))))) (thm_536 B) (thm_1609 A B).

(; Theorem: |- ((= (Data.Bool.! \lambda b'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))))) (Data.Bool.! \lambda b'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))))) ;)

(; dict ;)

def thm_1611 : A : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))))) (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))))))) :=
  A : hol.type => B : hol.type => hol.REFL hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))))).

(; Theorem: |- ((= (Data.Bool.! \lambda b'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)))))) (Data.Bool.! \lambda b'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))))) ;)

(; dict ;)

def thm_1612 : A : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false))))) (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))))))) :=
  A : hol.type => B : hol.type => hol.TRANS hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false))))) (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))))) (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))))) (thm_1610 A B) (thm_1611 A B).

(; Theorem: |- ((= (Data.Bool.! \lambda b'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)))))) (Data.Bool.! \lambda b'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))))) ;)

(; dict ;)

def thm_1613 : A : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false))))) (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))))))) :=
  A : hol.type => B : hol.type => hol.TRANS hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false))))) (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))))) (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))))) (thm_1612 A B) (thm_1611 A B).

(; Theorem: |- ((= (Data.Bool.! \lambda b'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)))))) (Data.Bool.! \lambda b'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))))) ;)

(; dict ;)

def thm_1614 : A : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false))))) (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))))))) :=
  A : hol.type => B : hol.type => hol.TRANS hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false))))) (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))))) (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))))) (thm_1613 A B) (thm_1611 A B).

(; Theorem: |- ((= (Data.Bool.! \lambda b'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)))))) (Data.Bool.! \lambda b'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))))) ;)

(; dict ;)

def thm_1615 : A : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false))))) (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))))))) :=
  A : hol.type => B : hol.type => hol.TRANS hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false))))) (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))))) (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))))) (thm_1614 A B) (thm_1611 A B).

(; Theorem: |- ((= (Data.Bool.! \lambda b'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))))) (Data.Bool.! \lambda b'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)))))) ;)

(; dict ;)

def thm_1616 : A : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))))) (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false)))))) :=
  A : hol.type => B : hol.type => hol.SYM hol.bool (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false))))) (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))))) (thm_1615 A B).

(; Theorem: |- ((= \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))) \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))) ;)

(; dict ;)

def thm_1617 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> hol.proof (hol.eq (hol.arr B hol.bool) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => hol.REFL (hol.arr B hol.bool) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))).

(; Theorem: |- ((= \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))) \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))) ;)

(; dict ;)

def thm_1618 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> hol.proof (hol.eq (hol.arr B hol.bool) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => hol.TRANS (hol.arr B hol.bool) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))) (thm_1617 A B b_27_1) (thm_1617 A B b_27_1).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))))) (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))))) ;)

(; dict ;)

def thm_1619 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> hol.proof (hol.eq hol.bool (hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))))) (hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))) (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))) (thm_536 B) (thm_1618 A B b_27_1).

(; Theorem: |- ((= \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) ;)

(; dict ;)

def thm_1620 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> hol.proof (hol.eq (hol.arr A hol.bool) (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => hol.REFL (hol.arr A hol.bool) (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))).

(; Theorem: |- ((= \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) ;)

(; dict ;)

def thm_1621 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> hol.proof (hol.eq (hol.arr A hol.bool) (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => hol.TRANS (hol.arr A hol.bool) (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) (thm_1620 B A b_27_1 b_2) (thm_1620 B A b_27_1 b_2).

(; Theorem: |- ((= (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))) (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))) ;)

(; dict ;)

def thm_1622 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))) (hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) (thm_51 A) (thm_1621 B A b_27_1 b_2).

(; Theorem: |- ((= \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ;)

(; dict ;)

def thm_1623 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> hol.proof (hol.eq (hol.arr A hol.bool) (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => hol.REFL (hol.arr A hol.bool) (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))).

(; Theorem: |- ((= \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ;)

(; dict ;)

def thm_1624 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> hol.proof (hol.eq (hol.arr A hol.bool) (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => hol.TRANS (hol.arr A hol.bool) (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (thm_1623 B A b_27_1 a_27_2 b_3) (thm_1623 B A b_27_1 a_27_2 b_3).

(; Theorem: |- ((= (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) ;)

(; dict ;)

def thm_1625 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> hol.proof (hol.eq hol.bool (hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) (hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (thm_51 A) (thm_1624 B A b_27_1 a_27_2 b_3).

(; Theorem: |- ((= ((Data.Bool./\ ((= a) a')) ((= b) b'))) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool./\ ((= a) a')) ((= b) b')))) Data.Bool.F)) ;)

(; dict ;)

def thm_1626 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.imp (hol.not (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) hol.false)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => (p_1 : hol.term hol.bool => thm_186 p_1) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((Data.Bool./\ ((= a) a')) ((= b) b')))) Data.Bool.F)) ((Data.Bool./\ ((= a) a')) ((= b) b'))) ;)

(; dict ;)

def thm_1627 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) hol.false) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hol.SYM hol.bool (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (hol.imp (hol.not (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) hol.false) (thm_1626 B A b_27_1 b_2 a_27_3 a_4).

(; Theorem: |- (Data.Bool.~ ((Data.Bool./\ ((= a) a')) ((= b) b'))) ;)

(; dict ;)

def thm_1628 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) -> hol.proof (hol.not (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.~ ((= b) b'))) (Data.Bool.~ ((= b) b'))) ;)

(; dict ;)

def thm_1629 : B : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.not (hol.eq B b_2 b_27_1)) (hol.not (hol.eq B b_2 b_27_1))) :=
  B : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => hol.REFL hol.bool (hol.not (hol.eq B b_2 b_27_1)).

(; Theorem: |- ((= (Data.Bool.~ ((= b) b'))) (Data.Bool.~ ((= b) b'))) ;)

(; dict ;)

def thm_1630 : B : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.not (hol.eq B b_2 b_27_1)) (hol.not (hol.eq B b_2 b_27_1))) :=
  B : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => hol.TRANS hol.bool (hol.not (hol.eq B b_2 b_27_1)) (hol.not (hol.eq B b_2 b_27_1)) (hol.not (hol.eq B b_2 b_27_1)) (thm_1629 B b_27_1 b_2) (thm_1629 B b_27_1 b_2).

(; Theorem: |- (Data.Bool.~ ((= b) b')) ;)

(; dict ;)

def thm_1631 : B : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> hyp_1 : hol.proof (hol.not (hol.eq B b_2 b_27_1)) -> hol.proof (hol.not (hol.eq B b_2 b_27_1)) :=
  B : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => hyp_1 : hol.proof (hol.not (hol.eq B b_2 b_27_1)) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> ((= b) b')) Data.Bool.F)) ((Data.Bool.==> ((= b) b')) Data.Bool.F)) ;)

(; dict ;)

def thm_1632 : B : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq B b_2 b_27_1) hol.false) (hol.imp (hol.eq B b_2 b_27_1) hol.false)) :=
  B : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => hol.REFL hol.bool (hol.imp (hol.eq B b_2 b_27_1) hol.false).

(; Theorem: |- ((= ((Data.Bool.==> ((= b) b')) Data.Bool.F)) ((Data.Bool.==> ((= b) b')) Data.Bool.F)) ;)

(; dict ;)

def thm_1633 : B : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq B b_2 b_27_1) hol.false) (hol.imp (hol.eq B b_2 b_27_1) hol.false)) :=
  B : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => hol.TRANS hol.bool (hol.imp (hol.eq B b_2 b_27_1) hol.false) (hol.imp (hol.eq B b_2 b_27_1) hol.false) (hol.imp (hol.eq B b_2 b_27_1) hol.false) (thm_1632 B b_27_1 b_2) (thm_1632 B b_27_1 b_2).

(; Theorem: |- ((= (Data.Bool.~ ((= b) b'))) ((Data.Bool.==> ((= b) b')) Data.Bool.F)) ;)

(; dict ;)

def thm_1634 : B : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.not (hol.eq B b_2 b_27_1)) (hol.imp (hol.eq B b_2 b_27_1) hol.false)) :=
  B : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => (p_1 : hol.term hol.bool => thm_313 p_1) (hol.eq B b_2 b_27_1).

(; Theorem: |- ((= (Data.Bool.~ ((= b) b'))) ((Data.Bool.==> ((= b) b')) Data.Bool.F)) ;)

(; dict ;)

def thm_1635 : B : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.not (hol.eq B b_2 b_27_1)) (hol.imp (hol.eq B b_2 b_27_1) hol.false)) :=
  B : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => hol.TRANS hol.bool (hol.not (hol.eq B b_2 b_27_1)) (hol.not (hol.eq B b_2 b_27_1)) (hol.imp (hol.eq B b_2 b_27_1) hol.false) (thm_1629 B b_27_1 b_2) (thm_1634 B b_27_1 b_2).

(; Theorem: |- ((Data.Bool.==> ((= b) b')) Data.Bool.F) ;)

(; dict ;)

def thm_1636 : B : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> hyp_1 : hol.proof (hol.not (hol.eq B b_2 b_27_1)) -> hol.proof (hol.imp (hol.eq B b_2 b_27_1) hol.false) :=
  B : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => hyp_1 : hol.proof (hol.not (hol.eq B b_2 b_27_1)) => hol.EQ_MP (hol.not (hol.eq B b_2 b_27_1)) (hol.imp (hol.eq B b_2 b_27_1) hol.false) (thm_1635 B b_27_1 b_2) (thm_1631 B b_27_1 b_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((= b) b'))) ((= b) b'))) ((= b) b')) ;)

(; dict ;)

def thm_1637 : B : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.eq B b_2 b_27_1)) (hol.eq B b_2 b_27_1)) (hol.eq B b_2 b_27_1)) :=
  B : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => (p_1 : hol.term hol.bool => thm_299 p_1) (hol.eq B b_2 b_27_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ ((= _1213) a)) ((= _1214) b))) ((= _1214) b'))) ((Data.Bool.==> ((Data.Bool./\ ((= _1213) a)) ((= _1214) b))) ((= _1214) b'))) ;)

(; dict ;)

def thm_1638 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> __1214_3 : hol.term B -> a_4 : hol.term A -> __1213_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (hol.eq A __1213_5 a_4) (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1)) (hol.imp (hol.and (hol.eq A __1213_5 a_4) (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => __1214_3 : hol.term B => a_4 : hol.term A => __1213_5 : hol.term A => hol.REFL hol.bool (hol.imp (hol.and (hol.eq A __1213_5 a_4) (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1)).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ ((= _1213) a)) ((= _1214) b))) ((= _1214) b'))) ((Data.Bool.==> ((Data.Bool./\ ((= _1213) a)) ((= _1214) b))) ((= _1214) b'))) ;)

(; dict ;)

def thm_1639 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> __1214_3 : hol.term B -> a_4 : hol.term A -> __1213_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (hol.eq A __1213_5 a_4) (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1)) (hol.imp (hol.and (hol.eq A __1213_5 a_4) (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => __1214_3 : hol.term B => a_4 : hol.term A => __1213_5 : hol.term A => hol.TRANS hol.bool (hol.imp (hol.and (hol.eq A __1213_5 a_4) (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1)) (hol.imp (hol.and (hol.eq A __1213_5 a_4) (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1)) (hol.imp (hol.and (hol.eq A __1213_5 a_4) (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1)) (thm_1638 B A b_27_1 b_2 __1214_3 a_4 __1213_5) (thm_1638 B A b_27_1 b_2 __1214_3 a_4 __1213_5).

(; Theorem: |- ((= ((Data.Bool.\/ ((= _1214) b')) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b))))) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b))))) ((= _1214) b'))) ;)

(; dict ;)

def thm_1640 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> __1213_3 : hol.term A -> b_27_4 : hol.term B -> __1214_5 : hol.term B -> hol.proof (hol.eq hol.bool (hol.or (hol.eq B __1214_5 b_27_4) (hol.or (hol.not (hol.eq A __1213_3 a_2)) (hol.not (hol.eq B __1214_5 b_1)))) (hol.imp (hol.not (hol.or (hol.not (hol.eq A __1213_3 a_2)) (hol.not (hol.eq B __1214_5 b_1)))) (hol.eq B __1214_5 b_27_4))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => __1213_3 : hol.term A => b_27_4 : hol.term B => __1214_5 : hol.term B => (b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => thm_911 b_1 a_2) (hol.or (hol.not (hol.eq A __1213_3 a_2)) (hol.not (hol.eq B __1214_5 b_1))) (hol.eq B __1214_5 b_27_4).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b)))) ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_1641 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b)))) ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_1642 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) (thm_1641 b_1 a_2) (thm_1641 b_1 a_2).

(; Theorem: |- ((= (= (\lambda _610. ((= (Data.Bool.~ ((Data.Bool.\/ _610) b))) ((Data.Bool./\ (Data.Bool.~ _610)) (Data.Bool.~ b))) a))) (= (\lambda _610. ((= (Data.Bool.~ ((Data.Bool.\/ _610) b))) ((Data.Bool./\ (Data.Bool.~ _610)) (Data.Bool.~ b))) a))) ;)

(; dict ;)

def thm_1643 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) a_1)) (hol.eq hol.bool ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) a_1))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) a_1)).

(; Theorem: |- ((= (\lambda _610. ((= (Data.Bool.~ ((Data.Bool.\/ _610) b))) ((Data.Bool./\ (Data.Bool.~ _610)) (Data.Bool.~ b))) Data.Bool.F)) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_1644 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__610_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_2 b_1)) (hol.and (hol.not __610_2) (hol.not b_1))) hol.false) (hol.eq hol.bool (hol.not (hol.or hol.false b_1)) (hol.and (hol.not hol.false) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__610_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_2 b_1)) (hol.and (hol.not __610_2) (hol.not b_1))) hol.false.

(; Theorem: |- ((= ((= (\lambda _610. ((= (Data.Bool.~ ((Data.Bool.\/ _610) b))) ((Data.Bool./\ (Data.Bool.~ _610)) (Data.Bool.~ b))) a)) (\lambda _610. ((= (Data.Bool.~ ((Data.Bool.\/ _610) b))) ((Data.Bool./\ (Data.Bool.~ _610)) (Data.Bool.~ b))) Data.Bool.F))) ((= (\lambda _610. ((= (Data.Bool.~ ((Data.Bool.\/ _610) b))) ((Data.Bool./\ (Data.Bool.~ _610)) (Data.Bool.~ b))) a)) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b))))) ;)

(; dict ;)

def thm_1645 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) a_1) ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) hol.false)) (hol.eq hol.bool ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) a_1) (hol.eq hol.bool (hol.not (hol.or hol.false b_2)) (hol.and (hol.not hol.false) (hol.not b_2))))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) a_1)) (hol.eq hol.bool ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) a_1)) ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) hol.false) (hol.eq hol.bool (hol.not (hol.or hol.false b_2)) (hol.and (hol.not hol.false) (hol.not b_2))) (thm_1643 a_1 b_2) (thm_1644 b_2).

(; Theorem: |- ((= (\lambda _610. ((= (Data.Bool.~ ((Data.Bool.\/ _610) b))) ((Data.Bool./\ (Data.Bool.~ _610)) (Data.Bool.~ b))) a)) ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_1646 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) a_1) (hol.eq hol.bool (hol.not (hol.or a_1 b_2)) (hol.and (hol.not a_1) (hol.not b_2)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) a_1.

(; Theorem: |- ((= (= (\lambda _610. ((= (Data.Bool.~ ((Data.Bool.\/ _610) b))) ((Data.Bool./\ (Data.Bool.~ _610)) (Data.Bool.~ b))) a))) (= ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b))))) ;)

(; dict ;)

def thm_1647 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) a_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or a_1 b_2)) (hol.and (hol.not a_1) (hol.not b_2))))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) a_1) (hol.eq hol.bool (hol.not (hol.or a_1 b_2)) (hol.and (hol.not a_1) (hol.not b_2))) thm_119 (thm_1646 a_1 b_2).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b)))) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_1648 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or hol.false b_1)) (hol.and (hol.not hol.false) (hol.not b_1))) (hol.eq hol.bool (hol.not (hol.or hol.false b_1)) (hol.and (hol.not hol.false) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.or hol.false b_1)) (hol.and (hol.not hol.false) (hol.not b_1))).

(; Theorem: |- ((= ((= (\lambda _610. ((= (Data.Bool.~ ((Data.Bool.\/ _610) b))) ((Data.Bool./\ (Data.Bool.~ _610)) (Data.Bool.~ b))) a)) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b))))) ((= ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b)))) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b))))) ;)

(; dict ;)

def thm_1649 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) a_1) (hol.eq hol.bool (hol.not (hol.or hol.false b_2)) (hol.and (hol.not hol.false) (hol.not b_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or a_1 b_2)) (hol.and (hol.not a_1) (hol.not b_2))) (hol.eq hol.bool (hol.not (hol.or hol.false b_2)) (hol.and (hol.not hol.false) (hol.not b_2))))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) a_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or a_1 b_2)) (hol.and (hol.not a_1) (hol.not b_2)))) (hol.eq hol.bool (hol.not (hol.or hol.false b_2)) (hol.and (hol.not hol.false) (hol.not b_2))) (hol.eq hol.bool (hol.not (hol.or hol.false b_2)) (hol.and (hol.not hol.false) (hol.not b_2))) (thm_1647 a_1 b_2) (thm_1648 b_2).

(; Theorem: |- ((= ((= (\lambda _610. ((= (Data.Bool.~ ((Data.Bool.\/ _610) b))) ((Data.Bool./\ (Data.Bool.~ _610)) (Data.Bool.~ b))) a)) (\lambda _610. ((= (Data.Bool.~ ((Data.Bool.\/ _610) b))) ((Data.Bool./\ (Data.Bool.~ _610)) (Data.Bool.~ b))) Data.Bool.F))) ((= ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b)))) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b))))) ;)

(; dict ;)

def thm_1650 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) a_1) ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or a_1 b_2)) (hol.and (hol.not a_1) (hol.not b_2))) (hol.eq hol.bool (hol.not (hol.or hol.false b_2)) (hol.and (hol.not hol.false) (hol.not b_2))))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) a_1) ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) hol.false)) (hol.eq hol.bool ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) a_1) (hol.eq hol.bool (hol.not (hol.or hol.false b_2)) (hol.and (hol.not hol.false) (hol.not b_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or a_1 b_2)) (hol.and (hol.not a_1) (hol.not b_2))) (hol.eq hol.bool (hol.not (hol.or hol.false b_2)) (hol.and (hol.not hol.false) (hol.not b_2)))) (thm_1645 a_1 b_2) (thm_1649 a_1 b_2).

(; Theorem: |- ((= \lambda _610. ((= (Data.Bool.~ ((Data.Bool.\/ _610) b))) ((Data.Bool./\ (Data.Bool.~ _610)) (Data.Bool.~ b)))) \lambda _610. ((= (Data.Bool.~ ((Data.Bool.\/ _610) b))) ((Data.Bool./\ (Data.Bool.~ _610)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_1651 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__610_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_2 b_1)) (hol.and (hol.not __610_2) (hol.not b_1))) (__610_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_2 b_1)) (hol.and (hol.not __610_2) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__610_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_2 b_1)) (hol.and (hol.not __610_2) (hol.not b_1))).

(; Theorem: |- ((= (\lambda _610. ((= (Data.Bool.~ ((Data.Bool.\/ _610) b))) ((Data.Bool./\ (Data.Bool.~ _610)) (Data.Bool.~ b))) a)) (\lambda _610. ((= (Data.Bool.~ ((Data.Bool.\/ _610) b))) ((Data.Bool./\ (Data.Bool.~ _610)) (Data.Bool.~ b))) Data.Bool.F)) ;)

(; dict ;)

def thm_1652 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) -> hol.proof (hol.eq hol.bool ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) a_1) ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) hol.false)) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) => hol.APP_THM hol.bool hol.bool (__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) (__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_2)) (hol.and (hol.not __610_3) (hol.not b_2))) a_1 hol.false (thm_1651 b_2) (thm_831 a_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b)))) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_1653 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.not (hol.or hol.false b_1)) (hol.and (hol.not hol.false) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_1)) (hol.and (hol.not __610_3) (hol.not b_1))) a_2) ((__610_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __610_3 b_1)) (hol.and (hol.not __610_3) (hol.not b_1))) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.not (hol.or hol.false b_1)) (hol.and (hol.not hol.false) (hol.not b_1)))) (thm_1650 a_2 b_1) (thm_1652 a_2 b_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b)))) ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_1654 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or hol.false b_2)) (hol.and (hol.not hol.false) (hol.not b_2))) (hol.eq hol.bool (hol.not (hol.or a_1 b_2)) (hol.and (hol.not a_1) (hol.not b_2)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.or a_1 b_2)) (hol.and (hol.not a_1) (hol.not b_2))) (hol.eq hol.bool (hol.not (hol.or hol.false b_2)) (hol.and (hol.not hol.false) (hol.not b_2))) (thm_1653 b_2 a_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) b))) (Data.Bool.~ b)) ;)

(; dict ;)

def thm_1655 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.or hol.false b_1)) (hol.not b_1)) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.or hol.false b_1) b_1 thm_247 (thm_872 b_1).

(; Theorem: |- ((= (= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) b)))) (= (Data.Bool.~ b))) ;)

(; dict ;)

def thm_1656 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.or hol.false b_1))) (hol.eq hol.bool (hol.not b_1))) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.or hol.false b_1)) (hol.not b_1) thm_119 (thm_1655 b_1).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.~ Data.Bool.F))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_1657 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.not hol.false)) (hol.and hol.true)) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.not hol.false) hol.true thm_388 thm_10.

(; Theorem: |- ((= (Data.Bool.~ b)) (Data.Bool.~ b)) ;)

(; dict ;)

def thm_1658 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not b_1) (hol.not b_1)) :=
  b_1 : hol.term hol.bool => hol.REFL hol.bool (hol.not b_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b))) ((Data.Bool./\ Data.Bool.T) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_1659 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.not hol.false) (hol.not b_1)) (hol.and hol.true (hol.not b_1))) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and (hol.not hol.false)) (hol.and hol.true) (hol.not b_1) (hol.not b_1) thm_1657 (thm_1658 b_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) (Data.Bool.~ b))) (Data.Bool.~ b)) ;)

(; dict ;)

def thm_1660 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true (hol.not b_1)) (hol.not b_1)) :=
  b_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_1194 t_1) (hol.not b_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b))) (Data.Bool.~ b)) ;)

(; dict ;)

def thm_1661 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.not hol.false) (hol.not b_1)) (hol.not b_1)) :=
  b_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.and (hol.not hol.false) (hol.not b_1)) (hol.and hol.true (hol.not b_1)) (hol.not b_1) (thm_1659 b_1) (thm_1660 b_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b)))) ((= (Data.Bool.~ b)) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_1662 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or hol.false b_1)) (hol.and (hol.not hol.false) (hol.not b_1))) (hol.eq hol.bool (hol.not b_1) (hol.not b_1))) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.or hol.false b_1))) (hol.eq hol.bool (hol.not b_1)) (hol.and (hol.not hol.false) (hol.not b_1)) (hol.not b_1) (thm_1656 b_1) (thm_1661 b_1).

(; Theorem: |- ((= ((= (Data.Bool.~ b)) (Data.Bool.~ b))) Data.Bool.T) ;)

(; dict ;)

def thm_1663 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not b_1) (hol.not b_1)) hol.true) :=
  b_1 : hol.term hol.bool => (x_1 : hol.term hol.bool => thm_181 x_1) (hol.not b_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b)))) Data.Bool.T) ;)

(; dict ;)

def thm_1664 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or hol.false b_1)) (hol.and (hol.not hol.false) (hol.not b_1))) hol.true) :=
  b_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.or hol.false b_1)) (hol.and (hol.not hol.false) (hol.not b_1))) (hol.eq hol.bool (hol.not b_1) (hol.not b_1)) hol.true (thm_1662 b_1) (thm_1663 b_1).

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_1665 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (hol.or hol.false b_1)) (hol.and (hol.not hol.false) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.or hol.false b_1)) (hol.and (hol.not hol.false) (hol.not b_1))) hol.true (thm_1664 b_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_1666 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.or hol.false b_1)) (hol.and (hol.not hol.false) (hol.not b_1))) :=
  b_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (hol.or hol.false b_1)) (hol.and (hol.not hol.false) (hol.not b_1))) (thm_1665 b_1) thm_5.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_1667 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.false) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.or hol.false b_1)) (hol.and (hol.not hol.false) (hol.not b_1))) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) (thm_1654 a_2 b_1 hyp_1) (thm_1666 b_1).

(; Theorem: |- ((Data.Bool.==> ((= a) Data.Bool.F)) ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_1668 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.false) => thm_1667 b_1 a_2 hyp_1.

(; Theorem: |- ((= (= (\lambda _608. ((= (Data.Bool.~ ((Data.Bool.\/ _608) b))) ((Data.Bool./\ (Data.Bool.~ _608)) (Data.Bool.~ b))) a))) (= (\lambda _608. ((= (Data.Bool.~ ((Data.Bool.\/ _608) b))) ((Data.Bool./\ (Data.Bool.~ _608)) (Data.Bool.~ b))) a))) ;)

(; dict ;)

def thm_1669 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) a_1)) (hol.eq hol.bool ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) a_1))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) a_1)).

(; Theorem: |- ((= (\lambda _608. ((= (Data.Bool.~ ((Data.Bool.\/ _608) b))) ((Data.Bool./\ (Data.Bool.~ _608)) (Data.Bool.~ b))) Data.Bool.T)) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_1670 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__608_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_2 b_1)) (hol.and (hol.not __608_2) (hol.not b_1))) hol.true) (hol.eq hol.bool (hol.not (hol.or hol.true b_1)) (hol.and (hol.not hol.true) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__608_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_2 b_1)) (hol.and (hol.not __608_2) (hol.not b_1))) hol.true.

(; Theorem: |- ((= ((= (\lambda _608. ((= (Data.Bool.~ ((Data.Bool.\/ _608) b))) ((Data.Bool./\ (Data.Bool.~ _608)) (Data.Bool.~ b))) a)) (\lambda _608. ((= (Data.Bool.~ ((Data.Bool.\/ _608) b))) ((Data.Bool./\ (Data.Bool.~ _608)) (Data.Bool.~ b))) Data.Bool.T))) ((= (\lambda _608. ((= (Data.Bool.~ ((Data.Bool.\/ _608) b))) ((Data.Bool./\ (Data.Bool.~ _608)) (Data.Bool.~ b))) a)) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b))))) ;)

(; dict ;)

def thm_1671 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) a_1) ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) hol.true)) (hol.eq hol.bool ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) a_1) (hol.eq hol.bool (hol.not (hol.or hol.true b_2)) (hol.and (hol.not hol.true) (hol.not b_2))))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) a_1)) (hol.eq hol.bool ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) a_1)) ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) hol.true) (hol.eq hol.bool (hol.not (hol.or hol.true b_2)) (hol.and (hol.not hol.true) (hol.not b_2))) (thm_1669 a_1 b_2) (thm_1670 b_2).

(; Theorem: |- ((= (\lambda _608. ((= (Data.Bool.~ ((Data.Bool.\/ _608) b))) ((Data.Bool./\ (Data.Bool.~ _608)) (Data.Bool.~ b))) a)) ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_1672 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) a_1) (hol.eq hol.bool (hol.not (hol.or a_1 b_2)) (hol.and (hol.not a_1) (hol.not b_2)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) a_1.

(; Theorem: |- ((= (= (\lambda _608. ((= (Data.Bool.~ ((Data.Bool.\/ _608) b))) ((Data.Bool./\ (Data.Bool.~ _608)) (Data.Bool.~ b))) a))) (= ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b))))) ;)

(; dict ;)

def thm_1673 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) a_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or a_1 b_2)) (hol.and (hol.not a_1) (hol.not b_2))))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) a_1) (hol.eq hol.bool (hol.not (hol.or a_1 b_2)) (hol.and (hol.not a_1) (hol.not b_2))) thm_119 (thm_1672 a_1 b_2).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b)))) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_1674 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or hol.true b_1)) (hol.and (hol.not hol.true) (hol.not b_1))) (hol.eq hol.bool (hol.not (hol.or hol.true b_1)) (hol.and (hol.not hol.true) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.or hol.true b_1)) (hol.and (hol.not hol.true) (hol.not b_1))).

(; Theorem: |- ((= ((= (\lambda _608. ((= (Data.Bool.~ ((Data.Bool.\/ _608) b))) ((Data.Bool./\ (Data.Bool.~ _608)) (Data.Bool.~ b))) a)) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b))))) ((= ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b)))) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b))))) ;)

(; dict ;)

def thm_1675 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) a_1) (hol.eq hol.bool (hol.not (hol.or hol.true b_2)) (hol.and (hol.not hol.true) (hol.not b_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or a_1 b_2)) (hol.and (hol.not a_1) (hol.not b_2))) (hol.eq hol.bool (hol.not (hol.or hol.true b_2)) (hol.and (hol.not hol.true) (hol.not b_2))))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) a_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or a_1 b_2)) (hol.and (hol.not a_1) (hol.not b_2)))) (hol.eq hol.bool (hol.not (hol.or hol.true b_2)) (hol.and (hol.not hol.true) (hol.not b_2))) (hol.eq hol.bool (hol.not (hol.or hol.true b_2)) (hol.and (hol.not hol.true) (hol.not b_2))) (thm_1673 a_1 b_2) (thm_1674 b_2).

(; Theorem: |- ((= ((= (\lambda _608. ((= (Data.Bool.~ ((Data.Bool.\/ _608) b))) ((Data.Bool./\ (Data.Bool.~ _608)) (Data.Bool.~ b))) a)) (\lambda _608. ((= (Data.Bool.~ ((Data.Bool.\/ _608) b))) ((Data.Bool./\ (Data.Bool.~ _608)) (Data.Bool.~ b))) Data.Bool.T))) ((= ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b)))) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b))))) ;)

(; dict ;)

def thm_1676 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) a_1) ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or a_1 b_2)) (hol.and (hol.not a_1) (hol.not b_2))) (hol.eq hol.bool (hol.not (hol.or hol.true b_2)) (hol.and (hol.not hol.true) (hol.not b_2))))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) a_1) ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) hol.true)) (hol.eq hol.bool ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) a_1) (hol.eq hol.bool (hol.not (hol.or hol.true b_2)) (hol.and (hol.not hol.true) (hol.not b_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or a_1 b_2)) (hol.and (hol.not a_1) (hol.not b_2))) (hol.eq hol.bool (hol.not (hol.or hol.true b_2)) (hol.and (hol.not hol.true) (hol.not b_2)))) (thm_1671 a_1 b_2) (thm_1675 a_1 b_2).

(; Theorem: |- ((= \lambda _608. ((= (Data.Bool.~ ((Data.Bool.\/ _608) b))) ((Data.Bool./\ (Data.Bool.~ _608)) (Data.Bool.~ b)))) \lambda _608. ((= (Data.Bool.~ ((Data.Bool.\/ _608) b))) ((Data.Bool./\ (Data.Bool.~ _608)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_1677 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__608_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_2 b_1)) (hol.and (hol.not __608_2) (hol.not b_1))) (__608_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_2 b_1)) (hol.and (hol.not __608_2) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__608_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_2 b_1)) (hol.and (hol.not __608_2) (hol.not b_1))).

(; Theorem: |- ((= (\lambda _608. ((= (Data.Bool.~ ((Data.Bool.\/ _608) b))) ((Data.Bool./\ (Data.Bool.~ _608)) (Data.Bool.~ b))) a)) (\lambda _608. ((= (Data.Bool.~ ((Data.Bool.\/ _608) b))) ((Data.Bool./\ (Data.Bool.~ _608)) (Data.Bool.~ b))) Data.Bool.T)) ;)

(; dict ;)

def thm_1678 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) -> hol.proof (hol.eq hol.bool ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) a_1) ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) hol.true)) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) => hol.APP_THM hol.bool hol.bool (__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) (__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_2)) (hol.and (hol.not __608_3) (hol.not b_2))) a_1 hol.true (thm_1677 b_2) (thm_893 a_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b)))) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_1679 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.not (hol.or hol.true b_1)) (hol.and (hol.not hol.true) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_1)) (hol.and (hol.not __608_3) (hol.not b_1))) a_2) ((__608_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __608_3 b_1)) (hol.and (hol.not __608_3) (hol.not b_1))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.not (hol.or hol.true b_1)) (hol.and (hol.not hol.true) (hol.not b_1)))) (thm_1676 a_2 b_1) (thm_1678 a_2 b_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b)))) ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_1680 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or hol.true b_2)) (hol.and (hol.not hol.true) (hol.not b_2))) (hol.eq hol.bool (hol.not (hol.or a_1 b_2)) (hol.and (hol.not a_1) (hol.not b_2)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.or a_1 b_2)) (hol.and (hol.not a_1) (hol.not b_2))) (hol.eq hol.bool (hol.not (hol.or hol.true b_2)) (hol.and (hol.not hol.true) (hol.not b_2))) (thm_1679 b_2 a_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) b))) (Data.Bool.~ Data.Bool.T)) ;)

(; dict ;)

def thm_1681 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.or hol.true b_1)) (hol.not hol.true)) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.or hol.true b_1) hol.true thm_247 (thm_897 b_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) b))) Data.Bool.F) ;)

(; dict ;)

def thm_1682 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.or hol.true b_1)) hol.false) :=
  b_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.not (hol.or hol.true b_1)) (hol.not hol.true) hol.false (thm_1681 b_1) thm_9.

(; Theorem: |- ((= (= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) b)))) (= Data.Bool.F)) ;)

(; dict ;)

def thm_1683 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.or hol.true b_1))) (hol.eq hol.bool hol.false)) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.or hol.true b_1)) hol.false thm_119 (thm_1682 b_1).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.~ Data.Bool.T))) (Data.Bool./\ Data.Bool.F)) ;)

(; dict ;)

def thm_1684 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.not hol.true)) (hol.and hol.false)) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.not hol.true) hol.false thm_388 thm_9.

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b))) ((Data.Bool./\ Data.Bool.F) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_1685 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.not hol.true) (hol.not b_1)) (hol.and hol.false (hol.not b_1))) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and (hol.not hol.true)) (hol.and hol.false) (hol.not b_1) (hol.not b_1) thm_1684 (thm_1658 b_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) (Data.Bool.~ b))) Data.Bool.F) ;)

(; dict ;)

def thm_1686 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false (hol.not b_1)) hol.false) :=
  b_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_1202 t_1) (hol.not b_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b))) Data.Bool.F) ;)

(; dict ;)

def thm_1687 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.not hol.true) (hol.not b_1)) hol.false) :=
  b_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.and (hol.not hol.true) (hol.not b_1)) (hol.and hol.false (hol.not b_1)) hol.false (thm_1685 b_1) (thm_1686 b_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b)))) ((= Data.Bool.F) Data.Bool.F)) ;)

(; dict ;)

def thm_1688 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or hol.true b_1)) (hol.and (hol.not hol.true) (hol.not b_1))) (hol.eq hol.bool hol.false hol.false)) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.or hol.true b_1))) (hol.eq hol.bool hol.false) (hol.and (hol.not hol.true) (hol.not b_1)) hol.false (thm_1683 b_1) (thm_1687 b_1).

(; Theorem: |- ((= ((= Data.Bool.F) Data.Bool.F)) (Data.Bool.~ Data.Bool.F)) ;)

(; dict ;)

def thm_1689 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false hol.false) (hol.not hol.false)) :=
  (t_1 : hol.term hol.bool => thm_232 t_1) hol.false.

(; Theorem: |- ((= ((= Data.Bool.F) Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_1690 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false hol.false) hol.true) :=
  hol.TRANS hol.bool (hol.eq hol.bool hol.false hol.false) (hol.not hol.false) hol.true thm_1689 thm_10.

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b)))) Data.Bool.T) ;)

(; dict ;)

def thm_1691 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or hol.true b_1)) (hol.and (hol.not hol.true) (hol.not b_1))) hol.true) :=
  b_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.or hol.true b_1)) (hol.and (hol.not hol.true) (hol.not b_1))) (hol.eq hol.bool hol.false hol.false) hol.true (thm_1688 b_1) thm_1690.

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_1692 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (hol.or hol.true b_1)) (hol.and (hol.not hol.true) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.or hol.true b_1)) (hol.and (hol.not hol.true) (hol.not b_1))) hol.true (thm_1691 b_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) b))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_1693 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.or hol.true b_1)) (hol.and (hol.not hol.true) (hol.not b_1))) :=
  b_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (hol.or hol.true b_1)) (hol.and (hol.not hol.true) (hol.not b_1))) (thm_1692 b_1) thm_5.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_1694 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.true) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.or hol.true b_1)) (hol.and (hol.not hol.true) (hol.not b_1))) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) (thm_1680 a_2 b_1 hyp_1) (thm_1693 b_1).

(; Theorem: |- ((Data.Bool.==> ((= a) Data.Bool.T)) ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_1695 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.true) => thm_1694 b_1 a_2 hyp_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_1696 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1)))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool a_2 hol.false)) -> hol.proof (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1)))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool a_2 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_1697 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1)))) -> hol.proof (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1)))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool a_2 hol.false)) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) (thm_907 a_2) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool a_2 hol.false)) => thm_1696 b_1 a_2 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_1698 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1)))) -> hol.proof (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1)))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1)))) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) (thm_1695 b_1 a_2) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1)))) => thm_1697 b_1 a_2 hyp_1 hyp_2).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ a) b))) ((Data.Bool./\ (Data.Bool.~ a)) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_1699 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1)))) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) (thm_1668 b_1 a_2) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1)))) => thm_1698 b_1 a_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b))))) ((Data.Bool./\ (Data.Bool.~ (Data.Bool.~ ((= _1213) a)))) (Data.Bool.~ (Data.Bool.~ ((= _1214) b))))) ;)

(; dict ;)

def thm_1700 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> __1214_2 : hol.term B -> a_3 : hol.term A -> __1213_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.or (hol.not (hol.eq A __1213_4 a_3)) (hol.not (hol.eq B __1214_2 b_1)))) (hol.and (hol.not (hol.not (hol.eq A __1213_4 a_3))) (hol.not (hol.not (hol.eq B __1214_2 b_1))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => __1214_2 : hol.term B => a_3 : hol.term A => __1213_4 : hol.term A => (b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) (thm_1642 b_1 a_2) (hol.EQ_MP (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) (thm_1641 b_1 a_2) (hol.EQ_MP (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.not (hol.or a_2 b_1)) (hol.and (hol.not a_2) (hol.not b_1))) (thm_1641 b_1 a_2) (thm_1699 b_1 a_2)))) (hol.not (hol.eq B __1214_2 b_1)) (hol.not (hol.eq A __1213_4 a_3)).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ ((= _1213) a)))) ((= _1213) a)) ;)

(; dict ;)

def thm_1701 : A : hol.type -> a_1 : hol.term A -> __1213_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.not (hol.eq A __1213_2 a_1))) (hol.eq A __1213_2 a_1)) :=
  A : hol.type => a_1 : hol.term A => __1213_2 : hol.term A => (a_1 : hol.term hol.bool => thm_915 a_1) (hol.eq A __1213_2 a_1).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.~ (Data.Bool.~ ((= _1213) a))))) (Data.Bool./\ ((= _1213) a))) ;)

(; dict ;)

def thm_1702 : A : hol.type -> a_1 : hol.term A -> __1213_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.not (hol.not (hol.eq A __1213_2 a_1)))) (hol.and (hol.eq A __1213_2 a_1))) :=
  A : hol.type => a_1 : hol.term A => __1213_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.not (hol.not (hol.eq A __1213_2 a_1))) (hol.eq A __1213_2 a_1) thm_388 (thm_1701 A a_1 __1213_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ ((= _1214) b)))) ((= _1214) b)) ;)

(; dict ;)

def thm_1703 : B : hol.type -> b_1 : hol.term B -> __1214_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.not (hol.not (hol.eq B __1214_2 b_1))) (hol.eq B __1214_2 b_1)) :=
  B : hol.type => b_1 : hol.term B => __1214_2 : hol.term B => (a_1 : hol.term hol.bool => thm_915 a_1) (hol.eq B __1214_2 b_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.~ (Data.Bool.~ ((= _1213) a)))) (Data.Bool.~ (Data.Bool.~ ((= _1214) b))))) ((Data.Bool./\ ((= _1213) a)) ((= _1214) b))) ;)

(; dict ;)

def thm_1704 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> __1214_2 : hol.term B -> a_3 : hol.term A -> __1213_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.not (hol.not (hol.eq A __1213_4 a_3))) (hol.not (hol.not (hol.eq B __1214_2 b_1)))) (hol.and (hol.eq A __1213_4 a_3) (hol.eq B __1214_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => __1214_2 : hol.term B => a_3 : hol.term A => __1213_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and (hol.not (hol.not (hol.eq A __1213_4 a_3)))) (hol.and (hol.eq A __1213_4 a_3)) (hol.not (hol.not (hol.eq B __1214_2 b_1))) (hol.eq B __1214_2 b_1) (thm_1702 A a_3 __1213_4) (thm_1703 B b_1 __1214_2).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b))))) ((Data.Bool./\ ((= _1213) a)) ((= _1214) b))) ;)

(; dict ;)

def thm_1705 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> __1214_2 : hol.term B -> a_3 : hol.term A -> __1213_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.or (hol.not (hol.eq A __1213_4 a_3)) (hol.not (hol.eq B __1214_2 b_1)))) (hol.and (hol.eq A __1213_4 a_3) (hol.eq B __1214_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => __1214_2 : hol.term B => a_3 : hol.term A => __1213_4 : hol.term A => hol.TRANS hol.bool (hol.not (hol.or (hol.not (hol.eq A __1213_4 a_3)) (hol.not (hol.eq B __1214_2 b_1)))) (hol.and (hol.not (hol.not (hol.eq A __1213_4 a_3))) (hol.not (hol.not (hol.eq B __1214_2 b_1)))) (hol.and (hol.eq A __1213_4 a_3) (hol.eq B __1214_2 b_1)) (thm_1700 B A b_1 __1214_2 a_3 __1213_4) (thm_1704 B A b_1 __1214_2 a_3 __1213_4).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.~ ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b)))))) (Data.Bool.==> ((Data.Bool./\ ((= _1213) a)) ((= _1214) b)))) ;)

(; dict ;)

def thm_1706 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> __1214_2 : hol.term B -> a_3 : hol.term A -> __1213_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.not (hol.or (hol.not (hol.eq A __1213_4 a_3)) (hol.not (hol.eq B __1214_2 b_1))))) (hol.imp (hol.and (hol.eq A __1213_4 a_3) (hol.eq B __1214_2 b_1)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => __1214_2 : hol.term B => a_3 : hol.term A => __1213_4 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.not (hol.or (hol.not (hol.eq A __1213_4 a_3)) (hol.not (hol.eq B __1214_2 b_1)))) (hol.and (hol.eq A __1213_4 a_3) (hol.eq B __1214_2 b_1)) thm_387 (thm_1705 B A b_1 __1214_2 a_3 __1213_4).

(; Theorem: |- ((= ((= _1214) b')) ((= _1214) b')) ;)

(; dict ;)

def thm_1707 : B : hol.type -> b_27_1 : hol.term B -> __1214_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq B __1214_2 b_27_1) (hol.eq B __1214_2 b_27_1)) :=
  B : hol.type => b_27_1 : hol.term B => __1214_2 : hol.term B => hol.REFL hol.bool (hol.eq B __1214_2 b_27_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b))))) ((= _1214) b'))) ((Data.Bool.==> ((Data.Bool./\ ((= _1213) a)) ((= _1214) b))) ((= _1214) b'))) ;)

(; dict ;)

def thm_1708 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> __1214_3 : hol.term B -> a_4 : hol.term A -> __1213_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2)))) (hol.eq B __1214_3 b_27_1)) (hol.imp (hol.and (hol.eq A __1213_5 a_4) (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => __1214_3 : hol.term B => a_4 : hol.term A => __1213_5 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (hol.not (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2))))) (hol.imp (hol.and (hol.eq A __1213_5 a_4) (hol.eq B __1214_3 b_2))) (hol.eq B __1214_3 b_27_1) (hol.eq B __1214_3 b_27_1) (thm_1706 B A b_2 __1214_3 a_4 __1213_5) (thm_1707 B b_27_1 __1214_3).

(; Theorem: |- ((= ((Data.Bool.\/ ((= _1214) b')) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b))))) ((Data.Bool.==> ((Data.Bool./\ ((= _1213) a)) ((= _1214) b))) ((= _1214) b'))) ;)

(; dict ;)

def thm_1709 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> __1213_3 : hol.term A -> b_27_4 : hol.term B -> __1214_5 : hol.term B -> hol.proof (hol.eq hol.bool (hol.or (hol.eq B __1214_5 b_27_4) (hol.or (hol.not (hol.eq A __1213_3 a_2)) (hol.not (hol.eq B __1214_5 b_1)))) (hol.imp (hol.and (hol.eq A __1213_3 a_2) (hol.eq B __1214_5 b_1)) (hol.eq B __1214_5 b_27_4))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => __1213_3 : hol.term A => b_27_4 : hol.term B => __1214_5 : hol.term B => hol.TRANS hol.bool (hol.or (hol.eq B __1214_5 b_27_4) (hol.or (hol.not (hol.eq A __1213_3 a_2)) (hol.not (hol.eq B __1214_5 b_1)))) (hol.imp (hol.not (hol.or (hol.not (hol.eq A __1213_3 a_2)) (hol.not (hol.eq B __1214_5 b_1)))) (hol.eq B __1214_5 b_27_4)) (hol.imp (hol.and (hol.eq A __1213_3 a_2) (hol.eq B __1214_5 b_1)) (hol.eq B __1214_5 b_27_4)) (thm_1640 A B b_1 a_2 __1213_3 b_27_4 __1214_5) (thm_1708 B A b_27_4 b_1 __1214_5 a_2 __1213_3).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.~ ((= _1213) a)))) (Data.Bool.\/ (Data.Bool.~ ((= _1213) a)))) ;)

(; dict ;)

def thm_1710 : A : hol.type -> a_1 : hol.term A -> __1213_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.not (hol.eq A __1213_2 a_1))) (hol.or (hol.not (hol.eq A __1213_2 a_1)))) :=
  A : hol.type => a_1 : hol.term A => __1213_2 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (hol.or (hol.not (hol.eq A __1213_2 a_1))).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1214) b))) ((= _1214) b'))) ((Data.Bool.\/ ((= _1214) b')) (Data.Bool.~ ((= _1214) b)))) ;)

(; dict ;)

def thm_1711 : B : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> __1214_3 : hol.term B -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1)) (hol.or (hol.eq B __1214_3 b_27_1) (hol.not (hol.eq B __1214_3 b_2)))) :=
  B : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => __1214_3 : hol.term B => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_942 q_1 p_2) (hol.eq B __1214_3 b_27_1) (hol.not (hol.eq B __1214_3 b_2)).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1214) b))) ((= _1214) b')))) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) ((Data.Bool.\/ ((= _1214) b')) (Data.Bool.~ ((= _1214) b))))) ;)

(; dict ;)

def thm_1712 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> __1214_3 : hol.term B -> a_4 : hol.term A -> __1213_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.eq B __1214_3 b_27_1) (hol.not (hol.eq B __1214_3 b_2))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => __1214_3 : hol.term B => a_4 : hol.term A => __1213_5 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.or (hol.not (hol.eq A __1213_5 a_4))) (hol.or (hol.not (hol.eq A __1213_5 a_4))) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1)) (hol.or (hol.eq B __1214_3 b_27_1) (hol.not (hol.eq B __1214_3 b_2))) (thm_1710 A a_4 __1213_5) (thm_1711 B b_27_1 b_2 __1214_3).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) ((Data.Bool.\/ ((= _1214) b')) (Data.Bool.~ ((= _1214) b))))) ((Data.Bool.\/ ((= _1214) b')) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b))))) ;)

(; dict ;)

def thm_1713 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> b_27_2 : hol.term B -> __1214_3 : hol.term B -> a_4 : hol.term A -> __1213_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.eq B __1214_3 b_27_2) (hol.not (hol.eq B __1214_3 b_1)))) (hol.or (hol.eq B __1214_3 b_27_2) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_1))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => b_27_2 : hol.term B => __1214_3 : hol.term B => a_4 : hol.term A => __1213_5 : hol.term A => (r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => thm_989 r_1 q_2 p_3) (hol.not (hol.eq B __1214_3 b_1)) (hol.eq B __1214_3 b_27_2) (hol.not (hol.eq A __1213_5 a_4)).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1214) b))) ((= _1214) b')))) ((Data.Bool.\/ ((= _1214) b')) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b))))) ;)

(; dict ;)

def thm_1714 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> __1214_3 : hol.term B -> a_4 : hol.term A -> __1213_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) (hol.or (hol.eq B __1214_3 b_27_1) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => __1214_3 : hol.term B => a_4 : hol.term A => __1213_5 : hol.term A => hol.TRANS hol.bool (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.eq B __1214_3 b_27_1) (hol.not (hol.eq B __1214_3 b_2)))) (hol.or (hol.eq B __1214_3 b_27_1) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2)))) (thm_1712 B A b_27_1 b_2 __1214_3 a_4 __1213_5) (thm_1713 B A b_2 b_27_1 __1214_3 a_4 __1213_5).

(; Theorem: |- ((= (= ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1214) b))) ((= _1214) b'))))) (= ((Data.Bool.\/ ((= _1214) b')) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b)))))) ;)

(; dict ;)

def thm_1715 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> __1214_3 : hol.term B -> a_4 : hol.term A -> __1213_5 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1)))) (hol.eq hol.bool (hol.or (hol.eq B __1214_3 b_27_1) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => __1214_3 : hol.term B => a_4 : hol.term A => __1213_5 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) (hol.or (hol.eq B __1214_3 b_27_1) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2)))) thm_119 (thm_1714 B A b_27_1 b_2 __1214_3 a_4 __1213_5).

(; Theorem: |- ((= ((Data.Bool.\/ ((= _1214) b')) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b))))) ((Data.Bool.\/ ((= _1214) b')) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b))))) ;)

(; dict ;)

def thm_1716 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> __1213_3 : hol.term A -> b_27_4 : hol.term B -> __1214_5 : hol.term B -> hol.proof (hol.eq hol.bool (hol.or (hol.eq B __1214_5 b_27_4) (hol.or (hol.not (hol.eq A __1213_3 a_2)) (hol.not (hol.eq B __1214_5 b_1)))) (hol.or (hol.eq B __1214_5 b_27_4) (hol.or (hol.not (hol.eq A __1213_3 a_2)) (hol.not (hol.eq B __1214_5 b_1))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => __1213_3 : hol.term A => b_27_4 : hol.term B => __1214_5 : hol.term B => hol.REFL hol.bool (hol.or (hol.eq B __1214_5 b_27_4) (hol.or (hol.not (hol.eq A __1213_3 a_2)) (hol.not (hol.eq B __1214_5 b_1)))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1214) b))) ((= _1214) b')))) ((Data.Bool.\/ ((= _1214) b')) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b)))))) ((= ((Data.Bool.\/ ((= _1214) b')) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b))))) ((Data.Bool.\/ ((= _1214) b')) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b)))))) ;)

(; dict ;)

def thm_1717 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> __1214_3 : hol.term B -> a_4 : hol.term A -> __1213_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) (hol.or (hol.eq B __1214_3 b_27_1) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2))))) (hol.eq hol.bool (hol.or (hol.eq B __1214_3 b_27_1) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2)))) (hol.or (hol.eq B __1214_3 b_27_1) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => __1214_3 : hol.term B => a_4 : hol.term A => __1213_5 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1)))) (hol.eq hol.bool (hol.or (hol.eq B __1214_3 b_27_1) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2))))) (hol.or (hol.eq B __1214_3 b_27_1) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2)))) (hol.or (hol.eq B __1214_3 b_27_1) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2)))) (thm_1715 B A b_27_1 b_2 __1214_3 a_4 __1213_5) (thm_1716 A B b_2 a_4 __1213_5 b_27_1 __1214_3).

(; Theorem: |- ((= ((= ((Data.Bool.\/ ((= _1214) b')) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b))))) ((Data.Bool.\/ ((= _1214) b')) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b)))))) Data.Bool.T) ;)

(; dict ;)

def thm_1718 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> __1213_3 : hol.term A -> b_27_4 : hol.term B -> __1214_5 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.eq B __1214_5 b_27_4) (hol.or (hol.not (hol.eq A __1213_3 a_2)) (hol.not (hol.eq B __1214_5 b_1)))) (hol.or (hol.eq B __1214_5 b_27_4) (hol.or (hol.not (hol.eq A __1213_3 a_2)) (hol.not (hol.eq B __1214_5 b_1))))) hol.true) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => __1213_3 : hol.term A => b_27_4 : hol.term B => __1214_5 : hol.term B => (x_1 : hol.term hol.bool => thm_181 x_1) (hol.or (hol.eq B __1214_5 b_27_4) (hol.or (hol.not (hol.eq A __1213_3 a_2)) (hol.not (hol.eq B __1214_5 b_1)))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1214) b))) ((= _1214) b')))) ((Data.Bool.\/ ((= _1214) b')) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b)))))) Data.Bool.T) ;)

(; dict ;)

def thm_1719 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> __1214_3 : hol.term B -> a_4 : hol.term A -> __1213_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) (hol.or (hol.eq B __1214_3 b_27_1) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2))))) hol.true) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => __1214_3 : hol.term B => a_4 : hol.term A => __1213_5 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) (hol.or (hol.eq B __1214_3 b_27_1) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2))))) (hol.eq hol.bool (hol.or (hol.eq B __1214_3 b_27_1) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2)))) (hol.or (hol.eq B __1214_3 b_27_1) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2))))) hol.true (thm_1717 B A b_27_1 b_2 __1214_3 a_4 __1213_5) (thm_1718 A B b_2 a_4 __1213_5 b_27_1 __1214_3).

(; Theorem: |- ((= Data.Bool.T) ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1214) b))) ((= _1214) b')))) ((Data.Bool.\/ ((= _1214) b')) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b)))))) ;)

(; dict ;)

def thm_1720 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> __1214_3 : hol.term B -> a_4 : hol.term A -> __1213_5 : hol.term A -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) (hol.or (hol.eq B __1214_3 b_27_1) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => __1214_3 : hol.term B => a_4 : hol.term A => __1213_5 : hol.term A => hol.SYM hol.bool (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) (hol.or (hol.eq B __1214_3 b_27_1) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2))))) hol.true (thm_1719 B A b_27_1 b_2 __1214_3 a_4 __1213_5).

(; Theorem: |- ((= (Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b))))) (Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b))))) ;)

(; dict ;)

def thm_1721 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> __1214_2 : hol.term B -> a_3 : hol.term A -> __1213_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.or (hol.not (hol.eq A __1213_4 a_3)) (hol.not (hol.eq B __1214_2 b_1)))) (hol.or (hol.or (hol.not (hol.eq A __1213_4 a_3)) (hol.not (hol.eq B __1214_2 b_1))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => __1214_2 : hol.term B => a_3 : hol.term A => __1213_4 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (hol.or (hol.or (hol.not (hol.eq A __1213_4 a_3)) (hol.not (hol.eq B __1214_2 b_1)))).

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b)))) ((= _1214) b'))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b)))) ((= _1214) b'))) ;)

(; dict ;)

def thm_1722 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> __1214_3 : hol.term B -> a_4 : hol.term A -> __1213_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2))) (hol.eq B __1214_3 b_27_1)) (hol.or (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2))) (hol.eq B __1214_3 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => __1214_3 : hol.term B => a_4 : hol.term A => __1213_5 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.or (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2)))) (hol.or (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2)))) (hol.eq B __1214_3 b_27_1) (hol.eq B __1214_3 b_27_1) (thm_1721 B A b_2 __1214_3 a_4 __1213_5) (thm_1707 B b_27_1 __1214_3).

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b)))) ((= _1214) b'))) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1214) b))) ((= _1214) b')))) ;)

(; dict ;)

def thm_1723 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> __1214_3 : hol.term B -> a_4 : hol.term A -> __1213_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2))) (hol.eq B __1214_3 b_27_1)) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => __1214_3 : hol.term B => a_4 : hol.term A => __1213_5 : hol.term A => (t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => thm_949 t3_1 t2_2 t1_3) (hol.eq B __1214_3 b_27_1) (hol.not (hol.eq B __1214_3 b_2)) (hol.not (hol.eq A __1213_5 a_4)).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1214) b))) ((= _1214) b'))) ((Data.Bool.\/ (Data.Bool.~ ((= _1214) b))) ((= _1214) b'))) ;)

(; dict ;)

def thm_1724 : B : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> __1214_3 : hol.term B -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) :=
  B : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => __1214_3 : hol.term B => hol.REFL hol.bool (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1)).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1214) b))) ((= _1214) b')))) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1214) b))) ((= _1214) b')))) ;)

(; dict ;)

def thm_1725 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> __1214_3 : hol.term B -> a_4 : hol.term A -> __1213_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => __1214_3 : hol.term B => a_4 : hol.term A => __1213_5 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.or (hol.not (hol.eq A __1213_5 a_4))) (hol.or (hol.not (hol.eq A __1213_5 a_4))) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1)) (thm_1710 A a_4 __1213_5) (thm_1724 B b_27_1 b_2 __1214_3).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1214) b))) ((= _1214) b')))) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1214) b))) ((= _1214) b')))) ;)

(; dict ;)

def thm_1726 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> __1214_3 : hol.term B -> a_4 : hol.term A -> __1213_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => __1214_3 : hol.term B => a_4 : hol.term A => __1213_5 : hol.term A => hol.TRANS hol.bool (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) (thm_1725 B A b_27_1 b_2 __1214_3 a_4 __1213_5) (thm_1725 B A b_27_1 b_2 __1214_3 a_4 __1213_5).

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b)))) ((= _1214) b'))) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1214) b))) ((= _1214) b')))) ;)

(; dict ;)

def thm_1727 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> __1214_3 : hol.term B -> a_4 : hol.term A -> __1213_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2))) (hol.eq B __1214_3 b_27_1)) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => __1214_3 : hol.term B => a_4 : hol.term A => __1213_5 : hol.term A => hol.TRANS hol.bool (hol.or (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2))) (hol.eq B __1214_3 b_27_1)) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) (thm_1723 B A b_27_1 b_2 __1214_3 a_4 __1213_5) (thm_1726 B A b_27_1 b_2 __1214_3 a_4 __1213_5).

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b)))) ((= _1214) b'))) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1214) b))) ((= _1214) b')))) ;)

(; dict ;)

def thm_1728 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> __1214_3 : hol.term B -> a_4 : hol.term A -> __1213_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2))) (hol.eq B __1214_3 b_27_1)) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => __1214_3 : hol.term B => a_4 : hol.term A => __1213_5 : hol.term A => hol.TRANS hol.bool (hol.or (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2))) (hol.eq B __1214_3 b_27_1)) (hol.or (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B __1214_3 b_2))) (hol.eq B __1214_3 b_27_1)) (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.or (hol.not (hol.eq B __1214_3 b_2)) (hol.eq B __1214_3 b_27_1))) (thm_1722 B A b_27_1 b_2 __1214_3 a_4 __1213_5) (thm_1727 B A b_27_1 b_2 __1214_3 a_4 __1213_5).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ;)

(; dict ;)

def thm_1729 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.REFL hol.bool (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))).

(; Theorem: |- ((= (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) a))) ;)

(; dict ;)

def thm_1730 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.eq A x_2 a_1)) (hol.not (hol.eq A x_2 a_1))) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.not (hol.eq A x_2 a_1)).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.~ ((= x) a)))) (Data.Bool.\/ (Data.Bool.~ ((= x) a)))) ;)

(; dict ;)

def thm_1731 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.not (hol.eq A x_2 a_1))) (hol.or (hol.not (hol.eq A x_2 a_1)))) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.not (hol.eq A x_2 a_1)) (hol.not (hol.eq A x_2 a_1)) thm_431 (thm_1730 A a_1 x_2).

(; Theorem: |- ((= (Data.Bool.~ ((= x) b))) (Data.Bool.~ ((= x) b))) ;)

(; dict ;)

def thm_1732 : B : hol.type -> b_1 : hol.term B -> x_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.not (hol.eq B x_2 b_1)) (hol.not (hol.eq B x_2 b_1))) :=
  B : hol.type => b_1 : hol.term B => x_2 : hol.term B => hol.REFL hol.bool (hol.not (hol.eq B x_2 b_1)).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ;)

(; dict ;)

def thm_1733 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> x_2 : hol.term B -> a_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq A x_4 a_3)) (hol.not (hol.eq B x_2 b_1))) (hol.or (hol.not (hol.eq A x_4 a_3)) (hol.not (hol.eq B x_2 b_1)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => x_2 : hol.term B => a_3 : hol.term A => x_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.or (hol.not (hol.eq A x_4 a_3))) (hol.or (hol.not (hol.eq A x_4 a_3))) (hol.not (hol.eq B x_2 b_1)) (hol.not (hol.eq B x_2 b_1)) (thm_1731 A a_3 x_4) (thm_1732 B b_1 x_2).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ;)

(; dict ;)

def thm_1734 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> x_2 : hol.term B -> a_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq A x_4 a_3)) (hol.not (hol.eq B x_2 b_1))) (hol.or (hol.not (hol.eq A x_4 a_3)) (hol.not (hol.eq B x_2 b_1)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => x_2 : hol.term B => a_3 : hol.term A => x_4 : hol.term A => hol.TRANS hol.bool (hol.or (hol.not (hol.eq A x_4 a_3)) (hol.not (hol.eq B x_2 b_1))) (hol.or (hol.not (hol.eq A x_4 a_3)) (hol.not (hol.eq B x_2 b_1))) (hol.or (hol.not (hol.eq A x_4 a_3)) (hol.not (hol.eq B x_2 b_1))) (thm_1733 B A b_1 x_2 a_3 x_4) (thm_1733 B A b_1 x_2 a_3 x_4).

(; Theorem: |- ((= (Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b))))) (Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b))))) ;)

(; dict ;)

def thm_1735 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> x_2 : hol.term B -> a_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.or (hol.not (hol.eq A x_4 a_3)) (hol.not (hol.eq B x_2 b_1)))) (hol.or (hol.or (hol.not (hol.eq A x_4 a_3)) (hol.not (hol.eq B x_2 b_1))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => x_2 : hol.term B => a_3 : hol.term A => x_4 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.or (hol.not (hol.eq A x_4 a_3)) (hol.not (hol.eq B x_2 b_1))) (hol.or (hol.not (hol.eq A x_4 a_3)) (hol.not (hol.eq B x_2 b_1))) thm_431 (thm_1734 B A b_1 x_2 a_3 x_4).

(; Theorem: |- ((= ((= x) a')) ((= x) a')) ;)

(; dict ;)

def thm_1736 : A : hol.type -> a_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_2 a_27_1) (hol.eq A x_2 a_27_1)) :=
  A : hol.type => a_27_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.eq A x_2 a_27_1).

(; Theorem: |- ((= (Data.Bool./\ ((= x) a'))) (Data.Bool./\ ((= x) a'))) ;)

(; dict ;)

def thm_1737 : A : hol.type -> a_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.eq A x_2 a_27_1)) (hol.and (hol.eq A x_2 a_27_1))) :=
  A : hol.type => a_27_1 : hol.term A => x_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.eq A x_2 a_27_1) (hol.eq A x_2 a_27_1) thm_388 (thm_1736 A a_27_1 x_2).

(; Theorem: |- ((= ((= x) b')) ((= x) b')) ;)

(; dict ;)

def thm_1738 : B : hol.type -> b_27_1 : hol.term B -> x_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq B x_2 b_27_1) (hol.eq B x_2 b_27_1)) :=
  B : hol.type => b_27_1 : hol.term B => x_2 : hol.term B => hol.REFL hol.bool (hol.eq B x_2 b_27_1).

(; Theorem: |- ((= ((Data.Bool./\ ((= x) a')) ((= x) b'))) ((Data.Bool./\ ((= x) a')) ((= x) b'))) ;)

(; dict ;)

def thm_1739 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> x_2 : hol.term B -> a_27_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.eq A x_4 a_27_3) (hol.eq B x_2 b_27_1)) (hol.and (hol.eq A x_4 a_27_3) (hol.eq B x_2 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => x_2 : hol.term B => a_27_3 : hol.term A => x_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and (hol.eq A x_4 a_27_3)) (hol.and (hol.eq A x_4 a_27_3)) (hol.eq B x_2 b_27_1) (hol.eq B x_2 b_27_1) (thm_1737 A a_27_3 x_4) (thm_1738 B b_27_1 x_2).

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) ;)

(; dict ;)

def thm_1740 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> x_4 : hol.term B -> a_5 : hol.term A -> x_6 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1))) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => x_4 : hol.term B => a_5 : hol.term A => x_6 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3)))) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3)))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1)) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1)) (thm_1735 B A b_3 x_4 a_5 x_6) (thm_1739 B A b_27_1 x_4 a_27_2 x_6).

(; Theorem: |- ((= ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c)))) ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c)))) ;)

(; dict ;)

def thm_1741 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> a_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1)))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => a_3 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c)))) ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c)))) ;)

(; dict ;)

def thm_1742 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> a_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1)))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => a_3 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) (thm_1741 c_1 b_2 a_3).

(; Theorem: |- ((= (= (\lambda _582. ((= ((Data.Bool.\/ _582) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _582) b)) ((Data.Bool.\/ _582) c))) a))) (= (\lambda _582. ((= ((Data.Bool.\/ _582) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _582) b)) ((Data.Bool.\/ _582) c))) a))) ;)

(; dict ;)

def thm_1743 : a_1 : hol.term hol.bool -> c_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) a_1)) (hol.eq hol.bool ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) a_1))) :=
  a_1 : hol.term hol.bool => c_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) a_1)).

(; Theorem: |- ((= (\lambda _582. ((= ((Data.Bool.\/ _582) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _582) b)) ((Data.Bool.\/ _582) c))) Data.Bool.F)) ((= ((Data.Bool.\/ Data.Bool.F) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.\/ Data.Bool.F) c)))) ;)

(; dict ;)

def thm_1744 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__582_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_3 (hol.and b_2 c_1)) (hol.and (hol.or __582_3 b_2) (hol.or __582_3 c_1))) hol.false) (hol.eq hol.bool (hol.or hol.false (hol.and b_2 c_1)) (hol.and (hol.or hol.false b_2) (hol.or hol.false c_1)))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__582_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_3 (hol.and b_2 c_1)) (hol.and (hol.or __582_3 b_2) (hol.or __582_3 c_1))) hol.false.

(; Theorem: |- ((= ((= (\lambda _582. ((= ((Data.Bool.\/ _582) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _582) b)) ((Data.Bool.\/ _582) c))) a)) (\lambda _582. ((= ((Data.Bool.\/ _582) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _582) b)) ((Data.Bool.\/ _582) c))) Data.Bool.F))) ((= (\lambda _582. ((= ((Data.Bool.\/ _582) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _582) b)) ((Data.Bool.\/ _582) c))) a)) ((= ((Data.Bool.\/ Data.Bool.F) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.\/ Data.Bool.F) c))))) ;)

(; dict ;)

def thm_1745 : a_1 : hol.term hol.bool -> c_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) a_1) ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) hol.false)) (hol.eq hol.bool ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) a_1) (hol.eq hol.bool (hol.or hol.false (hol.and b_3 c_2)) (hol.and (hol.or hol.false b_3) (hol.or hol.false c_2))))) :=
  a_1 : hol.term hol.bool => c_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) a_1)) (hol.eq hol.bool ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) a_1)) ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) hol.false) (hol.eq hol.bool (hol.or hol.false (hol.and b_3 c_2)) (hol.and (hol.or hol.false b_3) (hol.or hol.false c_2))) (thm_1743 a_1 c_2 b_3) (thm_1744 c_2 b_3).

(; Theorem: |- ((= (\lambda _582. ((= ((Data.Bool.\/ _582) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _582) b)) ((Data.Bool.\/ _582) c))) a)) ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c)))) ;)

(; dict ;)

def thm_1746 : a_1 : hol.term hol.bool -> c_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) a_1) (hol.eq hol.bool (hol.or a_1 (hol.and b_3 c_2)) (hol.and (hol.or a_1 b_3) (hol.or a_1 c_2)))) :=
  a_1 : hol.term hol.bool => c_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) a_1.

(; Theorem: |- ((= (= (\lambda _582. ((= ((Data.Bool.\/ _582) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _582) b)) ((Data.Bool.\/ _582) c))) a))) (= ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c))))) ;)

(; dict ;)

def thm_1747 : a_1 : hol.term hol.bool -> c_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) a_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_1 (hol.and b_3 c_2)) (hol.and (hol.or a_1 b_3) (hol.or a_1 c_2))))) :=
  a_1 : hol.term hol.bool => c_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) a_1) (hol.eq hol.bool (hol.or a_1 (hol.and b_3 c_2)) (hol.and (hol.or a_1 b_3) (hol.or a_1 c_2))) thm_119 (thm_1746 a_1 c_2 b_3).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.F) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.\/ Data.Bool.F) c)))) ((= ((Data.Bool.\/ Data.Bool.F) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.\/ Data.Bool.F) c)))) ;)

(; dict ;)

def thm_1748 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.false (hol.and b_2 c_1)) (hol.and (hol.or hol.false b_2) (hol.or hol.false c_1))) (hol.eq hol.bool (hol.or hol.false (hol.and b_2 c_1)) (hol.and (hol.or hol.false b_2) (hol.or hol.false c_1)))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or hol.false (hol.and b_2 c_1)) (hol.and (hol.or hol.false b_2) (hol.or hol.false c_1))).

(; Theorem: |- ((= ((= (\lambda _582. ((= ((Data.Bool.\/ _582) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _582) b)) ((Data.Bool.\/ _582) c))) a)) ((= ((Data.Bool.\/ Data.Bool.F) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.\/ Data.Bool.F) c))))) ((= ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c)))) ((= ((Data.Bool.\/ Data.Bool.F) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.\/ Data.Bool.F) c))))) ;)

(; dict ;)

def thm_1749 : a_1 : hol.term hol.bool -> c_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) a_1) (hol.eq hol.bool (hol.or hol.false (hol.and b_3 c_2)) (hol.and (hol.or hol.false b_3) (hol.or hol.false c_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_1 (hol.and b_3 c_2)) (hol.and (hol.or a_1 b_3) (hol.or a_1 c_2))) (hol.eq hol.bool (hol.or hol.false (hol.and b_3 c_2)) (hol.and (hol.or hol.false b_3) (hol.or hol.false c_2))))) :=
  a_1 : hol.term hol.bool => c_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) a_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_1 (hol.and b_3 c_2)) (hol.and (hol.or a_1 b_3) (hol.or a_1 c_2)))) (hol.eq hol.bool (hol.or hol.false (hol.and b_3 c_2)) (hol.and (hol.or hol.false b_3) (hol.or hol.false c_2))) (hol.eq hol.bool (hol.or hol.false (hol.and b_3 c_2)) (hol.and (hol.or hol.false b_3) (hol.or hol.false c_2))) (thm_1747 a_1 c_2 b_3) (thm_1748 c_2 b_3).

(; Theorem: |- ((= ((= (\lambda _582. ((= ((Data.Bool.\/ _582) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _582) b)) ((Data.Bool.\/ _582) c))) a)) (\lambda _582. ((= ((Data.Bool.\/ _582) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _582) b)) ((Data.Bool.\/ _582) c))) Data.Bool.F))) ((= ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c)))) ((= ((Data.Bool.\/ Data.Bool.F) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.\/ Data.Bool.F) c))))) ;)

(; dict ;)

def thm_1750 : a_1 : hol.term hol.bool -> c_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) a_1) ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_1 (hol.and b_3 c_2)) (hol.and (hol.or a_1 b_3) (hol.or a_1 c_2))) (hol.eq hol.bool (hol.or hol.false (hol.and b_3 c_2)) (hol.and (hol.or hol.false b_3) (hol.or hol.false c_2))))) :=
  a_1 : hol.term hol.bool => c_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) a_1) ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) hol.false)) (hol.eq hol.bool ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) a_1) (hol.eq hol.bool (hol.or hol.false (hol.and b_3 c_2)) (hol.and (hol.or hol.false b_3) (hol.or hol.false c_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_1 (hol.and b_3 c_2)) (hol.and (hol.or a_1 b_3) (hol.or a_1 c_2))) (hol.eq hol.bool (hol.or hol.false (hol.and b_3 c_2)) (hol.and (hol.or hol.false b_3) (hol.or hol.false c_2)))) (thm_1745 a_1 c_2 b_3) (thm_1749 a_1 c_2 b_3).

(; Theorem: |- ((= \lambda _582. ((= ((Data.Bool.\/ _582) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _582) b)) ((Data.Bool.\/ _582) c)))) \lambda _582. ((= ((Data.Bool.\/ _582) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _582) b)) ((Data.Bool.\/ _582) c)))) ;)

(; dict ;)

def thm_1751 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__582_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_3 (hol.and b_2 c_1)) (hol.and (hol.or __582_3 b_2) (hol.or __582_3 c_1))) (__582_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_3 (hol.and b_2 c_1)) (hol.and (hol.or __582_3 b_2) (hol.or __582_3 c_1)))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__582_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_3 (hol.and b_2 c_1)) (hol.and (hol.or __582_3 b_2) (hol.or __582_3 c_1))).

(; Theorem: |- ((= (\lambda _582. ((= ((Data.Bool.\/ _582) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _582) b)) ((Data.Bool.\/ _582) c))) a)) (\lambda _582. ((= ((Data.Bool.\/ _582) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _582) b)) ((Data.Bool.\/ _582) c))) Data.Bool.F)) ;)

(; dict ;)

def thm_1752 : a_1 : hol.term hol.bool -> c_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) -> hol.proof (hol.eq hol.bool ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) a_1) ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) hol.false)) :=
  a_1 : hol.term hol.bool => c_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) => hol.APP_THM hol.bool hol.bool (__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) (__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_3 c_2)) (hol.and (hol.or __582_4 b_3) (hol.or __582_4 c_2))) a_1 hol.false (thm_1751 c_2 b_3) (thm_831 a_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c)))) ((= ((Data.Bool.\/ Data.Bool.F) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.\/ Data.Bool.F) c)))) ;)

(; dict ;)

def thm_1753 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> a_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_3 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) (hol.eq hol.bool (hol.or hol.false (hol.and b_2 c_1)) (hol.and (hol.or hol.false b_2) (hol.or hol.false c_1)))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => a_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_3 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_2 c_1)) (hol.and (hol.or __582_4 b_2) (hol.or __582_4 c_1))) a_3) ((__582_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __582_4 (hol.and b_2 c_1)) (hol.and (hol.or __582_4 b_2) (hol.or __582_4 c_1))) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) (hol.eq hol.bool (hol.or hol.false (hol.and b_2 c_1)) (hol.and (hol.or hol.false b_2) (hol.or hol.false c_1)))) (thm_1750 a_3 c_1 b_2) (thm_1752 a_3 c_1 b_2 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.F) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.\/ Data.Bool.F) c)))) ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c)))) ;)

(; dict ;)

def thm_1754 : a_1 : hol.term hol.bool -> c_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.false (hol.and b_3 c_2)) (hol.and (hol.or hol.false b_3) (hol.or hol.false c_2))) (hol.eq hol.bool (hol.or a_1 (hol.and b_3 c_2)) (hol.and (hol.or a_1 b_3) (hol.or a_1 c_2)))) :=
  a_1 : hol.term hol.bool => c_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) => hol.SYM hol.bool (hol.eq hol.bool (hol.or a_1 (hol.and b_3 c_2)) (hol.and (hol.or a_1 b_3) (hol.or a_1 c_2))) (hol.eq hol.bool (hol.or hol.false (hol.and b_3 c_2)) (hol.and (hol.or hol.false b_3) (hol.or hol.false c_2))) (thm_1753 c_2 b_3 a_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) ((Data.Bool./\ b) c))) ((Data.Bool./\ b) c)) ;)

(; dict ;)

def thm_1755 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false (hol.and b_2 c_1)) (hol.and b_2 c_1)) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_850 t_1) (hol.and b_2 c_1).

(; Theorem: |- ((= (= ((Data.Bool.\/ Data.Bool.F) ((Data.Bool./\ b) c)))) (= ((Data.Bool./\ b) c))) ;)

(; dict ;)

def thm_1756 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or hol.false (hol.and b_2 c_1))) (hol.eq hol.bool (hol.and b_2 c_1))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.or hol.false (hol.and b_2 c_1)) (hol.and b_2 c_1) thm_119 (thm_1755 c_1 b_2).

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) b))) (Data.Bool./\ b)) ;)

(; dict ;)

def thm_1757 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.or hol.false b_1)) (hol.and b_1)) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.or hol.false b_1) b_1 thm_388 (thm_872 b_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) c)) c) ;)

(; dict ;)

def thm_1758 : c_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false c_1) c_1) :=
  c_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_850 t_1) c_1.

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.\/ Data.Bool.F) c))) ((Data.Bool./\ b) c)) ;)

(; dict ;)

def thm_1759 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.or hol.false b_2) (hol.or hol.false c_1)) (hol.and b_2 c_1)) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and (hol.or hol.false b_2)) (hol.and b_2) (hol.or hol.false c_1) c_1 (thm_1757 b_2) (thm_1758 c_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.F) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.\/ Data.Bool.F) c)))) ((= ((Data.Bool./\ b) c)) ((Data.Bool./\ b) c))) ;)

(; dict ;)

def thm_1760 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.false (hol.and b_2 c_1)) (hol.and (hol.or hol.false b_2) (hol.or hol.false c_1))) (hol.eq hol.bool (hol.and b_2 c_1) (hol.and b_2 c_1))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or hol.false (hol.and b_2 c_1))) (hol.eq hol.bool (hol.and b_2 c_1)) (hol.and (hol.or hol.false b_2) (hol.or hol.false c_1)) (hol.and b_2 c_1) (thm_1756 c_1 b_2) (thm_1759 c_1 b_2).

(; Theorem: |- ((= ((= ((Data.Bool./\ b) c)) ((Data.Bool./\ b) c))) Data.Bool.T) ;)

(; dict ;)

def thm_1761 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and b_2 c_1) (hol.and b_2 c_1)) hol.true) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => (x_1 : hol.term hol.bool => thm_181 x_1) (hol.and b_2 c_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.F) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.\/ Data.Bool.F) c)))) Data.Bool.T) ;)

(; dict ;)

def thm_1762 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.false (hol.and b_2 c_1)) (hol.and (hol.or hol.false b_2) (hol.or hol.false c_1))) hol.true) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or hol.false (hol.and b_2 c_1)) (hol.and (hol.or hol.false b_2) (hol.or hol.false c_1))) (hol.eq hol.bool (hol.and b_2 c_1) (hol.and b_2 c_1)) hol.true (thm_1760 c_1 b_2) (thm_1761 c_1 b_2).

(; Theorem: |- ((= Data.Bool.T) ((= ((Data.Bool.\/ Data.Bool.F) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.\/ Data.Bool.F) c)))) ;)

(; dict ;)

def thm_1763 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.or hol.false (hol.and b_2 c_1)) (hol.and (hol.or hol.false b_2) (hol.or hol.false c_1)))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.or hol.false (hol.and b_2 c_1)) (hol.and (hol.or hol.false b_2) (hol.or hol.false c_1))) hol.true (thm_1762 c_1 b_2).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.F) b)) ((Data.Bool.\/ Data.Bool.F) c))) ;)

(; dict ;)

def thm_1764 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false (hol.and b_2 c_1)) (hol.and (hol.or hol.false b_2) (hol.or hol.false c_1))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.or hol.false (hol.and b_2 c_1)) (hol.and (hol.or hol.false b_2) (hol.or hol.false c_1))) (thm_1763 c_1 b_2) thm_5.

(; Theorem: |- ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c))) ;)

(; dict ;)

def thm_1765 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> a_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_3 hol.false) -> hol.proof (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => a_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_3 hol.false) => hol.EQ_MP (hol.eq hol.bool (hol.or hol.false (hol.and b_2 c_1)) (hol.and (hol.or hol.false b_2) (hol.or hol.false c_1))) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) (thm_1754 a_3 c_1 b_2 hyp_1) (thm_1764 c_1 b_2).

(; Theorem: |- ((Data.Bool.==> ((= a) Data.Bool.F)) ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c)))) ;)

(; dict ;)

def thm_1766 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> a_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool a_3 hol.false) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1)))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => a_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_3 hol.false) => thm_1765 c_1 b_2 a_3 hyp_1.

(; Theorem: |- ((= (= (\lambda _580. ((= ((Data.Bool.\/ _580) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _580) b)) ((Data.Bool.\/ _580) c))) a))) (= (\lambda _580. ((= ((Data.Bool.\/ _580) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _580) b)) ((Data.Bool.\/ _580) c))) a))) ;)

(; dict ;)

def thm_1767 : a_1 : hol.term hol.bool -> c_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) a_1)) (hol.eq hol.bool ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) a_1))) :=
  a_1 : hol.term hol.bool => c_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) a_1)).

(; Theorem: |- ((= (\lambda _580. ((= ((Data.Bool.\/ _580) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _580) b)) ((Data.Bool.\/ _580) c))) Data.Bool.T)) ((= ((Data.Bool.\/ Data.Bool.T) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.\/ Data.Bool.T) c)))) ;)

(; dict ;)

def thm_1768 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__580_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_3 (hol.and b_2 c_1)) (hol.and (hol.or __580_3 b_2) (hol.or __580_3 c_1))) hol.true) (hol.eq hol.bool (hol.or hol.true (hol.and b_2 c_1)) (hol.and (hol.or hol.true b_2) (hol.or hol.true c_1)))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__580_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_3 (hol.and b_2 c_1)) (hol.and (hol.or __580_3 b_2) (hol.or __580_3 c_1))) hol.true.

(; Theorem: |- ((= ((= (\lambda _580. ((= ((Data.Bool.\/ _580) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _580) b)) ((Data.Bool.\/ _580) c))) a)) (\lambda _580. ((= ((Data.Bool.\/ _580) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _580) b)) ((Data.Bool.\/ _580) c))) Data.Bool.T))) ((= (\lambda _580. ((= ((Data.Bool.\/ _580) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _580) b)) ((Data.Bool.\/ _580) c))) a)) ((= ((Data.Bool.\/ Data.Bool.T) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.\/ Data.Bool.T) c))))) ;)

(; dict ;)

def thm_1769 : a_1 : hol.term hol.bool -> c_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) a_1) ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) hol.true)) (hol.eq hol.bool ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) a_1) (hol.eq hol.bool (hol.or hol.true (hol.and b_3 c_2)) (hol.and (hol.or hol.true b_3) (hol.or hol.true c_2))))) :=
  a_1 : hol.term hol.bool => c_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) a_1)) (hol.eq hol.bool ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) a_1)) ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) hol.true) (hol.eq hol.bool (hol.or hol.true (hol.and b_3 c_2)) (hol.and (hol.or hol.true b_3) (hol.or hol.true c_2))) (thm_1767 a_1 c_2 b_3) (thm_1768 c_2 b_3).

(; Theorem: |- ((= (\lambda _580. ((= ((Data.Bool.\/ _580) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _580) b)) ((Data.Bool.\/ _580) c))) a)) ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c)))) ;)

(; dict ;)

def thm_1770 : a_1 : hol.term hol.bool -> c_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) a_1) (hol.eq hol.bool (hol.or a_1 (hol.and b_3 c_2)) (hol.and (hol.or a_1 b_3) (hol.or a_1 c_2)))) :=
  a_1 : hol.term hol.bool => c_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) a_1.

(; Theorem: |- ((= (= (\lambda _580. ((= ((Data.Bool.\/ _580) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _580) b)) ((Data.Bool.\/ _580) c))) a))) (= ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c))))) ;)

(; dict ;)

def thm_1771 : a_1 : hol.term hol.bool -> c_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) a_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_1 (hol.and b_3 c_2)) (hol.and (hol.or a_1 b_3) (hol.or a_1 c_2))))) :=
  a_1 : hol.term hol.bool => c_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) a_1) (hol.eq hol.bool (hol.or a_1 (hol.and b_3 c_2)) (hol.and (hol.or a_1 b_3) (hol.or a_1 c_2))) thm_119 (thm_1770 a_1 c_2 b_3).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.T) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.\/ Data.Bool.T) c)))) ((= ((Data.Bool.\/ Data.Bool.T) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.\/ Data.Bool.T) c)))) ;)

(; dict ;)

def thm_1772 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.true (hol.and b_2 c_1)) (hol.and (hol.or hol.true b_2) (hol.or hol.true c_1))) (hol.eq hol.bool (hol.or hol.true (hol.and b_2 c_1)) (hol.and (hol.or hol.true b_2) (hol.or hol.true c_1)))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or hol.true (hol.and b_2 c_1)) (hol.and (hol.or hol.true b_2) (hol.or hol.true c_1))).

(; Theorem: |- ((= ((= (\lambda _580. ((= ((Data.Bool.\/ _580) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _580) b)) ((Data.Bool.\/ _580) c))) a)) ((= ((Data.Bool.\/ Data.Bool.T) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.\/ Data.Bool.T) c))))) ((= ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c)))) ((= ((Data.Bool.\/ Data.Bool.T) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.\/ Data.Bool.T) c))))) ;)

(; dict ;)

def thm_1773 : a_1 : hol.term hol.bool -> c_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) a_1) (hol.eq hol.bool (hol.or hol.true (hol.and b_3 c_2)) (hol.and (hol.or hol.true b_3) (hol.or hol.true c_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_1 (hol.and b_3 c_2)) (hol.and (hol.or a_1 b_3) (hol.or a_1 c_2))) (hol.eq hol.bool (hol.or hol.true (hol.and b_3 c_2)) (hol.and (hol.or hol.true b_3) (hol.or hol.true c_2))))) :=
  a_1 : hol.term hol.bool => c_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) a_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_1 (hol.and b_3 c_2)) (hol.and (hol.or a_1 b_3) (hol.or a_1 c_2)))) (hol.eq hol.bool (hol.or hol.true (hol.and b_3 c_2)) (hol.and (hol.or hol.true b_3) (hol.or hol.true c_2))) (hol.eq hol.bool (hol.or hol.true (hol.and b_3 c_2)) (hol.and (hol.or hol.true b_3) (hol.or hol.true c_2))) (thm_1771 a_1 c_2 b_3) (thm_1772 c_2 b_3).

(; Theorem: |- ((= ((= (\lambda _580. ((= ((Data.Bool.\/ _580) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _580) b)) ((Data.Bool.\/ _580) c))) a)) (\lambda _580. ((= ((Data.Bool.\/ _580) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _580) b)) ((Data.Bool.\/ _580) c))) Data.Bool.T))) ((= ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c)))) ((= ((Data.Bool.\/ Data.Bool.T) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.\/ Data.Bool.T) c))))) ;)

(; dict ;)

def thm_1774 : a_1 : hol.term hol.bool -> c_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) a_1) ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_1 (hol.and b_3 c_2)) (hol.and (hol.or a_1 b_3) (hol.or a_1 c_2))) (hol.eq hol.bool (hol.or hol.true (hol.and b_3 c_2)) (hol.and (hol.or hol.true b_3) (hol.or hol.true c_2))))) :=
  a_1 : hol.term hol.bool => c_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) a_1) ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) hol.true)) (hol.eq hol.bool ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) a_1) (hol.eq hol.bool (hol.or hol.true (hol.and b_3 c_2)) (hol.and (hol.or hol.true b_3) (hol.or hol.true c_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_1 (hol.and b_3 c_2)) (hol.and (hol.or a_1 b_3) (hol.or a_1 c_2))) (hol.eq hol.bool (hol.or hol.true (hol.and b_3 c_2)) (hol.and (hol.or hol.true b_3) (hol.or hol.true c_2)))) (thm_1769 a_1 c_2 b_3) (thm_1773 a_1 c_2 b_3).

(; Theorem: |- ((= \lambda _580. ((= ((Data.Bool.\/ _580) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _580) b)) ((Data.Bool.\/ _580) c)))) \lambda _580. ((= ((Data.Bool.\/ _580) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _580) b)) ((Data.Bool.\/ _580) c)))) ;)

(; dict ;)

def thm_1775 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__580_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_3 (hol.and b_2 c_1)) (hol.and (hol.or __580_3 b_2) (hol.or __580_3 c_1))) (__580_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_3 (hol.and b_2 c_1)) (hol.and (hol.or __580_3 b_2) (hol.or __580_3 c_1)))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__580_3 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_3 (hol.and b_2 c_1)) (hol.and (hol.or __580_3 b_2) (hol.or __580_3 c_1))).

(; Theorem: |- ((= (\lambda _580. ((= ((Data.Bool.\/ _580) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _580) b)) ((Data.Bool.\/ _580) c))) a)) (\lambda _580. ((= ((Data.Bool.\/ _580) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ _580) b)) ((Data.Bool.\/ _580) c))) Data.Bool.T)) ;)

(; dict ;)

def thm_1776 : a_1 : hol.term hol.bool -> c_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) -> hol.proof (hol.eq hol.bool ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) a_1) ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) hol.true)) :=
  a_1 : hol.term hol.bool => c_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) => hol.APP_THM hol.bool hol.bool (__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) (__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_3 c_2)) (hol.and (hol.or __580_4 b_3) (hol.or __580_4 c_2))) a_1 hol.true (thm_1775 c_2 b_3) (thm_893 a_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c)))) ((= ((Data.Bool.\/ Data.Bool.T) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.\/ Data.Bool.T) c)))) ;)

(; dict ;)

def thm_1777 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> a_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_3 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) (hol.eq hol.bool (hol.or hol.true (hol.and b_2 c_1)) (hol.and (hol.or hol.true b_2) (hol.or hol.true c_1)))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => a_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_3 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_2 c_1)) (hol.and (hol.or __580_4 b_2) (hol.or __580_4 c_1))) a_3) ((__580_4 : hol.term hol.bool => hol.eq hol.bool (hol.or __580_4 (hol.and b_2 c_1)) (hol.and (hol.or __580_4 b_2) (hol.or __580_4 c_1))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) (hol.eq hol.bool (hol.or hol.true (hol.and b_2 c_1)) (hol.and (hol.or hol.true b_2) (hol.or hol.true c_1)))) (thm_1774 a_3 c_1 b_2) (thm_1776 a_3 c_1 b_2 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.T) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.\/ Data.Bool.T) c)))) ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c)))) ;)

(; dict ;)

def thm_1778 : a_1 : hol.term hol.bool -> c_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.true (hol.and b_3 c_2)) (hol.and (hol.or hol.true b_3) (hol.or hol.true c_2))) (hol.eq hol.bool (hol.or a_1 (hol.and b_3 c_2)) (hol.and (hol.or a_1 b_3) (hol.or a_1 c_2)))) :=
  a_1 : hol.term hol.bool => c_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) => hol.SYM hol.bool (hol.eq hol.bool (hol.or a_1 (hol.and b_3 c_2)) (hol.and (hol.or a_1 b_3) (hol.or a_1 c_2))) (hol.eq hol.bool (hol.or hol.true (hol.and b_3 c_2)) (hol.and (hol.or hol.true b_3) (hol.or hol.true c_2))) (thm_1777 c_2 b_3 a_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) ((Data.Bool./\ b) c))) Data.Bool.T) ;)

(; dict ;)

def thm_1779 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.true (hol.and b_2 c_1)) hol.true) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_842 t_1) (hol.and b_2 c_1).

(; Theorem: |- ((= (= ((Data.Bool.\/ Data.Bool.T) ((Data.Bool./\ b) c)))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_1780 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or hol.true (hol.and b_2 c_1))) (hol.eq hol.bool hol.true)) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.or hol.true (hol.and b_2 c_1)) hol.true thm_119 (thm_1779 c_1 b_2).

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) b))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_1781 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.or hol.true b_1)) (hol.and hol.true)) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.or hol.true b_1) hol.true thm_388 (thm_897 b_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) c)) Data.Bool.T) ;)

(; dict ;)

def thm_1782 : c_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.true c_1) hol.true) :=
  c_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_842 t_1) c_1.

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.\/ Data.Bool.T) c))) ((Data.Bool./\ Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_1783 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.or hol.true b_2) (hol.or hol.true c_1)) (hol.and hol.true hol.true)) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and (hol.or hol.true b_2)) (hol.and hol.true) (hol.or hol.true c_1) hol.true (thm_1781 b_2) (thm_1782 c_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_1784 : hol.proof (hol.eq hol.bool (hol.and hol.true hol.true) hol.true) :=
  (t_1 : hol.term hol.bool => thm_1194 t_1) hol.true.

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.\/ Data.Bool.T) c))) Data.Bool.T) ;)

(; dict ;)

def thm_1785 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.or hol.true b_2) (hol.or hol.true c_1)) hol.true) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.and (hol.or hol.true b_2) (hol.or hol.true c_1)) (hol.and hol.true hol.true) hol.true (thm_1783 c_1 b_2) thm_1784.

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.T) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.\/ Data.Bool.T) c)))) ((= Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_1786 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.true (hol.and b_2 c_1)) (hol.and (hol.or hol.true b_2) (hol.or hol.true c_1))) (hol.eq hol.bool hol.true hol.true)) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or hol.true (hol.and b_2 c_1))) (hol.eq hol.bool hol.true) (hol.and (hol.or hol.true b_2) (hol.or hol.true c_1)) hol.true (thm_1780 c_1 b_2) (thm_1785 c_1 b_2).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.T) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.\/ Data.Bool.T) c)))) Data.Bool.T) ;)

(; dict ;)

def thm_1787 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.true (hol.and b_2 c_1)) (hol.and (hol.or hol.true b_2) (hol.or hol.true c_1))) hol.true) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or hol.true (hol.and b_2 c_1)) (hol.and (hol.or hol.true b_2) (hol.or hol.true c_1))) (hol.eq hol.bool hol.true hol.true) hol.true (thm_1786 c_1 b_2) thm_901.

(; Theorem: |- ((= Data.Bool.T) ((= ((Data.Bool.\/ Data.Bool.T) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.\/ Data.Bool.T) c)))) ;)

(; dict ;)

def thm_1788 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.or hol.true (hol.and b_2 c_1)) (hol.and (hol.or hol.true b_2) (hol.or hol.true c_1)))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.or hol.true (hol.and b_2 c_1)) (hol.and (hol.or hol.true b_2) (hol.or hol.true c_1))) hol.true (thm_1787 c_1 b_2).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ Data.Bool.T) b)) ((Data.Bool.\/ Data.Bool.T) c))) ;)

(; dict ;)

def thm_1789 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.true (hol.and b_2 c_1)) (hol.and (hol.or hol.true b_2) (hol.or hol.true c_1))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.or hol.true (hol.and b_2 c_1)) (hol.and (hol.or hol.true b_2) (hol.or hol.true c_1))) (thm_1788 c_1 b_2) thm_5.

(; Theorem: |- ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c))) ;)

(; dict ;)

def thm_1790 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> a_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_3 hol.true) -> hol.proof (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => a_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_3 hol.true) => hol.EQ_MP (hol.eq hol.bool (hol.or hol.true (hol.and b_2 c_1)) (hol.and (hol.or hol.true b_2) (hol.or hol.true c_1))) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) (thm_1778 a_3 c_1 b_2 hyp_1) (thm_1789 c_1 b_2).

(; Theorem: |- ((Data.Bool.==> ((= a) Data.Bool.T)) ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c)))) ;)

(; dict ;)

def thm_1791 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> a_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool a_3 hol.true) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1)))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => a_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_3 hol.true) => thm_1790 c_1 b_2 a_3 hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c))) ;)

(; dict ;)

def thm_1792 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> a_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_3 hol.false) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_3 hol.true) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1)))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool a_3 hol.true) (hol.eq hol.bool a_3 hol.false)) -> hol.proof (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => a_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_3 hol.false) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_3 hol.true) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1)))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool a_3 hol.true) (hol.eq hol.bool a_3 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool a_3 hol.false) (hol.eq hol.bool a_3 hol.true) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c))) ;)

(; dict ;)

def thm_1793 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> a_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_3 hol.false) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_3 hol.true) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1)))) -> hol.proof (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => a_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_3 hol.false) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_3 hol.true) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1)))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool a_3 hol.true) (hol.eq hol.bool a_3 hol.false)) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) (thm_907 a_3) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool a_3 hol.true) (hol.eq hol.bool a_3 hol.false)) => thm_1792 c_1 b_2 a_3 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c))) ;)

(; dict ;)

def thm_1794 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> a_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_3 hol.false) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1)))) -> hol.proof (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => a_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_3 hol.false) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1)))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool a_3 hol.true) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1)))) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) (thm_1791 c_1 b_2 a_3) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_3 hol.true) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1)))) => thm_1793 c_1 b_2 a_3 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool.\/ a) ((Data.Bool./\ b) c))) ((Data.Bool./\ ((Data.Bool.\/ a) b)) ((Data.Bool.\/ a) c))) ;)

(; dict ;)

def thm_1795 : c_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> a_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) :=
  c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => a_3 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool a_3 hol.false) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1)))) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) (thm_1766 c_1 b_2 a_3) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_3 hol.false) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1)))) => thm_1794 c_1 b_2 a_3 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) a'))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) b')))) ;)

(; dict ;)

def thm_1796 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> x_4 : hol.term B -> a_5 : hol.term A -> x_6 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1))) (hol.and (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.eq A x_6 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.eq B x_4 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => x_4 : hol.term B => a_5 : hol.term A => x_6 : hol.term A => (c_1 : hol.term hol.bool => b_2 : hol.term hol.bool => a_3 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) (thm_1742 c_1 b_2 a_3) (hol.EQ_MP (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) (hol.eq hol.bool (hol.or a_3 (hol.and b_2 c_1)) (hol.and (hol.or a_3 b_2) (hol.or a_3 c_1))) (thm_1741 c_1 b_2 a_3) (thm_1795 c_1 b_2 a_3))) (hol.eq B x_4 b_27_1) (hol.eq A x_6 a_27_2) (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))).

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) a'))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) a'))) ;)

(; dict ;)

def thm_1797 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> x_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_3 b_2))) (hol.eq A x_5 a_27_1)) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_3 b_2))) (hol.eq A x_5 a_27_1))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => x_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => hol.REFL hol.bool (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_3 b_2))) (hol.eq A x_5 a_27_1)).

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) a')))) (Data.Bool./\ ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) a')))) ;)

(; dict ;)

def thm_1798 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> x_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_3 b_2))) (hol.eq A x_5 a_27_1))) (hol.and (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_3 b_2))) (hol.eq A x_5 a_27_1)))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => x_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_3 b_2))) (hol.eq A x_5 a_27_1)) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_3 b_2))) (hol.eq A x_5 a_27_1)) thm_388 (thm_1797 B A a_27_1 b_2 x_3 a_4 x_5).

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) b'))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) b'))) ;)

(; dict ;)

def thm_1799 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> x_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_3 b_2))) (hol.eq B x_3 b_27_1)) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_3 b_2))) (hol.eq B x_3 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => x_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => hol.REFL hol.bool (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_3 b_2))) (hol.eq B x_3 b_27_1)).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) a'))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) b')))) ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) a'))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) b')))) ;)

(; dict ;)

def thm_1800 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> x_4 : hol.term B -> a_5 : hol.term A -> x_6 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.eq A x_6 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.eq B x_4 b_27_1))) (hol.and (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.eq A x_6 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.eq B x_4 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => x_4 : hol.term B => a_5 : hol.term A => x_6 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.eq A x_6 a_27_2))) (hol.and (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.eq A x_6 a_27_2))) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.eq B x_4 b_27_1)) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.eq B x_4 b_27_1)) (thm_1798 B A a_27_2 b_3 x_4 a_5 x_6) (thm_1799 B A b_27_1 b_3 x_4 a_5 x_6).

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) a'))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) b')))) ;)

(; dict ;)

def thm_1801 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> x_4 : hol.term B -> a_5 : hol.term A -> x_6 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1))) (hol.and (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.eq A x_6 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.eq B x_4 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => x_4 : hol.term B => a_5 : hol.term A => x_6 : hol.term A => hol.TRANS hol.bool (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1))) (hol.and (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.eq A x_6 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.eq B x_4 b_27_1))) (hol.and (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.eq A x_6 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.eq B x_4 b_27_1))) (thm_1796 B A b_27_1 a_27_2 b_3 x_4 a_5 x_6) (thm_1800 B A b_27_1 a_27_2 b_3 x_4 a_5 x_6).

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) a'))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) b')))) ;)

(; dict ;)

def thm_1802 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> x_4 : hol.term B -> a_5 : hol.term A -> x_6 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1))) (hol.and (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.eq A x_6 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.eq B x_4 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => x_4 : hol.term B => a_5 : hol.term A => x_6 : hol.term A => hol.TRANS hol.bool (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1))) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1))) (hol.and (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.eq A x_6 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.eq B x_4 b_27_1))) (thm_1740 B A b_27_1 a_27_2 b_3 x_4 a_5 x_6) (thm_1801 B A b_27_1 a_27_2 b_3 x_4 a_5 x_6).

(; Theorem: |- ((= \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) a'))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) b')))) ;)

(; dict ;)

def thm_1803 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))) (x_6 : hol.term B => hol.and (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq A x_5 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq B x_6 b_27_1)))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => hol.ABS_THM B hol.bool (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))) (x_6 : hol.term B => hol.and (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq A x_5 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq B x_6 b_27_1))) (x_6 : hol.term B => thm_1802 B A b_27_1 a_27_2 b_3 x_6 a_4 x_5).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))) (Data.Bool.! \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) a'))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) b'))))) ;)

(; dict ;)

def thm_1804 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))) (hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq A x_5 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq B x_6 b_27_1))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))) (x_6 : hol.term B => hol.and (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq A x_5 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq B x_6 b_27_1))) (thm_536 B) (thm_1803 A B b_27_1 a_27_2 b_3 a_4 x_5).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))) \lambda x. (Data.Bool.! \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) a'))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) b'))))) ;)

(; dict ;)

def thm_1805 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq A x_5 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq B x_6 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.ABS_THM A hol.bool (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq A x_5 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq B x_6 b_27_1)))) (x_5 : hol.term A => thm_1804 A B b_27_1 a_27_2 b_3 a_4 x_5).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) a'))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) b')))))) ;)

(; dict ;)

def thm_1806 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq A x_5 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq B x_6 b_27_1)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq A x_5 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq B x_6 b_27_1)))) (thm_51 A) (thm_1805 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) a'))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) b')))))) ;)

(; dict ;)

def thm_1807 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq A x_5 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq B x_6 b_27_1)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.TRANS hol.bool (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq A x_5 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq B x_6 b_27_1))))) (thm_1729 B A b_27_1 a_27_2 b_3 a_4) (thm_1806 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_1808 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A hol.bool)) (hol.eq A) (hol.eq A)) :=
  A : hol.type => hol.REFL (hol.arr A (hol.arr A hol.bool)) (hol.eq A).

(; Theorem: |- ((= (= x)) (= x)) ;)

(; dict ;)

def thm_1809 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A x_1) (hol.eq A x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) x_1 x_1 (thm_1808 A) (thm_178 A x_1).

(; Theorem: |- ((= ((= x) a)) ((= x) a)) ;)

(; dict ;)

def thm_1810 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_2 a_1) (hol.eq A x_2 a_1)) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => hol.APP_THM A hol.bool (hol.eq A x_2) (hol.eq A x_2) a_1 a_1 (thm_1809 A x_2) (thm_793 A a_1).

(; Theorem: |- ((= (Data.Bool./\ ((= x) a))) (Data.Bool./\ ((= x) a))) ;)

(; dict ;)

def thm_1811 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.eq A x_2 a_1)) (hol.and (hol.eq A x_2 a_1))) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.eq A x_2 a_1) (hol.eq A x_2 a_1) thm_388 (thm_1810 A a_1 x_2).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_1812 : B : hol.type -> hol.proof (hol.eq (hol.arr B (hol.arr B hol.bool)) (hol.eq B) (hol.eq B)) :=
  B : hol.type => hol.REFL (hol.arr B (hol.arr B hol.bool)) (hol.eq B).

(; Theorem: |- ((= (= x)) (= x)) ;)

(; dict ;)

def thm_1813 : B : hol.type -> x_1 : hol.term B -> hol.proof (hol.eq (hol.arr B hol.bool) (hol.eq B x_1) (hol.eq B x_1)) :=
  B : hol.type => x_1 : hol.term B => hol.APP_THM B (hol.arr B hol.bool) (hol.eq B) (hol.eq B) x_1 x_1 (thm_1812 B) (thm_1553 B x_1).

(; Theorem: |- ((= ((= x) b)) ((= x) b)) ;)

(; dict ;)

def thm_1814 : B : hol.type -> b_1 : hol.term B -> x_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq B x_2 b_1) (hol.eq B x_2 b_1)) :=
  B : hol.type => b_1 : hol.term B => x_2 : hol.term B => hol.APP_THM B hol.bool (hol.eq B x_2) (hol.eq B x_2) b_1 b_1 (thm_1813 B x_2) (thm_795 B b_1).

(; Theorem: |- ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a)) ((= x) b))) ;)

(; dict ;)

def thm_1815 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> x_2 : hol.term B -> a_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.eq A x_4 a_3) (hol.eq B x_2 b_1)) (hol.and (hol.eq A x_4 a_3) (hol.eq B x_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => x_2 : hol.term B => a_3 : hol.term A => x_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and (hol.eq A x_4 a_3)) (hol.and (hol.eq A x_4 a_3)) (hol.eq B x_2 b_1) (hol.eq B x_2 b_1) (thm_1811 A a_3 x_4) (thm_1814 B b_1 x_2).

(; Theorem: |- ((= (Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b)))) (Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b)))) ;)

(; dict ;)

def thm_1816 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> x_2 : hol.term B -> a_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.and (hol.eq A x_4 a_3) (hol.eq B x_2 b_1))) (hol.or (hol.and (hol.eq A x_4 a_3) (hol.eq B x_2 b_1)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => x_2 : hol.term B => a_3 : hol.term A => x_4 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.and (hol.eq A x_4 a_3) (hol.eq B x_2 b_1)) (hol.and (hol.eq A x_4 a_3) (hol.eq B x_2 b_1)) thm_431 (thm_1815 B A b_1 x_2 a_3 x_4).

(; Theorem: |- ((= (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) a'))) ;)

(; dict ;)

def thm_1817 : A : hol.type -> a_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.eq A x_2 a_27_1)) (hol.not (hol.eq A x_2 a_27_1))) :=
  A : hol.type => a_27_1 : hol.term A => x_2 : hol.term A => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.eq A x_2 a_27_1) (hol.eq A x_2 a_27_1) thm_247 (thm_1736 A a_27_1 x_2).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.~ ((= x) a')))) (Data.Bool.\/ (Data.Bool.~ ((= x) a')))) ;)

(; dict ;)

def thm_1818 : A : hol.type -> a_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.not (hol.eq A x_2 a_27_1))) (hol.or (hol.not (hol.eq A x_2 a_27_1)))) :=
  A : hol.type => a_27_1 : hol.term A => x_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.not (hol.eq A x_2 a_27_1)) (hol.not (hol.eq A x_2 a_27_1)) thm_431 (thm_1817 A a_27_1 x_2).

(; Theorem: |- ((= (Data.Bool.~ ((= x) b'))) (Data.Bool.~ ((= x) b'))) ;)

(; dict ;)

def thm_1819 : B : hol.type -> b_27_1 : hol.term B -> x_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.not (hol.eq B x_2 b_27_1)) (hol.not (hol.eq B x_2 b_27_1))) :=
  B : hol.type => b_27_1 : hol.term B => x_2 : hol.term B => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.eq B x_2 b_27_1) (hol.eq B x_2 b_27_1) thm_247 (thm_1738 B b_27_1 x_2).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))) ;)

(; dict ;)

def thm_1820 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> x_2 : hol.term B -> a_27_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq A x_4 a_27_3)) (hol.not (hol.eq B x_2 b_27_1))) (hol.or (hol.not (hol.eq A x_4 a_27_3)) (hol.not (hol.eq B x_2 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => x_2 : hol.term B => a_27_3 : hol.term A => x_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.or (hol.not (hol.eq A x_4 a_27_3))) (hol.or (hol.not (hol.eq A x_4 a_27_3))) (hol.not (hol.eq B x_2 b_27_1)) (hol.not (hol.eq B x_2 b_27_1)) (thm_1818 A a_27_3 x_4) (thm_1819 B b_27_1 x_2).

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ;)

(; dict ;)

def thm_1821 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> x_4 : hol.term B -> a_5 : hol.term A -> x_6 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_4 b_27_1)))) (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_4 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => x_4 : hol.term B => a_5 : hol.term A => x_6 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3))) (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3))) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_4 b_27_1))) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_4 b_27_1))) (thm_1816 B A b_3 x_4 a_5 x_6) (thm_1820 B A b_27_1 x_4 a_27_2 x_6).

(; Theorem: |- ((= \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ;)

(; dict ;)

def thm_1822 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => hol.ABS_THM B hol.bool (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (x_6 : hol.term B => thm_1821 B A b_27_1 a_27_2 b_3 x_6 a_4 x_5).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))) (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))) ;)

(; dict ;)

def thm_1823 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (thm_536 B) (thm_1822 A B b_27_1 a_27_2 b_3 a_4 x_5).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))) \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))) ;)

(; dict ;)

def thm_1824 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.ABS_THM A hol.bool (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (x_5 : hol.term A => thm_1823 A B b_27_1 a_27_2 b_3 a_4 x_5).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))))) ;)

(; dict ;)

def thm_1825 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (thm_51 A) (thm_1824 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))))) (Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))))) ;)

(; dict ;)

def thm_1826 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))))) (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) thm_388 (thm_1825 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))))) ;)

(; dict ;)

def thm_1827 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))))) (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (thm_1826 B A b_27_1 a_27_2 b_3 a_4) (thm_1729 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) (Data.Bool.~ ((Data.Bool./\ ((= x) a')) ((= x) b'))))) ((Data.Bool.\/ (Data.Bool.~ ((Data.Bool./\ ((= x) a)) ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))) ;)

(; dict ;)

def thm_1828 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> x_4 : hol.term B -> a_5 : hol.term A -> x_6 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1))) (hol.and (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)) (hol.not (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1)))) (hol.or (hol.not (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => x_4 : hol.term B => a_5 : hol.term A => x_6 : hol.term A => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_1264 q_1 p_2) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1)) (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q)))) ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_1829 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q)))) ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_1830 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) (thm_1829 q_1 p_2).

(; Theorem: |- ((= (= (\lambda _530. ((= (Data.Bool.~ ((Data.Bool./\ _530) q))) ((Data.Bool.\/ (Data.Bool.~ _530)) (Data.Bool.~ q))) p))) (= (\lambda _530. ((= (Data.Bool.~ ((Data.Bool./\ _530) q))) ((Data.Bool.\/ (Data.Bool.~ _530)) (Data.Bool.~ q))) p))) ;)

(; dict ;)

def thm_1831 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) p_1)) (hol.eq hol.bool ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) p_1))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) p_1)).

(; Theorem: |- ((= (\lambda _530. ((= (Data.Bool.~ ((Data.Bool./\ _530) q))) ((Data.Bool.\/ (Data.Bool.~ _530)) (Data.Bool.~ q))) Data.Bool.F)) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_1832 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__530_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_2 q_1)) (hol.or (hol.not __530_2) (hol.not q_1))) hol.false) (hol.eq hol.bool (hol.not (hol.and hol.false q_1)) (hol.or (hol.not hol.false) (hol.not q_1)))) :=
  q_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__530_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_2 q_1)) (hol.or (hol.not __530_2) (hol.not q_1))) hol.false.

(; Theorem: |- ((= ((= (\lambda _530. ((= (Data.Bool.~ ((Data.Bool./\ _530) q))) ((Data.Bool.\/ (Data.Bool.~ _530)) (Data.Bool.~ q))) p)) (\lambda _530. ((= (Data.Bool.~ ((Data.Bool./\ _530) q))) ((Data.Bool.\/ (Data.Bool.~ _530)) (Data.Bool.~ q))) Data.Bool.F))) ((= (\lambda _530. ((= (Data.Bool.~ ((Data.Bool./\ _530) q))) ((Data.Bool.\/ (Data.Bool.~ _530)) (Data.Bool.~ q))) p)) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))))) ;)

(; dict ;)

def thm_1833 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) p_1) ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) hol.false)) (hol.eq hol.bool ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) p_1) (hol.eq hol.bool (hol.not (hol.and hol.false q_2)) (hol.or (hol.not hol.false) (hol.not q_2))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) p_1)) (hol.eq hol.bool ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) p_1)) ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) hol.false) (hol.eq hol.bool (hol.not (hol.and hol.false q_2)) (hol.or (hol.not hol.false) (hol.not q_2))) (thm_1831 p_1 q_2) (thm_1832 q_2).

(; Theorem: |- ((= (\lambda _530. ((= (Data.Bool.~ ((Data.Bool./\ _530) q))) ((Data.Bool.\/ (Data.Bool.~ _530)) (Data.Bool.~ q))) p)) ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_1834 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) p_1) (hol.eq hol.bool (hol.not (hol.and p_1 q_2)) (hol.or (hol.not p_1) (hol.not q_2)))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) p_1.

(; Theorem: |- ((= (= (\lambda _530. ((= (Data.Bool.~ ((Data.Bool./\ _530) q))) ((Data.Bool.\/ (Data.Bool.~ _530)) (Data.Bool.~ q))) p))) (= ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q))))) ;)

(; dict ;)

def thm_1835 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) p_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and p_1 q_2)) (hol.or (hol.not p_1) (hol.not q_2))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) p_1) (hol.eq hol.bool (hol.not (hol.and p_1 q_2)) (hol.or (hol.not p_1) (hol.not q_2))) thm_119 (thm_1834 p_1 q_2).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q)))) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_1836 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and hol.false q_1)) (hol.or (hol.not hol.false) (hol.not q_1))) (hol.eq hol.bool (hol.not (hol.and hol.false q_1)) (hol.or (hol.not hol.false) (hol.not q_1)))) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.and hol.false q_1)) (hol.or (hol.not hol.false) (hol.not q_1))).

(; Theorem: |- ((= ((= (\lambda _530. ((= (Data.Bool.~ ((Data.Bool./\ _530) q))) ((Data.Bool.\/ (Data.Bool.~ _530)) (Data.Bool.~ q))) p)) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))))) ((= ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q)))) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))))) ;)

(; dict ;)

def thm_1837 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) p_1) (hol.eq hol.bool (hol.not (hol.and hol.false q_2)) (hol.or (hol.not hol.false) (hol.not q_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and p_1 q_2)) (hol.or (hol.not p_1) (hol.not q_2))) (hol.eq hol.bool (hol.not (hol.and hol.false q_2)) (hol.or (hol.not hol.false) (hol.not q_2))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) p_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and p_1 q_2)) (hol.or (hol.not p_1) (hol.not q_2)))) (hol.eq hol.bool (hol.not (hol.and hol.false q_2)) (hol.or (hol.not hol.false) (hol.not q_2))) (hol.eq hol.bool (hol.not (hol.and hol.false q_2)) (hol.or (hol.not hol.false) (hol.not q_2))) (thm_1835 p_1 q_2) (thm_1836 q_2).

(; Theorem: |- ((= ((= (\lambda _530. ((= (Data.Bool.~ ((Data.Bool./\ _530) q))) ((Data.Bool.\/ (Data.Bool.~ _530)) (Data.Bool.~ q))) p)) (\lambda _530. ((= (Data.Bool.~ ((Data.Bool./\ _530) q))) ((Data.Bool.\/ (Data.Bool.~ _530)) (Data.Bool.~ q))) Data.Bool.F))) ((= ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q)))) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))))) ;)

(; dict ;)

def thm_1838 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) p_1) ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and p_1 q_2)) (hol.or (hol.not p_1) (hol.not q_2))) (hol.eq hol.bool (hol.not (hol.and hol.false q_2)) (hol.or (hol.not hol.false) (hol.not q_2))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) p_1) ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) hol.false)) (hol.eq hol.bool ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) p_1) (hol.eq hol.bool (hol.not (hol.and hol.false q_2)) (hol.or (hol.not hol.false) (hol.not q_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and p_1 q_2)) (hol.or (hol.not p_1) (hol.not q_2))) (hol.eq hol.bool (hol.not (hol.and hol.false q_2)) (hol.or (hol.not hol.false) (hol.not q_2)))) (thm_1833 p_1 q_2) (thm_1837 p_1 q_2).

(; Theorem: |- ((= \lambda _530. ((= (Data.Bool.~ ((Data.Bool./\ _530) q))) ((Data.Bool.\/ (Data.Bool.~ _530)) (Data.Bool.~ q)))) \lambda _530. ((= (Data.Bool.~ ((Data.Bool./\ _530) q))) ((Data.Bool.\/ (Data.Bool.~ _530)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_1839 : q_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__530_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_2 q_1)) (hol.or (hol.not __530_2) (hol.not q_1))) (__530_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_2 q_1)) (hol.or (hol.not __530_2) (hol.not q_1)))) :=
  q_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__530_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_2 q_1)) (hol.or (hol.not __530_2) (hol.not q_1))).

(; Theorem: |- ((= (\lambda _530. ((= (Data.Bool.~ ((Data.Bool./\ _530) q))) ((Data.Bool.\/ (Data.Bool.~ _530)) (Data.Bool.~ q))) p)) (\lambda _530. ((= (Data.Bool.~ ((Data.Bool./\ _530) q))) ((Data.Bool.\/ (Data.Bool.~ _530)) (Data.Bool.~ q))) Data.Bool.F)) ;)

(; dict ;)

def thm_1840 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) -> hol.proof (hol.eq hol.bool ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) p_1) ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) hol.false)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) => hol.APP_THM hol.bool hol.bool (__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) (__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_2)) (hol.or (hol.not __530_3) (hol.not q_2))) p_1 hol.false (thm_1839 q_2) (thm_211 p_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q)))) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_1841 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) (hol.eq hol.bool (hol.not (hol.and hol.false q_1)) (hol.or (hol.not hol.false) (hol.not q_1)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_1)) (hol.or (hol.not __530_3) (hol.not q_1))) p_2) ((__530_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __530_3 q_1)) (hol.or (hol.not __530_3) (hol.not q_1))) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) (hol.eq hol.bool (hol.not (hol.and hol.false q_1)) (hol.or (hol.not hol.false) (hol.not q_1)))) (thm_1838 p_2 q_1) (thm_1840 p_2 q_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q)))) ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_1842 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and hol.false q_2)) (hol.or (hol.not hol.false) (hol.not q_2))) (hol.eq hol.bool (hol.not (hol.and p_1 q_2)) (hol.or (hol.not p_1) (hol.not q_2)))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.and p_1 q_2)) (hol.or (hol.not p_1) (hol.not q_2))) (hol.eq hol.bool (hol.not (hol.and hol.false q_2)) (hol.or (hol.not hol.false) (hol.not q_2))) (thm_1841 q_2 p_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) q)) Data.Bool.F) ;)

(; dict ;)

def thm_1843 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false q_1) hol.false) :=
  q_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_1202 t_1) q_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) q))) (Data.Bool.~ Data.Bool.F)) ;)

(; dict ;)

def thm_1844 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.and hol.false q_1)) (hol.not hol.false)) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.and hol.false q_1) hol.false thm_247 (thm_1843 q_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) q))) Data.Bool.T) ;)

(; dict ;)

def thm_1845 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.and hol.false q_1)) hol.true) :=
  q_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.not (hol.and hol.false q_1)) (hol.not hol.false) hol.true (thm_1844 q_1) thm_10.

(; Theorem: |- ((= (= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) q)))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_1846 : q_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.and hol.false q_1))) (hol.eq hol.bool hol.true)) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.and hol.false q_1)) hol.true thm_119 (thm_1845 q_1).

(; Theorem: |- ((= (Data.Bool.~ q)) (Data.Bool.~ q)) ;)

(; dict ;)

def thm_1847 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not q_1) (hol.not q_1)) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool (hol.not q_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))) ((Data.Bool.\/ Data.Bool.T) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_1848 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.not hol.false) (hol.not q_1)) (hol.or hol.true (hol.not q_1))) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.or (hol.not hol.false)) (hol.or hol.true) (hol.not q_1) (hol.not q_1) thm_1182 (thm_1847 q_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))) Data.Bool.T) ;)

(; dict ;)

def thm_1849 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.not hol.false) (hol.not q_1)) hol.true) :=
  q_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.or (hol.not hol.false) (hol.not q_1)) (hol.or hol.true (hol.not q_1)) hol.true (thm_1848 q_1) (thm_1245 q_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q)))) ((= Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_1850 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and hol.false q_1)) (hol.or (hol.not hol.false) (hol.not q_1))) (hol.eq hol.bool hol.true hol.true)) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.and hol.false q_1))) (hol.eq hol.bool hol.true) (hol.or (hol.not hol.false) (hol.not q_1)) hol.true (thm_1846 q_1) (thm_1849 q_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q)))) Data.Bool.T) ;)

(; dict ;)

def thm_1851 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and hol.false q_1)) (hol.or (hol.not hol.false) (hol.not q_1))) hol.true) :=
  q_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.and hol.false q_1)) (hol.or (hol.not hol.false) (hol.not q_1))) (hol.eq hol.bool hol.true hol.true) hol.true (thm_1850 q_1) thm_901.

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_1852 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (hol.and hol.false q_1)) (hol.or (hol.not hol.false) (hol.not q_1)))) :=
  q_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.and hol.false q_1)) (hol.or (hol.not hol.false) (hol.not q_1))) hol.true (thm_1851 q_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_1853 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.and hol.false q_1)) (hol.or (hol.not hol.false) (hol.not q_1))) :=
  q_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (hol.and hol.false q_1)) (hol.or (hol.not hol.false) (hol.not q_1))) (thm_1852 q_1) thm_5.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_1854 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.false) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.and hol.false q_1)) (hol.or (hol.not hol.false) (hol.not q_1))) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) (thm_1842 p_2 q_1 hyp_1) (thm_1853 q_1).

(; Theorem: |- ((Data.Bool.==> ((= p) Data.Bool.F)) ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_1855 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.false) => thm_1854 q_1 p_2 hyp_1.

(; Theorem: |- ((= (= (\lambda _528. ((= (Data.Bool.~ ((Data.Bool./\ _528) q))) ((Data.Bool.\/ (Data.Bool.~ _528)) (Data.Bool.~ q))) p))) (= (\lambda _528. ((= (Data.Bool.~ ((Data.Bool./\ _528) q))) ((Data.Bool.\/ (Data.Bool.~ _528)) (Data.Bool.~ q))) p))) ;)

(; dict ;)

def thm_1856 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) p_1)) (hol.eq hol.bool ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) p_1))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) p_1)).

(; Theorem: |- ((= (\lambda _528. ((= (Data.Bool.~ ((Data.Bool./\ _528) q))) ((Data.Bool.\/ (Data.Bool.~ _528)) (Data.Bool.~ q))) Data.Bool.T)) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_1857 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__528_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_2 q_1)) (hol.or (hol.not __528_2) (hol.not q_1))) hol.true) (hol.eq hol.bool (hol.not (hol.and hol.true q_1)) (hol.or (hol.not hol.true) (hol.not q_1)))) :=
  q_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__528_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_2 q_1)) (hol.or (hol.not __528_2) (hol.not q_1))) hol.true.

(; Theorem: |- ((= ((= (\lambda _528. ((= (Data.Bool.~ ((Data.Bool./\ _528) q))) ((Data.Bool.\/ (Data.Bool.~ _528)) (Data.Bool.~ q))) p)) (\lambda _528. ((= (Data.Bool.~ ((Data.Bool./\ _528) q))) ((Data.Bool.\/ (Data.Bool.~ _528)) (Data.Bool.~ q))) Data.Bool.T))) ((= (\lambda _528. ((= (Data.Bool.~ ((Data.Bool./\ _528) q))) ((Data.Bool.\/ (Data.Bool.~ _528)) (Data.Bool.~ q))) p)) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))))) ;)

(; dict ;)

def thm_1858 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) p_1) ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) hol.true)) (hol.eq hol.bool ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) p_1) (hol.eq hol.bool (hol.not (hol.and hol.true q_2)) (hol.or (hol.not hol.true) (hol.not q_2))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) p_1)) (hol.eq hol.bool ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) p_1)) ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) hol.true) (hol.eq hol.bool (hol.not (hol.and hol.true q_2)) (hol.or (hol.not hol.true) (hol.not q_2))) (thm_1856 p_1 q_2) (thm_1857 q_2).

(; Theorem: |- ((= (\lambda _528. ((= (Data.Bool.~ ((Data.Bool./\ _528) q))) ((Data.Bool.\/ (Data.Bool.~ _528)) (Data.Bool.~ q))) p)) ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_1859 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) p_1) (hol.eq hol.bool (hol.not (hol.and p_1 q_2)) (hol.or (hol.not p_1) (hol.not q_2)))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) p_1.

(; Theorem: |- ((= (= (\lambda _528. ((= (Data.Bool.~ ((Data.Bool./\ _528) q))) ((Data.Bool.\/ (Data.Bool.~ _528)) (Data.Bool.~ q))) p))) (= ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q))))) ;)

(; dict ;)

def thm_1860 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) p_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and p_1 q_2)) (hol.or (hol.not p_1) (hol.not q_2))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) p_1) (hol.eq hol.bool (hol.not (hol.and p_1 q_2)) (hol.or (hol.not p_1) (hol.not q_2))) thm_119 (thm_1859 p_1 q_2).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q)))) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_1861 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and hol.true q_1)) (hol.or (hol.not hol.true) (hol.not q_1))) (hol.eq hol.bool (hol.not (hol.and hol.true q_1)) (hol.or (hol.not hol.true) (hol.not q_1)))) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.and hol.true q_1)) (hol.or (hol.not hol.true) (hol.not q_1))).

(; Theorem: |- ((= ((= (\lambda _528. ((= (Data.Bool.~ ((Data.Bool./\ _528) q))) ((Data.Bool.\/ (Data.Bool.~ _528)) (Data.Bool.~ q))) p)) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))))) ((= ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q)))) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))))) ;)

(; dict ;)

def thm_1862 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) p_1) (hol.eq hol.bool (hol.not (hol.and hol.true q_2)) (hol.or (hol.not hol.true) (hol.not q_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and p_1 q_2)) (hol.or (hol.not p_1) (hol.not q_2))) (hol.eq hol.bool (hol.not (hol.and hol.true q_2)) (hol.or (hol.not hol.true) (hol.not q_2))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) p_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and p_1 q_2)) (hol.or (hol.not p_1) (hol.not q_2)))) (hol.eq hol.bool (hol.not (hol.and hol.true q_2)) (hol.or (hol.not hol.true) (hol.not q_2))) (hol.eq hol.bool (hol.not (hol.and hol.true q_2)) (hol.or (hol.not hol.true) (hol.not q_2))) (thm_1860 p_1 q_2) (thm_1861 q_2).

(; Theorem: |- ((= ((= (\lambda _528. ((= (Data.Bool.~ ((Data.Bool./\ _528) q))) ((Data.Bool.\/ (Data.Bool.~ _528)) (Data.Bool.~ q))) p)) (\lambda _528. ((= (Data.Bool.~ ((Data.Bool./\ _528) q))) ((Data.Bool.\/ (Data.Bool.~ _528)) (Data.Bool.~ q))) Data.Bool.T))) ((= ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q)))) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))))) ;)

(; dict ;)

def thm_1863 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) p_1) ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and p_1 q_2)) (hol.or (hol.not p_1) (hol.not q_2))) (hol.eq hol.bool (hol.not (hol.and hol.true q_2)) (hol.or (hol.not hol.true) (hol.not q_2))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) p_1) ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) hol.true)) (hol.eq hol.bool ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) p_1) (hol.eq hol.bool (hol.not (hol.and hol.true q_2)) (hol.or (hol.not hol.true) (hol.not q_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and p_1 q_2)) (hol.or (hol.not p_1) (hol.not q_2))) (hol.eq hol.bool (hol.not (hol.and hol.true q_2)) (hol.or (hol.not hol.true) (hol.not q_2)))) (thm_1858 p_1 q_2) (thm_1862 p_1 q_2).

(; Theorem: |- ((= \lambda _528. ((= (Data.Bool.~ ((Data.Bool./\ _528) q))) ((Data.Bool.\/ (Data.Bool.~ _528)) (Data.Bool.~ q)))) \lambda _528. ((= (Data.Bool.~ ((Data.Bool./\ _528) q))) ((Data.Bool.\/ (Data.Bool.~ _528)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_1864 : q_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__528_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_2 q_1)) (hol.or (hol.not __528_2) (hol.not q_1))) (__528_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_2 q_1)) (hol.or (hol.not __528_2) (hol.not q_1)))) :=
  q_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__528_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_2 q_1)) (hol.or (hol.not __528_2) (hol.not q_1))).

(; Theorem: |- ((= (\lambda _528. ((= (Data.Bool.~ ((Data.Bool./\ _528) q))) ((Data.Bool.\/ (Data.Bool.~ _528)) (Data.Bool.~ q))) p)) (\lambda _528. ((= (Data.Bool.~ ((Data.Bool./\ _528) q))) ((Data.Bool.\/ (Data.Bool.~ _528)) (Data.Bool.~ q))) Data.Bool.T)) ;)

(; dict ;)

def thm_1865 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) -> hol.proof (hol.eq hol.bool ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) p_1) ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) hol.true)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) => hol.APP_THM hol.bool hol.bool (__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) (__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_2)) (hol.or (hol.not __528_3) (hol.not q_2))) p_1 hol.true (thm_1864 q_2) (thm_266 p_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q)))) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_1866 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) (hol.eq hol.bool (hol.not (hol.and hol.true q_1)) (hol.or (hol.not hol.true) (hol.not q_1)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_1)) (hol.or (hol.not __528_3) (hol.not q_1))) p_2) ((__528_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __528_3 q_1)) (hol.or (hol.not __528_3) (hol.not q_1))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) (hol.eq hol.bool (hol.not (hol.and hol.true q_1)) (hol.or (hol.not hol.true) (hol.not q_1)))) (thm_1863 p_2 q_1) (thm_1865 p_2 q_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q)))) ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_1867 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and hol.true q_2)) (hol.or (hol.not hol.true) (hol.not q_2))) (hol.eq hol.bool (hol.not (hol.and p_1 q_2)) (hol.or (hol.not p_1) (hol.not q_2)))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.and p_1 q_2)) (hol.or (hol.not p_1) (hol.not q_2))) (hol.eq hol.bool (hol.not (hol.and hol.true q_2)) (hol.or (hol.not hol.true) (hol.not q_2))) (thm_1866 q_2 p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) q))) (Data.Bool.~ q)) ;)

(; dict ;)

def thm_1868 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.and hol.true q_1)) (hol.not q_1)) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.and hol.true q_1) q_1 thm_247 (thm_1252 q_1).

(; Theorem: |- ((= (= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) q)))) (= (Data.Bool.~ q))) ;)

(; dict ;)

def thm_1869 : q_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.and hol.true q_1))) (hol.eq hol.bool (hol.not q_1))) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.and hol.true q_1)) (hol.not q_1) thm_119 (thm_1868 q_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))) ((Data.Bool.\/ Data.Bool.F) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_1870 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.not hol.true) (hol.not q_1)) (hol.or hol.false (hol.not q_1))) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.or (hol.not hol.true)) (hol.or hol.false) (hol.not q_1) (hol.not q_1) thm_1247 (thm_1847 q_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))) (Data.Bool.~ q)) ;)

(; dict ;)

def thm_1871 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.not hol.true) (hol.not q_1)) (hol.not q_1)) :=
  q_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.or (hol.not hol.true) (hol.not q_1)) (hol.or hol.false (hol.not q_1)) (hol.not q_1) (thm_1870 q_1) (thm_1180 q_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q)))) ((= (Data.Bool.~ q)) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_1872 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and hol.true q_1)) (hol.or (hol.not hol.true) (hol.not q_1))) (hol.eq hol.bool (hol.not q_1) (hol.not q_1))) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.and hol.true q_1))) (hol.eq hol.bool (hol.not q_1)) (hol.or (hol.not hol.true) (hol.not q_1)) (hol.not q_1) (thm_1869 q_1) (thm_1871 q_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q)))) Data.Bool.T) ;)

(; dict ;)

def thm_1873 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and hol.true q_1)) (hol.or (hol.not hol.true) (hol.not q_1))) hol.true) :=
  q_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.and hol.true q_1)) (hol.or (hol.not hol.true) (hol.not q_1))) (hol.eq hol.bool (hol.not q_1) (hol.not q_1)) hol.true (thm_1872 q_1) (thm_1225 q_1).

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_1874 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (hol.and hol.true q_1)) (hol.or (hol.not hol.true) (hol.not q_1)))) :=
  q_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.and hol.true q_1)) (hol.or (hol.not hol.true) (hol.not q_1))) hol.true (thm_1873 q_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) q))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_1875 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.and hol.true q_1)) (hol.or (hol.not hol.true) (hol.not q_1))) :=
  q_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (hol.and hol.true q_1)) (hol.or (hol.not hol.true) (hol.not q_1))) (thm_1874 q_1) thm_5.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_1876 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.true) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.and hol.true q_1)) (hol.or (hol.not hol.true) (hol.not q_1))) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) (thm_1867 p_2 q_1 hyp_1) (thm_1875 q_1).

(; Theorem: |- ((Data.Bool.==> ((= p) Data.Bool.T)) ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_1877 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.true) => thm_1876 q_1 p_2 hyp_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_1878 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1)))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool p_2 hol.false)) -> hol.proof (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1)))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool p_2 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_1879 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1)))) -> hol.proof (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1)))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool p_2 hol.false)) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) (thm_276 p_2) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool p_2 hol.false)) => thm_1878 q_1 p_2 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_1880 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1)))) -> hol.proof (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1)))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1)))) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) (thm_1877 q_1 p_2) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1)))) => thm_1879 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ p) q))) ((Data.Bool.\/ (Data.Bool.~ p)) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_1881 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1)))) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) (thm_1855 q_1 p_2) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1)))) => thm_1880 q_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ ((= x) a')) ((= x) b')))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))) ;)

(; dict ;)

def thm_1882 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> x_2 : hol.term B -> a_27_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.and (hol.eq A x_4 a_27_3) (hol.eq B x_2 b_27_1))) (hol.or (hol.not (hol.eq A x_4 a_27_3)) (hol.not (hol.eq B x_2 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => x_2 : hol.term B => a_27_3 : hol.term A => x_4 : hol.term A => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) (thm_1830 q_1 p_2) (hol.EQ_MP (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) (hol.eq hol.bool (hol.not (hol.and p_2 q_1)) (hol.or (hol.not p_2) (hol.not q_1))) (thm_1829 q_1 p_2) (thm_1881 q_1 p_2))) (hol.eq B x_2 b_27_1) (hol.eq A x_4 a_27_3).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ ((= x) a')) ((= x) b')))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))) ;)

(; dict ;)

def thm_1883 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> x_2 : hol.term B -> a_27_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.and (hol.eq A x_4 a_27_3) (hol.eq B x_2 b_27_1))) (hol.or (hol.not (hol.eq A x_4 a_27_3)) (hol.not (hol.eq B x_2 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => x_2 : hol.term B => a_27_3 : hol.term A => x_4 : hol.term A => hol.TRANS hol.bool (hol.not (hol.and (hol.eq A x_4 a_27_3) (hol.eq B x_2 b_27_1))) (hol.or (hol.not (hol.eq A x_4 a_27_3)) (hol.not (hol.eq B x_2 b_27_1))) (hol.or (hol.not (hol.eq A x_4 a_27_3)) (hol.not (hol.eq B x_2 b_27_1))) (thm_1882 B A b_27_1 x_2 a_27_3 x_4) (thm_1820 B A b_27_1 x_2 a_27_3 x_4).

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) (Data.Bool.~ ((Data.Bool./\ ((= x) a')) ((= x) b'))))) ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ;)

(; dict ;)

def thm_1884 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> x_4 : hol.term B -> a_5 : hol.term A -> x_6 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)) (hol.not (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1)))) (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_4 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => x_4 : hol.term B => a_5 : hol.term A => x_6 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3))) (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3))) (hol.not (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1))) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_4 b_27_1))) (thm_1816 B A b_3 x_4 a_5 x_6) (thm_1883 B A b_27_1 x_4 a_27_2 x_6).

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) (Data.Bool.~ ((Data.Bool./\ ((= x) a')) ((= x) b')))))) (Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))) ;)

(; dict ;)

def thm_1885 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> x_4 : hol.term B -> a_5 : hol.term A -> x_6 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)) (hol.not (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1))))) (hol.and (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_4 b_27_1)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => x_4 : hol.term B => a_5 : hol.term A => x_6 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)) (hol.not (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1)))) (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_4 b_27_1)))) thm_388 (thm_1884 B A b_27_1 a_27_2 b_3 x_4 a_5 x_6).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ ((= x) a)) ((= x) b)))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ;)

(; dict ;)

def thm_1886 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> x_2 : hol.term B -> a_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.and (hol.eq A x_4 a_3) (hol.eq B x_2 b_1))) (hol.or (hol.not (hol.eq A x_4 a_3)) (hol.not (hol.eq B x_2 b_1)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => x_2 : hol.term B => a_3 : hol.term A => x_4 : hol.term A => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_1881 q_1 p_2) (hol.eq B x_2 b_1) (hol.eq A x_4 a_3).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ ((= x) a)) ((= x) b)))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ;)

(; dict ;)

def thm_1887 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> x_2 : hol.term B -> a_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.and (hol.eq A x_4 a_3) (hol.eq B x_2 b_1))) (hol.or (hol.not (hol.eq A x_4 a_3)) (hol.not (hol.eq B x_2 b_1)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => x_2 : hol.term B => a_3 : hol.term A => x_4 : hol.term A => hol.TRANS hol.bool (hol.not (hol.and (hol.eq A x_4 a_3) (hol.eq B x_2 b_1))) (hol.or (hol.not (hol.eq A x_4 a_3)) (hol.not (hol.eq B x_2 b_1))) (hol.or (hol.not (hol.eq A x_4 a_3)) (hol.not (hol.eq B x_2 b_1))) (thm_1886 B A b_1 x_2 a_3 x_4) (thm_1733 B A b_1 x_2 a_3 x_4).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.~ ((Data.Bool./\ ((= x) a)) ((= x) b))))) (Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b))))) ;)

(; dict ;)

def thm_1888 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> x_2 : hol.term B -> a_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.not (hol.and (hol.eq A x_4 a_3) (hol.eq B x_2 b_1)))) (hol.or (hol.or (hol.not (hol.eq A x_4 a_3)) (hol.not (hol.eq B x_2 b_1))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => x_2 : hol.term B => a_3 : hol.term A => x_4 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.not (hol.and (hol.eq A x_4 a_3) (hol.eq B x_2 b_1))) (hol.or (hol.not (hol.eq A x_4 a_3)) (hol.not (hol.eq B x_2 b_1))) thm_431 (thm_1887 B A b_1 x_2 a_3 x_4).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((Data.Bool./\ ((= x) a)) ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) ;)

(; dict ;)

def thm_1889 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> x_4 : hol.term B -> a_5 : hol.term A -> x_6 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1))) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => x_4 : hol.term B => a_5 : hol.term A => x_6 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.or (hol.not (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)))) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3)))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1)) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1)) (thm_1888 B A b_3 x_4 a_5 x_6) (thm_1739 B A b_27_1 x_4 a_27_2 x_6).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) (Data.Bool.~ ((Data.Bool./\ ((= x) a')) ((= x) b'))))) ((Data.Bool.\/ (Data.Bool.~ ((Data.Bool./\ ((= x) a)) ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))) ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))) ;)

(; dict ;)

def thm_1890 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> x_4 : hol.term B -> a_5 : hol.term A -> x_6 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)) (hol.not (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1)))) (hol.or (hol.not (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1)))) (hol.and (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_4 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => x_4 : hol.term B => a_5 : hol.term A => x_6 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)) (hol.not (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1))))) (hol.and (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_4 b_27_1))))) (hol.or (hol.not (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1))) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1))) (thm_1885 B A b_27_1 a_27_2 b_3 x_4 a_5 x_6) (thm_1889 B A b_27_1 a_27_2 b_3 x_4 a_5 x_6).

(; Theorem: |- ((= ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))) ;)

(; dict ;)

def thm_1891 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> x_4 : hol.term B -> a_5 : hol.term A -> x_6 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1))) (hol.and (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_4 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => x_4 : hol.term B => a_5 : hol.term A => x_6 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1))) (hol.and (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)) (hol.not (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1)))) (hol.or (hol.not (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1)))) (hol.and (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_4 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_4 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_4 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_4 b_27_1)))) (thm_1828 B A b_27_1 a_27_2 b_3 x_4 a_5 x_6) (thm_1890 B A b_27_1 a_27_2 b_3 x_4 a_5 x_6).

(; Theorem: |- ((= \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))) ;)

(; dict ;)

def thm_1892 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))) (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => hol.ABS_THM B hol.bool (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))) (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))) (x_6 : hol.term B => thm_1891 B A b_27_1 a_27_2 b_3 x_6 a_4 x_5).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))) (Data.Bool.! \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ;)

(; dict ;)

def thm_1893 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))) (hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))) (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))) (thm_536 B) (thm_1892 A B b_27_1 a_27_2 b_3 a_4 x_5).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))) \lambda x. (Data.Bool.! \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ;)

(; dict ;)

def thm_1894 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.ABS_THM A hol.bool (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (x_5 : hol.term A => thm_1893 A B b_27_1 a_27_2 b_3 a_4 x_5).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))))) ;)

(; dict ;)

def thm_1895 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (thm_51 A) (thm_1894 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= (\lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))) x)) ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ;)

(; dict ;)

def thm_1896 : A : hol.type -> B : hol.type -> x_1 : hol.term B -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> b_4 : hol.term B -> a_5 : hol.term A -> x_6 : hol.term A -> hol.proof (hol.eq hol.bool ((x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_7 b_4)) (hol.or (hol.not (hol.eq A x_6 a_27_3)) (hol.not (hol.eq B x_7 b_27_2)))) x_1) (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_1 b_4)) (hol.or (hol.not (hol.eq A x_6 a_27_3)) (hol.not (hol.eq B x_1 b_27_2))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term B => b_27_2 : hol.term B => a_27_3 : hol.term A => b_4 : hol.term B => a_5 : hol.term A => x_6 : hol.term A => hol.BETA_CONV B hol.bool (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_7 b_4)) (hol.or (hol.not (hol.eq A x_6 a_27_3)) (hol.not (hol.eq B x_7 b_27_2)))) x_1.

(; Theorem: |- ((= (Data.Bool./\ (\lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))) x))) (Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))) ;)

(; dict ;)

def thm_1897 : A : hol.type -> B : hol.type -> x_1 : hol.term B -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> b_4 : hol.term B -> a_5 : hol.term A -> x_6 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and ((x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_7 b_4)) (hol.or (hol.not (hol.eq A x_6 a_27_3)) (hol.not (hol.eq B x_7 b_27_2)))) x_1)) (hol.and (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_1 b_4)) (hol.or (hol.not (hol.eq A x_6 a_27_3)) (hol.not (hol.eq B x_1 b_27_2)))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term B => b_27_2 : hol.term B => a_27_3 : hol.term A => b_4 : hol.term B => a_5 : hol.term A => x_6 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and ((x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_7 b_4)) (hol.or (hol.not (hol.eq A x_6 a_27_3)) (hol.not (hol.eq B x_7 b_27_2)))) x_1) (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_1 b_4)) (hol.or (hol.not (hol.eq A x_6 a_27_3)) (hol.not (hol.eq B x_1 b_27_2)))) thm_388 (thm_1896 A B x_1 b_27_2 a_27_3 b_4 a_5 x_6).

(; Theorem: |- ((= (\lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))) x)) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) ;)

(; dict ;)

def thm_1898 : A : hol.type -> B : hol.type -> x_1 : hol.term B -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> b_4 : hol.term B -> a_5 : hol.term A -> x_6 : hol.term A -> hol.proof (hol.eq hol.bool ((x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_7 b_4))) (hol.and (hol.eq A x_6 a_27_3) (hol.eq B x_7 b_27_2))) x_1) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_1 b_4))) (hol.and (hol.eq A x_6 a_27_3) (hol.eq B x_1 b_27_2)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term B => b_27_2 : hol.term B => a_27_3 : hol.term A => b_4 : hol.term B => a_5 : hol.term A => x_6 : hol.term A => hol.BETA_CONV B hol.bool (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_7 b_4))) (hol.and (hol.eq A x_6 a_27_3) (hol.eq B x_7 b_27_2))) x_1.

(; Theorem: |- ((= ((Data.Bool./\ (\lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))) x)) (\lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))) x))) ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))) ;)

(; dict ;)

def thm_1899 : A : hol.type -> B : hol.type -> x_1 : hol.term B -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> b_4 : hol.term B -> a_5 : hol.term A -> x_6 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and ((x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_7 b_4)) (hol.or (hol.not (hol.eq A x_6 a_27_3)) (hol.not (hol.eq B x_7 b_27_2)))) x_1) ((x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_7 b_4))) (hol.and (hol.eq A x_6 a_27_3) (hol.eq B x_7 b_27_2))) x_1)) (hol.and (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_1 b_4)) (hol.or (hol.not (hol.eq A x_6 a_27_3)) (hol.not (hol.eq B x_1 b_27_2)))) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_1 b_4))) (hol.and (hol.eq A x_6 a_27_3) (hol.eq B x_1 b_27_2))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term B => b_27_2 : hol.term B => a_27_3 : hol.term A => b_4 : hol.term B => a_5 : hol.term A => x_6 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and ((x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_7 b_4)) (hol.or (hol.not (hol.eq A x_6 a_27_3)) (hol.not (hol.eq B x_7 b_27_2)))) x_1)) (hol.and (hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_1 b_4)) (hol.or (hol.not (hol.eq A x_6 a_27_3)) (hol.not (hol.eq B x_1 b_27_2))))) ((x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_7 b_4))) (hol.and (hol.eq A x_6 a_27_3) (hol.eq B x_7 b_27_2))) x_1) (hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_1 b_4))) (hol.and (hol.eq A x_6 a_27_3) (hol.eq B x_1 b_27_2))) (thm_1897 A B x_1 b_27_2 a_27_3 b_4 a_5 x_6) (thm_1898 A B x_1 b_27_2 a_27_3 b_4 a_5 x_6).

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ (\lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))) x)) (\lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))) x))) \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))) ;)

(; dict ;)

def thm_1900 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (x_6 : hol.term B => hol.and ((x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6) ((x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_7 b_27_1))) x_6)) (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => hol.ABS_THM B hol.bool (x_6 : hol.term B => hol.and ((x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6) ((x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_7 b_27_1))) x_6)) (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))) (x_6 : hol.term B => thm_1899 A B x_6 b_27_1 a_27_2 b_3 a_4 x_5).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (\lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))) x)) (\lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))) x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ;)

(; dict ;)

def thm_1901 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (x_6 : hol.term B => hol.and ((x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6) ((x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_7 b_27_1))) x_6))) (hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (x_6 : hol.term B => hol.and ((x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6) ((x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_7 b_27_1))) x_6)) (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))) (thm_536 B) (thm_1900 A B b_27_1 a_27_2 b_3 a_4 x_5).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. ((Data.Bool./\ (\lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))) x)) (\lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))) x))))) (= (Data.Bool.! \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))))) ;)

(; dict ;)

def thm_1902 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall B (x_6 : hol.term B => hol.and ((x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6) ((x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_7 b_27_1))) x_6)))) (hol.eq hol.bool (hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall B (x_6 : hol.term B => hol.and ((x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6) ((x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_7 b_27_1))) x_6))) (hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) thm_119 (thm_1901 A B b_27_1 a_27_2 b_3 a_4 x_5).

(; Theorem: |- ((= \lambda x. (\lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))) x)) \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ;)

(; dict ;)

def thm_1903 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6) (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => hol.ABS_THM B hol.bool (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6) (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (x_6 : hol.term B => thm_1896 A B x_6 b_27_1 a_27_2 b_3 a_4 x_5).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))) x))) (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))) ;)

(; dict ;)

def thm_1904 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6)) (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6) (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (thm_536 B) (thm_1903 A B b_27_1 a_27_2 b_3 a_4 x_5).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))) x)))) (Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))))) ;)

(; dict ;)

def thm_1905 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.forall B (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6))) (hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.forall B (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6)) (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) thm_388 (thm_1904 A B b_27_1 a_27_2 b_3 a_4 x_5).

(; Theorem: |- ((= \lambda x. (\lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))) x)) \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) ;)

(; dict ;)

def thm_1906 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_7 b_27_1))) x_6) (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => hol.ABS_THM B hol.bool (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_7 b_27_1))) x_6) (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))) (x_6 : hol.term B => thm_1898 A B x_6 b_27_1 a_27_2 b_3 a_4 x_5).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))) x))) (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))) ;)

(; dict ;)

def thm_1907 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_7 b_27_1))) x_6)) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_7 b_27_1))) x_6) (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))) (thm_536 B) (thm_1906 A B b_27_1 a_27_2 b_3 a_4 x_5).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))) x))) (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))) x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))) (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ;)

(; dict ;)

def thm_1908 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.forall B (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6)) (hol.forall B (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_7 b_27_1))) x_6))) (hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall B (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6))) (hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall B (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_7 b_27_1))) x_6)) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))) (thm_1905 A B b_27_1 a_27_2 b_3 a_4 x_5) (thm_1907 A B b_27_1 a_27_2 b_3 a_4 x_5).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (\lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))) x)) (\lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))) x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))) x))) (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))) x))))) ((= (Data.Bool.! \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))) (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))))) ;)

(; dict ;)

def thm_1909 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall B (x_6 : hol.term B => hol.and ((x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6) ((x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_7 b_27_1))) x_6))) (hol.and (hol.forall B (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6)) (hol.forall B (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_7 b_27_1))) x_6)))) (hol.eq hol.bool (hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall B (x_6 : hol.term B => hol.and ((x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6) ((x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_7 b_27_1))) x_6)))) (hol.eq hol.bool (hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (hol.and (hol.forall B (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6)) (hol.forall B (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_7 b_27_1))) x_6))) (hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (thm_1902 A B b_27_1 a_27_2 b_3 a_4 x_5) (thm_1908 A B b_27_1 a_27_2 b_3 a_4 x_5).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) ;)

(; dict ;)

def thm_1910 : B : hol.type -> q_1 : hol.term (hol.arr B hol.bool) -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall B (x_3 : hol.term B => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall B (x_3 : hol.term B => p_2 x_3)) (hol.forall B (x_3 : hol.term B => q_1 x_3)))) :=
  B : hol.type => q_1 : hol.term (hol.arr B hol.bool) => p_2 : hol.term (hol.arr B hol.bool) => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => thm_1312 A q_1 p_2) B q_1 p_2.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (\lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))) x)) (\lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))) x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))) x))) (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))) x)))) ;)

(; dict ;)

def thm_1911 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (x_6 : hol.term B => hol.and ((x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6) ((x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_7 b_27_1))) x_6))) (hol.and (hol.forall B (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6)) (hol.forall B (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_7 b_27_1))) x_6)))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => (B : hol.type => q_1 : hol.term (hol.arr B hol.bool) => p_2 : hol.term (hol.arr B hol.bool) => thm_1910 B q_1 p_2) B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))) (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))) (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ;)

(; dict ;)

def thm_1912 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> x_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => x_5 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.forall B (x_6 : hol.term B => hol.and ((x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6) ((x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_7 b_27_1))) x_6))) (hol.and (hol.forall B (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_7 b_27_1)))) x_6)) (hol.forall B (x_6 : hol.term B => (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_7 b_27_1))) x_6)))) (hol.eq hol.bool (hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (thm_1909 A B b_27_1 a_27_2 b_3 a_4 x_5) (thm_1911 A B b_27_1 a_27_2 b_3 a_4 x_5).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))) (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ;)

(; dict ;)

def thm_1913 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (x_5 : hol.term A => hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.ABS_THM A hol.bool (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (x_5 : hol.term A => hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (x_5 : hol.term A => thm_1912 A B b_27_1 a_27_2 b_3 a_4 x_5).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))))) (Data.Bool.! \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))) (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))))) ;)

(; dict ;)

def thm_1914 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (x_5 : hol.term A => hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (thm_51 A) (thm_1913 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) x)) (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))) ;)

(; dict ;)

def thm_1915 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> b_4 : hol.term B -> a_5 : hol.term A -> hol.proof (hol.eq hol.bool ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_7 b_4)) (hol.or (hol.not (hol.eq A x_6 a_27_3)) (hol.not (hol.eq B x_7 b_27_2))))) x_1) (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_1 a_5) (hol.eq B x_6 b_4)) (hol.or (hol.not (hol.eq A x_1 a_27_3)) (hol.not (hol.eq B x_6 b_27_2)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => b_27_2 : hol.term B => a_27_3 : hol.term A => b_4 : hol.term B => a_5 : hol.term A => hol.BETA_CONV A hol.bool (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_7 b_4)) (hol.or (hol.not (hol.eq A x_6 a_27_3)) (hol.not (hol.eq B x_7 b_27_2))))) x_1.

(; Theorem: |- ((= (Data.Bool./\ (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) x))) (Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))))) ;)

(; dict ;)

def thm_1916 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> b_4 : hol.term B -> a_5 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_7 b_4)) (hol.or (hol.not (hol.eq A x_6 a_27_3)) (hol.not (hol.eq B x_7 b_27_2))))) x_1)) (hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_1 a_5) (hol.eq B x_6 b_4)) (hol.or (hol.not (hol.eq A x_1 a_27_3)) (hol.not (hol.eq B x_6 b_27_2))))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => b_27_2 : hol.term B => a_27_3 : hol.term A => b_4 : hol.term B => a_5 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_7 b_4)) (hol.or (hol.not (hol.eq A x_6 a_27_3)) (hol.not (hol.eq B x_7 b_27_2))))) x_1) (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_1 a_5) (hol.eq B x_6 b_4)) (hol.or (hol.not (hol.eq A x_1 a_27_3)) (hol.not (hol.eq B x_6 b_27_2))))) thm_388 (thm_1915 B A x_1 b_27_2 a_27_3 b_4 a_5).

(; Theorem: |- ((= (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) x)) (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))) ;)

(; dict ;)

def thm_1917 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> b_4 : hol.term B -> a_5 : hol.term A -> hol.proof (hol.eq hol.bool ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_7 b_4))) (hol.and (hol.eq A x_6 a_27_3) (hol.eq B x_7 b_27_2)))) x_1) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_1 a_5)) (hol.not (hol.eq B x_6 b_4))) (hol.and (hol.eq A x_1 a_27_3) (hol.eq B x_6 b_27_2))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => b_27_2 : hol.term B => a_27_3 : hol.term A => b_4 : hol.term B => a_5 : hol.term A => hol.BETA_CONV A hol.bool (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_7 b_4))) (hol.and (hol.eq A x_6 a_27_3) (hol.eq B x_7 b_27_2)))) x_1.

(; Theorem: |- ((= ((Data.Bool./\ (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) x)) (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) x))) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))) (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ;)

(; dict ;)

def thm_1918 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> b_27_2 : hol.term B -> a_27_3 : hol.term A -> b_4 : hol.term B -> a_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_7 b_4)) (hol.or (hol.not (hol.eq A x_6 a_27_3)) (hol.not (hol.eq B x_7 b_27_2))))) x_1) ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_7 b_4))) (hol.and (hol.eq A x_6 a_27_3) (hol.eq B x_7 b_27_2)))) x_1)) (hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_1 a_5) (hol.eq B x_6 b_4)) (hol.or (hol.not (hol.eq A x_1 a_27_3)) (hol.not (hol.eq B x_6 b_27_2))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_1 a_5)) (hol.not (hol.eq B x_6 b_4))) (hol.and (hol.eq A x_1 a_27_3) (hol.eq B x_6 b_27_2)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => b_27_2 : hol.term B => a_27_3 : hol.term A => b_4 : hol.term B => a_5 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_5) (hol.eq B x_7 b_4)) (hol.or (hol.not (hol.eq A x_6 a_27_3)) (hol.not (hol.eq B x_7 b_27_2))))) x_1)) (hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_1 a_5) (hol.eq B x_6 b_4)) (hol.or (hol.not (hol.eq A x_1 a_27_3)) (hol.not (hol.eq B x_6 b_27_2)))))) ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_5)) (hol.not (hol.eq B x_7 b_4))) (hol.and (hol.eq A x_6 a_27_3) (hol.eq B x_7 b_27_2)))) x_1) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_1 a_5)) (hol.not (hol.eq B x_6 b_4))) (hol.and (hol.eq A x_1 a_27_3) (hol.eq B x_6 b_27_2)))) (thm_1916 B A x_1 b_27_2 a_27_3 b_4 a_5) (thm_1917 B A x_1 b_27_2 a_27_3 b_4 a_5).

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) x)) (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) x))) \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))) (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ;)

(; dict ;)

def thm_1919 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_5 : hol.term A => hol.and ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5) ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1)))) x_5)) (x_5 : hol.term A => hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.ABS_THM A hol.bool (x_5 : hol.term A => hol.and ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5) ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1)))) x_5)) (x_5 : hol.term A => hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (x_5 : hol.term A => thm_1918 B A x_5 b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) x)) (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))) (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))))) ;)

(; dict ;)

def thm_1920 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.and ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5) ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1)))) x_5))) (hol.forall A (x_5 : hol.term A => hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_5 : hol.term A => hol.and ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5) ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1)))) x_5)) (x_5 : hol.term A => hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (thm_51 A) (thm_1919 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) x)) (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) x))))) (= (Data.Bool.! \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))) (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))))) ;)

(; dict ;)

def thm_1921 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.and ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5) ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1)))) x_5)))) (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (x_5 : hol.term A => hol.and ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5) ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1)))) x_5))) (hol.forall A (x_5 : hol.term A => hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) thm_119 (thm_1920 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= \lambda x. (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) x)) \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))) ;)

(; dict ;)

def thm_1922 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.ABS_THM A hol.bool (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (x_5 : hol.term A => thm_1915 B A x_5 b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))))) ;)

(; dict ;)

def thm_1923 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5)) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (thm_51 A) (thm_1922 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) x)))) (Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))))) ;)

(; dict ;)

def thm_1924 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5))) (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5)) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) thm_388 (thm_1923 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= \lambda x. (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) x)) \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))) ;)

(; dict ;)

def thm_1925 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1)))) x_5) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.ABS_THM A hol.bool (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1)))) x_5) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))) (x_5 : hol.term A => thm_1917 B A x_5 b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ;)

(; dict ;)

def thm_1926 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1)))) x_5)) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1)))) x_5) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))) (thm_51 A) (thm_1925 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) x))) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))))) ;)

(; dict ;)

def thm_1927 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5)) (hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1)))) x_5))) (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5))) (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))))) (hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1)))) x_5)) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (thm_1924 B A b_27_1 a_27_2 b_3 a_4) (thm_1926 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) x)) (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) x))) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) x))))) ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))) (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))))) ;)

(; dict ;)

def thm_1928 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.and ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5) ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1)))) x_5))) (hol.and (hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5)) (hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1)))) x_5)))) (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.and ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5) ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1)))) x_5)))) (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))))) (hol.and (hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5)) (hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1)))) x_5))) (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (thm_1921 B A b_27_1 a_27_2 b_3 a_4) (thm_1927 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) x)) (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) x))) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))) x)))) ;)

(; dict ;)

def thm_1929 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.and ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5) ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1)))) x_5))) (hol.and (hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5)) (hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1)))) x_5)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => thm_1312 A q_1 p_2) A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))) (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b')))))) (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))))) ;)

(; dict ;)

def thm_1930 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.and ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5) ((x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1)))) x_5))) (hol.and (hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.or (hol.not (hol.eq A x_6 a_27_2)) (hol.not (hol.eq B x_7 b_27_1))))) x_5)) (hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_6 a_4)) (hol.not (hol.eq B x_7 b_3))) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1)))) x_5)))) (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))))) (thm_1928 B A b_27_1 a_27_2 b_3 a_4) (thm_1929 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))))) ;)

(; dict ;)

def thm_1931 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.TRANS hol.bool (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.and (hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1))))) (hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (thm_1914 B A b_27_1 a_27_2 b_3 a_4) (thm_1930 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))))) ;)

(; dict ;)

def thm_1932 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.TRANS hol.bool (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (thm_1931 B A b_27_1 a_27_2 b_3 a_4) (thm_1827 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))))) ;)

(; dict ;)

def thm_1933 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.TRANS hol.bool (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (thm_1895 B A b_27_1 a_27_2 b_3 a_4) (thm_1932 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))) ;)

(; dict ;)

def thm_1934 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) -> hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) => hyp_1.

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool.\/ (Data.Bool.~ ((= x) a'))) (Data.Bool.~ ((= x) b'))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ;)

(; dict ;)

def thm_1935 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) -> hol.proof (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) => hol.EQ_MP (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (thm_1933 B A b_27_1 a_27_2 b_3 a_4) (thm_1934 B A b_27_1 a_27_2 b_3 a_4 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))) ;)

(; dict ;)

def thm_1936 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) -> hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_93 p_1 q_2 hyp_1) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((Data.Bool./\ ((= x) a')) ((= x) b'))))) ;)

(; dict ;)

def thm_1937 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) -> hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) => hol.PROVE_HYP (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.EQ_MP (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) (thm_1827 B A b_27_1 a_27_2 b_3 a_4) (thm_1935 B A b_27_1 a_27_2 b_3 a_4 hyp_1)) (hyp_2 : hol.proof (hol.and (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.or (hol.not (hol.eq A x_5 a_27_2)) (hol.not (hol.eq B x_6 b_27_1)))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1)))))) => thm_1936 B A b_27_1 a_27_2 b_3 a_4 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) a'))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= x) a))) (Data.Bool.~ ((= x) b)))) ((= x) b'))))) ;)

(; dict ;)

def thm_1938 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) -> hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq A x_5 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq B x_6 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) => hol.EQ_MP (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq A x_5 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A x_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq B x_6 b_27_1))))) (thm_1807 B A b_27_1 a_27_2 b_3 a_4) (thm_1937 B A b_27_1 a_27_2 b_3 a_4 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= x) b)))) ((= _1213) a'))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= x) b)))) ((= x) b')))) ;)

(; dict ;)

def thm_1939 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> __1213_5 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1))))) -> hol.proof (hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq A __1213_5 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A __1213_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq B x_6 b_27_1)))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => __1213_5 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1))))) => thm_1938 B A b_27_1 a_27_2 b_3 a_4 hyp_1 __1213_5.

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b)))) ((= _1213) a'))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b)))) ((= _1214) b'))) ;)

(; dict ;)

def thm_1940 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> __1214_4 : hol.term B -> a_5 : hol.term A -> __1213_6 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_5) (hol.eq B x_8 b_3)) (hol.and (hol.eq A x_7 a_27_2) (hol.eq B x_8 b_27_1))))) -> hol.proof (hol.and (hol.or (hol.or (hol.not (hol.eq A __1213_6 a_5)) (hol.not (hol.eq B __1214_4 b_3))) (hol.eq A __1213_6 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A __1213_6 a_5)) (hol.not (hol.eq B __1214_4 b_3))) (hol.eq B __1214_4 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => __1214_4 : hol.term B => a_5 : hol.term A => __1213_6 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_5) (hol.eq B x_8 b_3)) (hol.and (hol.eq A x_7 a_27_2) (hol.eq B x_8 b_27_1))))) => thm_1939 A B b_27_1 a_27_2 b_3 a_5 __1213_6 hyp_1 __1214_4.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b)))) ((= _1214) b')) ;)

(; dict ;)

def thm_1941 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_27_2 : hol.term B -> b_3 : hol.term B -> __1214_4 : hol.term B -> a_5 : hol.term A -> __1213_6 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.or (hol.or (hol.not (hol.eq A __1213_6 a_5)) (hol.not (hol.eq B __1214_4 b_3))) (hol.eq A __1213_6 a_27_1)) (hol.or (hol.or (hol.not (hol.eq A __1213_6 a_5)) (hol.not (hol.eq B __1214_4 b_3))) (hol.eq B __1214_4 b_27_2))) -> hol.proof (hol.or (hol.or (hol.not (hol.eq A __1213_6 a_5)) (hol.not (hol.eq B __1214_4 b_3))) (hol.eq B __1214_4 b_27_2)) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_27_2 : hol.term B => b_3 : hol.term B => __1214_4 : hol.term B => a_5 : hol.term A => __1213_6 : hol.term A => hyp_1 : hol.proof (hol.and (hol.or (hol.or (hol.not (hol.eq A __1213_6 a_5)) (hol.not (hol.eq B __1214_4 b_3))) (hol.eq A __1213_6 a_27_1)) (hol.or (hol.or (hol.not (hol.eq A __1213_6 a_5)) (hol.not (hol.eq B __1214_4 b_3))) (hol.eq B __1214_4 b_27_2))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_93 p_1 q_2 hyp_1) (hol.or (hol.or (hol.not (hol.eq A __1213_6 a_5)) (hol.not (hol.eq B __1214_4 b_3))) (hol.eq A __1213_6 a_27_1)) (hol.or (hol.or (hol.not (hol.eq A __1213_6 a_5)) (hol.not (hol.eq B __1214_4 b_3))) (hol.eq B __1214_4 b_27_2)) hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b)))) ((= _1214) b')) ;)

(; dict ;)

def thm_1942 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_27_2 : hol.term B -> b_3 : hol.term B -> __1214_4 : hol.term B -> a_5 : hol.term A -> __1213_6 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_5) (hol.eq B x_8 b_3)) (hol.and (hol.eq A x_7 a_27_1) (hol.eq B x_8 b_27_2))))) -> hol.proof (hol.or (hol.or (hol.not (hol.eq A __1213_6 a_5)) (hol.not (hol.eq B __1214_4 b_3))) (hol.eq B __1214_4 b_27_2)) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_27_2 : hol.term B => b_3 : hol.term B => __1214_4 : hol.term B => a_5 : hol.term A => __1213_6 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_5) (hol.eq B x_8 b_3)) (hol.and (hol.eq A x_7 a_27_1) (hol.eq B x_8 b_27_2))))) => hol.PROVE_HYP (hol.and (hol.or (hol.or (hol.not (hol.eq A __1213_6 a_5)) (hol.not (hol.eq B __1214_4 b_3))) (hol.eq A __1213_6 a_27_1)) (hol.or (hol.or (hol.not (hol.eq A __1213_6 a_5)) (hol.not (hol.eq B __1214_4 b_3))) (hol.eq B __1214_4 b_27_2))) (hol.or (hol.or (hol.not (hol.eq A __1213_6 a_5)) (hol.not (hol.eq B __1214_4 b_3))) (hol.eq B __1214_4 b_27_2)) (thm_1940 B A b_27_2 a_27_1 b_3 __1214_4 a_5 __1213_6 hyp_1) (hyp_2 : hol.proof (hol.and (hol.or (hol.or (hol.not (hol.eq A __1213_6 a_5)) (hol.not (hol.eq B __1214_4 b_3))) (hol.eq A __1213_6 a_27_1)) (hol.or (hol.or (hol.not (hol.eq A __1213_6 a_5)) (hol.not (hol.eq B __1214_4 b_3))) (hol.eq B __1214_4 b_27_2))) => thm_1941 B A a_27_1 b_27_2 b_3 __1214_4 a_5 __1213_6 hyp_2).

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1214) b))) ((= _1214) b'))) ;)

(; dict ;)

def thm_1943 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_27_2 : hol.term B -> b_3 : hol.term B -> __1214_4 : hol.term B -> a_5 : hol.term A -> __1213_6 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_5) (hol.eq B x_8 b_3)) (hol.and (hol.eq A x_7 a_27_1) (hol.eq B x_8 b_27_2))))) -> hol.proof (hol.or (hol.not (hol.eq A __1213_6 a_5)) (hol.or (hol.not (hol.eq B __1214_4 b_3)) (hol.eq B __1214_4 b_27_2))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_27_2 : hol.term B => b_3 : hol.term B => __1214_4 : hol.term B => a_5 : hol.term A => __1213_6 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_5) (hol.eq B x_8 b_3)) (hol.and (hol.eq A x_7 a_27_1) (hol.eq B x_8 b_27_2))))) => hol.EQ_MP (hol.or (hol.or (hol.not (hol.eq A __1213_6 a_5)) (hol.not (hol.eq B __1214_4 b_3))) (hol.eq B __1214_4 b_27_2)) (hol.or (hol.not (hol.eq A __1213_6 a_5)) (hol.or (hol.not (hol.eq B __1214_4 b_3)) (hol.eq B __1214_4 b_27_2))) (thm_1728 B A b_27_2 b_3 __1214_4 a_5 __1213_6) (thm_1942 B A a_27_1 b_27_2 b_3 __1214_4 a_5 __1213_6 hyp_1).

(; Theorem: |- ((Data.Bool.\/ ((= _1214) b')) ((Data.Bool.\/ (Data.Bool.~ ((= _1213) a))) (Data.Bool.~ ((= _1214) b)))) ;)

(; dict ;)

def thm_1944 : A : hol.type -> B : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> __1213_4 : hol.term A -> b_27_5 : hol.term B -> __1214_6 : hol.term B -> hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_3) (hol.eq B x_8 b_2)) (hol.and (hol.eq A x_7 a_27_1) (hol.eq B x_8 b_27_5))))) -> hol.proof (hol.or (hol.eq B __1214_6 b_27_5) (hol.or (hol.not (hol.eq A __1213_4 a_3)) (hol.not (hol.eq B __1214_6 b_2)))) :=
  A : hol.type => B : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => __1213_4 : hol.term A => b_27_5 : hol.term B => __1214_6 : hol.term B => hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_3) (hol.eq B x_8 b_2)) (hol.and (hol.eq A x_7 a_27_1) (hol.eq B x_8 b_27_5))))) => hol.EQ_MP (hol.or (hol.not (hol.eq A __1213_4 a_3)) (hol.or (hol.not (hol.eq B __1214_6 b_2)) (hol.eq B __1214_6 b_27_5))) (hol.or (hol.eq B __1214_6 b_27_5) (hol.or (hol.not (hol.eq A __1213_4 a_3)) (hol.not (hol.eq B __1214_6 b_2)))) (hol.EQ_MP hol.true (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1213_4 a_3)) (hol.or (hol.not (hol.eq B __1214_6 b_2)) (hol.eq B __1214_6 b_27_5))) (hol.or (hol.eq B __1214_6 b_27_5) (hol.or (hol.not (hol.eq A __1213_4 a_3)) (hol.not (hol.eq B __1214_6 b_2))))) (thm_1720 B A b_27_5 b_2 __1214_6 a_3 __1213_4) thm_5) (thm_1943 B A a_27_1 b_27_5 b_2 __1214_6 a_3 __1213_4 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((= _1213) a)) ((= _1214) b))) ((= _1214) b')) ;)

(; dict ;)

def thm_1945 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_27_2 : hol.term B -> b_3 : hol.term B -> __1214_4 : hol.term B -> a_5 : hol.term A -> __1213_6 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_5) (hol.eq B x_8 b_3)) (hol.and (hol.eq A x_7 a_27_1) (hol.eq B x_8 b_27_2))))) -> hol.proof (hol.imp (hol.and (hol.eq A __1213_6 a_5) (hol.eq B __1214_4 b_3)) (hol.eq B __1214_4 b_27_2)) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_27_2 : hol.term B => b_3 : hol.term B => __1214_4 : hol.term B => a_5 : hol.term A => __1213_6 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_5) (hol.eq B x_8 b_3)) (hol.and (hol.eq A x_7 a_27_1) (hol.eq B x_8 b_27_2))))) => hol.EQ_MP (hol.or (hol.eq B __1214_4 b_27_2) (hol.or (hol.not (hol.eq A __1213_6 a_5)) (hol.not (hol.eq B __1214_4 b_3)))) (hol.imp (hol.and (hol.eq A __1213_6 a_5) (hol.eq B __1214_4 b_3)) (hol.eq B __1214_4 b_27_2)) (thm_1709 A B b_3 a_5 __1213_6 b_27_2 __1214_4) (thm_1944 A B a_27_1 b_3 a_5 __1213_6 b_27_2 __1214_4 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((= a) a)) ((= b) b))) ((= b) b')) ;)

(; dict ;)

def thm_1946 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_27_2 : hol.term B -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_1) (hol.eq B x_6 b_27_2))))) -> hol.proof (hol.imp (hol.and (hol.eq A a_4 a_4) (hol.eq B b_3 b_3)) (hol.eq B b_3 b_27_2)) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_27_2 : hol.term B => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_1) (hol.eq B x_6 b_27_2))))) => (B : hol.type => A : hol.type => a_27_1 : hol.term A => b_27_2 : hol.term B => b_3 : hol.term B => __1214_4 : hol.term B => a_5 : hol.term A => __1213_6 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_5) (hol.eq B x_8 b_3)) (hol.and (hol.eq A x_7 a_27_1) (hol.eq B x_8 b_27_2))))) => (B : hol.type => A : hol.type => a_27_1 : hol.term A => b_27_2 : hol.term B => b_3 : hol.term B => __1214_4 : hol.term B => a_5 : hol.term A => __1213_6 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_5) (hol.eq B x_8 b_3)) (hol.and (hol.eq A x_7 a_27_1) (hol.eq B x_8 b_27_2))))) => hol.EQ_MP (hol.imp (hol.and (hol.eq A __1213_6 a_5) (hol.eq B __1214_4 b_3)) (hol.eq B __1214_4 b_27_2)) (hol.imp (hol.and (hol.eq A __1213_6 a_5) (hol.eq B __1214_4 b_3)) (hol.eq B __1214_4 b_27_2)) (thm_1639 B A b_27_2 b_3 __1214_4 a_5 __1213_6) (thm_1945 B A a_27_1 b_27_2 b_3 __1214_4 a_5 __1213_6 hyp_1)) B A a_27_1 b_27_2 b_3 __1214_4 a_5 __1213_6 hyp_1) B A a_27_1 b_27_2 b_3 b_3 a_4 a_4 hyp_1.

(; Theorem: |- ((= ((= b) b)) ((Data.Bool./\ ((= a) a)) ((= b) b))) ;)

(; dict ;)

def thm_1947 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> b_2 : hol.term B -> hyp_1 : hol.proof (hol.eq A a_1 a_1) -> hol.proof (hol.eq hol.bool (hol.eq B b_2 b_2) (hol.and (hol.eq A a_1 a_1) (hol.eq B b_2 b_2))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => b_2 : hol.term B => hyp_1 : hol.proof (hol.eq A a_1 a_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_101 p_1 q_2 hyp_1) (hol.eq A a_1 a_1) (hol.eq B b_2 b_2) hyp_1.

(; Theorem: |- ((= ((= b) b)) ((Data.Bool./\ ((= a) a)) ((= b) b))) ;)

(; dict ;)

def thm_1948 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> b_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq B b_2 b_2) (hol.and (hol.eq A a_1 a_1) (hol.eq B b_2 b_2))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => b_2 : hol.term B => hol.PROVE_HYP (hol.eq A a_1 a_1) (hol.eq hol.bool (hol.eq B b_2 b_2) (hol.and (hol.eq A a_1 a_1) (hol.eq B b_2 b_2))) (thm_793 A a_1) (hyp_1 : hol.proof (hol.eq A a_1 a_1) => thm_1947 A B a_1 b_2 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= a) a)) ((= b) b)) ;)

(; dict ;)

def thm_1949 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.and (hol.eq A a_2 a_2) (hol.eq B b_1 b_1)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.EQ_MP (hol.eq B b_1 b_1) (hol.and (hol.eq A a_2 a_2) (hol.eq B b_1 b_1)) (thm_1948 A B a_2 b_1) (thm_795 B b_1).

(; Theorem: |- ((= b) b') ;)

(; dict ;)

def thm_1950 : A : hol.type -> B : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> b_27_3 : hol.term B -> b_4 : hol.term B -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_2) (hol.eq B x_6 b_4)) (hol.and (hol.eq A x_5 a_27_1) (hol.eq B x_6 b_27_3))))) -> hol.proof (hol.eq B b_4 b_27_3) :=
  A : hol.type => B : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => b_27_3 : hol.term B => b_4 : hol.term B => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_2) (hol.eq B x_6 b_4)) (hol.and (hol.eq A x_5 a_27_1) (hol.eq B x_6 b_27_3))))) => thm_1946 B A a_27_1 b_27_3 b_4 a_2 hyp_1 (thm_1949 B A b_4 a_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((= b) b'))) ((= b) b')) ;)

(; dict ;)

def thm_1951 : A : hol.type -> B : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> b_27_3 : hol.term B -> b_4 : hol.term B -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_2) (hol.eq B x_6 b_4)) (hol.and (hol.eq A x_5 a_27_1) (hol.eq B x_6 b_27_3))))) -> hol.proof (hol.imp (hol.not (hol.eq B b_4 b_27_3)) (hol.eq B b_4 b_27_3)) :=
  A : hol.type => B : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => b_27_3 : hol.term B => b_4 : hol.term B => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_2) (hol.eq B x_6 b_4)) (hol.and (hol.eq A x_5 a_27_1) (hol.eq B x_6 b_27_3))))) => hyp_2 : hol.proof (hol.not (hol.eq B b_4 b_27_3)) => hol.EQ_MP (hol.eq B b_4 b_27_3) (hol.eq B b_4 b_27_3) (thm_628 B b_27_3 b_4) (thm_1950 A B a_27_1 a_2 b_27_3 b_4 hyp_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1952 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) -> hyp_2 : hol.proof (hol.not (hol.eq B b_3 b_27_1)) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) => hyp_2 : hol.proof (hol.not (hol.eq B b_3 b_27_1)) => hol.EQ_MP (hol.imp (hol.eq B b_3 b_27_1) hol.false) (hol.imp (hol.eq B b_3 b_27_1) hol.false) (thm_1633 B b_27_1 b_3) (thm_1636 B b_27_1 b_3 hyp_2) (hol.EQ_MP (hol.imp (hol.not (hol.eq B b_3 b_27_1)) (hol.eq B b_3 b_27_1)) (hol.eq B b_3 b_27_1) (thm_1637 B b_27_1 b_3) (thm_1951 A B a_27_2 a_4 b_27_1 b_3 hyp_1)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_1953 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) -> hyp_2 : hol.proof (hol.not (hol.eq B b_3 b_27_1)) -> hol.proof (hol.imp (hol.not hol.false) hol.false) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) => hyp_2 : hol.proof (hol.not (hol.eq B b_3 b_27_1)) => hyp_3 : hol.proof (hol.not hol.false) => hol.EQ_MP hol.false hol.false thm_300 (thm_1952 B A b_27_1 a_27_2 b_3 a_4 hyp_1 hyp_2).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1954 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) -> hyp_2 : hol.proof (hol.not (hol.eq B b_3 b_27_1)) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) => hyp_2 : hol.proof (hol.not (hol.eq B b_3 b_27_1)) => hol.PROVE_HYP (hol.not (hol.eq B b_3 b_27_1)) hol.false (thm_1631 B b_27_1 b_3 hyp_2) (hyp_3 : hol.proof (hol.not (hol.eq B b_3 b_27_1)) => hol.EQ_MP (hol.imp (hol.not hol.false) hol.false) hol.false thm_250 (thm_1953 B A b_27_1 a_27_2 b_3 a_4 hyp_1 hyp_3)).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1955 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) -> hyp_2 : hol.proof (hol.not (hol.eq B b_3 b_27_1)) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) => hyp_2 : hol.proof (hol.not (hol.eq B b_3 b_27_1)) => hol.PROVE_HYP (hol.not (hol.eq B b_3 b_27_1)) hol.false (thm_1631 B b_27_1 b_3 hyp_2) (hyp_3 : hol.proof (hol.not (hol.eq B b_3 b_27_1)) => thm_1954 B A b_27_1 a_27_2 b_3 a_4 hyp_1 hyp_3).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1956 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) -> hyp_2 : hol.proof (hol.not (hol.eq B b_3 b_27_1)) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) => hyp_2 : hol.proof (hol.not (hol.eq B b_3 b_27_1)) => hol.PROVE_HYP (hol.not (hol.eq B b_3 b_27_1)) hol.false (hol.EQ_MP (hol.not (hol.eq B b_3 b_27_1)) (hol.not (hol.eq B b_3 b_27_1)) (thm_1630 B b_27_1 b_3) (thm_1631 B b_27_1 b_3 hyp_2)) (hyp_3 : hol.proof (hol.not (hol.eq B b_3 b_27_1)) => thm_1955 B A b_27_1 a_27_2 b_3 a_4 hyp_1 hyp_3).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((= b) b'))) Data.Bool.F) ;)

(; dict ;)

def thm_1957 : A : hol.type -> B : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> b_27_3 : hol.term B -> b_4 : hol.term B -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_2) (hol.eq B x_6 b_4)) (hol.and (hol.eq A x_5 a_27_1) (hol.eq B x_6 b_27_3))))) -> hol.proof (hol.imp (hol.not (hol.eq B b_4 b_27_3)) hol.false) :=
  A : hol.type => B : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => b_27_3 : hol.term B => b_4 : hol.term B => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_2) (hol.eq B x_6 b_4)) (hol.and (hol.eq A x_5 a_27_1) (hol.eq B x_6 b_27_3))))) => hyp_2 : hol.proof (hol.not (hol.eq B b_4 b_27_3)) => thm_1956 B A b_27_3 a_27_1 b_4 a_2 hyp_1 hyp_2.

(; Theorem: |- ((= (Data.Bool.~ ((= a) a'))) (Data.Bool.~ ((= a) a'))) ;)

(; dict ;)

def thm_1958 : A : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.eq A a_2 a_27_1)) (hol.not (hol.eq A a_2 a_27_1))) :=
  A : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => hol.REFL hol.bool (hol.not (hol.eq A a_2 a_27_1)).

(; Theorem: |- ((= (Data.Bool.~ ((= a) a'))) (Data.Bool.~ ((= a) a'))) ;)

(; dict ;)

def thm_1959 : A : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.eq A a_2 a_27_1)) (hol.not (hol.eq A a_2 a_27_1))) :=
  A : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => hol.TRANS hol.bool (hol.not (hol.eq A a_2 a_27_1)) (hol.not (hol.eq A a_2 a_27_1)) (hol.not (hol.eq A a_2 a_27_1)) (thm_1958 A a_27_1 a_2) (thm_1958 A a_27_1 a_2).

(; Theorem: |- (Data.Bool.~ ((= a) a')) ;)

(; dict ;)

def thm_1960 : A : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq A a_2 a_27_1)) -> hol.proof (hol.not (hol.eq A a_2 a_27_1)) :=
  A : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq A a_2 a_27_1)) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> ((= a) a')) Data.Bool.F)) ((Data.Bool.==> ((= a) a')) Data.Bool.F)) ;)

(; dict ;)

def thm_1961 : A : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq A a_2 a_27_1) hol.false) (hol.imp (hol.eq A a_2 a_27_1) hol.false)) :=
  A : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => hol.REFL hol.bool (hol.imp (hol.eq A a_2 a_27_1) hol.false).

(; Theorem: |- ((= ((Data.Bool.==> ((= a) a')) Data.Bool.F)) ((Data.Bool.==> ((= a) a')) Data.Bool.F)) ;)

(; dict ;)

def thm_1962 : A : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq A a_2 a_27_1) hol.false) (hol.imp (hol.eq A a_2 a_27_1) hol.false)) :=
  A : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => hol.TRANS hol.bool (hol.imp (hol.eq A a_2 a_27_1) hol.false) (hol.imp (hol.eq A a_2 a_27_1) hol.false) (hol.imp (hol.eq A a_2 a_27_1) hol.false) (thm_1961 A a_27_1 a_2) (thm_1961 A a_27_1 a_2).

(; Theorem: |- ((= (Data.Bool.~ ((= a) a'))) ((Data.Bool.==> ((= a) a')) Data.Bool.F)) ;)

(; dict ;)

def thm_1963 : A : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.eq A a_2 a_27_1)) (hol.imp (hol.eq A a_2 a_27_1) hol.false)) :=
  A : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => (p_1 : hol.term hol.bool => thm_313 p_1) (hol.eq A a_2 a_27_1).

(; Theorem: |- ((= (Data.Bool.~ ((= a) a'))) ((Data.Bool.==> ((= a) a')) Data.Bool.F)) ;)

(; dict ;)

def thm_1964 : A : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.eq A a_2 a_27_1)) (hol.imp (hol.eq A a_2 a_27_1) hol.false)) :=
  A : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => hol.TRANS hol.bool (hol.not (hol.eq A a_2 a_27_1)) (hol.not (hol.eq A a_2 a_27_1)) (hol.imp (hol.eq A a_2 a_27_1) hol.false) (thm_1958 A a_27_1 a_2) (thm_1963 A a_27_1 a_2).

(; Theorem: |- ((Data.Bool.==> ((= a) a')) Data.Bool.F) ;)

(; dict ;)

def thm_1965 : A : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.eq A a_2 a_27_1)) -> hol.proof (hol.imp (hol.eq A a_2 a_27_1) hol.false) :=
  A : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => hyp_1 : hol.proof (hol.not (hol.eq A a_2 a_27_1)) => hol.EQ_MP (hol.not (hol.eq A a_2 a_27_1)) (hol.imp (hol.eq A a_2 a_27_1) hol.false) (thm_1964 A a_27_1 a_2) (thm_1960 A a_27_1 a_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((= a) a'))) ((= a) a'))) ((= a) a')) ;)

(; dict ;)

def thm_1966 : A : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.eq A a_2 a_27_1)) (hol.eq A a_2 a_27_1)) (hol.eq A a_2 a_27_1)) :=
  A : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => (p_1 : hol.term hol.bool => thm_299 p_1) (hol.eq A a_2 a_27_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ ((= _1209) a)) ((= _1210) b))) ((= _1209) a'))) ((Data.Bool.==> ((Data.Bool./\ ((= _1209) a)) ((= _1210) b))) ((= _1209) a'))) ;)

(; dict ;)

def thm_1967 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> __1210_3 : hol.term B -> a_4 : hol.term A -> __1209_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (hol.eq A __1209_5 a_4) (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1)) (hol.imp (hol.and (hol.eq A __1209_5 a_4) (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => __1210_3 : hol.term B => a_4 : hol.term A => __1209_5 : hol.term A => hol.REFL hol.bool (hol.imp (hol.and (hol.eq A __1209_5 a_4) (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1)).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ ((= _1209) a)) ((= _1210) b))) ((= _1209) a'))) ((Data.Bool.==> ((Data.Bool./\ ((= _1209) a)) ((= _1210) b))) ((= _1209) a'))) ;)

(; dict ;)

def thm_1968 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> __1210_3 : hol.term B -> a_4 : hol.term A -> __1209_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (hol.eq A __1209_5 a_4) (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1)) (hol.imp (hol.and (hol.eq A __1209_5 a_4) (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => __1210_3 : hol.term B => a_4 : hol.term A => __1209_5 : hol.term A => hol.TRANS hol.bool (hol.imp (hol.and (hol.eq A __1209_5 a_4) (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1)) (hol.imp (hol.and (hol.eq A __1209_5 a_4) (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1)) (hol.imp (hol.and (hol.eq A __1209_5 a_4) (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1)) (thm_1967 B A a_27_1 b_2 __1210_3 a_4 __1209_5) (thm_1967 B A a_27_1 b_2 __1210_3 a_4 __1209_5).

(; Theorem: |- ((= ((Data.Bool.\/ ((= _1209) a')) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b))))) ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b))))) ((= _1209) a'))) ;)

(; dict ;)

def thm_1969 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> __1210_2 : hol.term B -> a_3 : hol.term A -> a_27_4 : hol.term A -> __1209_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.eq A __1209_5 a_27_4) (hol.or (hol.not (hol.eq A __1209_5 a_3)) (hol.not (hol.eq B __1210_2 b_1)))) (hol.imp (hol.not (hol.or (hol.not (hol.eq A __1209_5 a_3)) (hol.not (hol.eq B __1210_2 b_1)))) (hol.eq A __1209_5 a_27_4))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => __1210_2 : hol.term B => a_3 : hol.term A => a_27_4 : hol.term A => __1209_5 : hol.term A => (b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => thm_911 b_1 a_2) (hol.or (hol.not (hol.eq A __1209_5 a_3)) (hol.not (hol.eq B __1210_2 b_1))) (hol.eq A __1209_5 a_27_4).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b))))) ((Data.Bool./\ (Data.Bool.~ (Data.Bool.~ ((= _1209) a)))) (Data.Bool.~ (Data.Bool.~ ((= _1210) b))))) ;)

(; dict ;)

def thm_1970 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> __1210_2 : hol.term B -> a_3 : hol.term A -> __1209_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.or (hol.not (hol.eq A __1209_4 a_3)) (hol.not (hol.eq B __1210_2 b_1)))) (hol.and (hol.not (hol.not (hol.eq A __1209_4 a_3))) (hol.not (hol.not (hol.eq B __1210_2 b_1))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => __1210_2 : hol.term B => a_3 : hol.term A => __1209_4 : hol.term A => (b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => thm_1699 b_1 a_2) (hol.not (hol.eq B __1210_2 b_1)) (hol.not (hol.eq A __1209_4 a_3)).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ ((= _1209) a)))) ((= _1209) a)) ;)

(; dict ;)

def thm_1971 : A : hol.type -> a_1 : hol.term A -> __1209_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.not (hol.eq A __1209_2 a_1))) (hol.eq A __1209_2 a_1)) :=
  A : hol.type => a_1 : hol.term A => __1209_2 : hol.term A => (a_1 : hol.term hol.bool => thm_915 a_1) (hol.eq A __1209_2 a_1).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.~ (Data.Bool.~ ((= _1209) a))))) (Data.Bool./\ ((= _1209) a))) ;)

(; dict ;)

def thm_1972 : A : hol.type -> a_1 : hol.term A -> __1209_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.not (hol.not (hol.eq A __1209_2 a_1)))) (hol.and (hol.eq A __1209_2 a_1))) :=
  A : hol.type => a_1 : hol.term A => __1209_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.not (hol.not (hol.eq A __1209_2 a_1))) (hol.eq A __1209_2 a_1) thm_388 (thm_1971 A a_1 __1209_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ ((= _1210) b)))) ((= _1210) b)) ;)

(; dict ;)

def thm_1973 : B : hol.type -> b_1 : hol.term B -> __1210_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.not (hol.not (hol.eq B __1210_2 b_1))) (hol.eq B __1210_2 b_1)) :=
  B : hol.type => b_1 : hol.term B => __1210_2 : hol.term B => (a_1 : hol.term hol.bool => thm_915 a_1) (hol.eq B __1210_2 b_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.~ (Data.Bool.~ ((= _1209) a)))) (Data.Bool.~ (Data.Bool.~ ((= _1210) b))))) ((Data.Bool./\ ((= _1209) a)) ((= _1210) b))) ;)

(; dict ;)

def thm_1974 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> __1210_2 : hol.term B -> a_3 : hol.term A -> __1209_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.not (hol.not (hol.eq A __1209_4 a_3))) (hol.not (hol.not (hol.eq B __1210_2 b_1)))) (hol.and (hol.eq A __1209_4 a_3) (hol.eq B __1210_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => __1210_2 : hol.term B => a_3 : hol.term A => __1209_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and (hol.not (hol.not (hol.eq A __1209_4 a_3)))) (hol.and (hol.eq A __1209_4 a_3)) (hol.not (hol.not (hol.eq B __1210_2 b_1))) (hol.eq B __1210_2 b_1) (thm_1972 A a_3 __1209_4) (thm_1973 B b_1 __1210_2).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b))))) ((Data.Bool./\ ((= _1209) a)) ((= _1210) b))) ;)

(; dict ;)

def thm_1975 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> __1210_2 : hol.term B -> a_3 : hol.term A -> __1209_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.or (hol.not (hol.eq A __1209_4 a_3)) (hol.not (hol.eq B __1210_2 b_1)))) (hol.and (hol.eq A __1209_4 a_3) (hol.eq B __1210_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => __1210_2 : hol.term B => a_3 : hol.term A => __1209_4 : hol.term A => hol.TRANS hol.bool (hol.not (hol.or (hol.not (hol.eq A __1209_4 a_3)) (hol.not (hol.eq B __1210_2 b_1)))) (hol.and (hol.not (hol.not (hol.eq A __1209_4 a_3))) (hol.not (hol.not (hol.eq B __1210_2 b_1)))) (hol.and (hol.eq A __1209_4 a_3) (hol.eq B __1210_2 b_1)) (thm_1970 B A b_1 __1210_2 a_3 __1209_4) (thm_1974 B A b_1 __1210_2 a_3 __1209_4).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.~ ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b)))))) (Data.Bool.==> ((Data.Bool./\ ((= _1209) a)) ((= _1210) b)))) ;)

(; dict ;)

def thm_1976 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> __1210_2 : hol.term B -> a_3 : hol.term A -> __1209_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.not (hol.or (hol.not (hol.eq A __1209_4 a_3)) (hol.not (hol.eq B __1210_2 b_1))))) (hol.imp (hol.and (hol.eq A __1209_4 a_3) (hol.eq B __1210_2 b_1)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => __1210_2 : hol.term B => a_3 : hol.term A => __1209_4 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.not (hol.or (hol.not (hol.eq A __1209_4 a_3)) (hol.not (hol.eq B __1210_2 b_1)))) (hol.and (hol.eq A __1209_4 a_3) (hol.eq B __1210_2 b_1)) thm_387 (thm_1975 B A b_1 __1210_2 a_3 __1209_4).

(; Theorem: |- ((= ((= _1209) a')) ((= _1209) a')) ;)

(; dict ;)

def thm_1977 : A : hol.type -> a_27_1 : hol.term A -> __1209_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A __1209_2 a_27_1) (hol.eq A __1209_2 a_27_1)) :=
  A : hol.type => a_27_1 : hol.term A => __1209_2 : hol.term A => hol.REFL hol.bool (hol.eq A __1209_2 a_27_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b))))) ((= _1209) a'))) ((Data.Bool.==> ((Data.Bool./\ ((= _1209) a)) ((= _1210) b))) ((= _1209) a'))) ;)

(; dict ;)

def thm_1978 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> __1210_3 : hol.term B -> a_4 : hol.term A -> __1209_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2)))) (hol.eq A __1209_5 a_27_1)) (hol.imp (hol.and (hol.eq A __1209_5 a_4) (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => __1210_3 : hol.term B => a_4 : hol.term A => __1209_5 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (hol.not (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2))))) (hol.imp (hol.and (hol.eq A __1209_5 a_4) (hol.eq B __1210_3 b_2))) (hol.eq A __1209_5 a_27_1) (hol.eq A __1209_5 a_27_1) (thm_1976 B A b_2 __1210_3 a_4 __1209_5) (thm_1977 A a_27_1 __1209_5).

(; Theorem: |- ((= ((Data.Bool.\/ ((= _1209) a')) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b))))) ((Data.Bool.==> ((Data.Bool./\ ((= _1209) a)) ((= _1210) b))) ((= _1209) a'))) ;)

(; dict ;)

def thm_1979 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> __1210_2 : hol.term B -> a_3 : hol.term A -> a_27_4 : hol.term A -> __1209_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.eq A __1209_5 a_27_4) (hol.or (hol.not (hol.eq A __1209_5 a_3)) (hol.not (hol.eq B __1210_2 b_1)))) (hol.imp (hol.and (hol.eq A __1209_5 a_3) (hol.eq B __1210_2 b_1)) (hol.eq A __1209_5 a_27_4))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => __1210_2 : hol.term B => a_3 : hol.term A => a_27_4 : hol.term A => __1209_5 : hol.term A => hol.TRANS hol.bool (hol.or (hol.eq A __1209_5 a_27_4) (hol.or (hol.not (hol.eq A __1209_5 a_3)) (hol.not (hol.eq B __1210_2 b_1)))) (hol.imp (hol.not (hol.or (hol.not (hol.eq A __1209_5 a_3)) (hol.not (hol.eq B __1210_2 b_1)))) (hol.eq A __1209_5 a_27_4)) (hol.imp (hol.and (hol.eq A __1209_5 a_3) (hol.eq B __1210_2 b_1)) (hol.eq A __1209_5 a_27_4)) (thm_1969 B A b_1 __1210_2 a_3 a_27_4 __1209_5) (thm_1978 B A a_27_4 b_1 __1210_2 a_3 __1209_5).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.~ ((= _1209) a)))) (Data.Bool.\/ (Data.Bool.~ ((= _1209) a)))) ;)

(; dict ;)

def thm_1980 : A : hol.type -> a_1 : hol.term A -> __1209_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.not (hol.eq A __1209_2 a_1))) (hol.or (hol.not (hol.eq A __1209_2 a_1)))) :=
  A : hol.type => a_1 : hol.term A => __1209_2 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (hol.or (hol.not (hol.eq A __1209_2 a_1))).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1210) b))) ((= _1209) a'))) ((Data.Bool.\/ ((= _1209) a')) (Data.Bool.~ ((= _1210) b)))) ;)

(; dict ;)

def thm_1981 : A : hol.type -> B : hol.type -> a_27_1 : hol.term A -> __1209_2 : hol.term A -> b_3 : hol.term B -> __1210_4 : hol.term B -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq B __1210_4 b_3)) (hol.eq A __1209_2 a_27_1)) (hol.or (hol.eq A __1209_2 a_27_1) (hol.not (hol.eq B __1210_4 b_3)))) :=
  A : hol.type => B : hol.type => a_27_1 : hol.term A => __1209_2 : hol.term A => b_3 : hol.term B => __1210_4 : hol.term B => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_942 q_1 p_2) (hol.eq A __1209_2 a_27_1) (hol.not (hol.eq B __1210_4 b_3)).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1210) b))) ((= _1209) a')))) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) ((Data.Bool.\/ ((= _1209) a')) (Data.Bool.~ ((= _1210) b))))) ;)

(; dict ;)

def thm_1982 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> __1210_3 : hol.term B -> a_4 : hol.term A -> __1209_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1))) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.eq A __1209_5 a_27_1) (hol.not (hol.eq B __1210_3 b_2))))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => __1210_3 : hol.term B => a_4 : hol.term A => __1209_5 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.or (hol.not (hol.eq A __1209_5 a_4))) (hol.or (hol.not (hol.eq A __1209_5 a_4))) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1)) (hol.or (hol.eq A __1209_5 a_27_1) (hol.not (hol.eq B __1210_3 b_2))) (thm_1980 A a_4 __1209_5) (thm_1981 A B a_27_1 __1209_5 b_2 __1210_3).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) ((Data.Bool.\/ ((= _1209) a')) (Data.Bool.~ ((= _1210) b))))) ((Data.Bool.\/ ((= _1209) a')) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b))))) ;)

(; dict ;)

def thm_1983 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> __1210_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> __1209_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.eq A __1209_5 a_27_3) (hol.not (hol.eq B __1210_2 b_1)))) (hol.or (hol.eq A __1209_5 a_27_3) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_2 b_1))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => __1210_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => __1209_5 : hol.term A => (r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => thm_989 r_1 q_2 p_3) (hol.not (hol.eq B __1210_2 b_1)) (hol.eq A __1209_5 a_27_3) (hol.not (hol.eq A __1209_5 a_4)).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1210) b))) ((= _1209) a')))) ((Data.Bool.\/ ((= _1209) a')) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b))))) ;)

(; dict ;)

def thm_1984 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> __1210_3 : hol.term B -> a_4 : hol.term A -> __1209_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1))) (hol.or (hol.eq A __1209_5 a_27_1) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2))))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => __1210_3 : hol.term B => a_4 : hol.term A => __1209_5 : hol.term A => hol.TRANS hol.bool (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1))) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.eq A __1209_5 a_27_1) (hol.not (hol.eq B __1210_3 b_2)))) (hol.or (hol.eq A __1209_5 a_27_1) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2)))) (thm_1982 B A a_27_1 b_2 __1210_3 a_4 __1209_5) (thm_1983 B A b_2 __1210_3 a_27_1 a_4 __1209_5).

(; Theorem: |- ((= (= ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1210) b))) ((= _1209) a'))))) (= ((Data.Bool.\/ ((= _1209) a')) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b)))))) ;)

(; dict ;)

def thm_1985 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> __1210_3 : hol.term B -> a_4 : hol.term A -> __1209_5 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1)))) (hol.eq hol.bool (hol.or (hol.eq A __1209_5 a_27_1) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2)))))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => __1210_3 : hol.term B => a_4 : hol.term A => __1209_5 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1))) (hol.or (hol.eq A __1209_5 a_27_1) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2)))) thm_119 (thm_1984 B A a_27_1 b_2 __1210_3 a_4 __1209_5).

(; Theorem: |- ((= ((Data.Bool.\/ ((= _1209) a')) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b))))) ((Data.Bool.\/ ((= _1209) a')) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b))))) ;)

(; dict ;)

def thm_1986 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> __1210_2 : hol.term B -> a_3 : hol.term A -> a_27_4 : hol.term A -> __1209_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.eq A __1209_5 a_27_4) (hol.or (hol.not (hol.eq A __1209_5 a_3)) (hol.not (hol.eq B __1210_2 b_1)))) (hol.or (hol.eq A __1209_5 a_27_4) (hol.or (hol.not (hol.eq A __1209_5 a_3)) (hol.not (hol.eq B __1210_2 b_1))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => __1210_2 : hol.term B => a_3 : hol.term A => a_27_4 : hol.term A => __1209_5 : hol.term A => hol.REFL hol.bool (hol.or (hol.eq A __1209_5 a_27_4) (hol.or (hol.not (hol.eq A __1209_5 a_3)) (hol.not (hol.eq B __1210_2 b_1)))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1210) b))) ((= _1209) a')))) ((Data.Bool.\/ ((= _1209) a')) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b)))))) ((= ((Data.Bool.\/ ((= _1209) a')) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b))))) ((Data.Bool.\/ ((= _1209) a')) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b)))))) ;)

(; dict ;)

def thm_1987 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> __1210_3 : hol.term B -> a_4 : hol.term A -> __1209_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1))) (hol.or (hol.eq A __1209_5 a_27_1) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2))))) (hol.eq hol.bool (hol.or (hol.eq A __1209_5 a_27_1) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2)))) (hol.or (hol.eq A __1209_5 a_27_1) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2)))))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => __1210_3 : hol.term B => a_4 : hol.term A => __1209_5 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1)))) (hol.eq hol.bool (hol.or (hol.eq A __1209_5 a_27_1) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2))))) (hol.or (hol.eq A __1209_5 a_27_1) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2)))) (hol.or (hol.eq A __1209_5 a_27_1) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2)))) (thm_1985 B A a_27_1 b_2 __1210_3 a_4 __1209_5) (thm_1986 B A b_2 __1210_3 a_4 a_27_1 __1209_5).

(; Theorem: |- ((= ((= ((Data.Bool.\/ ((= _1209) a')) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b))))) ((Data.Bool.\/ ((= _1209) a')) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b)))))) Data.Bool.T) ;)

(; dict ;)

def thm_1988 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> __1210_2 : hol.term B -> a_3 : hol.term A -> a_27_4 : hol.term A -> __1209_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.eq A __1209_5 a_27_4) (hol.or (hol.not (hol.eq A __1209_5 a_3)) (hol.not (hol.eq B __1210_2 b_1)))) (hol.or (hol.eq A __1209_5 a_27_4) (hol.or (hol.not (hol.eq A __1209_5 a_3)) (hol.not (hol.eq B __1210_2 b_1))))) hol.true) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => __1210_2 : hol.term B => a_3 : hol.term A => a_27_4 : hol.term A => __1209_5 : hol.term A => (x_1 : hol.term hol.bool => thm_181 x_1) (hol.or (hol.eq A __1209_5 a_27_4) (hol.or (hol.not (hol.eq A __1209_5 a_3)) (hol.not (hol.eq B __1210_2 b_1)))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1210) b))) ((= _1209) a')))) ((Data.Bool.\/ ((= _1209) a')) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b)))))) Data.Bool.T) ;)

(; dict ;)

def thm_1989 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> __1210_3 : hol.term B -> a_4 : hol.term A -> __1209_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1))) (hol.or (hol.eq A __1209_5 a_27_1) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2))))) hol.true) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => __1210_3 : hol.term B => a_4 : hol.term A => __1209_5 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1))) (hol.or (hol.eq A __1209_5 a_27_1) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2))))) (hol.eq hol.bool (hol.or (hol.eq A __1209_5 a_27_1) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2)))) (hol.or (hol.eq A __1209_5 a_27_1) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2))))) hol.true (thm_1987 B A a_27_1 b_2 __1210_3 a_4 __1209_5) (thm_1988 B A b_2 __1210_3 a_4 a_27_1 __1209_5).

(; Theorem: |- ((= Data.Bool.T) ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1210) b))) ((= _1209) a')))) ((Data.Bool.\/ ((= _1209) a')) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b)))))) ;)

(; dict ;)

def thm_1990 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> __1210_3 : hol.term B -> a_4 : hol.term A -> __1209_5 : hol.term A -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1))) (hol.or (hol.eq A __1209_5 a_27_1) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2)))))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => __1210_3 : hol.term B => a_4 : hol.term A => __1209_5 : hol.term A => hol.SYM hol.bool (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1))) (hol.or (hol.eq A __1209_5 a_27_1) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2))))) hol.true (thm_1989 B A a_27_1 b_2 __1210_3 a_4 __1209_5).

(; Theorem: |- ((= (Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b))))) (Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b))))) ;)

(; dict ;)

def thm_1991 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> __1210_2 : hol.term B -> a_3 : hol.term A -> __1209_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.or (hol.not (hol.eq A __1209_4 a_3)) (hol.not (hol.eq B __1210_2 b_1)))) (hol.or (hol.or (hol.not (hol.eq A __1209_4 a_3)) (hol.not (hol.eq B __1210_2 b_1))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => __1210_2 : hol.term B => a_3 : hol.term A => __1209_4 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (hol.or (hol.or (hol.not (hol.eq A __1209_4 a_3)) (hol.not (hol.eq B __1210_2 b_1)))).

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b)))) ((= _1209) a'))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b)))) ((= _1209) a'))) ;)

(; dict ;)

def thm_1992 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> __1210_3 : hol.term B -> a_4 : hol.term A -> __1209_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2))) (hol.eq A __1209_5 a_27_1)) (hol.or (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2))) (hol.eq A __1209_5 a_27_1))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => __1210_3 : hol.term B => a_4 : hol.term A => __1209_5 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.or (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2)))) (hol.or (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2)))) (hol.eq A __1209_5 a_27_1) (hol.eq A __1209_5 a_27_1) (thm_1991 B A b_2 __1210_3 a_4 __1209_5) (thm_1977 A a_27_1 __1209_5).

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b)))) ((= _1209) a'))) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1210) b))) ((= _1209) a')))) ;)

(; dict ;)

def thm_1993 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> __1210_3 : hol.term B -> a_4 : hol.term A -> __1209_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2))) (hol.eq A __1209_5 a_27_1)) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1)))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => __1210_3 : hol.term B => a_4 : hol.term A => __1209_5 : hol.term A => (t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => thm_949 t3_1 t2_2 t1_3) (hol.eq A __1209_5 a_27_1) (hol.not (hol.eq B __1210_3 b_2)) (hol.not (hol.eq A __1209_5 a_4)).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1210) b))) ((= _1209) a'))) ((Data.Bool.\/ (Data.Bool.~ ((= _1210) b))) ((= _1209) a'))) ;)

(; dict ;)

def thm_1994 : A : hol.type -> B : hol.type -> a_27_1 : hol.term A -> __1209_2 : hol.term A -> b_3 : hol.term B -> __1210_4 : hol.term B -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq B __1210_4 b_3)) (hol.eq A __1209_2 a_27_1)) (hol.or (hol.not (hol.eq B __1210_4 b_3)) (hol.eq A __1209_2 a_27_1))) :=
  A : hol.type => B : hol.type => a_27_1 : hol.term A => __1209_2 : hol.term A => b_3 : hol.term B => __1210_4 : hol.term B => hol.REFL hol.bool (hol.or (hol.not (hol.eq B __1210_4 b_3)) (hol.eq A __1209_2 a_27_1)).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1210) b))) ((= _1209) a')))) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1210) b))) ((= _1209) a')))) ;)

(; dict ;)

def thm_1995 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> __1210_3 : hol.term B -> a_4 : hol.term A -> __1209_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1))) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1)))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => __1210_3 : hol.term B => a_4 : hol.term A => __1209_5 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.or (hol.not (hol.eq A __1209_5 a_4))) (hol.or (hol.not (hol.eq A __1209_5 a_4))) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1)) (thm_1980 A a_4 __1209_5) (thm_1994 A B a_27_1 __1209_5 b_2 __1210_3).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1210) b))) ((= _1209) a')))) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1210) b))) ((= _1209) a')))) ;)

(; dict ;)

def thm_1996 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> __1210_3 : hol.term B -> a_4 : hol.term A -> __1209_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1))) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1)))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => __1210_3 : hol.term B => a_4 : hol.term A => __1209_5 : hol.term A => hol.TRANS hol.bool (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1))) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1))) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1))) (thm_1995 B A a_27_1 b_2 __1210_3 a_4 __1209_5) (thm_1995 B A a_27_1 b_2 __1210_3 a_4 __1209_5).

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b)))) ((= _1209) a'))) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1210) b))) ((= _1209) a')))) ;)

(; dict ;)

def thm_1997 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> __1210_3 : hol.term B -> a_4 : hol.term A -> __1209_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2))) (hol.eq A __1209_5 a_27_1)) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1)))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => __1210_3 : hol.term B => a_4 : hol.term A => __1209_5 : hol.term A => hol.TRANS hol.bool (hol.or (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2))) (hol.eq A __1209_5 a_27_1)) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1))) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1))) (thm_1993 B A a_27_1 b_2 __1210_3 a_4 __1209_5) (thm_1996 B A a_27_1 b_2 __1210_3 a_4 __1209_5).

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b)))) ((= _1209) a'))) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1210) b))) ((= _1209) a')))) ;)

(; dict ;)

def thm_1998 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> __1210_3 : hol.term B -> a_4 : hol.term A -> __1209_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2))) (hol.eq A __1209_5 a_27_1)) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1)))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => __1210_3 : hol.term B => a_4 : hol.term A => __1209_5 : hol.term A => hol.TRANS hol.bool (hol.or (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2))) (hol.eq A __1209_5 a_27_1)) (hol.or (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B __1210_3 b_2))) (hol.eq A __1209_5 a_27_1)) (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_5 a_27_1))) (thm_1992 B A a_27_1 b_2 __1210_3 a_4 __1209_5) (thm_1997 B A a_27_1 b_2 __1210_3 a_4 __1209_5).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= x) b)))) ((= _1209) a'))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= x) b)))) ((= x) b')))) ;)

(; dict ;)

def thm_1999 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> __1209_5 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1))))) -> hol.proof (hol.forall B (x_6 : hol.term B => hol.and (hol.or (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq A __1209_5 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A __1209_5 a_4)) (hol.not (hol.eq B x_6 b_3))) (hol.eq B x_6 b_27_1)))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => __1209_5 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => hol.forall B (x_7 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_6 a_4) (hol.eq B x_7 b_3)) (hol.and (hol.eq A x_6 a_27_2) (hol.eq B x_7 b_27_1))))) => thm_1938 B A b_27_1 a_27_2 b_3 a_4 hyp_1 __1209_5.

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b)))) ((= _1209) a'))) ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b)))) ((= _1210) b'))) ;)

(; dict ;)

def thm_2000 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> __1210_4 : hol.term B -> a_5 : hol.term A -> __1209_6 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_5) (hol.eq B x_8 b_3)) (hol.and (hol.eq A x_7 a_27_2) (hol.eq B x_8 b_27_1))))) -> hol.proof (hol.and (hol.or (hol.or (hol.not (hol.eq A __1209_6 a_5)) (hol.not (hol.eq B __1210_4 b_3))) (hol.eq A __1209_6 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A __1209_6 a_5)) (hol.not (hol.eq B __1210_4 b_3))) (hol.eq B __1210_4 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => __1210_4 : hol.term B => a_5 : hol.term A => __1209_6 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_5) (hol.eq B x_8 b_3)) (hol.and (hol.eq A x_7 a_27_2) (hol.eq B x_8 b_27_1))))) => thm_1999 A B b_27_1 a_27_2 b_3 a_5 __1209_6 hyp_1 __1210_4.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b)))) ((= _1209) a')) ;)

(; dict ;)

def thm_2001 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> __1210_4 : hol.term B -> a_5 : hol.term A -> __1209_6 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.or (hol.or (hol.not (hol.eq A __1209_6 a_5)) (hol.not (hol.eq B __1210_4 b_3))) (hol.eq A __1209_6 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A __1209_6 a_5)) (hol.not (hol.eq B __1210_4 b_3))) (hol.eq B __1210_4 b_27_1))) -> hol.proof (hol.or (hol.or (hol.not (hol.eq A __1209_6 a_5)) (hol.not (hol.eq B __1210_4 b_3))) (hol.eq A __1209_6 a_27_2)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => __1210_4 : hol.term B => a_5 : hol.term A => __1209_6 : hol.term A => hyp_1 : hol.proof (hol.and (hol.or (hol.or (hol.not (hol.eq A __1209_6 a_5)) (hol.not (hol.eq B __1210_4 b_3))) (hol.eq A __1209_6 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A __1209_6 a_5)) (hol.not (hol.eq B __1210_4 b_3))) (hol.eq B __1210_4 b_27_1))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_166 q_1 p_2 hyp_1) (hol.or (hol.or (hol.not (hol.eq A __1209_6 a_5)) (hol.not (hol.eq B __1210_4 b_3))) (hol.eq B __1210_4 b_27_1)) (hol.or (hol.or (hol.not (hol.eq A __1209_6 a_5)) (hol.not (hol.eq B __1210_4 b_3))) (hol.eq A __1209_6 a_27_2)) hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b)))) ((= _1209) a')) ;)

(; dict ;)

def thm_2002 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> __1210_4 : hol.term B -> a_5 : hol.term A -> __1209_6 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_5) (hol.eq B x_8 b_3)) (hol.and (hol.eq A x_7 a_27_2) (hol.eq B x_8 b_27_1))))) -> hol.proof (hol.or (hol.or (hol.not (hol.eq A __1209_6 a_5)) (hol.not (hol.eq B __1210_4 b_3))) (hol.eq A __1209_6 a_27_2)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => __1210_4 : hol.term B => a_5 : hol.term A => __1209_6 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_5) (hol.eq B x_8 b_3)) (hol.and (hol.eq A x_7 a_27_2) (hol.eq B x_8 b_27_1))))) => hol.PROVE_HYP (hol.and (hol.or (hol.or (hol.not (hol.eq A __1209_6 a_5)) (hol.not (hol.eq B __1210_4 b_3))) (hol.eq A __1209_6 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A __1209_6 a_5)) (hol.not (hol.eq B __1210_4 b_3))) (hol.eq B __1210_4 b_27_1))) (hol.or (hol.or (hol.not (hol.eq A __1209_6 a_5)) (hol.not (hol.eq B __1210_4 b_3))) (hol.eq A __1209_6 a_27_2)) (thm_2000 B A b_27_1 a_27_2 b_3 __1210_4 a_5 __1209_6 hyp_1) (hyp_2 : hol.proof (hol.and (hol.or (hol.or (hol.not (hol.eq A __1209_6 a_5)) (hol.not (hol.eq B __1210_4 b_3))) (hol.eq A __1209_6 a_27_2)) (hol.or (hol.or (hol.not (hol.eq A __1209_6 a_5)) (hol.not (hol.eq B __1210_4 b_3))) (hol.eq B __1210_4 b_27_1))) => thm_2001 B A b_27_1 a_27_2 b_3 __1210_4 a_5 __1209_6 hyp_2).

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) ((Data.Bool.\/ (Data.Bool.~ ((= _1210) b))) ((= _1209) a'))) ;)

(; dict ;)

def thm_2003 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> __1210_4 : hol.term B -> a_5 : hol.term A -> __1209_6 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_5) (hol.eq B x_8 b_3)) (hol.and (hol.eq A x_7 a_27_2) (hol.eq B x_8 b_27_1))))) -> hol.proof (hol.or (hol.not (hol.eq A __1209_6 a_5)) (hol.or (hol.not (hol.eq B __1210_4 b_3)) (hol.eq A __1209_6 a_27_2))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => __1210_4 : hol.term B => a_5 : hol.term A => __1209_6 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_5) (hol.eq B x_8 b_3)) (hol.and (hol.eq A x_7 a_27_2) (hol.eq B x_8 b_27_1))))) => hol.EQ_MP (hol.or (hol.or (hol.not (hol.eq A __1209_6 a_5)) (hol.not (hol.eq B __1210_4 b_3))) (hol.eq A __1209_6 a_27_2)) (hol.or (hol.not (hol.eq A __1209_6 a_5)) (hol.or (hol.not (hol.eq B __1210_4 b_3)) (hol.eq A __1209_6 a_27_2))) (thm_1998 B A a_27_2 b_3 __1210_4 a_5 __1209_6) (thm_2002 B A b_27_1 a_27_2 b_3 __1210_4 a_5 __1209_6 hyp_1).

(; Theorem: |- ((Data.Bool.\/ ((= _1209) a')) ((Data.Bool.\/ (Data.Bool.~ ((= _1209) a))) (Data.Bool.~ ((= _1210) b)))) ;)

(; dict ;)

def thm_2004 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> __1210_3 : hol.term B -> a_4 : hol.term A -> a_27_5 : hol.term A -> __1209_6 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_4) (hol.eq B x_8 b_2)) (hol.and (hol.eq A x_7 a_27_5) (hol.eq B x_8 b_27_1))))) -> hol.proof (hol.or (hol.eq A __1209_6 a_27_5) (hol.or (hol.not (hol.eq A __1209_6 a_4)) (hol.not (hol.eq B __1210_3 b_2)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => __1210_3 : hol.term B => a_4 : hol.term A => a_27_5 : hol.term A => __1209_6 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_4) (hol.eq B x_8 b_2)) (hol.and (hol.eq A x_7 a_27_5) (hol.eq B x_8 b_27_1))))) => hol.EQ_MP (hol.or (hol.not (hol.eq A __1209_6 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_6 a_27_5))) (hol.or (hol.eq A __1209_6 a_27_5) (hol.or (hol.not (hol.eq A __1209_6 a_4)) (hol.not (hol.eq B __1210_3 b_2)))) (hol.EQ_MP hol.true (hol.eq hol.bool (hol.or (hol.not (hol.eq A __1209_6 a_4)) (hol.or (hol.not (hol.eq B __1210_3 b_2)) (hol.eq A __1209_6 a_27_5))) (hol.or (hol.eq A __1209_6 a_27_5) (hol.or (hol.not (hol.eq A __1209_6 a_4)) (hol.not (hol.eq B __1210_3 b_2))))) (thm_1990 B A a_27_5 b_2 __1210_3 a_4 __1209_6) thm_5) (thm_2003 B A b_27_1 a_27_5 b_2 __1210_3 a_4 __1209_6 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((= _1209) a)) ((= _1210) b))) ((= _1209) a')) ;)

(; dict ;)

def thm_2005 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> __1210_4 : hol.term B -> a_5 : hol.term A -> __1209_6 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_5) (hol.eq B x_8 b_3)) (hol.and (hol.eq A x_7 a_27_2) (hol.eq B x_8 b_27_1))))) -> hol.proof (hol.imp (hol.and (hol.eq A __1209_6 a_5) (hol.eq B __1210_4 b_3)) (hol.eq A __1209_6 a_27_2)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => __1210_4 : hol.term B => a_5 : hol.term A => __1209_6 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_5) (hol.eq B x_8 b_3)) (hol.and (hol.eq A x_7 a_27_2) (hol.eq B x_8 b_27_1))))) => hol.EQ_MP (hol.or (hol.eq A __1209_6 a_27_2) (hol.or (hol.not (hol.eq A __1209_6 a_5)) (hol.not (hol.eq B __1210_4 b_3)))) (hol.imp (hol.and (hol.eq A __1209_6 a_5) (hol.eq B __1210_4 b_3)) (hol.eq A __1209_6 a_27_2)) (thm_1979 B A b_3 __1210_4 a_5 a_27_2 __1209_6) (thm_2004 B A b_27_1 b_3 __1210_4 a_5 a_27_2 __1209_6 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((= a) a)) ((= b) b))) ((= a) a')) ;)

(; dict ;)

def thm_2006 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) -> hol.proof (hol.imp (hol.and (hol.eq A a_4 a_4) (hol.eq B b_3 b_3)) (hol.eq A a_4 a_27_2)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) => (B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => __1210_4 : hol.term B => a_5 : hol.term A => __1209_6 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_5) (hol.eq B x_8 b_3)) (hol.and (hol.eq A x_7 a_27_2) (hol.eq B x_8 b_27_1))))) => (B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => __1210_4 : hol.term B => a_5 : hol.term A => __1209_6 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.forall B (x_8 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_7 a_5) (hol.eq B x_8 b_3)) (hol.and (hol.eq A x_7 a_27_2) (hol.eq B x_8 b_27_1))))) => hol.EQ_MP (hol.imp (hol.and (hol.eq A __1209_6 a_5) (hol.eq B __1210_4 b_3)) (hol.eq A __1209_6 a_27_2)) (hol.imp (hol.and (hol.eq A __1209_6 a_5) (hol.eq B __1210_4 b_3)) (hol.eq A __1209_6 a_27_2)) (thm_1968 B A a_27_2 b_3 __1210_4 a_5 __1209_6) (thm_2005 B A b_27_1 a_27_2 b_3 __1210_4 a_5 __1209_6 hyp_1)) B A b_27_1 a_27_2 b_3 __1210_4 a_5 __1209_6 hyp_1) B A b_27_1 a_27_2 b_3 b_3 a_4 a_4 hyp_1.

(; Theorem: |- ((= a) a') ;)

(; dict ;)

def thm_2007 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) -> hol.proof (hol.eq A a_4 a_27_3) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) => thm_2006 B A b_27_1 a_27_3 b_2 a_4 hyp_1 (thm_1949 B A b_2 a_4).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((= a) a'))) ((= a) a')) ;)

(; dict ;)

def thm_2008 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) -> hol.proof (hol.imp (hol.not (hol.eq A a_4 a_27_3)) (hol.eq A a_4 a_27_3)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) => hyp_2 : hol.proof (hol.not (hol.eq A a_4 a_27_3)) => hol.EQ_MP (hol.eq A a_4 a_27_3) (hol.eq A a_4 a_27_3) (thm_626 A a_27_3 a_4) (thm_2007 B A b_27_1 b_2 a_27_3 a_4 hyp_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_2009 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) -> hyp_2 : hol.proof (hol.not (hol.eq A a_4 a_27_2)) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) => hyp_2 : hol.proof (hol.not (hol.eq A a_4 a_27_2)) => hol.EQ_MP (hol.imp (hol.eq A a_4 a_27_2) hol.false) (hol.imp (hol.eq A a_4 a_27_2) hol.false) (thm_1962 A a_27_2 a_4) (thm_1965 A a_27_2 a_4 hyp_2) (hol.EQ_MP (hol.imp (hol.not (hol.eq A a_4 a_27_2)) (hol.eq A a_4 a_27_2)) (hol.eq A a_4 a_27_2) (thm_1966 A a_27_2 a_4) (thm_2008 B A b_27_1 b_3 a_27_2 a_4 hyp_1)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_2010 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) -> hyp_2 : hol.proof (hol.not (hol.eq A a_4 a_27_2)) -> hol.proof (hol.imp (hol.not hol.false) hol.false) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) => hyp_2 : hol.proof (hol.not (hol.eq A a_4 a_27_2)) => hyp_3 : hol.proof (hol.not hol.false) => hol.EQ_MP hol.false hol.false thm_300 (thm_2009 B A b_27_1 a_27_2 b_3 a_4 hyp_1 hyp_2).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_2011 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) -> hyp_2 : hol.proof (hol.not (hol.eq A a_4 a_27_2)) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) => hyp_2 : hol.proof (hol.not (hol.eq A a_4 a_27_2)) => hol.PROVE_HYP (hol.not (hol.eq A a_4 a_27_2)) hol.false (thm_1960 A a_27_2 a_4 hyp_2) (hyp_3 : hol.proof (hol.not (hol.eq A a_4 a_27_2)) => hol.EQ_MP (hol.imp (hol.not hol.false) hol.false) hol.false thm_250 (thm_2010 B A b_27_1 a_27_2 b_3 a_4 hyp_1 hyp_3)).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_2012 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) -> hyp_2 : hol.proof (hol.not (hol.eq A a_4 a_27_2)) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) => hyp_2 : hol.proof (hol.not (hol.eq A a_4 a_27_2)) => hol.PROVE_HYP (hol.not (hol.eq A a_4 a_27_2)) hol.false (thm_1960 A a_27_2 a_4 hyp_2) (hyp_3 : hol.proof (hol.not (hol.eq A a_4 a_27_2)) => thm_2011 B A b_27_1 a_27_2 b_3 a_4 hyp_1 hyp_3).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_2013 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) -> hyp_2 : hol.proof (hol.not (hol.eq A a_4 a_27_2)) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) => hyp_2 : hol.proof (hol.not (hol.eq A a_4 a_27_2)) => hol.PROVE_HYP (hol.not (hol.eq A a_4 a_27_2)) hol.false (hol.EQ_MP (hol.not (hol.eq A a_4 a_27_2)) (hol.not (hol.eq A a_4 a_27_2)) (thm_1959 A a_27_2 a_4) (thm_1960 A a_27_2 a_4 hyp_2)) (hyp_3 : hol.proof (hol.not (hol.eq A a_4 a_27_2)) => thm_2012 B A b_27_1 a_27_2 b_3 a_4 hyp_1 hyp_3).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((= a) a'))) Data.Bool.F) ;)

(; dict ;)

def thm_2014 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) -> hol.proof (hol.imp (hol.not (hol.eq A a_4 a_27_3)) hol.false) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) => hyp_2 : hol.proof (hol.not (hol.eq A a_4 a_27_3)) => thm_2013 B A b_27_1 a_27_3 b_2 a_4 hyp_1 hyp_2.

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.~ ((= a) a')))) (Data.Bool.\/ (Data.Bool.~ ((= a) a')))) ;)

(; dict ;)

def thm_2015 : A : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.not (hol.eq A a_2 a_27_1))) (hol.or (hol.not (hol.eq A a_2 a_27_1)))) :=
  A : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.not (hol.eq A a_2 a_27_1)) (hol.not (hol.eq A a_2 a_27_1)) thm_431 (thm_1958 A a_27_1 a_2).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((= a) a'))) (Data.Bool.~ ((= b) b')))) ((Data.Bool.\/ (Data.Bool.~ ((= a) a'))) (Data.Bool.~ ((= b) b')))) ;)

(; dict ;)

def thm_2016 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.not (hol.eq A a_4 a_27_3)) (hol.not (hol.eq B b_2 b_27_1))) (hol.or (hol.not (hol.eq A a_4 a_27_3)) (hol.not (hol.eq B b_2 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.or (hol.not (hol.eq A a_4 a_27_3))) (hol.or (hol.not (hol.eq A a_4 a_27_3))) (hol.not (hol.eq B b_2 b_27_1)) (hol.not (hol.eq B b_2 b_27_1)) (thm_2015 A a_27_3 a_4) (thm_1629 B b_27_1 b_2).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ ((= a) a')) ((= b) b')))) ((Data.Bool.\/ (Data.Bool.~ ((= a) a'))) (Data.Bool.~ ((= b) b')))) ;)

(; dict ;)

def thm_2017 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) (hol.or (hol.not (hol.eq A a_4 a_27_3)) (hol.not (hol.eq B b_2 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_1881 q_1 p_2) (hol.eq B b_2 b_27_1) (hol.eq A a_4 a_27_3).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ ((= a) a')) ((= b) b')))) ((Data.Bool.\/ (Data.Bool.~ ((= a) a'))) (Data.Bool.~ ((= b) b')))) ;)

(; dict ;)

def thm_2018 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) (hol.or (hol.not (hol.eq A a_4 a_27_3)) (hol.not (hol.eq B b_2 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hol.TRANS hol.bool (hol.not (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) (hol.or (hol.not (hol.eq A a_4 a_27_3)) (hol.not (hol.eq B b_2 b_27_1))) (hol.or (hol.not (hol.eq A a_4 a_27_3)) (hol.not (hol.eq B b_2 b_27_1))) (thm_2017 B A b_27_1 b_2 a_27_3 a_4) (thm_2016 B A b_27_1 b_2 a_27_3 a_4).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ ((= a) a')) ((= b) b')))) ((Data.Bool.\/ (Data.Bool.~ ((= a) a'))) (Data.Bool.~ ((= b) b')))) ;)

(; dict ;)

def thm_2019 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) (hol.or (hol.not (hol.eq A a_4 a_27_3)) (hol.not (hol.eq B b_2 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hol.TRANS hol.bool (hol.not (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) (hol.or (hol.not (hol.eq A a_4 a_27_3)) (hol.not (hol.eq B b_2 b_27_1))) (hol.or (hol.not (hol.eq A a_4 a_27_3)) (hol.not (hol.eq B b_2 b_27_1))) (thm_2018 B A b_27_1 b_2 a_27_3 a_4) (thm_2016 B A b_27_1 b_2 a_27_3 a_4).

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.~ ((= a) a'))) (Data.Bool.~ ((= b) b'))) ;)

(; dict ;)

def thm_2020 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) -> hol.proof (hol.or (hol.not (hol.eq A a_4 a_27_3)) (hol.not (hol.eq B b_2 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) => hol.EQ_MP (hol.not (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) (hol.or (hol.not (hol.eq A a_4 a_27_3)) (hol.not (hol.eq B b_2 b_27_1))) (thm_2019 B A b_27_1 b_2 a_27_3 a_4) (thm_1628 B A b_27_1 b_2 a_27_3 a_4 hyp_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_2021 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.imp (hol.not (hol.eq A a_4 a_27_3)) hol.false) -> hyp_2 : hol.proof (hol.imp (hol.not (hol.eq B b_2 b_27_1)) hol.false) -> hyp_3 : hol.proof (hol.or (hol.not (hol.eq A a_4 a_27_3)) (hol.not (hol.eq B b_2 b_27_1))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.imp (hol.not (hol.eq A a_4 a_27_3)) hol.false) => hyp_2 : hol.proof (hol.imp (hol.not (hol.eq B b_2 b_27_1)) hol.false) => hyp_3 : hol.proof (hol.or (hol.not (hol.eq A a_4 a_27_3)) (hol.not (hol.eq B b_2 b_27_1))) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.not (hol.eq B b_2 b_27_1)) (hol.not (hol.eq A a_4 a_27_3)) hol.false hyp_1 hyp_2 hyp_3.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_2022 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) -> hyp_2 : hol.proof (hol.imp (hol.not (hol.eq A a_4 a_27_3)) hol.false) -> hyp_3 : hol.proof (hol.imp (hol.not (hol.eq B b_2 b_27_1)) hol.false) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) => hyp_2 : hol.proof (hol.imp (hol.not (hol.eq A a_4 a_27_3)) hol.false) => hyp_3 : hol.proof (hol.imp (hol.not (hol.eq B b_2 b_27_1)) hol.false) => hol.PROVE_HYP (hol.or (hol.not (hol.eq A a_4 a_27_3)) (hol.not (hol.eq B b_2 b_27_1))) hol.false (hol.EQ_MP (hol.or (hol.not (hol.eq A a_4 a_27_3)) (hol.not (hol.eq B b_2 b_27_1))) (hol.or (hol.not (hol.eq A a_4 a_27_3)) (hol.not (hol.eq B b_2 b_27_1))) (thm_2016 B A b_27_1 b_2 a_27_3 a_4) (thm_2020 B A b_27_1 b_2 a_27_3 a_4 hyp_1)) (hyp_4 : hol.proof (hol.or (hol.not (hol.eq A a_4 a_27_3)) (hol.not (hol.eq B b_2 b_27_1))) => thm_2021 B A b_27_1 b_2 a_27_3 a_4 hyp_2 hyp_3 hyp_4).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_2023 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) -> hyp_2 : hol.proof (hol.not (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) -> hyp_3 : hol.proof (hol.imp (hol.not (hol.eq B b_3 b_27_1)) hol.false) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) => hyp_2 : hol.proof (hol.not (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) => hyp_3 : hol.proof (hol.imp (hol.not (hol.eq B b_3 b_27_1)) hol.false) => hol.PROVE_HYP (hol.imp (hol.not (hol.eq A a_4 a_27_2)) hol.false) hol.false (thm_2014 B A b_27_1 b_3 a_27_2 a_4 hyp_1) (hyp_4 : hol.proof (hol.imp (hol.not (hol.eq A a_4 a_27_2)) hol.false) => thm_2022 B A b_27_1 b_3 a_27_2 a_4 hyp_2 hyp_4 hyp_3).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_2024 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) -> hyp_2 : hol.proof (hol.not (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) => hyp_2 : hol.proof (hol.not (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) => hol.PROVE_HYP (hol.imp (hol.not (hol.eq B b_3 b_27_1)) hol.false) hol.false (thm_1957 A B a_27_2 a_4 b_27_1 b_3 hyp_1) (hyp_3 : hol.proof (hol.imp (hol.not (hol.eq B b_3 b_27_1)) hol.false) => thm_2023 B A b_27_1 a_27_2 b_3 a_4 hyp_1 hyp_2 hyp_3).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_2025 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) -> hyp_2 : hol.proof (hol.not (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) => hyp_2 : hol.proof (hol.not (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) => hol.PROVE_HYP (hol.not (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) hol.false (thm_1628 B A b_27_1 b_3 a_27_2 a_4 hyp_2) (hyp_3 : hol.proof (hol.not (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) => thm_2024 B A b_27_1 a_27_2 b_3 a_4 hyp_1 hyp_3).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((Data.Bool./\ ((= a) a')) ((= b) b')))) Data.Bool.F) ;)

(; dict ;)

def thm_2026 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) -> hol.proof (hol.imp (hol.not (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) hol.false) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) => hyp_2 : hol.proof (hol.not (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) => thm_2025 B A b_27_1 a_27_3 b_2 a_4 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ ((= a) a')) ((= b) b')) ;)

(; dict ;)

def thm_2027 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) -> hol.proof (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) => hol.EQ_MP (hol.imp (hol.not (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))) hol.false) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) (thm_1627 B A b_27_1 b_2 a_27_3 a_4) (thm_2026 B A b_27_1 b_2 a_27_3 a_4 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))) ;)

(; dict ;)

def thm_2028 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) => thm_2027 B A b_27_1 b_3 a_27_2 a_4 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ;)

(; dict ;)

def thm_2029 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> hol.proof (hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => thm_2028 B A b_27_1 a_27_2 b_3 a_4.

(; Theorem: |- (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) ;)

(; dict ;)

def thm_2030 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> hol.proof (hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => hol.EQ_MP (hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) (hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) (thm_1625 B A b_27_1 a_27_3 b_2) (thm_2029 B A b_27_1 a_27_3 b_2).

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))) ;)

(; dict ;)

def thm_2031 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> hol.proof (hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => hol.EQ_MP (hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))) (hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))) (thm_1622 B A b_27_1 b_2) (thm_2030 B A b_27_1 b_2).

(; Theorem: |- (Data.Bool.! \lambda b'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))))) ;)

(; dict ;)

def thm_2032 : A : hol.type -> B : hol.type -> hol.proof (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => hol.EQ_MP (hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))))) (hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))))) (thm_1619 A B b_27_1) (thm_2031 A B b_27_1).

(; Theorem: |- (Data.Bool.! \lambda b'. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F))))) ;)

(; dict ;)

def thm_2033 : A : hol.type -> B : hol.type -> hol.proof (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false))))) :=
  A : hol.type => B : hol.type => hol.EQ_MP (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))))) (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false))))) (thm_1616 A B) (hol.EQ_MP (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))))) (hol.forall B (b_27_1 : hol.term B => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1))))))) (thm_1611 A B) (thm_2032 A B)).

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)))) ;)

(; dict ;)

def thm_2034 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> hol.proof (hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false)))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => thm_2033 A B b_27_1.

(; Theorem: |- (Data.Bool.! \lambda a'. (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F))) ;)

(; dict ;)

def thm_2035 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> hol.proof (hol.forall A (a_27_3 : hol.term A => hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_2)) (hol.and (hol.eq A x_5 a_27_3) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)))) hol.false))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => thm_2034 A B b_27_1 b_2.

(; Theorem: |- (Data.Bool.! \lambda a. ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F)) ;)

(; dict ;)

def thm_2036 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> hol.proof (hol.forall A (a_4 : hol.term A => hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => thm_2035 B A b_27_1 b_3 a_27_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda x. ((= ((Data.Bool./\ ((= x) a)) ((= x) b))) ((Data.Bool./\ ((= x) a')) ((= x) b')))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) Data.Bool.F) ;)

(; dict ;)

def thm_2037 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => thm_2036 B A b_27_1 a_27_2 b_3 a_4.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_2038 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) => hol.EQ_MP (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (thm_1594 B A b_27_1 a_27_2 b_3 a_4) ((B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.EQ_MP (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) (hol.imp (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false)) (thm_1596 B A b_27_1 a_27_2 b_3 a_4) (thm_1601 B A b_27_1 a_27_2 b_3 a_4 (thm_1602 B A b_27_1 a_27_2 b_3 a_4))) B A b_27_1 a_27_2 b_3 a_4 (thm_2037 B A b_27_1 a_27_2 b_3 a_4)) (thm_1592 B A b_27_1 a_27_2 b_3 a_4 hyp_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_2039 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) -> hol.proof hol.false :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) => hol.PROVE_HYP (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false (thm_1592 B A b_27_1 a_27_2 b_3 a_4 hyp_1) (hyp_2 : hol.proof (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) => thm_2038 B A b_27_1 a_27_2 b_3 a_4 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((= ((HOLLight.mk_pair a) b)) ((HOLLight.mk_pair a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b'))) ;)

(; dict ;)

def thm_2040 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_4 b_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.EQ_MP (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_4 b_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (thm_1589 B A b_27_1 a_27_2 b_3 a_4) (hol.EQ_MP (hol.imp (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) hol.false) (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (thm_1591 B A b_27_1 a_27_2 b_3 a_4) (hyp_1 : hol.proof (hol.not (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (x_6 : hol.term B => hol.eq hol.bool (hol.and (hol.eq A x_5 a_4) (hol.eq B x_6 b_3)) (hol.and (hol.eq A x_5 a_27_2) (hol.eq B x_6 b_27_1))))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)))) => thm_2039 B A b_27_1 a_27_2 b_3 a_4 hyp_1)).

(; Theorem: |- ((Data.Bool.==> ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair a') b'))))) ((Data.Bool./\ ((= a) a')) ((= b) b'))) ;)

(; dict ;)

def thm_2041 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3))) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1)))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.EQ_MP (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2Emk__pair B A a_4 b_3) (HOLLight_2Emk__pair B A a_27_2 b_27_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3))) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1)))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (thm_1517 B A b_27_1 a_27_2 b_3 a_4) (thm_2040 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a') b'))) ;)

(; dict ;)

def thm_2042 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1))) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1))) => hyp_1.

(; Theorem: |- ((= (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) (HOLLight.REP_prod (HOLLight.ABS_prod ((HOLLight.mk_pair a') b')))) ;)

(; dict ;)

def thm_2043 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1))) -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3))) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1)))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1))) => hol.APP_THM (Data_2EPair_2E_2A A B) (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A) (HOLLight_2EREP__prod B A) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1)) (thm_764 B A) (thm_2042 B A b_27_1 a_27_2 b_3 a_4 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= a) a')) ((= b) b')) ;)

(; dict ;)

def thm_2044 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_2)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_3 b_27_1))) -> hol.proof (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_2)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_3 b_27_1))) => thm_2041 B A b_27_1 a_27_3 b_2 a_4 (thm_2043 B A b_27_1 a_27_3 b_2 a_4 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a') b')))) ((Data.Bool./\ ((= a) a')) ((= b) b'))) ;)

(; dict ;)

def thm_2045 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1))) => thm_2044 B A b_27_1 b_3 a_27_2 a_4 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b'))) ;)

(; dict ;)

def thm_2046 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.EQ_MP (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_2 b_27_1))) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) (thm_713 B A b_27_1 a_27_2 b_3 a_4) (thm_2045 B A b_27_1 a_27_2 b_3 a_4).

(; Theorem: |- ((= ((Data.Pair., a) b)) ((Data.Pair., a') b')) ;)

(; dict ;)

def thm_2047 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) => hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= a) a')) ((= b) b')) ;)

(; dict ;)

def thm_2048 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)) -> hol.proof (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 b_27_1)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_1)) => thm_2046 B A b_27_1 a_27_3 b_2 a_4 (thm_2047 B A b_27_1 a_27_3 b_2 a_4 hyp_1).

(; Theorem: |- ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b'))) ;)

(; dict ;)

def thm_2049 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => hol.PROP_EXT (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) => hol.EQ_MP (hol.imp (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) hol.false) (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1))) (thm_588 B A b_27_1 b_3 a_27_2 a_4) (hyp_2 : hol.proof (hol.not (hol.imp (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 b_27_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)))) => thm_694 B A b_27_1 b_3 a_27_2 a_4 hyp_2) (thm_631 B A b_27_1 b_3 a_27_2 a_4 hyp_1)) (hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 b_27_1)) => thm_2048 B A b_27_1 b_3 a_27_2 a_4 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b')))) ;)

(; dict ;)

def thm_2050 : A : hol.type -> B : hol.type -> a_27_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_1 b_27_4)) (hol.and (hol.eq A a_3 a_27_1) (hol.eq B b_2 b_27_4)))) :=
  A : hol.type => B : hol.type => a_27_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => b_27_4 : hol.term B => thm_2049 B A b_27_4 a_27_1 b_2 a_3.

(; Theorem: |- (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))) ;)

(; dict ;)

def thm_2051 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_2 a_27_3) (hol.eq B b_1 b_27_4))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => a_27_3 : hol.term A => hol.EQ_MP (hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_2 a_27_3) (hol.eq B b_1 b_27_4)))) (hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_2 a_27_3) (hol.eq B b_1 b_27_4)))) (thm_586 A B a_27_3 b_1 a_2) (thm_2050 A B a_27_3 b_1 a_2).

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b')))))) ;)

(; dict ;)

def thm_2052 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4)))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => b_2 : hol.term B => hol.EQ_MP (hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4))))) (hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4))))) (thm_583 B A b_2 a_1) (thm_2051 B A b_2 a_1).

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))))) ;)

(; dict ;)

def thm_2053 : B : hol.type -> A : hol.type -> hol.proof (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4))))))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => hol.EQ_MP (hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4)))))) (hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4)))))) (thm_580 A B a_1) (thm_2052 A B a_1).

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.! \lambda a'. (Data.Bool.! \lambda b'. ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) ((Data.Bool./\ ((= a) a')) ((= b) b'))))))) ;)

(; thm ;)

def thm_2054 : B : hol.type -> A : hol.type -> hol.proof (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4))))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4))))))) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.forall A (a_27_3 : hol.term A => hol.forall B (b_27_4 : hol.term B => hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_1 b_2) (Data_2EPair_2E_2C B A a_27_3 b_27_4)) (hol.and (hol.eq A a_1 a_27_3) (hol.eq B b_2 b_27_4))))))) (thm_577 B A) (thm_2053 B A).

(; Theorem: |- ((= \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b))))) \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b))))) ;)

(; dict ;)

def thm_2055 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (x_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3)))) (x_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (x_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3)))).

(; Theorem: |- ((= \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b))))) \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b))))) ;)

(; dict ;)

def thm_2056 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (x_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3)))) (x_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (x_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3)))) (x_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3)))) (x_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3)))) (thm_2055 B A) (thm_2055 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b)))))) ;)

(; dict ;)

def thm_2057 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))))) (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (Data_2EPair_2E_2A A B) hol.bool) hol.bool (hol.forall (Data_2EPair_2E_2A A B)) (hol.forall (Data_2EPair_2E_2A A B)) (x_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3)))) (x_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3)))) (thm_762 B A) (thm_2056 B A).

(; Theorem: |- ((= (= x)) (= x)) ;)

(; dict ;)

def thm_2058 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (hol.eq (Data_2EPair_2E_2A A B) x_1) (hol.eq (Data_2EPair_2E_2A A B) x_1)) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.REFL (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (hol.eq (Data_2EPair_2E_2A A B) x_1).

(; Theorem: |- ((= ((= x) ((Data.Pair., a) b))) ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_2059 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C B A a_2 b_1)) (hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM (Data_2EPair_2E_2A A B) hol.bool (hol.eq (Data_2EPair_2E_2A A B) x_3) (hol.eq (Data_2EPair_2E_2A A B) x_3) (Data_2EPair_2E_2C B A a_2 b_1) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (thm_2058 B A x_3) (thm_707 B A b_1 a_2).

(; Theorem: |- ((= \lambda b. ((= x) ((Data.Pair., a) b))) \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_2060 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (hol.arr B hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C B A a_1 b_3)) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_1 b_3)))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.ABS_THM B hol.bool (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C B A a_1 b_3)) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_1 b_3))) (b_3 : hol.term B => thm_2059 B A b_3 a_1 x_2).

(; Theorem: |- ((= (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b)))) (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_2061 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C B A a_1 b_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_1 b_3))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C B A a_1 b_3)) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_1 b_3))) (thm_1131 B) (thm_2060 A B a_1 x_2).

(; Theorem: |- ((= \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b)))) \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_2062 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.ABS_THM A hol.bool (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3)))) (a_2 : hol.term A => thm_2061 A B a_2 x_1).

(; Theorem: |- ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b))))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_2063 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3)))) (thm_350 A) (thm_2062 B A x_1).

(; Theorem: |- ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b))))) ;)

(; dict ;)

def thm_2064 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3))))) (thm_2063 B A x_1).

(; Theorem: |- ((= (= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b)))))) (= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_2065 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3))))).

(; Theorem: |- ((= (HOLLight.ABS_prod (HOLLight.REP_prod x))) x) ;)

(; dict ;)

def thm_2066 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1)) x_1) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => (B : hol.type => A : hol.type => a_1 : hol.term (Data_2EPair_2E_2A A B) => thm_572 B A a_1) B A x_1.

(; Theorem: |- ((= (HOLLight.REP_prod (HOLLight.ABS_prod (HOLLight.REP_prod x)))) (HOLLight.REP_prod x)) ;)

(; dict ;)

def thm_2067 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1))) (HOLLight_2EREP__prod B A x_1)) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM (Data_2EPair_2E_2A A B) (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A) (HOLLight_2EREP__prod B A) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1)) x_1 (thm_764 B A) (thm_2066 B A x_1).

(; Theorem: |- ((= (= (HOLLight.REP_prod (HOLLight.ABS_prod (HOLLight.REP_prod x))))) (= (HOLLight.REP_prod x))) ;)

(; dict ;)

def thm_2068 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM (hol.arr A (hol.arr B hol.bool)) (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (hol.eq (hol.arr A (hol.arr B hol.bool))) (hol.eq (hol.arr A (hol.arr B hol.bool))) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1))) (HOLLight_2EREP__prod B A x_1) (thm_714 B A) (thm_2067 B A x_1).

(; Theorem: |- ((= (HOLLight.REP_prod x)) (HOLLight.REP_prod x)) ;)

(; dict ;)

def thm_2069 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2EREP__prod B A x_1)) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.REFL (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1).

(; Theorem: |- ((= ((= (HOLLight.REP_prod (HOLLight.ABS_prod (HOLLight.REP_prod x)))) (HOLLight.REP_prod x))) ((= (HOLLight.REP_prod x)) (HOLLight.REP_prod x))) ;)

(; dict ;)

def thm_2070 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1))) (HOLLight_2EREP__prod B A x_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2EREP__prod B A x_1))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2EREP__prod B A x_1) (thm_2068 B A x_1) (thm_2069 B A x_1).

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_2071 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) x_1 x_1) hol.true) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (A : hol.type => x_1 : hol.term A => thm_179 A x_1) (hol.arr A (hol.arr B hol.bool)) x_1.

(; Theorem: |- ((= ((= (HOLLight.REP_prod x)) (HOLLight.REP_prod x))) Data.Bool.T) ;)

(; dict ;)

def thm_2072 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2EREP__prod B A x_1)) hol.true) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => (B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_2071 B A x_1) B A (HOLLight_2EREP__prod B A x_1).

(; Theorem: |- ((= ((= (HOLLight.REP_prod (HOLLight.ABS_prod (HOLLight.REP_prod x)))) (HOLLight.REP_prod x))) Data.Bool.T) ;)

(; dict ;)

def thm_2073 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1))) (HOLLight_2EREP__prod B A x_1)) hol.true) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.TRANS hol.bool (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1))) (HOLLight_2EREP__prod B A x_1)) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2EREP__prod B A x_1)) hol.true (thm_2070 B A x_1) (thm_2072 B A x_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod (HOLLight.REP_prod x)))) (HOLLight.REP_prod x)))) ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))))) Data.Bool.T)) ;)

(; dict ;)

def thm_2074 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1))) (HOLLight_2EREP__prod B A x_1))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) hol.true)) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3))))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1))) (HOLLight_2EREP__prod B A x_1)) hol.true (thm_2065 B A x_1) (thm_2073 B A x_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))))) Data.Bool.T)) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_2075 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) hol.true) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => (t_1 : hol.term hol.bool => thm_227 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod (HOLLight.REP_prod x)))) (HOLLight.REP_prod x)))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_2076 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1))) (HOLLight_2EREP__prod B A x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1))) (HOLLight_2EREP__prod B A x_1))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) hol.true) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) (thm_2074 B A x_1) (thm_2075 B A x_1).

(; Theorem: |- ((= (Data.Bool.==> ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod (HOLLight.REP_prod x)))) (HOLLight.REP_prod x))))) (Data.Bool.==> (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_2077 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1))) (HOLLight_2EREP__prod B A x_1)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1))) (HOLLight_2EREP__prod B A x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) thm_387 (thm_2076 B A x_1).

(; Theorem: |- ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_2078 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.REFL hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3))))).

(; Theorem: |- ((= ((Data.Bool.==> ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod (HOLLight.REP_prod x)))) (HOLLight.REP_prod x)))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))))) ((Data.Bool.==> (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))))) ;)

(; dict ;)

def thm_2079 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1))) (HOLLight_2EREP__prod B A x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3))))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1))) (HOLLight_2EREP__prod B A x_1)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3))))) (thm_2077 B A x_1) (thm_2078 B A x_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))))) ((Data.Bool.==> ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod (HOLLight.REP_prod x)))) (HOLLight.REP_prod x)))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))))) ;)

(; dict ;)

def thm_2080 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1))) (HOLLight_2EREP__prod B A x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3))))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.SYM hol.bool (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1))) (HOLLight_2EREP__prod B A x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3)))))) (thm_2079 B A x_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))) x)) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))))) ((Data.Bool.==> (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))))) ;)

(; dict ;)

def thm_2081 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.imp (hol.forall A (x_2 : hol.term A => hol.imp ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_3 b_4))) x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_3 b_4))))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3))))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_757 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3))))) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3))).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b)) x)) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))))) ((Data.Bool.==> (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b)))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))))) ;)

(; dict ;)

def thm_2082 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.imp (hol.forall B (x_3 : hol.term B => hol.imp ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_1 b_4)) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5))))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_1 b_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_3 b_4))))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_757 A Q_1 P_2) B (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_3 b_4))))) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_1 b_3)).

(; Theorem: |- ((= (= (HOLLight.ABS_prod (HOLLight.REP_prod x)))) (= x)) ;)

(; dict ;)

def thm_2083 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1))) (hol.eq (Data_2EPair_2E_2A A B) x_1)) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM (Data_2EPair_2E_2A A B) (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (hol.eq (Data_2EPair_2E_2A A B)) (hol.eq (Data_2EPair_2E_2A A B)) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1)) x_1 (thm_695 B A) (thm_2066 B A x_1).

(; Theorem: |- ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) ;)

(; dict ;)

def thm_2084 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.REFL (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)).

(; Theorem: |- ((= ((= (HOLLight.ABS_prod (HOLLight.REP_prod x))) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_2085 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) (hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM (Data_2EPair_2E_2A A B) hol.bool (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_3))) (hol.eq (Data_2EPair_2E_2A A B) x_3) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (thm_2083 B A x_3) (thm_2084 B A b_1 a_2).

(; Theorem: |- ((= (Data.Bool.==> ((= (HOLLight.ABS_prod (HOLLight.REP_prod x))) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) (Data.Bool.==> ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_2086 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)))) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) (hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) thm_387 (thm_2085 B A b_1 a_2 x_3).

(; Theorem: |- ((= ((Data.Bool.==> ((= (HOLLight.ABS_prod (HOLLight.REP_prod x))) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))))) ((Data.Bool.==> ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))))) ;)

(; dict ;)

def thm_2087 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5)))))) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5))))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)))) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5))))) (thm_2086 B A b_1 a_2 x_3) (thm_2078 B A x_3).

(; Theorem: |- ((= ((Data.Bool.==> ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))))) ((Data.Bool.==> ((= (HOLLight.ABS_prod (HOLLight.REP_prod x))) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))))) ;)

(; dict ;)

def thm_2088 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5)))))) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5))))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.SYM hol.bool (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5)))))) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5)))))) (thm_2087 B A b_1 a_2 x_3).

(; Theorem: |- ((= (= (\lambda _1229. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= _1229) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) x))) (= (\lambda _1229. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= _1229) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) x))) ;)

(; dict ;)

def thm_2089 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__1229_2 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_2 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_3 b_4))))) x_1)) (hol.eq hol.bool ((__1229_2 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_2 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_3 b_4))))) x_1))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__1229_2 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_2 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_3 b_4))))) x_1)).

(; Theorem: |- ((= (\lambda _1229. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= _1229) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) (Data.Bool.? \lambda a_1. (Data.Bool.? \lambda b_1. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a_1) b_1)))))) ;)

(; dict ;)

def thm_2090 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool ((__1229_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5))))) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a__1_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b__1_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a__1_3 b__1_4)))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.BETA_CONV (Data_2EPair_2E_2A A B) hol.bool (__1229_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5))))) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)).

(; Theorem: |- ((= ((= (\lambda _1229. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= _1229) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) x)) (\lambda _1229. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= _1229) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) ((= (\lambda _1229. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= _1229) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) x)) (Data.Bool.? \lambda a_1. (Data.Bool.? \lambda b_1. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a_1) b_1))))))) ;)

(; dict ;)

def thm_2091 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__1229_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_4 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_5 b_6))))) x_3) ((__1229_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_4 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_5 b_6))))) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)))) (hol.eq hol.bool ((__1229_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_4 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_5 b_6))))) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a__1_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b__1_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a__1_4 b__1_5))))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__1229_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_4 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_5 b_6))))) x_3)) (hol.eq hol.bool ((__1229_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_4 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_5 b_6))))) x_3)) ((__1229_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_4 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_5 b_6))))) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a__1_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b__1_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a__1_4 b__1_5))))) (thm_2089 B A x_3) (thm_2090 B A b_1 a_2).

(; Theorem: |- ((= (\lambda _1229. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= _1229) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) x)) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_2092 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool ((__1229_2 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_2 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_3 b_4))))) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.BETA_CONV (Data_2EPair_2E_2A A B) hol.bool (__1229_2 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_2 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_3 b_4))))) x_1.

(; Theorem: |- ((= (= (\lambda _1229. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= _1229) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) x))) (= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))))) ;)

(; dict ;)

def thm_2093 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__1229_2 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_2 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_3 b_4))))) x_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3))))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__1229_2 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_2 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_3 b_4))))) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3))))) thm_119 (thm_2092 B A x_1).

(; Theorem: |- ((= (Data.Bool.? \lambda a'. (Data.Bool.? \lambda b'. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a') b')))))) (Data.Bool.? \lambda a'. (Data.Bool.? \lambda b'. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a') b')))))) ;)

(; dict ;)

def thm_2094 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_3 b_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_3 b_27_4)))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.REFL hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_3 b_27_4))))).

(; Theorem: |- ((= ((= (\lambda _1229. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= _1229) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) x)) (Data.Bool.? \lambda a'. (Data.Bool.? \lambda b'. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a') b'))))))) ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))) (Data.Bool.? \lambda a'. (Data.Bool.? \lambda b'. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a') b'))))))) ;)

(; dict ;)

def thm_2095 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__1229_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_4 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_5 b_6))))) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_4 b_27_5)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_4 b_27_5))))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__1229_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_4 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_5 b_6))))) x_3)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_4 b_27_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_4 b_27_5))))) (thm_2093 B A x_3) (thm_2094 B A b_1 a_2).

(; Theorem: |- ((= ((= (\lambda _1229. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= _1229) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) x)) (\lambda _1229. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= _1229) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))) (Data.Bool.? \lambda a'. (Data.Bool.? \lambda b'. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a') b'))))))) ;)

(; dict ;)

def thm_2096 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__1229_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_4 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_5 b_6))))) x_3) ((__1229_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_4 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_5 b_6))))) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_4 b_27_5))))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.TRANS hol.bool (hol.eq hol.bool ((__1229_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_4 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_5 b_6))))) x_3) ((__1229_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_4 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_5 b_6))))) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)))) (hol.eq hol.bool ((__1229_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_4 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_5 b_6))))) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a__1_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b__1_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a__1_4 b__1_5)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_4 b_27_5)))))) (thm_2091 B A b_1 a_2 x_3) (thm_2095 B A b_1 a_2 x_3).

(; Theorem: |- ((= \lambda _1229. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= _1229) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))) \lambda _1229. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= _1229) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_2097 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (__1229_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3))))) (__1229_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (__1229_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3))))).

(; Theorem: |- ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) ;)

(; dict ;)

def thm_2098 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) => hyp_1.

(; Theorem: |- ((= (\lambda _1229. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= _1229) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) x)) (\lambda _1229. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= _1229) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_2099 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) -> hol.proof (hol.eq hol.bool ((__1229_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_4 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_5 b_6))))) x_3) ((__1229_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_4 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_5 b_6))))) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) => hol.APP_THM (Data_2EPair_2E_2A A B) hol.bool (__1229_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_4 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_5 b_6))))) (__1229_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_4 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_5 b_6))))) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (thm_2097 B A) (thm_2098 B A b_1 a_2 x_3 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))) (Data.Bool.? \lambda a'. (Data.Bool.? \lambda b'. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a') b')))))) ;)

(; dict ;)

def thm_2100 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_4 b_27_5)))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) => hol.EQ_MP (hol.eq hol.bool ((__1229_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_4 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_5 b_6))))) x_3) ((__1229_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_6 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) __1229_4 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_5 b_6))))) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_4 b_27_5)))))) (thm_2096 B A b_1 a_2 x_3) (thm_2099 B A b_1 a_2 x_3 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda a'. (Data.Bool.? \lambda b'. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a') b')))))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_2101 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> b_2 : hol.term B -> a_3 : hol.term A -> hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_3 b_2))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_3 b_2)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_4 b_27_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => b_2 : hol.term B => a_3 : hol.term A => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_3 b_2))) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_3 b_2)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_4 b_27_5))))) (thm_2100 B A b_2 a_3 x_1 hyp_1).

(; Theorem: |- ((= (\lambda a'. (Data.Bool.? \lambda b'. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a') b')))) a)) (Data.Bool.? \lambda b'. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b'))))) ;)

(; dict ;)

def thm_2102 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool ((a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_3 b_27_4)))) a_2) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_27_3))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.BETA_CONV A hol.bool (a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_3 b_27_4)))) a_2.

(; Theorem: |- ((= (Data.Bool.? \lambda b'. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b'))))) (\lambda a'. (Data.Bool.? \lambda b'. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a') b')))) a)) ;)

(; dict ;)

def thm_2103 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_27_3)))) ((a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_3 b_27_4)))) a_2)) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.SYM hol.bool ((a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_3 b_27_4)))) a_2) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_27_3)))) (thm_2102 B A b_1 a_2).

(; Theorem: |- ((= (\lambda b'. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b'))) b)) ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_2104 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool ((b_27_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_27_3))) b_1) (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.BETA_CONV B hol.bool (b_27_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_27_3))) b_1.

(; Theorem: |- ((= ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) (\lambda b'. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b'))) b)) ;)

(; dict ;)

def thm_2105 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) ((b_27_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_27_3))) b_1)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.SYM hol.bool ((b_27_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_27_3))) b_1) (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) (thm_2104 A B b_1 a_2).

(; Theorem: |- (\lambda b'. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b'))) b) ;)

(; dict ;)

def thm_2106 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof ((b_27_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_27_3))) b_1) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.EQ_MP (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) ((b_27_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_27_3))) b_1) (thm_2105 B A b_1 a_2) (thm_2084 B A b_1 a_2).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) (Data.Bool.? P)) ;)

(; dict ;)

def thm_2107 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_749 A P_1).

(; Theorem: |- ((Data.Bool.==> (P x)) Q) ;)

(; dict ;)

def thm_2108 : A : hol.type -> Q_1 : hol.term hol.bool -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) -> hol.proof (hol.imp (P_3 x_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) => thm_754 A Q_1 P_3 hyp_1 x_2.

(; Theorem: |- (P x) ;)

(; dict ;)

def thm_2109 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (P_2 x_1) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_2110 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (P_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) -> hol.proof Q_3 :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (P_2 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) => thm_2108 A Q_3 x_1 P_2 hyp_2 (thm_2109 A x_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_2111 : A : hol.type -> x_1 : hol.term A -> Q_2 : hol.term hol.bool -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_3 x_1) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) Q_2) :=
  A : hol.type => x_1 : hol.term A => Q_2 : hol.term hol.bool => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_3 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) => thm_2110 A x_1 P_3 Q_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda Q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q)) ;)

(; dict ;)

def thm_2112 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => Q_3 : hol.term hol.bool => thm_2111 A x_1 Q_3 P_2 hyp_1.

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_2113 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hol.EQ_MP (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) (thm_2107 A P_2) (thm_2112 A x_1 P_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda b'. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b')))) ;)

(; dict ;)

def thm_2114 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hyp_1 : hol.proof ((b_27_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_27_3))) b_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_27_3)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => hyp_1 : hol.proof ((b_27_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_27_3))) b_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_2113 A x_1 P_2 hyp_1) B b_1 (b_27_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_27_3))) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda b'. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b')))) ;)

(; dict ;)

def thm_2115 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_27_3)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.PROVE_HYP ((b_27_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_27_3))) b_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_27_3)))) (thm_2106 A B b_1 a_2) (hyp_1 : hol.proof ((b_27_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_27_3))) b_1) => thm_2114 A B b_1 a_2 hyp_1).

(; Theorem: |- (\lambda a'. (Data.Bool.? \lambda b'. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a') b')))) a) ;)

(; dict ;)

def thm_2116 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof ((a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_3 b_27_4)))) a_2) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_27_3)))) ((a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_3 b_27_4)))) a_2) (thm_2103 A B b_1 a_2) (thm_2115 A B b_1 a_2).

(; Theorem: |- (Data.Bool.? \lambda a'. (Data.Bool.? \lambda b'. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a') b'))))) ;)

(; dict ;)

def thm_2117 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hyp_1 : hol.proof ((a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_3 b_27_4)))) a_2) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_3 b_27_4))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hyp_1 : hol.proof ((a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_3 b_27_4)))) a_2) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_2113 A x_1 P_2 hyp_1) A a_2 (a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_3 b_27_4)))) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda a'. (Data.Bool.? \lambda b'. ((= (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) (HOLLight.ABS_prod ((HOLLight.mk_pair a') b'))))) ;)

(; dict ;)

def thm_2118 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_3 b_27_4))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.PROVE_HYP ((a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_3 b_27_4)))) a_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_3 b_27_4))))) (thm_2116 B A b_1 a_2) (hyp_1 : hol.proof ((a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_3 b_27_4)))) a_2) => thm_2117 B A b_1 a_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_2119 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_27_4 b_27_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5))))) (thm_2101 B A x_3 b_1 a_2 hyp_1) (thm_2118 B A b_1 a_2).

(; Theorem: |- ((Data.Bool.==> ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_2120 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.imp (hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5)))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) => thm_2119 B A b_1 a_2 x_3 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= (HOLLight.ABS_prod (HOLLight.REP_prod x))) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_2121 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5)))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.EQ_MP (hol.imp (hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5)))))) (hol.imp (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5)))))) (thm_2088 B A b_1 a_2 x_3) (thm_2120 B A b_1 a_2 x_3).

(; Theorem: |- ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b)) ;)

(; dict ;)

def thm_2122 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_1)) -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_1)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_1)) => hyp_1.

(; Theorem: |- ((= (HOLLight.ABS_prod (HOLLight.REP_prod x))) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))) ;)

(; dict ;)

def thm_2123 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_1)) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_3)) (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_1)) => hol.APP_THM (hol.arr A (hol.arr B hol.bool)) (Data_2EPair_2E_2A A B) (HOLLight_2EABS__prod B A) (HOLLight_2EABS__prod B A) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_1) (thm_763 B A) (thm_2122 B A b_1 a_2 x_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_2124 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_1)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_1)) => thm_2121 B A b_1 a_2 x_3 (thm_2123 B A b_1 a_2 x_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_2125 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.imp (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5)))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_1)) => thm_2124 B A b_1 a_2 x_3 hyp_1.

(; Theorem: |- ((= (\lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b)) b)) ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))) ;)

(; dict ;)

def thm_2126 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_4)) b_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_1))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.BETA_CONV B hol.bool (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_4)) b_1.

(; Theorem: |- (\lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b)) b) ;)

(; dict ;)

def thm_2127 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_4)) b_1) -> hol.proof ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_4)) b_1) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_4)) b_1) => hyp_1.

(; Theorem: |- ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b)) ;)

(; dict ;)

def thm_2128 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_4)) b_1) -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_1)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_4)) b_1) => hol.EQ_MP ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_4)) b_1) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_1)) (thm_2126 A B b_1 a_2 x_3) (thm_2127 A B b_1 a_2 x_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_2129 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_4)) b_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_4)) b_1) => (hyp_2 : hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_1)) => thm_2125 B A b_1 a_2 x_3 (thm_2122 B A b_1 a_2 x_3 hyp_2)) (thm_2128 B A b_1 a_2 x_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b)) b)) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_2130 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.imp ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_4)) b_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5)))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_3) (HOLLight_2Emk__pair B A a_2 b_4)) b_1) => thm_2129 B A b_1 a_2 x_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda b. ((Data.Bool.==> (\lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b)) b)) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))))) ;)

(; dict ;)

def thm_2131 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.forall B (b_3 : hol.term B => hol.imp ((b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_1 b_4)) b_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_4 b_5))))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => b_3 : hol.term B => thm_2130 A B b_3 a_1 x_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b)))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_2132 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_1 b_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_3 b_4)))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => thm_2082 A B a_1 x_2 (thm_2131 A B a_1 x_2).

(; Theorem: |- (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))) ;)

(; dict ;)

def thm_2133 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_1 b_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_1 b_3))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_1 b_3))) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_2134 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_1 b_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_3 b_4))))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_1 b_3))) => thm_2132 A B a_1 x_2 (thm_2133 A B a_1 x_2 hyp_1).

(; Theorem: |- ((= (\lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))) a)) (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_2135 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_3 b_4))) a_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_1 b_3)))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.BETA_CONV A hol.bool (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_3 b_4))) a_1.

(; Theorem: |- (\lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))) a) ;)

(; dict ;)

def thm_2136 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_3 b_4))) a_1) -> hol.proof ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_3 b_4))) a_1) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_3 b_4))) a_1) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))) ;)

(; dict ;)

def thm_2137 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_3 b_4))) a_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_1 b_3))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_3 b_4))) a_1) => hol.EQ_MP ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_3 b_4))) a_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_1 b_3))) (thm_2135 B A a_1 x_2) (thm_2136 B A a_1 x_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_2138 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_3 b_4))) a_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_3 b_4))))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_3 b_4))) a_1) => (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_1 b_3))) => thm_2134 B A a_1 x_2 hyp_2) (thm_2137 A B a_1 x_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))) a)) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_2139 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.imp ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_3 b_4))) a_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_3 b_4)))))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_2) (HOLLight_2Emk__pair B A a_3 b_4))) a_1) => thm_2138 B A a_1 x_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda a. ((Data.Bool.==> (\lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))) a)) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))))) ;)

(; dict ;)

def thm_2140 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.forall A (a_2 : hol.term A => hol.imp ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_3 b_4))) a_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_3 b_4))))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => a_2 : hol.term A => thm_2139 B A a_2 x_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_2141 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => thm_2081 B A x_1 (thm_2140 B A x_1).

(; Theorem: |- (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b)))) ;)

(; dict ;)

def thm_2142 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_2143 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) => thm_2141 B A x_1 (thm_2142 B A x_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod (HOLLight.REP_prod x)))) (HOLLight.REP_prod x)))) (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b)))))) ;)

(; dict ;)

def thm_2144 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1))) (HOLLight_2EREP__prod B A x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.EQ_MP (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3)))))) (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1))) (HOLLight_2EREP__prod B A x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3)))))) (thm_2080 B A x_1) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) => thm_2143 B A x_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= (HOLLight.REP_prod x)) ((HOLLight.mk_pair a) b))))) ((= (HOLLight.REP_prod (HOLLight.ABS_prod (HOLLight.REP_prod x)))) (HOLLight.REP_prod x))) ;)

(; dict ;)

def thm_2145 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A x_1) (HOLLight_2Emk__pair B A a_2 b_3)))) (hol.eq (hol.arr A (hol.arr B hol.bool)) (HOLLight_2EREP__prod B A (HOLLight_2EABS__prod B A (HOLLight_2EREP__prod B A x_1))) (HOLLight_2EREP__prod B A x_1))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => thm_1503 B A (HOLLight_2EREP__prod B A x_1).

(; Theorem: |- (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) (HOLLight.ABS_prod ((HOLLight.mk_pair a) b))))) ;)

(; dict ;)

def thm_2146 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => thm_2144 B A x_1 (thm_2145 B A x_1).

(; Theorem: |- (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b)))) ;)

(; dict ;)

def thm_2147 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (HOLLight_2EABS__prod B A (HOLLight_2Emk__pair B A a_2 b_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3)))) (thm_2064 B A x_1) (thm_2146 B A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b))))) ;)

(; dict ;)

def thm_2148 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => thm_2147 B A x_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b))))) ;)

(; thm ;)

def thm_2149 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))))) (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))))) (thm_2057 B A) (thm_2148 B A).

(; Theorem: |- ((= Data.Pair.fst) \lambda x. (select \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b))))) ;)

(; dict ;)

def thm_2150 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2Efst B A) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.select A (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2Efst B A).

(; Theorem: |- ((= \lambda a. (Data.Bool.! \lambda b. ((= (Data.Pair.fst ((Data.Pair., a) b))) a))) \lambda a. (Data.Bool.! \lambda b. ((= (Data.Pair.fst ((Data.Pair., a) b))) a))) ;)

(; dict ;)

def thm_2151 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1)) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr A hol.bool) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1)).

(; Theorem: |- ((= \lambda a. (Data.Bool.! \lambda b. ((= (Data.Pair.fst ((Data.Pair., a) b))) a))) \lambda a. (Data.Bool.! \lambda b. ((= (Data.Pair.fst ((Data.Pair., a) b))) a))) ;)

(; dict ;)

def thm_2152 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1)) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1))) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr A hol.bool) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1)) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1)) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1)) (thm_2151 B A) (thm_2151 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (Data.Pair.fst ((Data.Pair., a) b))) a)))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (Data.Pair.fst ((Data.Pair., a) b))) a)))) ;)

(; dict ;)

def thm_2153 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1))) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1)))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1)) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1)) (thm_51 A) (thm_2152 B A).

(; Theorem: |- ((= \lambda b. ((= (Data.Pair.fst ((Data.Pair., a) b))) a)) \lambda b. ((= (Data.Pair.fst ((Data.Pair., a) b))) a)) ;)

(; dict ;)

def thm_2154 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1) (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1)) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => hol.REFL (hol.arr B hol.bool) (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1).

(; Theorem: |- ((= \lambda b. ((= (Data.Pair.fst ((Data.Pair., a) b))) a)) \lambda b. ((= (Data.Pair.fst ((Data.Pair., a) b))) a)) ;)

(; dict ;)

def thm_2155 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1) (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1)) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => hol.TRANS (hol.arr B hol.bool) (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1) (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1) (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1) (thm_2154 A B a_1) (thm_2154 A B a_1).

(; Theorem: |- ((= (Data.Bool.! \lambda b. ((= (Data.Pair.fst ((Data.Pair., a) b))) a))) (Data.Bool.! \lambda b. ((= (Data.Pair.fst ((Data.Pair., a) b))) a))) ;)

(; dict ;)

def thm_2156 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1)) (hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1) (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1) (thm_536 B) (thm_2155 A B a_1).

(; Theorem: |- ((= ((= (Data.Pair.fst x)) (select \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b)))))) ((= (Data.Pair.fst x)) (select \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b)))))) ;)

(; dict ;)

def thm_2157 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq A (Data_2EPair_2Efst B A x_1) (hol.select A (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))))) (hol.eq A (Data_2EPair_2Efst B A x_1) (hol.select A (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.REFL hol.bool (hol.eq A (Data_2EPair_2Efst B A x_1) (hol.select A (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))))).

(; Theorem: |- ((= ((= (Data.Pair.fst x)) (select \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b)))))) ((= (Data.Pair.fst x)) (select \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b)))))) ;)

(; dict ;)

def thm_2158 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq A (Data_2EPair_2Efst B A x_1) (hol.select A (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))))) (hol.eq A (Data_2EPair_2Efst B A x_1) (hol.select A (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.TRANS hol.bool (hol.eq A (Data_2EPair_2Efst B A x_1) (hol.select A (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))))) (hol.eq A (Data_2EPair_2Efst B A x_1) (hol.select A (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))))) (hol.eq A (Data_2EPair_2Efst B A x_1) (hol.select A (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))))) (thm_2157 B A x_1) (thm_2157 B A x_1).

(; Theorem: |- ((= (Data.Pair.fst x)) (\lambda x. (select \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b)))) x)) ;)

(; dict ;)

def thm_2159 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq A (Data_2EPair_2Efst B A x_1) ((x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.select A (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C B A a_3 b_4)))) x_1)) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM (Data_2EPair_2E_2A A B) A (Data_2EPair_2Efst B A) (x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.select A (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C B A a_3 b_4)))) x_1 x_1 (thm_2150 B A) (thm_668 B A x_1).

(; Theorem: |- ((= (\lambda x. (select \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b)))) x)) (select \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b))))) ;)

(; dict ;)

def thm_2160 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq A ((x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.select A (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C B A a_3 b_4)))) x_1) (hol.select A (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.BETA_CONV (Data_2EPair_2E_2A A B) A (x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.select A (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C B A a_3 b_4)))) x_1.

(; Theorem: |- ((= (Data.Pair.fst x)) (select \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b))))) ;)

(; dict ;)

def thm_2161 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq A (Data_2EPair_2Efst B A x_1) (hol.select A (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.TRANS A (Data_2EPair_2Efst B A x_1) ((x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.select A (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C B A a_3 b_4)))) x_1) (hol.select A (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3)))) (thm_2159 B A x_1) (thm_2160 B A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= (Data.Pair.fst x)) (select \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b)))))) ;)

(; dict ;)

def thm_2162 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq A (Data_2EPair_2Efst B A x_1) (hol.select A (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => thm_2161 B A x_1.

(; Theorem: |- ((= (Data.Pair.fst ((Data.Pair., a) b))) (select \lambda a_1. (Data.Bool.? \lambda b_1. ((= ((Data.Pair., a) b)) ((Data.Pair., a_1) b_1))))) ;)

(; dict ;)

def thm_2163 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_2 b_1)) (hol.select A (a__1_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b__1_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a__1_3 b__1_4))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => (B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => (B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.EQ_MP (hol.eq A (Data_2EPair_2Efst B A x_1) (hol.select A (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))))) (hol.eq A (Data_2EPair_2Efst B A x_1) (hol.select A (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_2 b_3))))) (thm_2158 B A x_1) (thm_2162 B A x_1)) B A x_1) B A (Data_2EPair_2E_2C B A a_2 b_1).

(; Theorem: |- ((= (= (Data.Pair.fst ((Data.Pair., a) b)))) (= (select \lambda a_1. (Data.Bool.? \lambda b_1. ((= ((Data.Pair., a) b)) ((Data.Pair., a_1) b_1)))))) ;)

(; dict ;)

def thm_2164 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_2 b_1))) (hol.eq A (hol.select A (a__1_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b__1_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a__1_3 b__1_4)))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_2 b_1)) (hol.select A (a__1_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b__1_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a__1_3 b__1_4)))) (thm_1808 A) (thm_2163 B A b_1 a_2).

(; Theorem: |- ((= ((= (Data.Pair.fst ((Data.Pair., a) b))) a)) ((= (select \lambda a_1. (Data.Bool.? \lambda b_1. ((= ((Data.Pair., a) b)) ((Data.Pair., a_1) b_1))))) a)) ;)

(; dict ;)

def thm_2165 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_2 b_1)) a_2) (hol.eq A (hol.select A (a__1_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b__1_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a__1_3 b__1_4)))) a_2)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM A hol.bool (hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_2 b_1))) (hol.eq A (hol.select A (a__1_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b__1_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a__1_3 b__1_4))))) a_2 a_2 (thm_2164 B A b_1 a_2) (thm_793 A a_2).

(; Theorem: |- ((= ((= (select \lambda a_1. (Data.Bool.? \lambda b_1. ((= ((Data.Pair., a) b)) ((Data.Pair., a_1) b_1))))) a)) ((= (Data.Pair.fst ((Data.Pair., a) b))) a)) ;)

(; dict ;)

def thm_2166 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.select A (a__1_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b__1_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a__1_3 b__1_4)))) a_2) (hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_2 b_1)) a_2)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.SYM hol.bool (hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_2 b_1)) a_2) (hol.eq A (hol.select A (a__1_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b__1_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a__1_3 b__1_4)))) a_2) (thm_2165 B A b_1 a_2).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x))) ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x))) ;)

(; dict ;)

def thm_2167 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) (hol.eq A (hol.select A p_2) x_1)) (hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) (hol.eq A (hol.select A p_2) x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) (hol.eq A (hol.select A p_2) x_1)).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x))) ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x))) ;)

(; dict ;)

def thm_2168 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) (hol.eq A (hol.select A p_2) x_1)) (hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) (hol.eq A (hol.select A p_2) x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) (hol.eq A (hol.select A p_2) x_1)) (hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) (hol.eq A (hol.select A p_2) x_1)) (hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) (hol.eq A (hol.select A p_2) x_1)) (thm_2167 A x_1 p_2) (thm_2167 A x_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x)))) ;)

(; dict ;)

def thm_2169 : A : hol.type -> hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)))) -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)))) :=
  A : hol.type => hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)))) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x))) ;)

(; dict ;)

def thm_2170 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A y_4 x_3))) (hol.eq A (hol.select A p_2) x_3)))) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A y_4 x_3))) (hol.eq A (hol.select A p_2) x_3)))) => thm_2169 A hyp_1 p_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x)) ;)

(; dict ;)

def thm_2171 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.eq hol.bool (p_3 y_5) (hol.eq A y_5 x_4))) (hol.eq A (hol.select A p_3) x_4)))) -> hol.proof (hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) (hol.eq A (hol.select A p_2) x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.eq hol.bool (p_3 y_5) (hol.eq A y_5 x_4))) (hol.eq A (hol.select A p_3) x_4)))) => thm_2170 A p_2 hyp_1 x_1.

(; Theorem: |- (Data.Bool.! \lambda y. ((= (p y)) ((= y) x))) ;)

(; dict ;)

def thm_2172 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) -> hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) => hyp_1.

(; Theorem: |- ((= (select p)) x) ;)

(; dict ;)

def thm_2173 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) -> hyp_2 : hol.proof (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.eq hol.bool (p_3 y_5) (hol.eq A y_5 x_4))) (hol.eq A (hol.select A p_3) x_4)))) -> hol.proof (hol.eq A (hol.select A p_2) x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) => hyp_2 : hol.proof (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.eq hol.bool (p_3 y_5) (hol.eq A y_5 x_4))) (hol.eq A (hol.select A p_3) x_4)))) => thm_2171 A x_1 p_2 hyp_2 (thm_2172 A x_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda p. (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x))))) ((= (select p)) x)) ;)

(; dict ;)

def thm_2174 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) -> hol.proof (hol.imp (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.eq hol.bool (p_3 y_5) (hol.eq A y_5 x_4))) (hol.eq A (hol.select A p_3) x_4)))) (hol.eq A (hol.select A p_2) x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) => hyp_2 : hol.proof (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.eq hol.bool (p_3 y_5) (hol.eq A y_5 x_4))) (hol.eq A (hol.select A p_3) x_4)))) => thm_2173 A x_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda p. (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x))))) ;)

(; dict ;)

def thm_2175 : A : hol.type -> hol.proof (hol.imp (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2))))) :=
  A : hol.type => hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)))) => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hyp_2 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) => thm_2174 A x_2 p_1 hyp_2 (thm_2169 A hyp_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x))) ;)

(; dict ;)

def thm_2176 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_2175 A (thm_50 A) p_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x)) ;)

(; dict ;)

def thm_2177 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) (hol.eq A (hol.select A p_2) x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => thm_2176 A p_2 x_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (\lambda a'. (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) a)))) ((= (select \lambda a'. (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) a)) ;)

(; dict ;)

def thm_2178 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_3) (hol.eq A y_3 a_2))) (hol.eq A (hol.select A (a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_4)))) a_2)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => (A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) (hol.eq A (hol.select A p_2) x_1)) (hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) (hol.eq A (hol.select A p_2) x_1)) (thm_2168 A x_1 p_2) (thm_2177 A x_1 p_2)) A x_1 p_2) A a_2 (a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_4))).

(; Theorem: |- ((= \lambda y. ((= (\lambda a'. (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) a))) \lambda y. ((= (\lambda a'. (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) a))) ;)

(; dict ;)

def thm_2179 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_3) (hol.eq A y_3 a_2)) (y_3 : hol.term A => hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_3) (hol.eq A y_3 a_2))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.REFL (hol.arr A hol.bool) (y_3 : hol.term A => hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_3) (hol.eq A y_3 a_2)).

(; Theorem: |- ((= \lambda y. ((= (\lambda a'. (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) a))) \lambda y. ((= (\lambda a'. (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) a))) ;)

(; dict ;)

def thm_2180 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_3) (hol.eq A y_3 a_2)) (y_3 : hol.term A => hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_3) (hol.eq A y_3 a_2))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.TRANS (hol.arr A hol.bool) (y_3 : hol.term A => hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_3) (hol.eq A y_3 a_2)) (y_3 : hol.term A => hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_3) (hol.eq A y_3 a_2)) (y_3 : hol.term A => hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_3) (hol.eq A y_3 a_2)) (thm_2179 B A b_1 a_2) (thm_2179 B A b_1 a_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((= (\lambda a'. (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) a)))) (Data.Bool.! \lambda y. ((= (\lambda a'. (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) a)))) ;)

(; dict ;)

def thm_2181 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_3) (hol.eq A y_3 a_2))) (hol.forall A (y_3 : hol.term A => hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_3) (hol.eq A y_3 a_2)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_3 : hol.term A => hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_3) (hol.eq A y_3 a_2)) (y_3 : hol.term A => hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_3) (hol.eq A y_3 a_2)) (thm_51 A) (thm_2180 B A b_1 a_2).

(; Theorem: |- ((= (\lambda a'. (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., y) b')))) ;)

(; dict ;)

def thm_2182 : B : hol.type -> A : hol.type -> y_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A y_1 b_27_4)))) :=
  B : hol.type => A : hol.type => y_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => hol.BETA_CONV A hol.bool (a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_1.

(; Theorem: |- ((= (= (\lambda a'. (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y))) (= (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., y) b'))))) ;)

(; dict ;)

def thm_2183 : B : hol.type -> A : hol.type -> y_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A y_1 b_27_4))))) :=
  B : hol.type => A : hol.type => y_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A y_1 b_27_4))) thm_119 (thm_2182 B A y_1 b_2 a_3).

(; Theorem: |- ((= ((= y) a)) ((= y) a)) ;)

(; dict ;)

def thm_2184 : A : hol.type -> a_1 : hol.term A -> y_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A y_2 a_1) (hol.eq A y_2 a_1)) :=
  A : hol.type => a_1 : hol.term A => y_2 : hol.term A => hol.REFL hol.bool (hol.eq A y_2 a_1).

(; Theorem: |- ((= ((= (\lambda a'. (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) a))) ((= (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., y) b')))) ((= y) a))) ;)

(; dict ;)

def thm_2185 : B : hol.type -> A : hol.type -> y_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_1) (hol.eq A y_1 a_3)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A y_1 b_27_4))) (hol.eq A y_1 a_3))) :=
  B : hol.type => A : hol.type => y_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A y_1 b_27_4)))) (hol.eq A y_1 a_3) (hol.eq A y_1 a_3) (thm_2183 B A y_1 b_2 a_3) (thm_2184 A a_3 y_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., y) b')))) ((= y) a))) ((= (\lambda a'. (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) a))) ;)

(; dict ;)

def thm_2186 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A y_1 b_27_4))) (hol.eq A y_1 a_3)) (hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_1) (hol.eq A y_1 a_3))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => hol.SYM hol.bool (hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_1) (hol.eq A y_1 a_3)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A y_1 b_27_4))) (hol.eq A y_1 a_3)) (thm_2185 B A y_1 b_2 a_3).

(; Theorem: |- ((= ((= ((Data.Pair., a) b)) ((Data.Pair., y) b'))) ((Data.Bool./\ ((= a) y)) ((= b) b'))) ;)

(; dict ;)

def thm_2187 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> y_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A y_2 b_27_1)) (hol.and (hol.eq A a_4 y_2) (hol.eq B b_3 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => y_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => (B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => thm_2049 B A b_27_1 a_27_2 b_3 a_4) B A b_27_1 y_2 b_3 a_4.

(; Theorem: |- ((= \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., y) b'))) \lambda b'. ((Data.Bool./\ ((= a) y)) ((= b) b'))) ;)

(; dict ;)

def thm_2188 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A y_1 b_27_4)) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_1) (hol.eq B b_2 b_27_4))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => hol.ABS_THM B hol.bool (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A y_1 b_27_4)) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_1) (hol.eq B b_2 b_27_4)) (b_27_4 : hol.term B => thm_2187 B A b_27_4 y_1 b_2 a_3).

(; Theorem: |- ((= (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., y) b')))) (Data.Bool.? \lambda b'. ((Data.Bool./\ ((= a) y)) ((= b) b')))) ;)

(; dict ;)

def thm_2189 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A y_1 b_27_4))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_1) (hol.eq B b_2 b_27_4)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A y_1 b_27_4)) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_1) (hol.eq B b_2 b_27_4)) (thm_1131 B) (thm_2188 A B y_1 b_2 a_3).

(; Theorem: |- ((= (= (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., y) b'))))) (= (Data.Bool.? \lambda b'. ((Data.Bool./\ ((= a) y)) ((= b) b'))))) ;)

(; dict ;)

def thm_2190 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A y_1 b_27_4)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_1) (hol.eq B b_2 b_27_4))))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A y_1 b_27_4))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_1) (hol.eq B b_2 b_27_4))) thm_119 (thm_2189 A B y_1 b_2 a_3).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., y) b')))) ((= y) a))) ((= (Data.Bool.? \lambda b'. ((Data.Bool./\ ((= a) y)) ((= b) b')))) ((= y) a))) ;)

(; dict ;)

def thm_2191 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A y_1 b_27_4))) (hol.eq A y_1 a_3)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_1) (hol.eq B b_2 b_27_4))) (hol.eq A y_1 a_3))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A y_1 b_27_4)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_1) (hol.eq B b_2 b_27_4)))) (hol.eq A y_1 a_3) (hol.eq A y_1 a_3) (thm_2190 A B y_1 b_2 a_3) (thm_2184 A a_3 y_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda b'. ((Data.Bool./\ ((= a) y)) ((= b) b')))) ((= y) a))) ((= (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., y) b')))) ((= y) a))) ;)

(; dict ;)

def thm_2192 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> y_2 : hol.term A -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_4))) (hol.eq A y_2 a_3)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_1) (Data_2EPair_2E_2C B A y_2 b_27_4))) (hol.eq A y_2 a_3))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => y_2 : hol.term A => a_3 : hol.term A => hol.SYM hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_1) (Data_2EPair_2E_2C B A y_2 b_27_4))) (hol.eq A y_2 a_3)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_4))) (hol.eq A y_2 a_3)) (thm_2191 A B y_2 b_1 a_3).

(; Theorem: |- ((= y) a) ;)

(; dict ;)

def thm_2193 : A : hol.type -> a_1 : hol.term A -> y_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A y_2 a_1) -> hol.proof (hol.eq A y_2 a_1) :=
  A : hol.type => a_1 : hol.term A => y_2 : hol.term A => hyp_1 : hol.proof (hol.eq A y_2 a_1) => hyp_1.

(; Theorem: |- ((= (= a)) (= a)) ;)

(; dict ;)

def thm_2194 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A a_1) (hol.eq A a_1)) :=
  A : hol.type => a_1 : hol.term A => hol.REFL (hol.arr A hol.bool) (hol.eq A a_1).

(; Theorem: |- ((= ((= a) y)) ((= a) a)) ;)

(; dict ;)

def thm_2195 : A : hol.type -> y_1 : hol.term A -> a_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A y_1 a_2) -> hol.proof (hol.eq hol.bool (hol.eq A a_2 y_1) (hol.eq A a_2 a_2)) :=
  A : hol.type => y_1 : hol.term A => a_2 : hol.term A => hyp_1 : hol.proof (hol.eq A y_1 a_2) => hol.APP_THM A hol.bool (hol.eq A a_2) (hol.eq A a_2) y_1 a_2 (thm_2194 A a_2) (thm_2193 A a_2 y_1 hyp_1).

(; Theorem: |- ((= ((= a) a)) Data.Bool.T) ;)

(; dict ;)

def thm_2196 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A a_1 a_1) hol.true) :=
  A : hol.type => a_1 : hol.term A => (A : hol.type => x_1 : hol.term A => thm_179 A x_1) A a_1.

(; Theorem: |- ((= ((= a) y)) Data.Bool.T) ;)

(; dict ;)

def thm_2197 : A : hol.type -> y_1 : hol.term A -> a_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A y_1 a_2) -> hol.proof (hol.eq hol.bool (hol.eq A a_2 y_1) hol.true) :=
  A : hol.type => y_1 : hol.term A => a_2 : hol.term A => hyp_1 : hol.proof (hol.eq A y_1 a_2) => hol.TRANS hol.bool (hol.eq A a_2 y_1) (hol.eq A a_2 a_2) hol.true (thm_2195 A y_1 a_2 hyp_1) (thm_2196 A a_2).

(; Theorem: |- ((= (Data.Bool./\ ((= a) y))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_2198 : A : hol.type -> y_1 : hol.term A -> a_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A y_1 a_2) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.eq A a_2 y_1)) (hol.and hol.true)) :=
  A : hol.type => y_1 : hol.term A => a_2 : hol.term A => hyp_1 : hol.proof (hol.eq A y_1 a_2) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.eq A a_2 y_1) hol.true thm_388 (thm_2197 A y_1 a_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ ((= a) y)) ((= b) b'))) ((Data.Bool./\ Data.Bool.T) ((= b) b'))) ;)

(; dict ;)

def thm_2199 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> y_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.eq A y_3 a_4) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_1)) (hol.and hol.true (hol.eq B b_2 b_27_1))) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => y_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.eq A y_3 a_4) => hol.APP_THM hol.bool hol.bool (hol.and (hol.eq A a_4 y_3)) (hol.and hol.true) (hol.eq B b_2 b_27_1) (hol.eq B b_2 b_27_1) (thm_2198 A y_3 a_4 hyp_1) (thm_628 B b_27_1 b_2).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) ((= b) b'))) ((= b) b')) ;)

(; dict ;)

def thm_2200 : B : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.and hol.true (hol.eq B b_2 b_27_1)) (hol.eq B b_2 b_27_1)) :=
  B : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => (t_1 : hol.term hol.bool => thm_1194 t_1) (hol.eq B b_2 b_27_1).

(; Theorem: |- ((= ((Data.Bool./\ ((= a) y)) ((= b) b'))) ((= b) b')) ;)

(; dict ;)

def thm_2201 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> y_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.eq A y_3 a_4) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_1)) (hol.eq B b_2 b_27_1)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => y_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.eq A y_3 a_4) => hol.TRANS hol.bool (hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_1)) (hol.and hol.true (hol.eq B b_2 b_27_1)) (hol.eq B b_2 b_27_1) (thm_2199 B A b_27_1 b_2 y_3 a_4 hyp_1) (thm_2200 B b_27_1 b_2).

(; Theorem: |- ((= \lambda b'. ((Data.Bool./\ ((= a) y)) ((= b) b'))) \lambda b'. ((= b) b')) ;)

(; dict ;)

def thm_2202 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> y_2 : hol.term A -> a_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A y_2 a_3) -> hol.proof (hol.eq (hol.arr B hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_4)) (b_27_4 : hol.term B => hol.eq B b_1 b_27_4)) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => y_2 : hol.term A => a_3 : hol.term A => hyp_1 : hol.proof (hol.eq A y_2 a_3) => hol.ABS_THM B hol.bool (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_4)) (b_27_4 : hol.term B => hol.eq B b_1 b_27_4) (b_27_4 : hol.term B => thm_2201 B A b_27_4 b_1 y_2 a_3 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda b'. ((Data.Bool./\ ((= a) y)) ((= b) b')))) (Data.Bool.? \lambda b'. ((= b) b'))) ;)

(; dict ;)

def thm_2203 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> y_2 : hol.term A -> a_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A y_2 a_3) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_4))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq B b_1 b_27_4))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => y_2 : hol.term A => a_3 : hol.term A => hyp_1 : hol.proof (hol.eq A y_2 a_3) => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_4)) (b_27_4 : hol.term B => hol.eq B b_1 b_27_4) (thm_1131 B) (thm_2202 A B b_1 y_2 a_3 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda b'. ((= b) b'))) (Data.Bool.? \lambda b'. ((Data.Bool./\ ((= a) y)) ((= b) b')))) ;)

(; dict ;)

def thm_2204 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> a_2 : hol.term A -> b_3 : hol.term B -> hyp_1 : hol.proof (hol.eq A y_1 a_2) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq B b_3 b_27_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_2 y_1) (hol.eq B b_3 b_27_4)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => a_2 : hol.term A => b_3 : hol.term B => hyp_1 : hol.proof (hol.eq A y_1 a_2) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_2 y_1) (hol.eq B b_3 b_27_4))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq B b_3 b_27_4)) (thm_2203 A B b_3 y_1 a_2 hyp_1).

(; Theorem: |- ((= (\lambda b'. ((= b) b') b)) ((= b) b)) ;)

(; dict ;)

def thm_2205 : B : hol.type -> b_1 : hol.term B -> hol.proof (hol.eq hol.bool ((b_27_2 : hol.term B => hol.eq B b_1 b_27_2) b_1) (hol.eq B b_1 b_1)) :=
  B : hol.type => b_1 : hol.term B => hol.BETA_CONV B hol.bool (b_27_2 : hol.term B => hol.eq B b_1 b_27_2) b_1.

(; Theorem: |- ((= ((= b) b)) (\lambda b'. ((= b) b') b)) ;)

(; dict ;)

def thm_2206 : B : hol.type -> b_1 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq B b_1 b_1) ((b_27_2 : hol.term B => hol.eq B b_1 b_27_2) b_1)) :=
  B : hol.type => b_1 : hol.term B => hol.SYM hol.bool ((b_27_2 : hol.term B => hol.eq B b_1 b_27_2) b_1) (hol.eq B b_1 b_1) (thm_2205 B b_1).

(; Theorem: |- (\lambda b'. ((= b) b') b) ;)

(; dict ;)

def thm_2207 : B : hol.type -> b_1 : hol.term B -> hol.proof ((b_27_2 : hol.term B => hol.eq B b_1 b_27_2) b_1) :=
  B : hol.type => b_1 : hol.term B => hol.EQ_MP (hol.eq B b_1 b_1) ((b_27_2 : hol.term B => hol.eq B b_1 b_27_2) b_1) (thm_2206 B b_1) (thm_795 B b_1).

(; Theorem: |- (Data.Bool.? \lambda b'. ((= b) b')) ;)

(; dict ;)

def thm_2208 : B : hol.type -> b_1 : hol.term B -> hyp_1 : hol.proof ((b_27_2 : hol.term B => hol.eq B b_1 b_27_2) b_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_2 : hol.term B => hol.eq B b_1 b_27_2)) :=
  B : hol.type => b_1 : hol.term B => hyp_1 : hol.proof ((b_27_2 : hol.term B => hol.eq B b_1 b_27_2) b_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_2113 A x_1 P_2 hyp_1) B b_1 (b_27_2 : hol.term B => hol.eq B b_1 b_27_2) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda b'. ((= b) b')) ;)

(; dict ;)

def thm_2209 : B : hol.type -> b_1 : hol.term B -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_2 : hol.term B => hol.eq B b_1 b_27_2)) :=
  B : hol.type => b_1 : hol.term B => hol.PROVE_HYP ((b_27_2 : hol.term B => hol.eq B b_1 b_27_2) b_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_2 : hol.term B => hol.eq B b_1 b_27_2)) (thm_2207 B b_1) (hyp_1 : hol.proof ((b_27_2 : hol.term B => hol.eq B b_1 b_27_2) b_1) => thm_2208 B b_1 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda b'. ((Data.Bool./\ ((= a) y)) ((= b) b'))) ;)

(; dict ;)

def thm_2210 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> y_2 : hol.term A -> a_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A y_2 a_3) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_4))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => y_2 : hol.term A => a_3 : hol.term A => hyp_1 : hol.proof (hol.eq A y_2 a_3) => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq B b_1 b_27_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_4))) (thm_2204 A B y_2 a_3 b_1 hyp_1) (thm_2209 B b_1).

(; Theorem: |- (Data.Bool.? \lambda b'. ((Data.Bool./\ ((= a) y)) ((= b) b'))) ;)

(; dict ;)

def thm_2211 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> y_2 : hol.term A -> a_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A y_2 a_3) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_4))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => y_2 : hol.term A => a_3 : hol.term A => hyp_1 : hol.proof (hol.eq A y_2 a_3) => hol.PROVE_HYP (hol.eq A y_2 a_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_4))) (thm_2193 A a_3 y_2 hyp_1) (hyp_2 : hol.proof (hol.eq A y_2 a_3) => thm_2210 A B b_1 y_2 a_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((= y) a)) (Data.Bool.? \lambda b'. ((Data.Bool./\ ((= a) y)) ((= b) b')))) ;)

(; dict ;)

def thm_2212 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> y_3 : hol.term A -> hol.proof (hol.imp (hol.eq A y_3 a_2) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_2 y_3) (hol.eq B b_1 b_27_4)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => y_3 : hol.term A => hyp_1 : hol.proof (hol.eq A y_3 a_2) => thm_2211 A B b_1 y_3 a_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda b'. ((Data.Bool./\ ((= a) y)) ((= b) b')) x)) ((= y) a)))) ((Data.Bool.==> (Data.Bool.? \lambda b'. ((Data.Bool./\ ((= a) y)) ((= b) b')))) ((= y) a))) ;)

(; dict ;)

def thm_2213 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> y_2 : hol.term A -> a_3 : hol.term A -> hol.proof (hol.imp (hol.forall B (x_4 : hol.term B => hol.imp ((b_27_5 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_5)) x_4) (hol.eq A y_2 a_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_4))) (hol.eq A y_2 a_3))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => y_2 : hol.term A => a_3 : hol.term A => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_757 A Q_1 P_2) B (hol.eq A y_2 a_3) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_4)).

(; Theorem: |- ((Data.Bool./\ ((= a) y)) ((= b) b')) ;)

(; dict ;)

def thm_2214 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> y_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_1)) -> hol.proof (hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_1)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => y_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_1)) => hyp_1.

(; Theorem: |- ((= a) y) ;)

(; dict ;)

def thm_2215 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> y_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_1)) -> hol.proof (hol.eq A a_4 y_3) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => y_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_1)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_166 q_1 p_2 hyp_1) (hol.eq B b_2 b_27_1) (hol.eq A a_4 y_3) hyp_1.

(; Theorem: |- ((= a) y) ;)

(; dict ;)

def thm_2216 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> y_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_1)) -> hol.proof (hol.eq A a_4 y_3) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => y_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_1)) => hol.PROVE_HYP (hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_1)) (hol.eq A a_4 y_3) (thm_2214 B A b_27_1 b_2 y_3 a_4 hyp_1) (hyp_2 : hol.proof (hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_1)) => thm_2215 B A b_27_1 b_2 y_3 a_4 hyp_2).

(; Theorem: |- ((= a) y) ;)

(; dict ;)

def thm_2217 : A : hol.type -> y_1 : hol.term A -> a_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A a_2 y_1) -> hol.proof (hol.eq A a_2 y_1) :=
  A : hol.type => y_1 : hol.term A => a_2 : hol.term A => hyp_1 : hol.proof (hol.eq A a_2 y_1) => hyp_1.

(; Theorem: |- ((= (= y)) (= y)) ;)

(; dict ;)

def thm_2218 : A : hol.type -> y_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A y_1) (hol.eq A y_1)) :=
  A : hol.type => y_1 : hol.term A => hol.REFL (hol.arr A hol.bool) (hol.eq A y_1).

(; Theorem: |- ((= ((= y) a)) ((= y) y)) ;)

(; dict ;)

def thm_2219 : A : hol.type -> a_1 : hol.term A -> y_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A a_1 y_2) -> hol.proof (hol.eq hol.bool (hol.eq A y_2 a_1) (hol.eq A y_2 y_2)) :=
  A : hol.type => a_1 : hol.term A => y_2 : hol.term A => hyp_1 : hol.proof (hol.eq A a_1 y_2) => hol.APP_THM A hol.bool (hol.eq A y_2) (hol.eq A y_2) a_1 y_2 (thm_2218 A y_2) (thm_2217 A y_2 a_1 hyp_1).

(; Theorem: |- ((= ((= y) y)) Data.Bool.T) ;)

(; dict ;)

def thm_2220 : A : hol.type -> y_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A y_1 y_1) hol.true) :=
  A : hol.type => y_1 : hol.term A => (A : hol.type => x_1 : hol.term A => thm_179 A x_1) A y_1.

(; Theorem: |- ((= ((= y) a)) Data.Bool.T) ;)

(; dict ;)

def thm_2221 : A : hol.type -> a_1 : hol.term A -> y_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A a_1 y_2) -> hol.proof (hol.eq hol.bool (hol.eq A y_2 a_1) hol.true) :=
  A : hol.type => a_1 : hol.term A => y_2 : hol.term A => hyp_1 : hol.proof (hol.eq A a_1 y_2) => hol.TRANS hol.bool (hol.eq A y_2 a_1) (hol.eq A y_2 y_2) hol.true (thm_2219 A a_1 y_2 hyp_1) (thm_2220 A y_2).

(; Theorem: |- ((= Data.Bool.T) ((= y) a)) ;)

(; dict ;)

def thm_2222 : A : hol.type -> a_1 : hol.term A -> y_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A a_1 y_2) -> hol.proof (hol.eq hol.bool hol.true (hol.eq A y_2 a_1)) :=
  A : hol.type => a_1 : hol.term A => y_2 : hol.term A => hyp_1 : hol.proof (hol.eq A a_1 y_2) => hol.SYM hol.bool (hol.eq A y_2 a_1) hol.true (thm_2221 A a_1 y_2 hyp_1).

(; Theorem: |- ((= y) a) ;)

(; dict ;)

def thm_2223 : A : hol.type -> a_1 : hol.term A -> y_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A a_1 y_2) -> hol.proof (hol.eq A y_2 a_1) :=
  A : hol.type => a_1 : hol.term A => y_2 : hol.term A => hyp_1 : hol.proof (hol.eq A a_1 y_2) => hol.EQ_MP hol.true (hol.eq A y_2 a_1) (thm_2222 A a_1 y_2 hyp_1) thm_5.

(; Theorem: |- ((= y) a) ;)

(; dict ;)

def thm_2224 : A : hol.type -> a_1 : hol.term A -> y_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A a_1 y_2) -> hol.proof (hol.eq A y_2 a_1) :=
  A : hol.type => a_1 : hol.term A => y_2 : hol.term A => hyp_1 : hol.proof (hol.eq A a_1 y_2) => hol.PROVE_HYP (hol.eq A a_1 y_2) (hol.eq A y_2 a_1) (thm_2217 A y_2 a_1 hyp_1) (hyp_2 : hol.proof (hol.eq A a_1 y_2) => thm_2223 A a_1 y_2 hyp_2).

(; Theorem: |- ((= y) a) ;)

(; dict ;)

def thm_2225 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> y_4 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A a_3 y_4) (hol.eq B b_2 b_27_1)) -> hol.proof (hol.eq A y_4 a_3) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => y_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A a_3 y_4) (hol.eq B b_2 b_27_1)) => hol.PROVE_HYP (hol.eq A a_3 y_4) (hol.eq A y_4 a_3) (thm_2216 B A b_27_1 b_2 y_4 a_3 hyp_1) (hyp_2 : hol.proof (hol.eq A a_3 y_4) => thm_2224 A a_3 y_4 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((= a) y)) ((= b) b'))) ((= y) a)) ;)

(; dict ;)

def thm_2226 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> y_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.imp (hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_1)) (hol.eq A y_3 a_4)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => y_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_1)) => thm_2225 B A b_27_1 b_2 a_4 y_3 hyp_1.

(; Theorem: |- ((= (\lambda b'. ((Data.Bool./\ ((= a) y)) ((= b) b')) b')) ((Data.Bool./\ ((= a) y)) ((= b) b'))) ;)

(; dict ;)

def thm_2227 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> y_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool ((b_27_5 : hol.term B => hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_5)) b_27_1) (hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_1))) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => y_3 : hol.term A => a_4 : hol.term A => hol.BETA_CONV B hol.bool (b_27_5 : hol.term B => hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_5)) b_27_1.

(; Theorem: |- (\lambda b'. ((Data.Bool./\ ((= a) y)) ((= b) b')) b') ;)

(; dict ;)

def thm_2228 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> y_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof ((b_27_5 : hol.term B => hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_5)) b_27_1) -> hol.proof ((b_27_5 : hol.term B => hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_5)) b_27_1) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => y_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof ((b_27_5 : hol.term B => hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_5)) b_27_1) => hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= a) y)) ((= b) b')) ;)

(; dict ;)

def thm_2229 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> y_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof ((b_27_5 : hol.term B => hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_5)) b_27_1) -> hol.proof (hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_1)) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => y_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof ((b_27_5 : hol.term B => hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_5)) b_27_1) => hol.EQ_MP ((b_27_5 : hol.term B => hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_5)) b_27_1) (hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_1)) (thm_2227 A B b_27_1 b_2 y_3 a_4) (thm_2228 A B b_27_1 b_2 y_3 a_4 hyp_1).

(; Theorem: |- ((= y) a) ;)

(; dict ;)

def thm_2230 : B : hol.type -> A : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> y_4 : hol.term A -> hyp_1 : hol.proof ((b_27_5 : hol.term B => hol.and (hol.eq A a_3 y_4) (hol.eq B b_2 b_27_5)) b_27_1) -> hol.proof (hol.eq A y_4 a_3) :=
  B : hol.type => A : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => y_4 : hol.term A => hyp_1 : hol.proof ((b_27_5 : hol.term B => hol.and (hol.eq A a_3 y_4) (hol.eq B b_2 b_27_5)) b_27_1) => thm_2226 B A b_27_1 b_2 y_4 a_3 (thm_2229 B A b_27_1 b_2 y_4 a_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda b'. ((Data.Bool./\ ((= a) y)) ((= b) b')) b')) ((= y) a)) ;)

(; dict ;)

def thm_2231 : A : hol.type -> B : hol.type -> b_27_1 : hol.term B -> b_2 : hol.term B -> y_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.imp ((b_27_5 : hol.term B => hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_5)) b_27_1) (hol.eq A y_3 a_4)) :=
  A : hol.type => B : hol.type => b_27_1 : hol.term B => b_2 : hol.term B => y_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof ((b_27_5 : hol.term B => hol.and (hol.eq A a_4 y_3) (hol.eq B b_2 b_27_5)) b_27_1) => thm_2230 B A b_27_1 b_2 a_4 y_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda b'. ((Data.Bool.==> (\lambda b'. ((Data.Bool./\ ((= a) y)) ((= b) b')) b')) ((= y) a))) ;)

(; dict ;)

def thm_2232 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> y_2 : hol.term A -> a_3 : hol.term A -> hol.proof (hol.forall B (b_27_4 : hol.term B => hol.imp ((b_27_5 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_5)) b_27_4) (hol.eq A y_2 a_3))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => y_2 : hol.term A => a_3 : hol.term A => b_27_4 : hol.term B => thm_2231 A B b_27_4 b_1 y_2 a_3.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda b'. ((Data.Bool./\ ((= a) y)) ((= b) b')))) ((= y) a)) ;)

(; dict ;)

def thm_2233 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> y_2 : hol.term A -> a_3 : hol.term A -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_4))) (hol.eq A y_2 a_3)) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => y_2 : hol.term A => a_3 : hol.term A => thm_2213 A B b_1 y_2 a_3 (thm_2232 A B b_1 y_2 a_3).

(; Theorem: |- (Data.Bool.? \lambda b'. ((Data.Bool./\ ((= a) y)) ((= b) b'))) ;)

(; dict ;)

def thm_2234 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> y_2 : hol.term A -> a_3 : hol.term A -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_4))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_4))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => y_2 : hol.term A => a_3 : hol.term A => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_4))) => hyp_1.

(; Theorem: |- ((= y) a) ;)

(; dict ;)

def thm_2235 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> y_3 : hol.term A -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_2 y_3) (hol.eq B b_1 b_27_4))) -> hol.proof (hol.eq A y_3 a_2) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => y_3 : hol.term A => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_2 y_3) (hol.eq B b_1 b_27_4))) => thm_2233 A B b_1 y_3 a_2 (thm_2234 A B b_1 y_3 a_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda b'. ((Data.Bool./\ ((= a) y)) ((= b) b')))) ((= y) a)) ;)

(; dict ;)

def thm_2236 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> y_2 : hol.term A -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_4))) (hol.eq A y_2 a_3)) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => y_2 : hol.term A => a_3 : hol.term A => hol.PROP_EXT (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_4))) (hol.eq A y_2 a_3) (hyp_1 : hol.proof (hol.eq A y_2 a_3) => thm_2212 B A b_1 a_3 y_2 (thm_2193 A a_3 y_2 hyp_1)) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_4))) => (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_2) (hol.eq B b_1 b_27_4))) => thm_2235 B A b_1 a_3 y_2 hyp_2) (thm_2234 A B b_1 y_2 a_3 hyp_1)).

(; Theorem: |- ((= (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., y) b')))) ((= y) a)) ;)

(; dict ;)

def thm_2237 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A y_1 b_27_4))) (hol.eq A y_1 a_3)) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.and (hol.eq A a_3 y_1) (hol.eq B b_2 b_27_4))) (hol.eq A y_1 a_3)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A y_1 b_27_4))) (hol.eq A y_1 a_3)) (thm_2192 A B b_2 y_1 a_3) (thm_2236 A B b_2 y_1 a_3).

(; Theorem: |- ((= (\lambda a'. (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) a)) ;)

(; dict ;)

def thm_2238 : B : hol.type -> A : hol.type -> y_1 : hol.term A -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_1) (hol.eq A y_1 a_3)) :=
  B : hol.type => A : hol.type => y_1 : hol.term A => b_2 : hol.term B => a_3 : hol.term A => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A y_1 b_27_4))) (hol.eq A y_1 a_3)) (hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_1) (hol.eq A y_1 a_3)) (thm_2186 A B y_1 b_2 a_3) (thm_2237 A B y_1 b_2 a_3).

(; Theorem: |- (Data.Bool.! \lambda y. ((= (\lambda a'. (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) a))) ;)

(; dict ;)

def thm_2239 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_3) (hol.eq A y_3 a_2))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => y_3 : hol.term A => thm_2238 B A y_3 b_1 a_2.

(; Theorem: |- ((= (select \lambda a'. (Data.Bool.? \lambda b'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) a) ;)

(; dict ;)

def thm_2240 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq A (hol.select A (a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_4)))) a_2) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => thm_2178 B A b_1 a_2 (hol.EQ_MP (hol.forall A (y_3 : hol.term A => hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_3) (hol.eq A y_3 a_2))) (hol.forall A (y_3 : hol.term A => hol.eq hol.bool ((a_27_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_5 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_5))) y_3) (hol.eq A y_3 a_2))) (thm_2181 B A b_1 a_2) (thm_2239 B A b_1 a_2)).

(; Theorem: |- ((= (Data.Pair.fst ((Data.Pair., a) b))) a) ;)

(; dict ;)

def thm_2241 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_2 b_1)) a_2) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.EQ_MP (hol.eq A (hol.select A (a_27_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_27_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_3 b_27_4)))) a_2) (hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_2 b_1)) a_2) (thm_2166 B A b_1 a_2) (thm_2240 B A b_1 a_2).

(; Theorem: |- (Data.Bool.! \lambda b. ((= (Data.Pair.fst ((Data.Pair., a) b))) a)) ;)

(; dict ;)

def thm_2242 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1)) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => b_2 : hol.term B => thm_2241 B A b_2 a_1.

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (Data.Pair.fst ((Data.Pair., a) b))) a))) ;)

(; dict ;)

def thm_2243 : B : hol.type -> A : hol.type -> hol.proof (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => hol.EQ_MP (hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1)) (hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1)) (thm_2156 A B a_1) (thm_2242 A B a_1).

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (Data.Pair.fst ((Data.Pair., a) b))) a))) ;)

(; thm ;)

def thm_2244 : B : hol.type -> A : hol.type -> hol.proof (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1))) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst B A (Data_2EPair_2E_2C B A a_1 b_2)) a_1))) (thm_2153 B A) (thm_2243 B A).

(; Theorem: |- ((= Data.Pair.snd) \lambda x. (select \lambda b. (Data.Bool.? \lambda a. ((= x) ((Data.Pair., a) b))))) ;)

(; dict ;)

def thm_2245 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2Esnd B A) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.select B (b_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_3 b_2))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2Esnd B A).

(; Theorem: |- ((= \lambda a. (Data.Bool.! \lambda b. ((= (Data.Pair.snd ((Data.Pair., a) b))) b))) \lambda a. (Data.Bool.! \lambda b. ((= (Data.Pair.snd ((Data.Pair., a) b))) b))) ;)

(; dict ;)

def thm_2246 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2)) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr A hol.bool) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2)).

(; Theorem: |- ((= \lambda a. (Data.Bool.! \lambda b. ((= (Data.Pair.snd ((Data.Pair., a) b))) b))) \lambda a. (Data.Bool.! \lambda b. ((= (Data.Pair.snd ((Data.Pair., a) b))) b))) ;)

(; dict ;)

def thm_2247 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2)) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2))) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr A hol.bool) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2)) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2)) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2)) (thm_2246 B A) (thm_2246 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (Data.Pair.snd ((Data.Pair., a) b))) b)))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (Data.Pair.snd ((Data.Pair., a) b))) b)))) ;)

(; dict ;)

def thm_2248 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2))) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2)))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2)) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2)) (thm_51 A) (thm_2247 B A).

(; Theorem: |- ((= \lambda b. ((= (Data.Pair.snd ((Data.Pair., a) b))) b)) \lambda b. ((= (Data.Pair.snd ((Data.Pair., a) b))) b)) ;)

(; dict ;)

def thm_2249 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2) (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2)) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => hol.REFL (hol.arr B hol.bool) (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2).

(; Theorem: |- ((= \lambda b. ((= (Data.Pair.snd ((Data.Pair., a) b))) b)) \lambda b. ((= (Data.Pair.snd ((Data.Pair., a) b))) b)) ;)

(; dict ;)

def thm_2250 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2) (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2)) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => hol.TRANS (hol.arr B hol.bool) (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2) (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2) (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2) (thm_2249 A B a_1) (thm_2249 A B a_1).

(; Theorem: |- ((= (Data.Bool.! \lambda b. ((= (Data.Pair.snd ((Data.Pair., a) b))) b))) (Data.Bool.! \lambda b. ((= (Data.Pair.snd ((Data.Pair., a) b))) b))) ;)

(; dict ;)

def thm_2251 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2)) (hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2) (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2) (thm_536 B) (thm_2250 A B a_1).

(; Theorem: |- ((= ((= (Data.Pair.snd x)) (select \lambda b. (Data.Bool.? \lambda a. ((= x) ((Data.Pair., a) b)))))) ((= (Data.Pair.snd x)) (select \lambda b. (Data.Bool.? \lambda a. ((= x) ((Data.Pair., a) b)))))) ;)

(; dict ;)

def thm_2252 : A : hol.type -> B : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq B (Data_2EPair_2Esnd B A x_1) (hol.select B (b_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_3 b_2))))) (hol.eq B (Data_2EPair_2Esnd B A x_1) (hol.select B (b_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_3 b_2)))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.REFL hol.bool (hol.eq B (Data_2EPair_2Esnd B A x_1) (hol.select B (b_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_3 b_2))))).

(; Theorem: |- ((= ((= (Data.Pair.snd x)) (select \lambda b. (Data.Bool.? \lambda a. ((= x) ((Data.Pair., a) b)))))) ((= (Data.Pair.snd x)) (select \lambda b. (Data.Bool.? \lambda a. ((= x) ((Data.Pair., a) b)))))) ;)

(; dict ;)

def thm_2253 : A : hol.type -> B : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq B (Data_2EPair_2Esnd B A x_1) (hol.select B (b_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_3 b_2))))) (hol.eq B (Data_2EPair_2Esnd B A x_1) (hol.select B (b_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_3 b_2)))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.TRANS hol.bool (hol.eq B (Data_2EPair_2Esnd B A x_1) (hol.select B (b_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_3 b_2))))) (hol.eq B (Data_2EPair_2Esnd B A x_1) (hol.select B (b_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_3 b_2))))) (hol.eq B (Data_2EPair_2Esnd B A x_1) (hol.select B (b_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_3 b_2))))) (thm_2252 A B x_1) (thm_2252 A B x_1).

(; Theorem: |- ((= (Data.Pair.snd x)) (\lambda x. (select \lambda b. (Data.Bool.? \lambda a. ((= x) ((Data.Pair., a) b)))) x)) ;)

(; dict ;)

def thm_2254 : A : hol.type -> B : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq B (Data_2EPair_2Esnd B A x_1) ((x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.select B (b_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C B A a_4 b_3)))) x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM (Data_2EPair_2E_2A A B) B (Data_2EPair_2Esnd B A) (x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.select B (b_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C B A a_4 b_3)))) x_1 x_1 (thm_2245 B A) (thm_668 B A x_1).

(; Theorem: |- ((= (\lambda x. (select \lambda b. (Data.Bool.? \lambda a. ((= x) ((Data.Pair., a) b)))) x)) (select \lambda b. (Data.Bool.? \lambda a. ((= x) ((Data.Pair., a) b))))) ;)

(; dict ;)

def thm_2255 : A : hol.type -> B : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq B ((x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.select B (b_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C B A a_4 b_3)))) x_1) (hol.select B (b_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_3 b_2))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.BETA_CONV (Data_2EPair_2E_2A A B) B (x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.select B (b_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C B A a_4 b_3)))) x_1.

(; Theorem: |- ((= (Data.Pair.snd x)) (select \lambda b. (Data.Bool.? \lambda a. ((= x) ((Data.Pair., a) b))))) ;)

(; dict ;)

def thm_2256 : A : hol.type -> B : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq B (Data_2EPair_2Esnd B A x_1) (hol.select B (b_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_3 b_2))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.TRANS B (Data_2EPair_2Esnd B A x_1) ((x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.select B (b_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C B A a_4 b_3)))) x_1) (hol.select B (b_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_3 b_2)))) (thm_2254 A B x_1) (thm_2255 A B x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= (Data.Pair.snd x)) (select \lambda b. (Data.Bool.? \lambda a. ((= x) ((Data.Pair., a) b)))))) ;)

(; dict ;)

def thm_2257 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq B (Data_2EPair_2Esnd B A x_1) (hol.select B (b_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_3 b_2)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => thm_2256 A B x_1.

(; Theorem: |- ((= (Data.Pair.snd ((Data.Pair., a) b))) (select \lambda b_1. (Data.Bool.? \lambda a_1. ((= ((Data.Pair., a) b)) ((Data.Pair., a_1) b_1))))) ;)

(; dict ;)

def thm_2258 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_2 b_1)) (hol.select B (b__1_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a__1_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a__1_4 b__1_3))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => (A : hol.type => B : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => (A : hol.type => B : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.EQ_MP (hol.eq B (Data_2EPair_2Esnd B A x_1) (hol.select B (b_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_3 b_2))))) (hol.eq B (Data_2EPair_2Esnd B A x_1) (hol.select B (b_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_3 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C B A a_3 b_2))))) (thm_2253 A B x_1) (thm_2257 B A x_1)) A B x_1) A B (Data_2EPair_2E_2C B A a_2 b_1).

(; Theorem: |- ((= (= (Data.Pair.snd ((Data.Pair., a) b)))) (= (select \lambda b_1. (Data.Bool.? \lambda a_1. ((= ((Data.Pair., a) b)) ((Data.Pair., a_1) b_1)))))) ;)

(; dict ;)

def thm_2259 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_2 b_1))) (hol.eq B (hol.select B (b__1_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a__1_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a__1_4 b__1_3)))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM B (hol.arr B hol.bool) (hol.eq B) (hol.eq B) (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_2 b_1)) (hol.select B (b__1_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a__1_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a__1_4 b__1_3)))) (thm_1812 B) (thm_2258 A B b_1 a_2).

(; Theorem: |- ((= ((= (Data.Pair.snd ((Data.Pair., a) b))) b)) ((= (select \lambda b_1. (Data.Bool.? \lambda a_1. ((= ((Data.Pair., a) b)) ((Data.Pair., a_1) b_1))))) b)) ;)

(; dict ;)

def thm_2260 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_2 b_1)) b_1) (hol.eq B (hol.select B (b__1_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a__1_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a__1_4 b__1_3)))) b_1)) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM B hol.bool (hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_2 b_1))) (hol.eq B (hol.select B (b__1_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a__1_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a__1_4 b__1_3))))) b_1 b_1 (thm_2259 A B b_1 a_2) (thm_795 B b_1).

(; Theorem: |- ((= ((= (select \lambda b_1. (Data.Bool.? \lambda a_1. ((= ((Data.Pair., a) b)) ((Data.Pair., a_1) b_1))))) b)) ((= (Data.Pair.snd ((Data.Pair., a) b))) b)) ;)

(; dict ;)

def thm_2261 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq B (hol.select B (b__1_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a__1_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a__1_4 b__1_3)))) b_1) (hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_2 b_1)) b_1)) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.SYM hol.bool (hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_2 b_1)) b_1) (hol.eq B (hol.select B (b__1_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a__1_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a__1_4 b__1_3)))) b_1) (thm_2260 A B b_1 a_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x)) ;)

(; dict ;)

def thm_2262 : B : hol.type -> x_1 : hol.term B -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.imp (hol.forall B (y_3 : hol.term B => hol.eq hol.bool (p_2 y_3) (hol.eq B y_3 x_1))) (hol.eq B (hol.select B p_2) x_1)) :=
  B : hol.type => x_1 : hol.term B => p_2 : hol.term (hol.arr B hol.bool) => (A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => thm_2177 A x_1 p_2) B x_1 p_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (\lambda b'. (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) b)))) ((= (select \lambda b'. (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) b)) ;)

(; dict ;)

def thm_2263 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.imp (hol.forall B (y_3 : hol.term B => hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_3) (hol.eq B y_3 b_1))) (hol.eq B (hol.select B (b_27_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_3)))) b_1)) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => (B : hol.type => x_1 : hol.term B => p_2 : hol.term (hol.arr B hol.bool) => thm_2262 B x_1 p_2) B b_1 (b_27_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_3))).

(; Theorem: |- ((= \lambda y. ((= (\lambda b'. (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) b))) \lambda y. ((= (\lambda b'. (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) b))) ;)

(; dict ;)

def thm_2264 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (y_3 : hol.term B => hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_3) (hol.eq B y_3 b_1)) (y_3 : hol.term B => hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_3) (hol.eq B y_3 b_1))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.REFL (hol.arr B hol.bool) (y_3 : hol.term B => hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_3) (hol.eq B y_3 b_1)).

(; Theorem: |- ((= \lambda y. ((= (\lambda b'. (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) b))) \lambda y. ((= (\lambda b'. (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) b))) ;)

(; dict ;)

def thm_2265 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (y_3 : hol.term B => hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_3) (hol.eq B y_3 b_1)) (y_3 : hol.term B => hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_3) (hol.eq B y_3 b_1))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.TRANS (hol.arr B hol.bool) (y_3 : hol.term B => hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_3) (hol.eq B y_3 b_1)) (y_3 : hol.term B => hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_3) (hol.eq B y_3 b_1)) (y_3 : hol.term B => hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_3) (hol.eq B y_3 b_1)) (thm_2264 A B b_1 a_2) (thm_2264 A B b_1 a_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((= (\lambda b'. (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) b)))) (Data.Bool.! \lambda y. ((= (\lambda b'. (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) b)))) ;)

(; dict ;)

def thm_2266 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_3) (hol.eq B y_3 b_1))) (hol.forall B (y_3 : hol.term B => hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_3) (hol.eq B y_3 b_1)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (y_3 : hol.term B => hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_3) (hol.eq B y_3 b_1)) (y_3 : hol.term B => hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_3) (hol.eq B y_3 b_1)) (thm_536 B) (thm_2265 A B b_1 a_2).

(; Theorem: |- ((= (\lambda b'. (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') y)))) ;)

(; dict ;)

def thm_2267 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 y_1)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => hol.BETA_CONV B hol.bool (b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_1.

(; Theorem: |- ((= (= (\lambda b'. (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y))) (= (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') y))))) ;)

(; dict ;)

def thm_2268 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 y_1))))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 y_1))) thm_119 (thm_2267 A B y_1 b_2 a_3).

(; Theorem: |- ((= ((= y) b)) ((= y) b)) ;)

(; dict ;)

def thm_2269 : B : hol.type -> b_1 : hol.term B -> y_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq B y_2 b_1) (hol.eq B y_2 b_1)) :=
  B : hol.type => b_1 : hol.term B => y_2 : hol.term B => hol.REFL hol.bool (hol.eq B y_2 b_1).

(; Theorem: |- ((= ((= (\lambda b'. (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) b))) ((= (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') y)))) ((= y) b))) ;)

(; dict ;)

def thm_2270 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_1) (hol.eq B y_1 b_2)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 y_1))) (hol.eq B y_1 b_2))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 y_1)))) (hol.eq B y_1 b_2) (hol.eq B y_1 b_2) (thm_2268 A B y_1 b_2 a_3) (thm_2269 B b_2 y_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') y)))) ((= y) b))) ((= (\lambda b'. (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) b))) ;)

(; dict ;)

def thm_2271 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 y_1))) (hol.eq B y_1 b_2)) (hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_1) (hol.eq B y_1 b_2))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => hol.SYM hol.bool (hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_1) (hol.eq B y_1 b_2)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 y_1))) (hol.eq B y_1 b_2)) (thm_2270 A B y_1 b_2 a_3).

(; Theorem: |- ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a') y))) ((Data.Bool./\ ((= a) a')) ((= b) y))) ;)

(; dict ;)

def thm_2272 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> a_27_2 : hol.term A -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_4 b_3) (Data_2EPair_2E_2C B A a_27_2 y_1)) (hol.and (hol.eq A a_4 a_27_2) (hol.eq B b_3 y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => (B : hol.type => A : hol.type => b_27_1 : hol.term B => a_27_2 : hol.term A => b_3 : hol.term B => a_4 : hol.term A => thm_2049 B A b_27_1 a_27_2 b_3 a_4) B A y_1 a_27_2 b_3 a_4.

(; Theorem: |- ((= \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') y))) \lambda a'. ((Data.Bool./\ ((= a) a')) ((= b) y))) ;)

(; dict ;)

def thm_2273 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 y_1)) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => hol.ABS_THM A hol.bool (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 y_1)) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1)) (a_27_4 : hol.term A => thm_2272 B A y_1 a_27_4 b_2 a_3).

(; Theorem: |- ((= (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') y)))) (Data.Bool.? \lambda a'. ((Data.Bool./\ ((= a) a')) ((= b) y)))) ;)

(; dict ;)

def thm_2274 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 y_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1)))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 y_1)) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1)) (thm_350 A) (thm_2273 B A y_1 b_2 a_3).

(; Theorem: |- ((= (= (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') y))))) (= (Data.Bool.? \lambda a'. ((Data.Bool./\ ((= a) a')) ((= b) y))))) ;)

(; dict ;)

def thm_2275 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 y_1)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 y_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) thm_119 (thm_2274 B A y_1 b_2 a_3).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') y)))) ((= y) b))) ((= (Data.Bool.? \lambda a'. ((Data.Bool./\ ((= a) a')) ((= b) y)))) ((= y) b))) ;)

(; dict ;)

def thm_2276 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 y_1))) (hol.eq B y_1 b_2)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) (hol.eq B y_1 b_2))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 y_1)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1)))) (hol.eq B y_1 b_2) (hol.eq B y_1 b_2) (thm_2275 B A y_1 b_2 a_3) (thm_2269 B b_2 y_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda a'. ((Data.Bool./\ ((= a) a')) ((= b) y)))) ((= y) b))) ((= (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') y)))) ((= y) b))) ;)

(; dict ;)

def thm_2277 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) (hol.eq B y_1 b_2)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 y_1))) (hol.eq B y_1 b_2))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => hol.SYM hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 y_1))) (hol.eq B y_1 b_2)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) (hol.eq B y_1 b_2)) (thm_2276 B A y_1 b_2 a_3).

(; Theorem: |- ((= y) b) ;)

(; dict ;)

def thm_2278 : B : hol.type -> b_1 : hol.term B -> y_2 : hol.term B -> hyp_1 : hol.proof (hol.eq B y_2 b_1) -> hol.proof (hol.eq B y_2 b_1) :=
  B : hol.type => b_1 : hol.term B => y_2 : hol.term B => hyp_1 : hol.proof (hol.eq B y_2 b_1) => hyp_1.

(; Theorem: |- ((= (= b)) (= b)) ;)

(; dict ;)

def thm_2279 : B : hol.type -> b_1 : hol.term B -> hol.proof (hol.eq (hol.arr B hol.bool) (hol.eq B b_1) (hol.eq B b_1)) :=
  B : hol.type => b_1 : hol.term B => hol.REFL (hol.arr B hol.bool) (hol.eq B b_1).

(; Theorem: |- ((= ((= b) y)) ((= b) b)) ;)

(; dict ;)

def thm_2280 : B : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> hyp_1 : hol.proof (hol.eq B y_1 b_2) -> hol.proof (hol.eq hol.bool (hol.eq B b_2 y_1) (hol.eq B b_2 b_2)) :=
  B : hol.type => y_1 : hol.term B => b_2 : hol.term B => hyp_1 : hol.proof (hol.eq B y_1 b_2) => hol.APP_THM B hol.bool (hol.eq B b_2) (hol.eq B b_2) y_1 b_2 (thm_2279 B b_2) (thm_2278 B b_2 y_1 hyp_1).

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_2281 : B : hol.type -> x_1 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq B x_1 x_1) hol.true) :=
  B : hol.type => x_1 : hol.term B => (A : hol.type => x_1 : hol.term A => thm_179 A x_1) B x_1.

(; Theorem: |- ((= ((= b) b)) Data.Bool.T) ;)

(; dict ;)

def thm_2282 : B : hol.type -> b_1 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq B b_1 b_1) hol.true) :=
  B : hol.type => b_1 : hol.term B => (B : hol.type => x_1 : hol.term B => thm_2281 B x_1) B b_1.

(; Theorem: |- ((= ((= b) y)) Data.Bool.T) ;)

(; dict ;)

def thm_2283 : B : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> hyp_1 : hol.proof (hol.eq B y_1 b_2) -> hol.proof (hol.eq hol.bool (hol.eq B b_2 y_1) hol.true) :=
  B : hol.type => y_1 : hol.term B => b_2 : hol.term B => hyp_1 : hol.proof (hol.eq B y_1 b_2) => hol.TRANS hol.bool (hol.eq B b_2 y_1) (hol.eq B b_2 b_2) hol.true (thm_2280 B y_1 b_2 hyp_1) (thm_2282 B b_2).

(; Theorem: |- ((= ((Data.Bool./\ ((= a) a')) ((= b) y))) ((Data.Bool./\ ((= a) a')) Data.Bool.T)) ;)

(; dict ;)

def thm_2284 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.eq B y_1 b_2) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 y_1)) (hol.and (hol.eq A a_4 a_27_3) hol.true)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.eq B y_1 b_2) => hol.APP_THM hol.bool hol.bool (hol.and (hol.eq A a_4 a_27_3)) (hol.and (hol.eq A a_4 a_27_3)) (hol.eq B b_2 y_1) hol.true (thm_627 A a_27_3 a_4) (thm_2283 B y_1 b_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ ((= a) a')) Data.Bool.T)) ((= a) a')) ;)

(; dict ;)

def thm_2285 : A : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.eq A a_2 a_27_1) hol.true) (hol.eq A a_2 a_27_1)) :=
  A : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => (t_1 : hol.term hol.bool => thm_1197 t_1) (hol.eq A a_2 a_27_1).

(; Theorem: |- ((= ((Data.Bool./\ ((= a) a')) ((= b) y))) ((= a) a')) ;)

(; dict ;)

def thm_2286 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.eq B y_1 b_2) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 y_1)) (hol.eq A a_4 a_27_3)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.eq B y_1 b_2) => hol.TRANS hol.bool (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 y_1)) (hol.and (hol.eq A a_4 a_27_3) hol.true) (hol.eq A a_4 a_27_3) (thm_2284 B A y_1 b_2 a_27_3 a_4 hyp_1) (thm_2285 A a_27_3 a_4).

(; Theorem: |- ((= \lambda a'. ((Data.Bool./\ ((= a) a')) ((= b) y))) \lambda a'. ((= a) a')) ;)

(; dict ;)

def thm_2287 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hyp_1 : hol.proof (hol.eq B y_1 b_2) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1)) (a_27_4 : hol.term A => hol.eq A a_3 a_27_4)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => hyp_1 : hol.proof (hol.eq B y_1 b_2) => hol.ABS_THM A hol.bool (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1)) (a_27_4 : hol.term A => hol.eq A a_3 a_27_4) (a_27_4 : hol.term A => thm_2286 B A y_1 b_2 a_27_4 a_3 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda a'. ((Data.Bool./\ ((= a) a')) ((= b) y)))) (Data.Bool.? \lambda a'. ((= a) a'))) ;)

(; dict ;)

def thm_2288 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hyp_1 : hol.proof (hol.eq B y_1 b_2) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq A a_3 a_27_4))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => hyp_1 : hol.proof (hol.eq B y_1 b_2) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1)) (a_27_4 : hol.term A => hol.eq A a_3 a_27_4) (thm_350 A) (thm_2287 B A y_1 b_2 a_3 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda a'. ((= a) a'))) (Data.Bool.? \lambda a'. ((Data.Bool./\ ((= a) a')) ((= b) y)))) ;)

(; dict ;)

def thm_2289 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hyp_1 : hol.proof (hol.eq B y_1 b_2) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq A a_3 a_27_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1)))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => hyp_1 : hol.proof (hol.eq B y_1 b_2) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq A a_3 a_27_4)) (thm_2288 B A y_1 b_2 a_3 hyp_1).

(; Theorem: |- ((= (\lambda a'. ((= a) a') a)) ((= a) a)) ;)

(; dict ;)

def thm_2290 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool ((a_27_2 : hol.term A => hol.eq A a_1 a_27_2) a_1) (hol.eq A a_1 a_1)) :=
  A : hol.type => a_1 : hol.term A => hol.BETA_CONV A hol.bool (a_27_2 : hol.term A => hol.eq A a_1 a_27_2) a_1.

(; Theorem: |- ((= ((= a) a)) (\lambda a'. ((= a) a') a)) ;)

(; dict ;)

def thm_2291 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A a_1 a_1) ((a_27_2 : hol.term A => hol.eq A a_1 a_27_2) a_1)) :=
  A : hol.type => a_1 : hol.term A => hol.SYM hol.bool ((a_27_2 : hol.term A => hol.eq A a_1 a_27_2) a_1) (hol.eq A a_1 a_1) (thm_2290 A a_1).

(; Theorem: |- (\lambda a'. ((= a) a') a) ;)

(; dict ;)

def thm_2292 : A : hol.type -> a_1 : hol.term A -> hol.proof ((a_27_2 : hol.term A => hol.eq A a_1 a_27_2) a_1) :=
  A : hol.type => a_1 : hol.term A => hol.EQ_MP (hol.eq A a_1 a_1) ((a_27_2 : hol.term A => hol.eq A a_1 a_27_2) a_1) (thm_2291 A a_1) (thm_793 A a_1).

(; Theorem: |- (Data.Bool.? \lambda a'. ((= a) a')) ;)

(; dict ;)

def thm_2293 : A : hol.type -> a_1 : hol.term A -> hyp_1 : hol.proof ((a_27_2 : hol.term A => hol.eq A a_1 a_27_2) a_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_2 : hol.term A => hol.eq A a_1 a_27_2)) :=
  A : hol.type => a_1 : hol.term A => hyp_1 : hol.proof ((a_27_2 : hol.term A => hol.eq A a_1 a_27_2) a_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_2113 A x_1 P_2 hyp_1) A a_1 (a_27_2 : hol.term A => hol.eq A a_1 a_27_2) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda a'. ((= a) a')) ;)

(; dict ;)

def thm_2294 : A : hol.type -> a_1 : hol.term A -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_2 : hol.term A => hol.eq A a_1 a_27_2)) :=
  A : hol.type => a_1 : hol.term A => hol.PROVE_HYP ((a_27_2 : hol.term A => hol.eq A a_1 a_27_2) a_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_2 : hol.term A => hol.eq A a_1 a_27_2)) (thm_2292 A a_1) (hyp_1 : hol.proof ((a_27_2 : hol.term A => hol.eq A a_1 a_27_2) a_1) => thm_2293 A a_1 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda a'. ((Data.Bool./\ ((= a) a')) ((= b) y))) ;)

(; dict ;)

def thm_2295 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hyp_1 : hol.proof (hol.eq B y_1 b_2) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => hyp_1 : hol.proof (hol.eq B y_1 b_2) => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq A a_3 a_27_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) (thm_2289 B A y_1 b_2 a_3 hyp_1) (thm_2294 A a_3).

(; Theorem: |- (Data.Bool.? \lambda a'. ((Data.Bool./\ ((= a) a')) ((= b) y))) ;)

(; dict ;)

def thm_2296 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hyp_1 : hol.proof (hol.eq B y_1 b_2) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => hyp_1 : hol.proof (hol.eq B y_1 b_2) => hol.PROVE_HYP (hol.eq B y_1 b_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) (thm_2278 B b_2 y_1 hyp_1) (hyp_2 : hol.proof (hol.eq B y_1 b_2) => thm_2295 B A y_1 b_2 a_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((= y) b)) (Data.Bool.? \lambda a'. ((Data.Bool./\ ((= a) a')) ((= b) y)))) ;)

(; dict ;)

def thm_2297 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> b_2 : hol.term B -> y_3 : hol.term B -> hol.proof (hol.imp (hol.eq B y_3 b_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_1 a_27_4) (hol.eq B b_2 y_3)))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => b_2 : hol.term B => y_3 : hol.term B => hyp_1 : hol.proof (hol.eq B y_3 b_2) => thm_2296 B A y_3 b_2 a_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda a'. ((Data.Bool./\ ((= a) a')) ((= b) y)) x)) ((= y) b)))) ((Data.Bool.==> (Data.Bool.? \lambda a'. ((Data.Bool./\ ((= a) a')) ((= b) y)))) ((= y) b))) ;)

(; dict ;)

def thm_2298 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp ((a_27_5 : hol.term A => hol.and (hol.eq A a_3 a_27_5) (hol.eq B b_2 y_1)) x_4) (hol.eq B y_1 b_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) (hol.eq B y_1 b_2))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_757 A Q_1 P_2) A (hol.eq B y_1 b_2) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1)).

(; Theorem: |- ((Data.Bool./\ ((= a) a')) ((= b) y)) ;)

(; dict ;)

def thm_2299 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 y_1)) -> hol.proof (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 y_1)) => hyp_1.

(; Theorem: |- ((= b) y) ;)

(; dict ;)

def thm_2300 : A : hol.type -> B : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> y_3 : hol.term B -> b_4 : hol.term B -> hyp_1 : hol.proof (hol.and (hol.eq A a_2 a_27_1) (hol.eq B b_4 y_3)) -> hol.proof (hol.eq B b_4 y_3) :=
  A : hol.type => B : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => y_3 : hol.term B => b_4 : hol.term B => hyp_1 : hol.proof (hol.and (hol.eq A a_2 a_27_1) (hol.eq B b_4 y_3)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_93 p_1 q_2 hyp_1) (hol.eq A a_2 a_27_1) (hol.eq B b_4 y_3) hyp_1.

(; Theorem: |- ((= b) y) ;)

(; dict ;)

def thm_2301 : A : hol.type -> B : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> y_3 : hol.term B -> b_4 : hol.term B -> hyp_1 : hol.proof (hol.and (hol.eq A a_2 a_27_1) (hol.eq B b_4 y_3)) -> hol.proof (hol.eq B b_4 y_3) :=
  A : hol.type => B : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => y_3 : hol.term B => b_4 : hol.term B => hyp_1 : hol.proof (hol.and (hol.eq A a_2 a_27_1) (hol.eq B b_4 y_3)) => hol.PROVE_HYP (hol.and (hol.eq A a_2 a_27_1) (hol.eq B b_4 y_3)) (hol.eq B b_4 y_3) (thm_2299 B A y_3 b_4 a_27_1 a_2 hyp_1) (hyp_2 : hol.proof (hol.and (hol.eq A a_2 a_27_1) (hol.eq B b_4 y_3)) => thm_2300 A B a_27_1 a_2 y_3 b_4 hyp_2).

(; Theorem: |- ((= b) y) ;)

(; dict ;)

def thm_2302 : B : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> hyp_1 : hol.proof (hol.eq B b_2 y_1) -> hol.proof (hol.eq B b_2 y_1) :=
  B : hol.type => y_1 : hol.term B => b_2 : hol.term B => hyp_1 : hol.proof (hol.eq B b_2 y_1) => hyp_1.

(; Theorem: |- ((= (= y)) (= y)) ;)

(; dict ;)

def thm_2303 : B : hol.type -> y_1 : hol.term B -> hol.proof (hol.eq (hol.arr B hol.bool) (hol.eq B y_1) (hol.eq B y_1)) :=
  B : hol.type => y_1 : hol.term B => hol.REFL (hol.arr B hol.bool) (hol.eq B y_1).

(; Theorem: |- ((= ((= y) b)) ((= y) y)) ;)

(; dict ;)

def thm_2304 : B : hol.type -> b_1 : hol.term B -> y_2 : hol.term B -> hyp_1 : hol.proof (hol.eq B b_1 y_2) -> hol.proof (hol.eq hol.bool (hol.eq B y_2 b_1) (hol.eq B y_2 y_2)) :=
  B : hol.type => b_1 : hol.term B => y_2 : hol.term B => hyp_1 : hol.proof (hol.eq B b_1 y_2) => hol.APP_THM B hol.bool (hol.eq B y_2) (hol.eq B y_2) b_1 y_2 (thm_2303 B y_2) (thm_2302 B y_2 b_1 hyp_1).

(; Theorem: |- ((= ((= y) y)) Data.Bool.T) ;)

(; dict ;)

def thm_2305 : B : hol.type -> y_1 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq B y_1 y_1) hol.true) :=
  B : hol.type => y_1 : hol.term B => (B : hol.type => x_1 : hol.term B => thm_2281 B x_1) B y_1.

(; Theorem: |- ((= ((= y) b)) Data.Bool.T) ;)

(; dict ;)

def thm_2306 : B : hol.type -> b_1 : hol.term B -> y_2 : hol.term B -> hyp_1 : hol.proof (hol.eq B b_1 y_2) -> hol.proof (hol.eq hol.bool (hol.eq B y_2 b_1) hol.true) :=
  B : hol.type => b_1 : hol.term B => y_2 : hol.term B => hyp_1 : hol.proof (hol.eq B b_1 y_2) => hol.TRANS hol.bool (hol.eq B y_2 b_1) (hol.eq B y_2 y_2) hol.true (thm_2304 B b_1 y_2 hyp_1) (thm_2305 B y_2).

(; Theorem: |- ((= Data.Bool.T) ((= y) b)) ;)

(; dict ;)

def thm_2307 : B : hol.type -> b_1 : hol.term B -> y_2 : hol.term B -> hyp_1 : hol.proof (hol.eq B b_1 y_2) -> hol.proof (hol.eq hol.bool hol.true (hol.eq B y_2 b_1)) :=
  B : hol.type => b_1 : hol.term B => y_2 : hol.term B => hyp_1 : hol.proof (hol.eq B b_1 y_2) => hol.SYM hol.bool (hol.eq B y_2 b_1) hol.true (thm_2306 B b_1 y_2 hyp_1).

(; Theorem: |- ((= y) b) ;)

(; dict ;)

def thm_2308 : B : hol.type -> b_1 : hol.term B -> y_2 : hol.term B -> hyp_1 : hol.proof (hol.eq B b_1 y_2) -> hol.proof (hol.eq B y_2 b_1) :=
  B : hol.type => b_1 : hol.term B => y_2 : hol.term B => hyp_1 : hol.proof (hol.eq B b_1 y_2) => hol.EQ_MP hol.true (hol.eq B y_2 b_1) (thm_2307 B b_1 y_2 hyp_1) thm_5.

(; Theorem: |- ((= y) b) ;)

(; dict ;)

def thm_2309 : B : hol.type -> b_1 : hol.term B -> y_2 : hol.term B -> hyp_1 : hol.proof (hol.eq B b_1 y_2) -> hol.proof (hol.eq B y_2 b_1) :=
  B : hol.type => b_1 : hol.term B => y_2 : hol.term B => hyp_1 : hol.proof (hol.eq B b_1 y_2) => hol.PROVE_HYP (hol.eq B b_1 y_2) (hol.eq B y_2 b_1) (thm_2302 B y_2 b_1 hyp_1) (hyp_2 : hol.proof (hol.eq B b_1 y_2) => thm_2308 B b_1 y_2 hyp_2).

(; Theorem: |- ((= y) b) ;)

(; dict ;)

def thm_2310 : A : hol.type -> B : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> b_3 : hol.term B -> y_4 : hol.term B -> hyp_1 : hol.proof (hol.and (hol.eq A a_2 a_27_1) (hol.eq B b_3 y_4)) -> hol.proof (hol.eq B y_4 b_3) :=
  A : hol.type => B : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => b_3 : hol.term B => y_4 : hol.term B => hyp_1 : hol.proof (hol.and (hol.eq A a_2 a_27_1) (hol.eq B b_3 y_4)) => hol.PROVE_HYP (hol.eq B b_3 y_4) (hol.eq B y_4 b_3) (thm_2301 A B a_27_1 a_2 y_4 b_3 hyp_1) (hyp_2 : hol.proof (hol.eq B b_3 y_4) => thm_2309 B b_3 y_4 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((= a) a')) ((= b) y))) ((= y) b)) ;)

(; dict ;)

def thm_2311 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hol.proof (hol.imp (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 y_1)) (hol.eq B y_1 b_2)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 y_1)) => thm_2310 A B a_27_3 a_4 b_2 y_1 hyp_1.

(; Theorem: |- ((= (\lambda a'. ((Data.Bool./\ ((= a) a')) ((= b) y)) a')) ((Data.Bool./\ ((= a) a')) ((= b) y))) ;)

(; dict ;)

def thm_2312 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> y_2 : hol.term B -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool ((a_27_5 : hol.term A => hol.and (hol.eq A a_4 a_27_5) (hol.eq B b_3 y_2)) a_27_1) (hol.and (hol.eq A a_4 a_27_1) (hol.eq B b_3 y_2))) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => y_2 : hol.term B => b_3 : hol.term B => a_4 : hol.term A => hol.BETA_CONV A hol.bool (a_27_5 : hol.term A => hol.and (hol.eq A a_4 a_27_5) (hol.eq B b_3 y_2)) a_27_1.

(; Theorem: |- (\lambda a'. ((Data.Bool./\ ((= a) a')) ((= b) y)) a') ;)

(; dict ;)

def thm_2313 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> y_2 : hol.term B -> b_3 : hol.term B -> a_4 : hol.term A -> hyp_1 : hol.proof ((a_27_5 : hol.term A => hol.and (hol.eq A a_4 a_27_5) (hol.eq B b_3 y_2)) a_27_1) -> hol.proof ((a_27_5 : hol.term A => hol.and (hol.eq A a_4 a_27_5) (hol.eq B b_3 y_2)) a_27_1) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => y_2 : hol.term B => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof ((a_27_5 : hol.term A => hol.and (hol.eq A a_4 a_27_5) (hol.eq B b_3 y_2)) a_27_1) => hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= a) a')) ((= b) y)) ;)

(; dict ;)

def thm_2314 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_27_3 : hol.term A -> a_4 : hol.term A -> hyp_1 : hol.proof ((a_27_5 : hol.term A => hol.and (hol.eq A a_4 a_27_5) (hol.eq B b_2 y_1)) a_27_3) -> hol.proof (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_27_3 : hol.term A => a_4 : hol.term A => hyp_1 : hol.proof ((a_27_5 : hol.term A => hol.and (hol.eq A a_4 a_27_5) (hol.eq B b_2 y_1)) a_27_3) => hol.EQ_MP ((a_27_5 : hol.term A => hol.and (hol.eq A a_4 a_27_5) (hol.eq B b_2 y_1)) a_27_3) (hol.and (hol.eq A a_4 a_27_3) (hol.eq B b_2 y_1)) (thm_2312 B A a_27_3 y_1 b_2 a_4) (thm_2313 B A a_27_3 y_1 b_2 a_4 hyp_1).

(; Theorem: |- ((= y) b) ;)

(; dict ;)

def thm_2315 : A : hol.type -> B : hol.type -> a_27_1 : hol.term A -> a_2 : hol.term A -> b_3 : hol.term B -> y_4 : hol.term B -> hyp_1 : hol.proof ((a_27_5 : hol.term A => hol.and (hol.eq A a_2 a_27_5) (hol.eq B b_3 y_4)) a_27_1) -> hol.proof (hol.eq B y_4 b_3) :=
  A : hol.type => B : hol.type => a_27_1 : hol.term A => a_2 : hol.term A => b_3 : hol.term B => y_4 : hol.term B => hyp_1 : hol.proof ((a_27_5 : hol.term A => hol.and (hol.eq A a_2 a_27_5) (hol.eq B b_3 y_4)) a_27_1) => thm_2311 B A y_4 b_3 a_27_1 a_2 (thm_2314 B A y_4 b_3 a_27_1 a_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda a'. ((Data.Bool./\ ((= a) a')) ((= b) y)) a')) ((= y) b)) ;)

(; dict ;)

def thm_2316 : B : hol.type -> A : hol.type -> a_27_1 : hol.term A -> y_2 : hol.term B -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.imp ((a_27_5 : hol.term A => hol.and (hol.eq A a_4 a_27_5) (hol.eq B b_3 y_2)) a_27_1) (hol.eq B y_2 b_3)) :=
  B : hol.type => A : hol.type => a_27_1 : hol.term A => y_2 : hol.term B => b_3 : hol.term B => a_4 : hol.term A => hyp_1 : hol.proof ((a_27_5 : hol.term A => hol.and (hol.eq A a_4 a_27_5) (hol.eq B b_3 y_2)) a_27_1) => thm_2315 A B a_27_1 a_4 b_3 y_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda a'. ((Data.Bool.==> (\lambda a'. ((Data.Bool./\ ((= a) a')) ((= b) y)) a')) ((= y) b))) ;)

(; dict ;)

def thm_2317 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.forall A (a_27_4 : hol.term A => hol.imp ((a_27_5 : hol.term A => hol.and (hol.eq A a_3 a_27_5) (hol.eq B b_2 y_1)) a_27_4) (hol.eq B y_1 b_2))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => a_27_4 : hol.term A => thm_2316 B A a_27_4 y_1 b_2 a_3.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda a'. ((Data.Bool./\ ((= a) a')) ((= b) y)))) ((= y) b)) ;)

(; dict ;)

def thm_2318 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) (hol.eq B y_1 b_2)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => thm_2298 B A y_1 b_2 a_3 (thm_2317 B A y_1 b_2 a_3).

(; Theorem: |- (Data.Bool.? \lambda a'. ((Data.Bool./\ ((= a) a')) ((= b) y))) ;)

(; dict ;)

def thm_2319 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) => hyp_1.

(; Theorem: |- ((= y) b) ;)

(; dict ;)

def thm_2320 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> b_2 : hol.term B -> y_3 : hol.term B -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_1 a_27_4) (hol.eq B b_2 y_3))) -> hol.proof (hol.eq B y_3 b_2) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => b_2 : hol.term B => y_3 : hol.term B => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_1 a_27_4) (hol.eq B b_2 y_3))) => thm_2318 B A y_3 b_2 a_1 (thm_2319 B A y_3 b_2 a_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda a'. ((Data.Bool./\ ((= a) a')) ((= b) y)))) ((= y) b)) ;)

(; dict ;)

def thm_2321 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) (hol.eq B y_1 b_2)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => hol.PROP_EXT (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) (hol.eq B y_1 b_2) (hyp_1 : hol.proof (hol.eq B y_1 b_2) => thm_2297 A B a_3 b_2 y_1 (thm_2278 B b_2 y_1 hyp_1)) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) => (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) => thm_2320 A B a_3 b_2 y_1 hyp_2) (thm_2319 B A y_1 b_2 a_3 hyp_1)).

(; Theorem: |- ((= (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') y)))) ((= y) b)) ;)

(; dict ;)

def thm_2322 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 y_1))) (hol.eq B y_1 b_2)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.and (hol.eq A a_3 a_27_4) (hol.eq B b_2 y_1))) (hol.eq B y_1 b_2)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 y_1))) (hol.eq B y_1 b_2)) (thm_2277 B A y_1 b_2 a_3) (thm_2321 B A y_1 b_2 a_3).

(; Theorem: |- ((= (\lambda b'. (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) b)) ;)

(; dict ;)

def thm_2323 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_1) (hol.eq B y_1 b_2)) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => b_2 : hol.term B => a_3 : hol.term A => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_4 y_1))) (hol.eq B y_1 b_2)) (hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_3 b_2) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_1) (hol.eq B y_1 b_2)) (thm_2271 B A y_1 b_2 a_3) (thm_2322 B A y_1 b_2 a_3).

(; Theorem: |- (Data.Bool.! \lambda y. ((= (\lambda b'. (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))) y)) ((= y) b))) ;)

(; dict ;)

def thm_2324 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.forall B (y_3 : hol.term B => hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_3) (hol.eq B y_3 b_1))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => y_3 : hol.term B => thm_2323 A B y_3 b_1 a_2.

(; Theorem: |- ((= (select \lambda b'. (Data.Bool.? \lambda a'. ((= ((Data.Pair., a) b)) ((Data.Pair., a') b'))))) b) ;)

(; dict ;)

def thm_2325 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq B (hol.select B (b_27_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_3)))) b_1) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => thm_2263 A B b_1 a_2 (hol.EQ_MP (hol.forall B (y_3 : hol.term B => hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_3) (hol.eq B y_3 b_1))) (hol.forall B (y_3 : hol.term B => hol.eq hol.bool ((b_27_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_5 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_5 b_27_4))) y_3) (hol.eq B y_3 b_1))) (thm_2266 A B b_1 a_2) (thm_2324 A B b_1 a_2)).

(; Theorem: |- ((= (Data.Pair.snd ((Data.Pair., a) b))) b) ;)

(; dict ;)

def thm_2326 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_2 b_1)) b_1) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.EQ_MP (hol.eq B (hol.select B (b_27_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_27_4 : hol.term A => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C B A a_2 b_1) (Data_2EPair_2E_2C B A a_27_4 b_27_3)))) b_1) (hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_2 b_1)) b_1) (thm_2261 A B b_1 a_2) (thm_2325 A B b_1 a_2).

(; Theorem: |- (Data.Bool.! \lambda b. ((= (Data.Pair.snd ((Data.Pair., a) b))) b)) ;)

(; dict ;)

def thm_2327 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2)) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => b_2 : hol.term B => thm_2326 A B b_2 a_1.

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (Data.Pair.snd ((Data.Pair., a) b))) b))) ;)

(; dict ;)

def thm_2328 : B : hol.type -> A : hol.type -> hol.proof (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => hol.EQ_MP (hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2)) (hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2)) (thm_2251 A B a_1) (thm_2327 A B a_1).

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (Data.Pair.snd ((Data.Pair., a) b))) b))) ;)

(; thm ;)

def thm_2329 : B : hol.type -> A : hol.type -> hol.proof (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2))) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd B A (Data_2EPair_2E_2C B A a_1 b_2)) b_2))) (thm_2248 B A) (thm_2328 B A).
