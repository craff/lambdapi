
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME bool_2Dclass_2Da3.

Data_2EBool_2E_3F : A : hol.type -> hol.term A.

(; axiom ;)

thm_0 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) hol.not (p_1 : hol.term hol.bool => hol.imp p_1 hol.false)).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) q_2))).

(; axiom ;)

thm_2 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1)).

(; axiom ;)

thm_3 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))).

(; axiom ;)

thm_4 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)).

(; axiom ;)

thm_5 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true)).

(; axiom ;)

thm_6 : hol.proof hol.true.

(; axiom ;)

thm_7 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.imp t_1 t_1)).

(; axiom ;)

thm_8 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))).

(; axiom ;)

thm_9 : hol.proof (hol.eq hol.bool hol.false (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1))).

(; axiom ;)

thm_10 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false).

(; axiom ;)

thm_11 : hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true).

(; axiom ;)

thm_12 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)).

(; axiom ;)

thm_13 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)).

(; axiom ;)

thm_14 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)).

(; axiom ;)

thm_15 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))).

(; axiom ;)

thm_16 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))).

(; axiom ;)

thm_17 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)).

(; axiom ;)

thm_18 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))).

(; axiom ;)

thm_19 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.or (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp p_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))).

(; axiom ;)

thm_20 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)).

(; axiom ;)

thm_21 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)).

(; axiom ;)

thm_22 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)).

(; axiom ;)

thm_23 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)).

(; axiom ;)

thm_24 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)).

(; axiom ;)

thm_25 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)).

(; axiom ;)

thm_26 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))))).

(; axiom ;)

thm_27 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))).

(; axiom ;)

thm_28 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)))).

(; axiom ;)

thm_29 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))).

(; axiom ;)

thm_30 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))))).

(; axiom ;)

thm_31 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2))))).

(; axiom ;)

thm_32 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))))).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_33 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr A hol.bool)).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_34 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_35 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (thm_34 A) (thm_34 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))))) (Data.Bool.! \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))))) ;)

(; dict ;)

def thm_36 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (thm_33 A) (thm_35 A).

(; Theorem: |- ((= (= (Data.Bool.~ P))) (= (Data.Bool.~ P))) ;)

(; dict ;)

def thm_37 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not P_1)) (hol.eq hol.bool (hol.not P_1))) :=
  P_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not P_1)).

(; Theorem: |- ((= (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P)) ((Data.Bool.==> P) Data.Bool.F)) ;)

(; dict ;)

def thm_38 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1) (hol.imp P_1 hol.false)) :=
  P_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1.

(; Theorem: |- ((= ((= (Data.Bool.~ P)) (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P))) ((= (Data.Bool.~ P)) ((Data.Bool.==> P) Data.Bool.F))) ;)

(; dict ;)

def thm_39 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false))) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not P_1)) (hol.eq hol.bool (hol.not P_1)) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1) (hol.imp P_1 hol.false) (thm_37 P_1) (thm_38 P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_40 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool P_1 P_1) :=
  P_1 : hol.term hol.bool => hol.REFL hol.bool P_1.

(; Theorem: |- ((= (Data.Bool.~ P)) (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P)) ;)

(; dict ;)

def thm_41 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not (p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1 P_1 thm_0 (thm_40 P_1).

(; Theorem: |- ((= (Data.Bool.~ P)) ((Data.Bool.==> P) Data.Bool.F)) ;)

(; dict ;)

def thm_42 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false)) :=
  P_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false)) (thm_39 P_1) (thm_41 P_1).

(; Theorem: |- ((= ((Data.Bool.==> P) Data.Bool.F)) (Data.Bool.~ P)) ;)

(; dict ;)

def thm_43 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp P_1 hol.false) (hol.not P_1)) :=
  P_1 : hol.term hol.bool => hol.SYM hol.bool (hol.not P_1) (hol.imp P_1 hol.false) (thm_42 P_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) Data.Bool.F)) (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_44 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.false) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (P_1 : hol.term hol.bool => thm_43 P_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)).

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_45 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_46 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_47 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) => hol.EQ_MP p_1 q_2 (thm_45 q_2 p_1 hyp_2) (thm_46 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_48 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.imp p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_2 : hol.proof p_2 => thm_47 p_2 q_1 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= p) q)) ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_49 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 q_1) (hol.imp p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => thm_48 q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ((Data.Bool.==> (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_50 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_49 q_1 p_2) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1).

(; Theorem: |- ((= (= (Data.Bool.? P))) (= (Data.Bool.? P))) ;)

(; dict ;)

def thm_51 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)).

(; Theorem: |- ((= (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_52 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1.

(; Theorem: |- ((= ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P))) ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_53 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_51 A P_1) (thm_52 A P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_54 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) P_1 P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) P_1.

(; Theorem: |- ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) ;)

(; dict ;)

def thm_55 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1 P_1 (thm_1 A) (thm_54 A P_1).

(; Theorem: |- ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_56 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (thm_53 A P_1) (thm_55 A P_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_57 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => thm_50 A P_1 (thm_56 A P_1).

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_58 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)) ;)

(; dict ;)

def thm_59 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => thm_57 A P_1 (thm_58 A P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_60 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) => thm_59 A P_2 hyp_1 Q_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q)) ;)

(; dict ;)

def thm_61 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_62 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) Q_2)) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof Q_2 :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => Q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) Q_2)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => thm_60 A Q_2 P_1 hyp_2 (thm_61 A Q_2 P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? P)) Q) ;)

(; dict ;)

def thm_63 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) => thm_62 A P_2 Q_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) ((Data.Bool.==> (Data.Bool.? P)) Q)) ;)

(; dict ;)

def thm_64 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => thm_63 A Q_1 P_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (p x) x)) Data.Bool.F))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) Data.Bool.F)) ;)

(; dict ;)

def thm_65 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_2 : hol.term A => hol.imp ((x_3 : hol.term A => p_1 x_3) x_2) hol.false)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.false)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_64 A Q_1 P_2) A hol.false (x_2 : hol.term A => p_1 x_2).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_66 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_67 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_66 t_1) (thm_66 t_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_68 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool) (hol.forall hol.bool)) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_69 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_70 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_69 thm_69.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) ;)

(; dict ;)

def thm_71 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_68 thm_70.

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_72 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_73 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_72 t_1) (thm_72 t_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_74 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_2 t_1.

(; Theorem: |- ((= (= ((Data.Bool./\ p) q))) (= ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_75 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_76 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q))) ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_77 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_75 q_1 p_2) (thm_76 q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool./\ p))) (= (Data.Bool./\ p))) ;)

(; dict ;)

def thm_78 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_79 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1.

(; Theorem: |- ((= ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p))) ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_80 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)) (thm_78 p_1) (thm_79 p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_81 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 p_1) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool p_1.

(; Theorem: |- ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) ;)

(; dict ;)

def thm_82 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1 p_1 thm_3 (thm_81 p_1).

(; Theorem: |- ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_83 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) (thm_80 p_1) (thm_82 p_1).

(; Theorem: |- ((= q) q) ;)

(; dict ;)

def thm_84 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_1 q_1) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) ;)

(; dict ;)

def thm_85 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1 q_1 (thm_83 p_2) (thm_84 q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_86 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) (thm_77 q_1 p_2) (thm_85 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_87 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_88 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hol.EQ_MP (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_86 q_1 p_2) (thm_87 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) q))) q) ;)

(; dict ;)

def thm_89 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 q_1)) q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_88 q_1 p_2 hyp_1 q_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_90 : q_1 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof q_1 :=
  q_1 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_91 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.PROP_EXT p_2 q_1 (hyp_3 : hol.proof q_1 => thm_46 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_90 q_1 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_92 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.EQ_MP p_1 q_2 (thm_91 q_2 p_1 hyp_1 hyp_2) (thm_46 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) q) ;)

(; dict ;)

def thm_93 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 q_2) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_92 p_1 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) q)) ;)

(; dict ;)

def thm_94 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_93 p_2 q_1 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_95 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_89 q_2 p_1 hyp_1 (thm_94 q_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_96 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_86 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) x)) ;)

(; dict ;)

def thm_97 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) -> hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) x) ;)

(; dict ;)

def thm_98 : p_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) -> hol.proof (hol.imp q_3 x_2) :=
  p_1 : hol.term hol.bool => x_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) => thm_97 x_2 q_3 p_1 hyp_2 (thm_46 p_1 hyp_1).

(; Theorem: |- x ;)

(; dict ;)

def thm_99 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) -> hol.proof x_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) => thm_98 p_2 x_3 q_1 hyp_1 hyp_3 (thm_90 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x) ;)

(; dict ;)

def thm_100 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.imp (hol.imp p_3 (hol.imp q_2 x_1)) x_1) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hyp_3 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => thm_99 q_2 p_3 x_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_101 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => x_3 : hol.term hol.bool => thm_100 x_3 q_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_102 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1) (thm_96 q_1 p_2) (thm_101 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= q) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_103 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool q_2 (hol.and p_1 q_2)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hol.PROP_EXT q_2 (hol.and p_1 q_2) (hyp_2 : hol.proof (hol.and p_1 q_2) => thm_95 p_1 q_2 hyp_2) (hyp_2 : hol.proof q_2 => thm_102 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_104 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_103 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_105 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_73 t_1) (thm_74 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => thm_104 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_106 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_107 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_106 t_1) (thm_106 t_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_108 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => thm_4 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_109 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_103 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_110 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_107 t_1) (thm_108 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => thm_109 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_111 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_112 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_111 t_1) (thm_111 t_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_113 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => thm_5 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_114 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_103 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_115 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_112 t_1) (thm_113 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => thm_114 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_116 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_117 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_116 t_1) (thm_116 t_1).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_118 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_119 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_118 thm_118.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) ;)

(; dict ;)

def thm_120 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_68 thm_119.

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_121 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool) (hol.eq hol.bool)) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool).

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_122 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_123 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_122 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_124 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_123 t_1 hyp_1) thm_6.

(; Theorem: |- t ;)

(; dict ;)

def thm_125 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_126 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_125 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_6).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_127 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_124 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_126 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> t) t)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_128 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_127 t_1) (hol.imp t_1 t_1).

(; Theorem: |- ((Data.Bool.==> t) t) ;)

(; dict ;)

def thm_129 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 t_1) :=
  t_1 : hol.term hol.bool => thm_7 t_1.

(; Theorem: |- ((= ((Data.Bool.==> t) t)) Data.Bool.T) ;)

(; dict ;)

def thm_130 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_128 t_1) (thm_129 t_1).

(; Theorem: |- ((= (= ((Data.Bool.==> t) t))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_131 : t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp t_1 t_1) hol.true thm_121 (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_116 t_1) (thm_130 t_1)).

(; Theorem: |- ((= Data.Bool.T) Data.Bool.T) ;)

(; dict ;)

def thm_132 : hol.proof (hol.eq hol.bool hol.true hol.true) :=
  hol.REFL hol.bool hol.true.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_133 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true) hol.true hol.true (thm_131 t_1) thm_132.

(; Theorem: |- ((= ((= Data.Bool.T) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_134 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true) (thm_133 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_135 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_134 t_1) thm_132.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_136 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_103 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_137 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_117 t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) thm_120 thm_135 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => thm_136 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_138 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_8 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_139 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (thm_137 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_66 t_1) (thm_138 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_140 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_115 t_1) (thm_139 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_141 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (thm_110 t_1) (thm_140 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_142 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (thm_105 t_1) (thm_141 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_143 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => thm_142 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_144 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_95 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_145 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) thm_71 thm_143 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => thm_144 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_146 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_95 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_147 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_145 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) => thm_146 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_148 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_95 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_149 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (thm_147 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) => thm_148 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_150 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_95 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_151 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_149 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) => thm_150 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (p x)) Data.Bool.F)) (Data.Bool.~ (p x))) ;)

(; dict ;)

def thm_152 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (p_2 x_1) hol.false) (hol.not (p_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_67 t_1) (thm_151 t_1)) (p_2 x_1).

(; Theorem: |- ((= Data.Bool.~) Data.Bool.~) ;)

(; dict ;)

def thm_153 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) hol.not hol.not) :=
  hol.REFL (hol.arr hol.bool hol.bool) hol.not.

(; Theorem: |- ((= ((= (p x)) Data.Bool.F)) ((= (p x)) Data.Bool.F)) ;)

(; dict ;)

def thm_154 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_2 x_1) hol.false) (hol.eq hol.bool (p_2 x_1) hol.false)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (p_2 x_1) hol.false).

(; Theorem: |- ((= ((= (p x)) Data.Bool.F)) ((= (p x)) Data.Bool.F)) ;)

(; dict ;)

def thm_155 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_2 x_1) hol.false) (hol.eq hol.bool (p_2 x_1) hol.false)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (p_2 x_1) hol.false) (hol.eq hol.bool (p_2 x_1) hol.false) (hol.eq hol.bool (p_2 x_1) hol.false) (thm_154 A x_1 p_2) (thm_154 A x_1 p_2).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_156 : hyp_1 : hol.proof hol.false -> hol.proof hol.false :=
  hyp_1 : hol.proof hol.false => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda p. p) ;)

(; dict ;)

def thm_157 : hyp_1 : hol.proof hol.false -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1)) :=
  hyp_1 : hol.proof hol.false => hol.EQ_MP hol.false (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1)) thm_9 (thm_156 hyp_1).

(; Theorem: |- P ;)

(; dict ;)

def thm_158 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.false -> hol.proof P_1 :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => thm_157 hyp_1 P_1.

(; Theorem: |- ((Data.Bool.==> Data.Bool.F) P) ;)

(; dict ;)

def thm_159 : P_1 : hol.term hol.bool -> hol.proof (hol.imp hol.false P_1) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => thm_158 P_1 hyp_1.

(; Theorem: |- (Data.Bool.~ P) ;)

(; dict ;)

def thm_160 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not P_1) -> hol.proof (hol.not P_1) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> P) Data.Bool.F) ;)

(; dict ;)

def thm_161 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not P_1) -> hol.proof (hol.imp P_1 hol.false) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => hol.EQ_MP (hol.not P_1) (hol.imp P_1 hol.false) (thm_42 P_1) (thm_160 P_1 hyp_1).

(; Theorem: |- P ;)

(; dict ;)

def thm_162 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof P_1 -> hol.proof P_1 :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof P_1 => hyp_1.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_163 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof P_1 -> hyp_2 : hol.proof (hol.not P_1) -> hol.proof hol.false :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof P_1 => hyp_2 : hol.proof (hol.not P_1) => thm_161 P_1 hyp_2 (thm_162 P_1 hyp_1).

(; Theorem: |- ((= P) Data.Bool.F) ;)

(; dict ;)

def thm_164 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not P_1) -> hol.proof (hol.eq hol.bool P_1 hol.false) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => hol.PROP_EXT P_1 hol.false (hyp_2 : hol.proof hol.false => thm_159 P_1 (thm_156 hyp_2)) (hyp_2 : hol.proof P_1 => thm_163 P_1 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ P)) ((= P) Data.Bool.F)) ;)

(; dict ;)

def thm_165 : P_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.not P_1) (hol.eq hol.bool P_1 hol.false)) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => thm_164 P_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ (p x))) ((= (p x)) Data.Bool.F)) ;)

(; dict ;)

def thm_166 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.not (p_2 x_1)) (hol.eq hol.bool (p_2 x_1) hol.false)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (P_1 : hol.term hol.bool => thm_165 P_1) (p_2 x_1).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.~ (p x))) ;)

(; dict ;)

def thm_167 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) => hyp_1.

(; Theorem: |- (Data.Bool.~ (p x)) ;)

(; dict ;)

def thm_168 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) -> hol.proof (hol.not (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) => thm_167 A p_2 hyp_1 x_1.

(; Theorem: |- ((= (p x)) Data.Bool.F) ;)

(; dict ;)

def thm_169 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) -> hol.proof (hol.eq hol.bool (p_2 x_1) hol.false) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) => thm_166 A x_1 p_2 (thm_168 A x_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (p x))) (Data.Bool.~ Data.Bool.F)) ;)

(; dict ;)

def thm_170 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) -> hol.proof (hol.eq hol.bool (hol.not (p_2 x_1)) (hol.not hol.false)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) => hol.APP_THM hol.bool hol.bool hol.not hol.not (p_2 x_1) hol.false thm_153 ((A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) => hol.EQ_MP (hol.eq hol.bool (p_2 x_1) hol.false) (hol.eq hol.bool (p_2 x_1) hol.false) (thm_155 A x_1 p_2) (thm_169 A x_1 p_2 hyp_1)) A x_1 p_2 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_171 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.REFL hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_172 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_171 thm_171.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ;)

(; dict ;)

def thm_173 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false)) :=
  hol.REFL hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ;)

(; dict ;)

def thm_174 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false)) :=
  hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_173 thm_173.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_175 : hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_103 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true) hyp_1.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_176 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hol.PROVE_HYP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) (hol.EQ_MP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_174 thm_10) (hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) => thm_175 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_177 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) thm_176 (hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_171 thm_11).

(; Theorem: |- ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_178 : hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) -> hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true) :=
  hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_95 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true) hyp_1.

(; Theorem: |- ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_179 : hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true) :=
  hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_177 (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) => thm_178 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (p x))) Data.Bool.T) ;)

(; dict ;)

def thm_180 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) -> hol.proof (hol.eq hol.bool (hol.not (p_2 x_1)) hol.true) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) => hol.TRANS hol.bool (hol.not (p_2 x_1)) (hol.not hol.false) hol.true (thm_170 A x_1 p_2 hyp_1) (hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_172 thm_179).

(; Theorem: |- ((= ((Data.Bool.==> (p x)) Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_181 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) -> hol.proof (hol.eq hol.bool (hol.imp (p_2 x_1) hol.false) hol.true) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) => hol.TRANS hol.bool (hol.imp (p_2 x_1) hol.false) (hol.not (p_2 x_1)) hol.true (thm_152 A x_1 p_2) (thm_180 A x_1 p_2 hyp_1).

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool.==> (p x)) Data.Bool.F)) ;)

(; dict ;)

def thm_182 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) -> hol.proof (hol.eq hol.bool hol.true (hol.imp (p_2 x_1) hol.false)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) => hol.SYM hol.bool (hol.imp (p_2 x_1) hol.false) hol.true (thm_181 A x_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (p x)) Data.Bool.F) ;)

(; dict ;)

def thm_183 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) -> hol.proof (hol.imp (p_2 x_1) hol.false) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) => hol.EQ_MP hol.true (hol.imp (p_2 x_1) hol.false) (thm_182 A x_1 p_2 hyp_1) thm_6.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_184 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (p_2 x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hyp_1.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_185 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) -> hol.proof hol.false :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) => thm_183 A x_1 p_2 hyp_2 (thm_184 A x_1 p_2 hyp_1).

(; Theorem: |- ((= (\lambda x. (p x) x)) (p x)) ;)

(; dict ;)

def thm_186 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => p_2 x_3) x_1) (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (x_3 : hol.term A => p_2 x_3) x_1.

(; Theorem: |- (\lambda x. (p x) x) ;)

(; dict ;)

def thm_187 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) -> hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) => hyp_1.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_188 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) -> hol.proof (p_2 x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) => hol.EQ_MP ((x_3 : hol.term A => p_2 x_3) x_1) (p_2 x_1) (thm_186 A x_1 p_2) (thm_187 A x_1 p_2 hyp_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_189 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) -> hyp_2 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) -> hol.proof hol.false :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) => hyp_2 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) => (hyp_3 : hol.proof (p_2 x_1) => thm_185 A x_1 p_2 hyp_3 hyp_1) (thm_188 A x_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (\lambda x. (p x) x)) Data.Bool.F) ;)

(; dict ;)

def thm_190 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) -> hol.proof (hol.imp ((x_3 : hol.term A => p_2 x_3) x_1) hol.false) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3))) => hyp_2 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) => thm_189 A x_1 p_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (p x) x)) Data.Bool.F)) ;)

(; dict ;)

def thm_191 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.imp ((x_3 : hol.term A => p_1 x_3) x_2) hol.false)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) => x_2 : hol.term A => thm_190 A x_2 p_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) Data.Bool.F) ;)

(; dict ;)

def thm_192 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.false) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) => thm_65 A p_1 (thm_191 A p_1 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_193 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) => hyp_1.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_194 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) -> hol.proof hol.false :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) => thm_192 A p_1 hyp_1 (thm_193 A p_1 hyp_2).

(; Theorem: |- (Data.Bool.~ (Data.Bool.? \lambda x. (p x))) ;)

(; dict ;)

def thm_195 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) -> hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) => hol.EQ_MP (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.false) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (thm_44 A p_1) (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) => thm_194 A p_1 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_196 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) => thm_195 A p_1 hyp_1.

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_197 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= \lambda x. (Data.Bool.~ (p x))) \lambda x. (Data.Bool.~ (p x))) ;)

(; dict ;)

def thm_198 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)) (x_2 : hol.term A => hol.not (p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)).

(; Theorem: |- ((= \lambda x. (Data.Bool.~ (p x))) \lambda x. (Data.Bool.~ (p x))) ;)

(; dict ;)

def thm_199 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)) (x_2 : hol.term A => hol.not (p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr A hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)) (x_2 : hol.term A => hol.not (p_1 x_2)) (x_2 : hol.term A => hol.not (p_1 x_2)) (thm_198 A p_1) (thm_198 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_200 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.not (p_1 x_2)) (x_2 : hol.term A => hol.not (p_1 x_2)) (thm_197 A) (thm_199 A p_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) Data.Bool.F)) (Data.Bool.~ (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ;)

(; dict ;)

def thm_201 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) hol.false) (hol.not (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_138 t_1) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_202 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_203 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (thm_202 t_1) (thm_202 t_1).

(; Theorem: |- ((= ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ((Data.Bool./\ (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t))) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)))) ;)

(; dict ;)

def thm_204 : hyp_1 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)))) :=
  hyp_1 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_103 p_1 q_2 hyp_1) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ((Data.Bool./\ (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t))) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)))) ;)

(; dict ;)

def thm_205 : hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)))) :=
  hol.PROVE_HYP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)))) thm_12 (hyp_1 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) => thm_204 hyp_1).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t))) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_206 : hol.proof (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hol.EQ_MP (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) thm_205 thm_177.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) p))) p) ;)

(; dict ;)

def thm_207 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 p_2)) p_2) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_88 q_1 p_2 hyp_1 p_2.

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_208 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.SYM hol.bool p_1 q_2 (thm_91 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_209 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP q_1 p_2 (thm_208 p_2 q_1 hyp_1 hyp_2) (thm_90 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_210 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_209 q_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_211 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_210 p_2 q_1 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_212 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_207 q_1 p_2 hyp_1 (thm_211 q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_213 : hyp_1 : hol.proof (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  hyp_1 : hol.proof (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_212 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_214 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  hol.PROVE_HYP (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) thm_206 (hyp_1 : hol.proof (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) => thm_213 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ t))) t) ;)

(; dict ;)

def thm_215 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) :=
  t_1 : hol.term hol.bool => thm_214 t_1.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) (Data.Bool.? \lambda x. (p x))) ;)

(; dict ;)

def thm_216 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (thm_203 t_1) (thm_215 t_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) Data.Bool.F)) (Data.Bool.? \lambda x. (p x))) ;)

(; dict ;)

def thm_217 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) hol.false) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) hol.false) (hol.not (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (thm_201 A p_1) (thm_216 A p_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (p x))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) Data.Bool.F)) ;)

(; dict ;)

def thm_218 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) hol.false)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) hol.false) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (thm_217 A p_1).

(; Theorem: |- ((= (p x)) (\lambda x. (p x) x)) ;)

(; dict ;)

def thm_219 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_2 x_1) ((x_3 : hol.term A => p_2 x_3) x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool ((x_3 : hol.term A => p_2 x_3) x_1) (p_2 x_1) (thm_186 A x_1 p_2).

(; Theorem: |- (\lambda x. (p x) x) ;)

(; dict ;)

def thm_220 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hol.EQ_MP (p_2 x_1) ((x_3 : hol.term A => p_2 x_3) x_1) (thm_219 A x_1 p_2) (thm_184 A x_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) (Data.Bool.? P)) ;)

(; dict ;)

def thm_221 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_56 A P_1).

(; Theorem: |- ((Data.Bool.==> (P x)) Q) ;)

(; dict ;)

def thm_222 : A : hol.type -> Q_1 : hol.term hol.bool -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) -> hol.proof (hol.imp (P_3 x_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) => thm_61 A Q_1 P_3 hyp_1 x_2.

(; Theorem: |- (P x) ;)

(; dict ;)

def thm_223 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (P_2 x_1) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_224 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (P_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) -> hol.proof Q_3 :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (P_2 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) => thm_222 A Q_3 x_1 P_2 hyp_2 (thm_223 A x_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_225 : A : hol.type -> x_1 : hol.term A -> Q_2 : hol.term hol.bool -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_3 x_1) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) Q_2) :=
  A : hol.type => x_1 : hol.term A => Q_2 : hol.term hol.bool => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_3 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) => thm_224 A x_1 P_3 Q_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda Q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q)) ;)

(; dict ;)

def thm_226 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => Q_3 : hol.term hol.bool => thm_225 A x_1 Q_3 P_2 hyp_1.

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_227 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hol.EQ_MP (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) (thm_221 A P_2) (thm_226 A x_1 P_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_228 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_227 A x_1 P_2 hyp_1) A x_1 (x_3 : hol.term A => p_2 x_3) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_229 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hol.PROVE_HYP ((x_3 : hol.term A => p_2 x_3) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (thm_220 A x_1 p_2 hyp_1) (hyp_2 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) => thm_228 A x_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) Data.Bool.F) ;)

(; dict ;)

def thm_230 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) hol.false) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) hol.false) (thm_218 A p_2) (thm_229 A x_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.~ (Data.Bool.? \lambda x. (p x))) ;)

(; dict ;)

def thm_231 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) -> hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) => hyp_1.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_232 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hyp_2 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) -> hol.proof hol.false :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hyp_2 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) => thm_230 A x_1 p_2 hyp_1 (thm_231 A p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (p x)) Data.Bool.F) ;)

(; dict ;)

def thm_233 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) -> hol.proof (hol.imp (p_2 x_1) hol.false) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) => hyp_2 : hol.proof (p_2 x_1) => thm_232 A x_1 p_2 hyp_2 hyp_1.

(; Theorem: |- (Data.Bool.~ (p x)) ;)

(; dict ;)

def thm_234 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) -> hol.proof (hol.not (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) => hol.EQ_MP (hol.imp (p_2 x_1) hol.false) (hol.not (p_2 x_1)) (thm_152 A x_1 p_2) (thm_233 A x_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.~ (p x))) ;)

(; dict ;)

def thm_235 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) => x_2 : hol.term A => thm_234 A x_2 p_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_236 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) => hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (thm_200 A p_1) (thm_235 A p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_237 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) => thm_196 A p_1 (thm_167 A p_1 hyp_1)) (hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) => thm_236 A p_1 (thm_231 A p_1 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_238 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_237 A p_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) ;)

(; thm ;)

def thm_239 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))))) (thm_36 A) (thm_238 A).

(; Theorem: |- ((= ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b))) ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b))) ;)

(; dict ;)

def thm_240 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)).

(; Theorem: |- ((= ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b))) ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b))) ;)

(; dict ;)

def thm_241 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) (thm_240 b_1 a_2) (thm_240 b_1 a_2).

(; Theorem: |- ((= (= (\lambda _420. ((= ((= _420) (Data.Bool.~ b))) ((= (Data.Bool.~ _420)) b)) a))) (= (\lambda _420. ((= ((= _420) (Data.Bool.~ b))) ((= (Data.Bool.~ _420)) b)) a))) ;)

(; dict ;)

def thm_242 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) a_1)) (hol.eq hol.bool ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) a_1))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) a_1)).

(; Theorem: |- ((= (\lambda _420. ((= ((= _420) (Data.Bool.~ b))) ((= (Data.Bool.~ _420)) b)) Data.Bool.F)) ((= ((= Data.Bool.F) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.F)) b))) ;)

(; dict ;)

def thm_243 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__420_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_2 (hol.not b_1)) (hol.eq hol.bool (hol.not __420_2) b_1)) hol.false) (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_1)) (hol.eq hol.bool (hol.not hol.false) b_1))) :=
  b_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__420_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_2 (hol.not b_1)) (hol.eq hol.bool (hol.not __420_2) b_1)) hol.false.

(; Theorem: |- ((= ((= (\lambda _420. ((= ((= _420) (Data.Bool.~ b))) ((= (Data.Bool.~ _420)) b)) a)) (\lambda _420. ((= ((= _420) (Data.Bool.~ b))) ((= (Data.Bool.~ _420)) b)) Data.Bool.F))) ((= (\lambda _420. ((= ((= _420) (Data.Bool.~ b))) ((= (Data.Bool.~ _420)) b)) a)) ((= ((= Data.Bool.F) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.F)) b)))) ;)

(; dict ;)

def thm_244 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) a_1) ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) hol.false)) (hol.eq hol.bool ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) a_1) (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_2)) (hol.eq hol.bool (hol.not hol.false) b_2)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) a_1)) (hol.eq hol.bool ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) a_1)) ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) hol.false) (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_2)) (hol.eq hol.bool (hol.not hol.false) b_2)) (thm_242 a_1 b_2) (thm_243 b_2).

(; Theorem: |- ((= (\lambda _420. ((= ((= _420) (Data.Bool.~ b))) ((= (Data.Bool.~ _420)) b)) a)) ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b))) ;)

(; dict ;)

def thm_245 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) a_1) (hol.eq hol.bool (hol.eq hol.bool a_1 (hol.not b_2)) (hol.eq hol.bool (hol.not a_1) b_2))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) a_1.

(; Theorem: |- ((= (= (\lambda _420. ((= ((= _420) (Data.Bool.~ b))) ((= (Data.Bool.~ _420)) b)) a))) (= ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b)))) ;)

(; dict ;)

def thm_246 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) a_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 (hol.not b_2)) (hol.eq hol.bool (hol.not a_1) b_2)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) a_1) (hol.eq hol.bool (hol.eq hol.bool a_1 (hol.not b_2)) (hol.eq hol.bool (hol.not a_1) b_2)) thm_121 (thm_245 a_1 b_2).

(; Theorem: |- ((= ((= ((= Data.Bool.F) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.F)) b))) ((= ((= Data.Bool.F) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.F)) b))) ;)

(; dict ;)

def thm_247 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_1)) (hol.eq hol.bool (hol.not hol.false) b_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_1)) (hol.eq hol.bool (hol.not hol.false) b_1))) :=
  b_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_1)) (hol.eq hol.bool (hol.not hol.false) b_1)).

(; Theorem: |- ((= ((= (\lambda _420. ((= ((= _420) (Data.Bool.~ b))) ((= (Data.Bool.~ _420)) b)) a)) ((= ((= Data.Bool.F) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.F)) b)))) ((= ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b))) ((= ((= Data.Bool.F) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.F)) b)))) ;)

(; dict ;)

def thm_248 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) a_1) (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_2)) (hol.eq hol.bool (hol.not hol.false) b_2))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 (hol.not b_2)) (hol.eq hol.bool (hol.not a_1) b_2)) (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_2)) (hol.eq hol.bool (hol.not hol.false) b_2)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) a_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 (hol.not b_2)) (hol.eq hol.bool (hol.not a_1) b_2))) (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_2)) (hol.eq hol.bool (hol.not hol.false) b_2)) (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_2)) (hol.eq hol.bool (hol.not hol.false) b_2)) (thm_246 a_1 b_2) (thm_247 b_2).

(; Theorem: |- ((= ((= (\lambda _420. ((= ((= _420) (Data.Bool.~ b))) ((= (Data.Bool.~ _420)) b)) a)) (\lambda _420. ((= ((= _420) (Data.Bool.~ b))) ((= (Data.Bool.~ _420)) b)) Data.Bool.F))) ((= ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b))) ((= ((= Data.Bool.F) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.F)) b)))) ;)

(; dict ;)

def thm_249 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) a_1) ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 (hol.not b_2)) (hol.eq hol.bool (hol.not a_1) b_2)) (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_2)) (hol.eq hol.bool (hol.not hol.false) b_2)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) a_1) ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) hol.false)) (hol.eq hol.bool ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) a_1) (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_2)) (hol.eq hol.bool (hol.not hol.false) b_2))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 (hol.not b_2)) (hol.eq hol.bool (hol.not a_1) b_2)) (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_2)) (hol.eq hol.bool (hol.not hol.false) b_2))) (thm_244 a_1 b_2) (thm_248 a_1 b_2).

(; Theorem: |- ((= \lambda _420. ((= ((= _420) (Data.Bool.~ b))) ((= (Data.Bool.~ _420)) b))) \lambda _420. ((= ((= _420) (Data.Bool.~ b))) ((= (Data.Bool.~ _420)) b))) ;)

(; dict ;)

def thm_250 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__420_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_2 (hol.not b_1)) (hol.eq hol.bool (hol.not __420_2) b_1)) (__420_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_2 (hol.not b_1)) (hol.eq hol.bool (hol.not __420_2) b_1))) :=
  b_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__420_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_2 (hol.not b_1)) (hol.eq hol.bool (hol.not __420_2) b_1)).

(; Theorem: |- ((= a) Data.Bool.F) ;)

(; dict ;)

def thm_251 : a_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) -> hol.proof (hol.eq hol.bool a_1 hol.false) :=
  a_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) => hyp_1.

(; Theorem: |- ((= (\lambda _420. ((= ((= _420) (Data.Bool.~ b))) ((= (Data.Bool.~ _420)) b)) a)) (\lambda _420. ((= ((= _420) (Data.Bool.~ b))) ((= (Data.Bool.~ _420)) b)) Data.Bool.F)) ;)

(; dict ;)

def thm_252 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) -> hol.proof (hol.eq hol.bool ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) a_1) ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) hol.false)) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) => hol.APP_THM hol.bool hol.bool (__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) (__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __420_3) b_2)) a_1 hol.false (thm_250 b_2) (thm_251 a_1 hyp_1).

(; Theorem: |- ((= ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b))) ((= ((= Data.Bool.F) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.F)) b))) ;)

(; dict ;)

def thm_253 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_1)) (hol.eq hol.bool (hol.not hol.false) b_1))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_1)) (hol.eq hol.bool (hol.not __420_3) b_1)) a_2) ((__420_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __420_3 (hol.not b_1)) (hol.eq hol.bool (hol.not __420_3) b_1)) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_1)) (hol.eq hol.bool (hol.not hol.false) b_1))) (thm_249 a_2 b_1) (thm_252 a_2 b_1 hyp_1).

(; Theorem: |- ((= ((= ((= Data.Bool.F) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.F)) b))) ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b))) ;)

(; dict ;)

def thm_254 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_2)) (hol.eq hol.bool (hol.not hol.false) b_2)) (hol.eq hol.bool (hol.eq hol.bool a_1 (hol.not b_2)) (hol.eq hol.bool (hol.not a_1) b_2))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) => hol.SYM hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 (hol.not b_2)) (hol.eq hol.bool (hol.not a_1) b_2)) (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_2)) (hol.eq hol.bool (hol.not hol.false) b_2)) (thm_253 b_2 a_1 hyp_1).

(; Theorem: |- ((= ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_255 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)).

(; Theorem: |- ((= ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_256 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_255 t_1) (thm_255 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_257 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_258 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) thm_257 thm_257.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_259 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) thm_68 thm_258.

(; Theorem: |- ((= ((= ((= Data.Bool.T) t)) t)) ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_260 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((= Data.Bool.T) t)) t)) ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_261 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_260 t_1) (thm_260 t_1).

(; Theorem: |- ((= ((= Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_262 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_13 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_263 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_103 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_264 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_261 t_1) (thm_262 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) => thm_263 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.T)) t)) ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_265 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.T)) t)) ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_266 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_265 t_1) (thm_265 t_1).

(; Theorem: |- ((= ((= t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_267 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_14 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_268 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_103 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_269 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_266 t_1) (thm_267 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) => thm_268 t_1 hyp_1).

(; Theorem: |- ((= ((= Data.Bool.F) t)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_270 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_15 t_1.

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_271 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_103 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_272 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_255 t_1) (thm_270 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) => thm_271 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_273 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_274 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_273 t_1) (thm_273 t_1).

(; Theorem: |- ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_275 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_16 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_276 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (thm_272 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_274 t_1) (thm_275 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_277 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (thm_269 t_1) (thm_276 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_278 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (thm_264 t_1) (thm_277 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_279 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => thm_278 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_280 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_95 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_281 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_2) (hol.not t_2)) (hol.eq hol.bool (hol.eq hol.bool t_2 hol.false) (hol.not t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_2) (hol.not t_2)) (hol.eq hol.bool (hol.eq hol.bool t_2 hol.false) (hol.not t_2)))))) thm_259 thm_279 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) => thm_280 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_282 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_95 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_283 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (thm_281 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) => thm_282 t_1 hyp_1).

(; Theorem: |- ((= ((= Data.Bool.F) t)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_284 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_212 q_1 p_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= Data.Bool.F) t)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_285 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_283 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) => thm_284 t_1 hyp_1).

(; Theorem: |- ((= ((= Data.Bool.F) (Data.Bool.~ b))) (Data.Bool.~ (Data.Bool.~ b))) ;)

(; dict ;)

def thm_286 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_1)) (hol.not (hol.not b_1))) :=
  b_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_256 t_1) (thm_285 t_1)) (hol.not b_1).

(; Theorem: |- ((= (= ((= Data.Bool.F) (Data.Bool.~ b)))) (= (Data.Bool.~ (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_287 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_1))) (hol.eq hol.bool (hol.not (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.eq hol.bool hol.false (hol.not b_1)) (hol.not (hol.not b_1)) thm_121 (thm_286 b_1).

(; Theorem: |- ((= (= (Data.Bool.~ Data.Bool.F))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_288 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not hol.false)) (hol.eq hol.bool hol.true)) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not hol.false) hol.true thm_121 thm_11.

(; Theorem: |- ((= b) b) ;)

(; dict ;)

def thm_289 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool b_1 b_1) :=
  b_1 : hol.term hol.bool => hol.REFL hol.bool b_1.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) b)) ((= Data.Bool.T) b)) ;)

(; dict ;)

def thm_290 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) b_1) (hol.eq hol.bool hol.true b_1)) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not hol.false)) (hol.eq hol.bool hol.true) b_1 b_1 thm_288 (thm_289 b_1).

(; Theorem: |- ((= ((= Data.Bool.T) b)) b) ;)

(; dict ;)

def thm_291 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true b_1) b_1) :=
  b_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_262 t_1) b_1.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) b)) b) ;)

(; dict ;)

def thm_292 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) b_1) b_1) :=
  b_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.false) b_1) (hol.eq hol.bool hol.true b_1) b_1 (thm_290 b_1) (thm_291 b_1).

(; Theorem: |- ((= ((= ((= Data.Bool.F) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.F)) b))) ((= (Data.Bool.~ (Data.Bool.~ b))) b)) ;)

(; dict ;)

def thm_293 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_1)) (hol.eq hol.bool (hol.not hol.false) b_1)) (hol.eq hol.bool (hol.not (hol.not b_1)) b_1)) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_1))) (hol.eq hol.bool (hol.not (hol.not b_1))) (hol.eq hol.bool (hol.not hol.false) b_1) b_1 (thm_287 b_1) (thm_292 b_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ b))) b)) ((= ((= Data.Bool.F) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.F)) b))) ;)

(; dict ;)

def thm_294 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not b_1)) b_1) (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_1)) (hol.eq hol.bool (hol.not hol.false) b_1))) :=
  b_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_1)) (hol.eq hol.bool (hol.not hol.false) b_1)) (hol.eq hol.bool (hol.not (hol.not b_1)) b_1) (thm_293 b_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ b))) b) ;)

(; dict ;)

def thm_295 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.not b_1)) b_1) :=
  b_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_215 t_1) b_1.

(; Theorem: |- ((= (= (Data.Bool.~ (Data.Bool.~ b)))) (= b)) ;)

(; dict ;)

def thm_296 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.not b_1))) (hol.eq hol.bool b_1)) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.not b_1)) b_1 thm_121 (thm_295 b_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ b))) b)) ((= b) b)) ;)

(; dict ;)

def thm_297 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not b_1)) b_1) (hol.eq hol.bool b_1 b_1)) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.not b_1))) (hol.eq hol.bool b_1) b_1 b_1 (thm_296 b_1) (thm_289 b_1).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_298 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_299 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_298 A x_1) (thm_298 A x_1).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_300 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_301 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_300 A) (thm_300 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_302 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_197 A) (thm_301 A).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_303 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_127 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_304 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => thm_17 A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_305 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_303 A x_1) (thm_304 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_306 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_298 A x_1) (thm_305 A x_1)) A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_307 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_1 x_1) hol.true) :=
  x_1 : hol.term hol.bool => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_299 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_302 A) (thm_306 A) x_1)) hol.bool x_1.

(; Theorem: |- ((= ((= b) b)) Data.Bool.T) ;)

(; dict ;)

def thm_308 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool b_1 b_1) hol.true) :=
  b_1 : hol.term hol.bool => (x_1 : hol.term hol.bool => thm_307 x_1) b_1.

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ b))) b)) Data.Bool.T) ;)

(; dict ;)

def thm_309 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not b_1)) b_1) hol.true) :=
  b_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.not b_1)) b_1) (hol.eq hol.bool b_1 b_1) hol.true (thm_297 b_1) (thm_308 b_1).

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ (Data.Bool.~ b))) b)) ;)

(; dict ;)

def thm_310 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (hol.not b_1)) b_1)) :=
  b_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.not b_1)) b_1) hol.true (thm_309 b_1).

(; Theorem: |- ((= ((= Data.Bool.F) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.F)) b)) ;)

(; dict ;)

def thm_311 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_1)) (hol.eq hol.bool (hol.not hol.false) b_1)) :=
  b_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.not b_1)) b_1) (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_1)) (hol.eq hol.bool (hol.not hol.false) b_1)) (thm_294 b_1) (hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (hol.not b_1)) b_1) (thm_310 b_1) thm_6).

(; Theorem: |- ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b)) ;)

(; dict ;)

def thm_312 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.false) => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not b_1)) (hol.eq hol.bool (hol.not hol.false) b_1)) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) (thm_254 a_2 b_1 hyp_1) (thm_311 b_1).

(; Theorem: |- ((Data.Bool.==> ((= a) Data.Bool.F)) ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b))) ;)

(; dict ;)

def thm_313 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.false) => thm_312 b_1 a_2 hyp_1.

(; Theorem: |- ((= (= (\lambda _418. ((= ((= _418) (Data.Bool.~ b))) ((= (Data.Bool.~ _418)) b)) a))) (= (\lambda _418. ((= ((= _418) (Data.Bool.~ b))) ((= (Data.Bool.~ _418)) b)) a))) ;)

(; dict ;)

def thm_314 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) a_1)) (hol.eq hol.bool ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) a_1))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) a_1)).

(; Theorem: |- ((= (\lambda _418. ((= ((= _418) (Data.Bool.~ b))) ((= (Data.Bool.~ _418)) b)) Data.Bool.T)) ((= ((= Data.Bool.T) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.T)) b))) ;)

(; dict ;)

def thm_315 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__418_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_2 (hol.not b_1)) (hol.eq hol.bool (hol.not __418_2) b_1)) hol.true) (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_1)) (hol.eq hol.bool (hol.not hol.true) b_1))) :=
  b_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__418_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_2 (hol.not b_1)) (hol.eq hol.bool (hol.not __418_2) b_1)) hol.true.

(; Theorem: |- ((= ((= (\lambda _418. ((= ((= _418) (Data.Bool.~ b))) ((= (Data.Bool.~ _418)) b)) a)) (\lambda _418. ((= ((= _418) (Data.Bool.~ b))) ((= (Data.Bool.~ _418)) b)) Data.Bool.T))) ((= (\lambda _418. ((= ((= _418) (Data.Bool.~ b))) ((= (Data.Bool.~ _418)) b)) a)) ((= ((= Data.Bool.T) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.T)) b)))) ;)

(; dict ;)

def thm_316 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) a_1) ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) hol.true)) (hol.eq hol.bool ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) a_1) (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_2)) (hol.eq hol.bool (hol.not hol.true) b_2)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) a_1)) (hol.eq hol.bool ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) a_1)) ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) hol.true) (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_2)) (hol.eq hol.bool (hol.not hol.true) b_2)) (thm_314 a_1 b_2) (thm_315 b_2).

(; Theorem: |- ((= (\lambda _418. ((= ((= _418) (Data.Bool.~ b))) ((= (Data.Bool.~ _418)) b)) a)) ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b))) ;)

(; dict ;)

def thm_317 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) a_1) (hol.eq hol.bool (hol.eq hol.bool a_1 (hol.not b_2)) (hol.eq hol.bool (hol.not a_1) b_2))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) a_1.

(; Theorem: |- ((= (= (\lambda _418. ((= ((= _418) (Data.Bool.~ b))) ((= (Data.Bool.~ _418)) b)) a))) (= ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b)))) ;)

(; dict ;)

def thm_318 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) a_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 (hol.not b_2)) (hol.eq hol.bool (hol.not a_1) b_2)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) a_1) (hol.eq hol.bool (hol.eq hol.bool a_1 (hol.not b_2)) (hol.eq hol.bool (hol.not a_1) b_2)) thm_121 (thm_317 a_1 b_2).

(; Theorem: |- ((= ((= ((= Data.Bool.T) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.T)) b))) ((= ((= Data.Bool.T) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.T)) b))) ;)

(; dict ;)

def thm_319 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_1)) (hol.eq hol.bool (hol.not hol.true) b_1)) (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_1)) (hol.eq hol.bool (hol.not hol.true) b_1))) :=
  b_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_1)) (hol.eq hol.bool (hol.not hol.true) b_1)).

(; Theorem: |- ((= ((= (\lambda _418. ((= ((= _418) (Data.Bool.~ b))) ((= (Data.Bool.~ _418)) b)) a)) ((= ((= Data.Bool.T) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.T)) b)))) ((= ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b))) ((= ((= Data.Bool.T) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.T)) b)))) ;)

(; dict ;)

def thm_320 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) a_1) (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_2)) (hol.eq hol.bool (hol.not hol.true) b_2))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 (hol.not b_2)) (hol.eq hol.bool (hol.not a_1) b_2)) (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_2)) (hol.eq hol.bool (hol.not hol.true) b_2)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) a_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 (hol.not b_2)) (hol.eq hol.bool (hol.not a_1) b_2))) (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_2)) (hol.eq hol.bool (hol.not hol.true) b_2)) (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_2)) (hol.eq hol.bool (hol.not hol.true) b_2)) (thm_318 a_1 b_2) (thm_319 b_2).

(; Theorem: |- ((= ((= (\lambda _418. ((= ((= _418) (Data.Bool.~ b))) ((= (Data.Bool.~ _418)) b)) a)) (\lambda _418. ((= ((= _418) (Data.Bool.~ b))) ((= (Data.Bool.~ _418)) b)) Data.Bool.T))) ((= ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b))) ((= ((= Data.Bool.T) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.T)) b)))) ;)

(; dict ;)

def thm_321 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) a_1) ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 (hol.not b_2)) (hol.eq hol.bool (hol.not a_1) b_2)) (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_2)) (hol.eq hol.bool (hol.not hol.true) b_2)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) a_1) ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) hol.true)) (hol.eq hol.bool ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) a_1) (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_2)) (hol.eq hol.bool (hol.not hol.true) b_2))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 (hol.not b_2)) (hol.eq hol.bool (hol.not a_1) b_2)) (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_2)) (hol.eq hol.bool (hol.not hol.true) b_2))) (thm_316 a_1 b_2) (thm_320 a_1 b_2).

(; Theorem: |- ((= \lambda _418. ((= ((= _418) (Data.Bool.~ b))) ((= (Data.Bool.~ _418)) b))) \lambda _418. ((= ((= _418) (Data.Bool.~ b))) ((= (Data.Bool.~ _418)) b))) ;)

(; dict ;)

def thm_322 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__418_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_2 (hol.not b_1)) (hol.eq hol.bool (hol.not __418_2) b_1)) (__418_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_2 (hol.not b_1)) (hol.eq hol.bool (hol.not __418_2) b_1))) :=
  b_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__418_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_2 (hol.not b_1)) (hol.eq hol.bool (hol.not __418_2) b_1)).

(; Theorem: |- ((= a) Data.Bool.T) ;)

(; dict ;)

def thm_323 : a_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) -> hol.proof (hol.eq hol.bool a_1 hol.true) :=
  a_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) => hyp_1.

(; Theorem: |- ((= (\lambda _418. ((= ((= _418) (Data.Bool.~ b))) ((= (Data.Bool.~ _418)) b)) a)) (\lambda _418. ((= ((= _418) (Data.Bool.~ b))) ((= (Data.Bool.~ _418)) b)) Data.Bool.T)) ;)

(; dict ;)

def thm_324 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) -> hol.proof (hol.eq hol.bool ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) a_1) ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) hol.true)) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) => hol.APP_THM hol.bool hol.bool (__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) (__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_2)) (hol.eq hol.bool (hol.not __418_3) b_2)) a_1 hol.true (thm_322 b_2) (thm_323 a_1 hyp_1).

(; Theorem: |- ((= ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b))) ((= ((= Data.Bool.T) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.T)) b))) ;)

(; dict ;)

def thm_325 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_1)) (hol.eq hol.bool (hol.not hol.true) b_1))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_1)) (hol.eq hol.bool (hol.not __418_3) b_1)) a_2) ((__418_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __418_3 (hol.not b_1)) (hol.eq hol.bool (hol.not __418_3) b_1)) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_1)) (hol.eq hol.bool (hol.not hol.true) b_1))) (thm_321 a_2 b_1) (thm_324 a_2 b_1 hyp_1).

(; Theorem: |- ((= ((= ((= Data.Bool.T) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.T)) b))) ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b))) ;)

(; dict ;)

def thm_326 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_2)) (hol.eq hol.bool (hol.not hol.true) b_2)) (hol.eq hol.bool (hol.eq hol.bool a_1 (hol.not b_2)) (hol.eq hol.bool (hol.not a_1) b_2))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) => hol.SYM hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 (hol.not b_2)) (hol.eq hol.bool (hol.not a_1) b_2)) (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_2)) (hol.eq hol.bool (hol.not hol.true) b_2)) (thm_325 b_2 a_1 hyp_1).

(; Theorem: |- ((= ((= Data.Bool.T) (Data.Bool.~ b))) (Data.Bool.~ b)) ;)

(; dict ;)

def thm_327 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_1)) (hol.not b_1)) :=
  b_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_262 t_1) (hol.not b_1).

(; Theorem: |- ((= (= ((= Data.Bool.T) (Data.Bool.~ b)))) (= (Data.Bool.~ b))) ;)

(; dict ;)

def thm_328 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_1))) (hol.eq hol.bool (hol.not b_1))) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.eq hol.bool hol.true (hol.not b_1)) (hol.not b_1) thm_121 (thm_327 b_1).

(; Theorem: |- ((= (= (Data.Bool.~ Data.Bool.T))) (= Data.Bool.F)) ;)

(; dict ;)

def thm_329 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not hol.true)) (hol.eq hol.bool hol.false)) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not hol.true) hol.false thm_121 thm_10.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) b)) ((= Data.Bool.F) b)) ;)

(; dict ;)

def thm_330 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) b_1) (hol.eq hol.bool hol.false b_1)) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not hol.true)) (hol.eq hol.bool hol.false) b_1 b_1 thm_329 (thm_289 b_1).

(; Theorem: |- ((= ((= Data.Bool.F) b)) (Data.Bool.~ b)) ;)

(; dict ;)

def thm_331 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false b_1) (hol.not b_1)) :=
  b_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_270 t_1) b_1.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) b)) (Data.Bool.~ b)) ;)

(; dict ;)

def thm_332 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) b_1) (hol.not b_1)) :=
  b_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.true) b_1) (hol.eq hol.bool hol.false b_1) (hol.not b_1) (thm_330 b_1) (thm_331 b_1).

(; Theorem: |- ((= ((= ((= Data.Bool.T) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.T)) b))) ((= (Data.Bool.~ b)) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_333 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_1)) (hol.eq hol.bool (hol.not hol.true) b_1)) (hol.eq hol.bool (hol.not b_1) (hol.not b_1))) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_1))) (hol.eq hol.bool (hol.not b_1)) (hol.eq hol.bool (hol.not hol.true) b_1) (hol.not b_1) (thm_328 b_1) (thm_332 b_1).

(; Theorem: |- ((= ((= (Data.Bool.~ b)) (Data.Bool.~ b))) Data.Bool.T) ;)

(; dict ;)

def thm_334 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not b_1) (hol.not b_1)) hol.true) :=
  b_1 : hol.term hol.bool => (x_1 : hol.term hol.bool => thm_307 x_1) (hol.not b_1).

(; Theorem: |- ((= ((= ((= Data.Bool.T) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.T)) b))) Data.Bool.T) ;)

(; dict ;)

def thm_335 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_1)) (hol.eq hol.bool (hol.not hol.true) b_1)) hol.true) :=
  b_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_1)) (hol.eq hol.bool (hol.not hol.true) b_1)) (hol.eq hol.bool (hol.not b_1) (hol.not b_1)) hol.true (thm_333 b_1) (thm_334 b_1).

(; Theorem: |- ((= Data.Bool.T) ((= ((= Data.Bool.T) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.T)) b))) ;)

(; dict ;)

def thm_336 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_1)) (hol.eq hol.bool (hol.not hol.true) b_1))) :=
  b_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_1)) (hol.eq hol.bool (hol.not hol.true) b_1)) hol.true (thm_335 b_1).

(; Theorem: |- ((= ((= Data.Bool.T) (Data.Bool.~ b))) ((= (Data.Bool.~ Data.Bool.T)) b)) ;)

(; dict ;)

def thm_337 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_1)) (hol.eq hol.bool (hol.not hol.true) b_1)) :=
  b_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_1)) (hol.eq hol.bool (hol.not hol.true) b_1)) (thm_336 b_1) thm_6.

(; Theorem: |- ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b)) ;)

(; dict ;)

def thm_338 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.true) => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not b_1)) (hol.eq hol.bool (hol.not hol.true) b_1)) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) (thm_326 a_2 b_1 hyp_1) (thm_337 b_1).

(; Theorem: |- ((Data.Bool.==> ((= a) Data.Bool.T)) ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b))) ;)

(; dict ;)

def thm_339 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.true) => thm_338 b_1 a_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((= a) Data.Bool.T)) ((= a) Data.Bool.F)) ;)

(; dict ;)

def thm_340 : a_1 : hol.term hol.bool -> hol.proof (hol.or (hol.eq hol.bool a_1 hol.true) (hol.eq hol.bool a_1 hol.false)) :=
  a_1 : hol.term hol.bool => thm_18 a_1.

(; Theorem: |- ((= (= ((Data.Bool.\/ P) Q))) (= ((Data.Bool.\/ P) Q))) ;)

(; dict ;)

def thm_341 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or P_2 Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or P_2 Q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r)))) ;)

(; dict ;)

def thm_342 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ P) Q)) (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q))) ((= ((Data.Bool.\/ P) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r))))) ;)

(; dict ;)

def thm_343 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or P_2 Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) (thm_341 Q_1 P_2) (thm_342 Q_1 P_2).

(; Theorem: |- ((= (= (Data.Bool.\/ P))) (= (Data.Bool.\/ P))) ;)

(; dict ;)

def thm_344 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1))) :=
  P_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r)))) ;)

(; dict ;)

def thm_345 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) :=
  P_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1.

(; Theorem: |- ((= ((= (Data.Bool.\/ P)) (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P))) ((= (Data.Bool.\/ P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))))) ;)

(; dict ;)

def thm_346 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3))))) :=
  P_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3))) (thm_344 P_1) (thm_345 P_1).

(; Theorem: |- ((= (Data.Bool.\/ P)) (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P)) ;)

(; dict ;)

def thm_347 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1 P_1 thm_19 (thm_40 P_1).

(; Theorem: |- ((= (Data.Bool.\/ P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r)))) ;)

(; dict ;)

def thm_348 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) :=
  P_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) (thm_346 P_1) (thm_347 P_1).

(; Theorem: |- ((= Q) Q) ;)

(; dict ;)

def thm_349 : Q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool Q_1 Q_1) :=
  Q_1 : hol.term hol.bool => hol.REFL hol.bool Q_1.

(; Theorem: |- ((= ((Data.Bool.\/ P) Q)) (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q)) ;)

(; dict ;)

def thm_350 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.or P_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1 Q_1 (thm_348 P_2) (thm_349 Q_1).

(; Theorem: |- ((= ((Data.Bool.\/ P) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r)))) ;)

(; dict ;)

def thm_351 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) (thm_343 Q_1 P_2) (thm_350 Q_1 P_2).

(; Theorem: |- ((Data.Bool.\/ P) Q) ;)

(; dict ;)

def thm_352 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_2 Q_1) -> hol.proof (hol.or P_2 Q_1) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_2 Q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r))) ;)

(; dict ;)

def thm_353 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_2 Q_1) -> hol.proof (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_2 Q_1) => hol.EQ_MP (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) (thm_351 Q_1 P_2) (thm_352 Q_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> P) R)) ((Data.Bool.==> ((Data.Bool.==> Q) R)) R)) ;)

(; dict ;)

def thm_354 : Q_1 : hol.term hol.bool -> R_2 : hol.term hol.bool -> P_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_3 Q_1) -> hol.proof (hol.imp (hol.imp P_3 R_2) (hol.imp (hol.imp Q_1 R_2) R_2)) :=
  Q_1 : hol.term hol.bool => R_2 : hol.term hol.bool => P_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_3 Q_1) => thm_353 Q_1 P_3 hyp_1 R_2.

(; Theorem: |- ((Data.Bool.==> P) R) ;)

(; dict ;)

def thm_355 : R_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_2 R_1) -> hol.proof (hol.imp P_2 R_1) :=
  R_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> Q) R)) R) ;)

(; dict ;)

def thm_356 : P_1 : hol.term hol.bool -> R_2 : hol.term hol.bool -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_1 R_2) -> hyp_2 : hol.proof (hol.or P_1 Q_3) -> hol.proof (hol.imp (hol.imp Q_3 R_2) R_2) :=
  P_1 : hol.term hol.bool => R_2 : hol.term hol.bool => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_1 R_2) => hyp_2 : hol.proof (hol.or P_1 Q_3) => thm_354 Q_3 R_2 P_1 hyp_2 (thm_355 R_2 P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> Q) R) ;)

(; dict ;)

def thm_357 : R_1 : hol.term hol.bool -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp Q_2 R_1) -> hol.proof (hol.imp Q_2 R_1) :=
  R_1 : hol.term hol.bool => Q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp Q_2 R_1) => hyp_1.

(; Theorem: |- R ;)

(; dict ;)

def thm_358 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> R_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_2 R_3) -> hyp_2 : hol.proof (hol.imp Q_1 R_3) -> hyp_3 : hol.proof (hol.or P_2 Q_1) -> hol.proof R_3 :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_356 P_2 R_3 Q_1 hyp_1 hyp_3 (thm_357 R_3 Q_1 hyp_2).

(; Theorem: |- ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b)) ;)

(; dict ;)

def thm_359 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool a_2 hol.false)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool a_2 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_358 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b)) ;)

(; dict ;)

def thm_360 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool a_2 hol.false)) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) (thm_340 a_2) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool a_2 hol.false)) => thm_359 b_1 a_2 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b)) ;)

(; dict ;)

def thm_361 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1))) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) (thm_339 b_1 a_2) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1))) => thm_360 b_1 a_2 hyp_1 hyp_2).

(; Theorem: |- ((= ((= a) (Data.Bool.~ b))) ((= (Data.Bool.~ a)) b)) ;)

(; dict ;)

def thm_362 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1))) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) (thm_313 b_1 a_2) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1))) => thm_361 b_1 a_2 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) ((= (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_363 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) (thm_241 b_1 a_2) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) (thm_240 b_1 a_2) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) (hol.eq hol.bool (hol.eq hol.bool a_2 (hol.not b_1)) (hol.eq hol.bool (hol.not a_2) b_1)) (thm_240 b_1 a_2) (thm_362 b_1 a_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_364 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2))) (p_1 : hol.term (hol.arr A hol.bool) => thm_363 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))))) (Data.Bool.! \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_365 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2))) (thm_33 A) (thm_364 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (p x))))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))))) ;)

(; dict ;)

def thm_366 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))))) :=
  A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (thm_365 A).

(; Theorem: |- ((= Data.Bool.?) Data.Bool.?) ;)

(; dict ;)

def thm_367 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)).

(; Theorem: |- ((= (\lambda x. (Data.Bool.~ (p x)) x)) (Data.Bool.~ (p x))) ;)

(; dict ;)

def thm_368 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => hol.not (p_2 x_3)) x_1) (hol.not (p_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (x_3 : hol.term A => hol.not (p_2 x_3)) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. (Data.Bool.~ (p x)) x)) \lambda x. (Data.Bool.~ (p x))) ;)

(; dict ;)

def thm_369 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2) (x_2 : hol.term A => hol.not (p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2) (x_2 : hol.term A => hol.not (p_1 x_2)) (x_2 : hol.term A => thm_368 A x_2 p_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (p x)) x))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_370 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2) (x_2 : hol.term A => hol.not (p_1 x_2)) (thm_367 A) (thm_369 A p_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (p x)) x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_371 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool hol.not hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) thm_153 (thm_370 A p_1).

(; Theorem: |- ((= (= (Data.Bool.~ (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (p x)) x))))) (= (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))))) ;)

(; dict ;)

def thm_372 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) thm_121 (thm_371 A p_1).

(; Theorem: |- ((= (Data.Bool.~ (\lambda x. (Data.Bool.~ (p x)) x))) (Data.Bool.~ (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_373 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not ((x_3 : hol.term A => hol.not (p_2 x_3)) x_1)) (hol.not (hol.not (p_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool hol.not hol.not ((x_3 : hol.term A => hol.not (p_2 x_3)) x_1) (hol.not (p_2 x_1)) thm_153 (thm_368 A x_1 p_2).

(; Theorem: |- ((= \lambda x. (Data.Bool.~ (\lambda x. (Data.Bool.~ (p x)) x))) \lambda x. (Data.Bool.~ (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_374 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.not ((x_3 : hol.term A => hol.not (p_1 x_3)) x_2)) (x_2 : hol.term A => hol.not (hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.not ((x_3 : hol.term A => hol.not (p_1 x_3)) x_2)) (x_2 : hol.term A => hol.not (hol.not (p_1 x_2))) (x_2 : hol.term A => thm_373 A x_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda x. (Data.Bool.~ (p x)) x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_375 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not ((x_3 : hol.term A => hol.not (p_1 x_3)) x_2))) (hol.forall A (x_2 : hol.term A => hol.not (hol.not (p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.not ((x_3 : hol.term A => hol.not (p_1 x_3)) x_2)) (x_2 : hol.term A => hol.not (hol.not (p_1 x_2))) (thm_197 A) (thm_374 A p_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (p x)) x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda x. (Data.Bool.~ (p x)) x))))) ((= (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (Data.Bool.~ (Data.Bool.~ (p x)))))) ;)

(; dict ;)

def thm_376 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2))) (hol.forall A (x_2 : hol.term A => hol.not ((x_3 : hol.term A => hol.not (p_1 x_3)) x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => hol.not (hol.not (p_1 x_2)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) (hol.forall A (x_2 : hol.term A => hol.not ((x_3 : hol.term A => hol.not (p_1 x_3)) x_2))) (hol.forall A (x_2 : hol.term A => hol.not (hol.not (p_1 x_2)))) (thm_372 A p_1) (thm_375 A p_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (p x)) x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda x. (Data.Bool.~ (p x)) x)))) ;)

(; dict ;)

def thm_377 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2))) (hol.forall A (x_2 : hol.term A => hol.not ((x_3 : hol.term A => hol.not (p_1 x_3)) x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_237 A p_1) A (x_2 : hol.term A => hol.not (p_1 x_2)).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (Data.Bool.~ (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_378 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => hol.not (hol.not (p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2))) (hol.forall A (x_2 : hol.term A => hol.not ((x_3 : hol.term A => hol.not (p_1 x_3)) x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => hol.not (hol.not (p_1 x_2))))) (thm_376 A p_1) (thm_377 A p_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ (p x)))) (p x)) ;)

(; dict ;)

def thm_379 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.not (p_2 x_1))) (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_215 t_1) (p_2 x_1).

(; Theorem: |- ((= \lambda x. (Data.Bool.~ (Data.Bool.~ (p x)))) \lambda x. (p x)) ;)

(; dict ;)

def thm_380 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.not (hol.not (p_1 x_2))) (x_2 : hol.term A => p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.not (hol.not (p_1 x_2))) (x_2 : hol.term A => p_1 x_2) (x_2 : hol.term A => thm_379 A x_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (p x))) ;)

(; dict ;)

def thm_381 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.not (hol.not (p_1 x_2))) (x_2 : hol.term A => p_1 x_2) (thm_197 A) (thm_380 A p_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (p x))) ;)

(; dict ;)

def thm_382 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => hol.not (hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2)) (thm_378 A p_1) (thm_381 A p_1).

(; Theorem: |- ((= (= (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))))) (= (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_383 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2)) thm_121 (thm_382 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (p x))) ;)

(; dict ;)

def thm_384 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (p x)))) ((= (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_385 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => p_1 x_2)) (thm_383 A p_1) (thm_384 A p_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (p x)))) Data.Bool.T) ;)

(; dict ;)

def thm_386 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => p_1 x_2))) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (x_1 : hol.term hol.bool => thm_307 x_1) (hol.forall A (x_2 : hol.term A => p_1 x_2)).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (p x)))) Data.Bool.T) ;)

(; dict ;)

def thm_387 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2))) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => p_1 x_2))) hol.true (thm_385 A p_1) (thm_386 A p_1).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (p x)))) \lambda p. Data.Bool.T) ;)

(; dict ;)

def thm_388 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.true)) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.true) (p_1 : hol.term (hol.arr A hol.bool) => thm_387 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (p x))))) (Data.Bool.! \lambda p. Data.Bool.T)) ;)

(; dict ;)

def thm_389 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.true) (thm_33 A) (thm_388 A).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_390 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda p. t)) t)) ((= (Data.Bool.! \lambda p. t)) t)) ;)

(; dict ;)

def thm_391 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda p. t)) t)) ;)

(; dict ;)

def thm_392 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) (thm_390 A t_1) (thm_391 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_393 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_20 A t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda p. t)) t) ;)

(; dict ;)

def thm_394 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) (thm_392 A t_1) (thm_393 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. t)) t) ;)

(; dict ;)

def thm_395 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_394 A t_1) (hol.arr A hol.bool) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda p. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_396 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => thm_395 A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (p x))))) Data.Bool.T) ;)

(; dict ;)

def thm_397 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2)))) hol.true) :=
  A : hol.type => hol.TRANS hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.true)) hol.true (thm_389 A) (thm_396 A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_398 : A : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2)))) hol.true (thm_397 A).

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_399 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => hol.EQ_MP hol.true (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (thm_398 A) thm_6.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_400 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))))) (thm_366 A) (thm_399 A).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) \lambda p. ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_401 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) \lambda p. ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_402 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (thm_401 A) (thm_401 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))))) (Data.Bool.! \lambda p. ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))))) ;)

(; dict ;)

def thm_403 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (thm_33 A) (thm_402 A).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_404 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_405 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (thm_404 A p_1) (thm_404 A p_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_406 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_407 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) => hol.SYM hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (thm_406 A p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_408 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_409 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (thm_408 A p_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_410 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) => thm_407 A p_1 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) => thm_409 A p_1 hyp_1).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) \lambda p. ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_411 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => thm_410 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))))) (Data.Bool.! \lambda p. ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))))) ;)

(; dict ;)

def thm_412 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (thm_33 A) (thm_411 A).

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_413 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) (thm_412 A) (thm_400 A).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_414 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_413 A p_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ;)

(; thm ;)

def thm_415 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) (thm_403 A) (p_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (thm_405 A p_1) (thm_414 A p_1)) A p_1).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ;)

(; dict ;)

def thm_416 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ;)

(; dict ;)

def thm_417 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (thm_416 A) (thm_416 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))))) ;)

(; dict ;)

def thm_418 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (thm_33 A) (thm_417 A).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ;)

(; dict ;)

def thm_419 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ;)

(; dict ;)

def thm_420 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (thm_419 A p_1) (thm_419 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_421 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_422 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) => hol.SYM hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (thm_421 A p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_423 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_424 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) => hol.SYM hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (thm_423 A p_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ;)

(; dict ;)

def thm_425 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) => thm_422 A p_1 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) => thm_424 A p_1 hyp_1).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ;)

(; dict ;)

def thm_426 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => thm_425 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))))) ;)

(; dict ;)

def thm_427 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (thm_33 A) (thm_426 A).

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ;)

(; dict ;)

def thm_428 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) (thm_427 A) (thm_238 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_429 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_428 A p_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ;)

(; thm ;)

def thm_430 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) (thm_418 A) (p_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (thm_420 A p_1) (thm_429 A p_1)) A p_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_431 : hol.proof (hol.eq (hol.arr (hol.arr (hol.arr hol.bool hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr hol.bool hol.bool)) (hol.forall (hol.arr hol.bool hol.bool))) :=
  hol.REFL (hol.arr (hol.arr (hol.arr hol.bool hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr hol.bool hol.bool)).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.! \lambda b. (p b))) ((Data.Bool./\ (p Data.Bool.T)) (p Data.Bool.F)))) \lambda p. ((= (Data.Bool.! \lambda b. (p b))) ((Data.Bool./\ (p Data.Bool.T)) (p Data.Bool.F)))) ;)

(; dict ;)

def thm_432 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.and (p_1 hol.true) (p_1 hol.false))) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.and (p_1 hol.true) (p_1 hol.false)))) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.and (p_1 hol.true) (p_1 hol.false))).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.! \lambda b. (p b))) ((Data.Bool./\ (p Data.Bool.T)) (p Data.Bool.F)))) \lambda p. ((= (Data.Bool.! \lambda b. (p b))) ((Data.Bool./\ (p Data.Bool.T)) (p Data.Bool.F)))) ;)

(; dict ;)

def thm_433 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.and (p_1 hol.true) (p_1 hol.false))) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.and (p_1 hol.true) (p_1 hol.false)))) :=
  hol.TRANS (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.and (p_1 hol.true) (p_1 hol.false))) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.and (p_1 hol.true) (p_1 hol.false))) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.and (p_1 hol.true) (p_1 hol.false))) thm_432 thm_432.

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda b. (p b))) ((Data.Bool./\ (p Data.Bool.T)) (p Data.Bool.F))))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda b. (p b))) ((Data.Bool./\ (p Data.Bool.T)) (p Data.Bool.F))))) ;)

(; dict ;)

def thm_434 : hol.proof (hol.eq hol.bool (hol.forall (hol.arr hol.bool hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.and (p_1 hol.true) (p_1 hol.false)))) (hol.forall (hol.arr hol.bool hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.and (p_1 hol.true) (p_1 hol.false))))) :=
  hol.APP_THM (hol.arr (hol.arr hol.bool hol.bool) hol.bool) hol.bool (hol.forall (hol.arr hol.bool hol.bool)) (hol.forall (hol.arr hol.bool hol.bool)) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.and (p_1 hol.true) (p_1 hol.false))) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.and (p_1 hol.true) (p_1 hol.false))) thm_431 thm_433.

(; Theorem: |- ((= (Data.Bool.! \lambda b. (p b))) (Data.Bool.! \lambda b. (p b))) ;)

(; dict ;)

def thm_435 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.REFL hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (p b))) (Data.Bool.! \lambda b. (p b))) ;)

(; dict ;)

def thm_436 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.SYM hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (thm_435 p_1).

(; Theorem: |- ((= (= (\lambda _424. (p _424) b))) (= (\lambda _424. (p _424) b))) ;)

(; dict ;)

def thm_437 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__424_3 : hol.term hol.bool => p_2 __424_3) b_1)) (hol.eq hol.bool ((__424_3 : hol.term hol.bool => p_2 __424_3) b_1))) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__424_3 : hol.term hol.bool => p_2 __424_3) b_1)).

(; Theorem: |- ((= (\lambda _424. (p _424) Data.Bool.F)) (p Data.Bool.F)) ;)

(; dict ;)

def thm_438 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool ((__424_2 : hol.term hol.bool => p_1 __424_2) hol.false) (p_1 hol.false)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.BETA_CONV hol.bool hol.bool (__424_2 : hol.term hol.bool => p_1 __424_2) hol.false.

(; Theorem: |- ((= ((= (\lambda _424. (p _424) b)) (\lambda _424. (p _424) Data.Bool.F))) ((= (\lambda _424. (p _424) b)) (p Data.Bool.F))) ;)

(; dict ;)

def thm_439 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__424_3 : hol.term hol.bool => p_2 __424_3) b_1) ((__424_3 : hol.term hol.bool => p_2 __424_3) hol.false)) (hol.eq hol.bool ((__424_3 : hol.term hol.bool => p_2 __424_3) b_1) (p_2 hol.false))) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__424_3 : hol.term hol.bool => p_2 __424_3) b_1)) (hol.eq hol.bool ((__424_3 : hol.term hol.bool => p_2 __424_3) b_1)) ((__424_3 : hol.term hol.bool => p_2 __424_3) hol.false) (p_2 hol.false) (thm_437 b_1 p_2) (thm_438 p_2).

(; Theorem: |- ((= (\lambda _424. (p _424) b)) (p b)) ;)

(; dict ;)

def thm_440 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool ((__424_3 : hol.term hol.bool => p_2 __424_3) b_1) (p_2 b_1)) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hol.BETA_CONV hol.bool hol.bool (__424_3 : hol.term hol.bool => p_2 __424_3) b_1.

(; Theorem: |- ((= (= (\lambda _424. (p _424) b))) (= (p b))) ;)

(; dict ;)

def thm_441 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__424_3 : hol.term hol.bool => p_2 __424_3) b_1)) (hol.eq hol.bool (p_2 b_1))) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__424_3 : hol.term hol.bool => p_2 __424_3) b_1) (p_2 b_1) thm_121 (thm_440 b_1 p_2).

(; Theorem: |- ((= (p Data.Bool.F)) (p Data.Bool.F)) ;)

(; dict ;)

def thm_442 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (p_1 hol.false) (p_1 hol.false)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.REFL hol.bool (p_1 hol.false).

(; Theorem: |- ((= ((= (\lambda _424. (p _424) b)) (p Data.Bool.F))) ((= (p b)) (p Data.Bool.F))) ;)

(; dict ;)

def thm_443 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__424_3 : hol.term hol.bool => p_2 __424_3) b_1) (p_2 hol.false)) (hol.eq hol.bool (p_2 b_1) (p_2 hol.false))) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__424_3 : hol.term hol.bool => p_2 __424_3) b_1)) (hol.eq hol.bool (p_2 b_1)) (p_2 hol.false) (p_2 hol.false) (thm_441 b_1 p_2) (thm_442 p_2).

(; Theorem: |- ((= ((= (\lambda _424. (p _424) b)) (\lambda _424. (p _424) Data.Bool.F))) ((= (p b)) (p Data.Bool.F))) ;)

(; dict ;)

def thm_444 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__424_3 : hol.term hol.bool => p_2 __424_3) b_1) ((__424_3 : hol.term hol.bool => p_2 __424_3) hol.false)) (hol.eq hol.bool (p_2 b_1) (p_2 hol.false))) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool ((__424_3 : hol.term hol.bool => p_2 __424_3) b_1) ((__424_3 : hol.term hol.bool => p_2 __424_3) hol.false)) (hol.eq hol.bool ((__424_3 : hol.term hol.bool => p_2 __424_3) b_1) (p_2 hol.false)) (hol.eq hol.bool (p_2 b_1) (p_2 hol.false)) (thm_439 b_1 p_2) (thm_443 b_1 p_2).

(; Theorem: |- ((= \lambda _424. (p _424)) \lambda _424. (p _424)) ;)

(; dict ;)

def thm_445 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__424_2 : hol.term hol.bool => p_1 __424_2) (__424_2 : hol.term hol.bool => p_1 __424_2)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (__424_2 : hol.term hol.bool => p_1 __424_2).

(; Theorem: |- ((= b) Data.Bool.F) ;)

(; dict ;)

def thm_446 : b_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) -> hol.proof (hol.eq hol.bool b_1 hol.false) :=
  b_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) => hyp_1.

(; Theorem: |- ((= (\lambda _424. (p _424) b)) (\lambda _424. (p _424) Data.Bool.F)) ;)

(; dict ;)

def thm_447 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) -> hol.proof (hol.eq hol.bool ((__424_3 : hol.term hol.bool => p_2 __424_3) b_1) ((__424_3 : hol.term hol.bool => p_2 __424_3) hol.false)) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) => hol.APP_THM hol.bool hol.bool (__424_3 : hol.term hol.bool => p_2 __424_3) (__424_3 : hol.term hol.bool => p_2 __424_3) b_1 hol.false (thm_445 p_2) (thm_446 b_1 hyp_1).

(; Theorem: |- ((= (p b)) (p Data.Bool.F)) ;)

(; dict ;)

def thm_448 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) -> hol.proof (hol.eq hol.bool (p_2 b_1) (p_2 hol.false)) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__424_3 : hol.term hol.bool => p_2 __424_3) b_1) ((__424_3 : hol.term hol.bool => p_2 __424_3) hol.false)) (hol.eq hol.bool (p_2 b_1) (p_2 hol.false)) (thm_444 b_1 p_2) (thm_447 b_1 p_2 hyp_1).

(; Theorem: |- ((= (p Data.Bool.F)) (p b)) ;)

(; dict ;)

def thm_449 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) -> hol.proof (hol.eq hol.bool (p_2 hol.false) (p_2 b_1)) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) => hol.SYM hol.bool (p_2 b_1) (p_2 hol.false) (thm_448 b_1 p_2 hyp_1).

(; Theorem: |- ((= ((= (p Data.Bool.F)) Data.Bool.T)) ((= (p Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_450 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_1 hol.false) hol.true) (hol.eq hol.bool (p_1 hol.false) hol.true)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (p_1 hol.false) hol.true).

(; Theorem: |- ((= ((= (p Data.Bool.F)) Data.Bool.T)) ((= (p Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_451 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_1 hol.false) hol.true) (hol.eq hol.bool (p_1 hol.false) hol.true)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (p_1 hol.false) hol.true) (hol.eq hol.bool (p_1 hol.false) hol.true) (hol.eq hol.bool (p_1 hol.false) hol.true) (thm_450 p_1) (thm_450 p_1).

(; Theorem: |- ((= (p Data.Bool.F)) ((= (p Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_452 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (p_1 hol.false) (hol.eq hol.bool (p_1 hol.false) hol.true)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => (t_1 : hol.term hol.bool => thm_127 t_1) (p_1 hol.false).

(; Theorem: |- ((Data.Bool./\ (p Data.Bool.T)) (p Data.Bool.F)) ;)

(; dict ;)

def thm_453 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) -> hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) => hyp_1.

(; Theorem: |- (p Data.Bool.F) ;)

(; dict ;)

def thm_454 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) -> hol.proof (p_1 hol.false) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_95 p_1 q_2 hyp_1) (p_1 hol.true) (p_1 hol.false) hyp_1.

(; Theorem: |- (p Data.Bool.F) ;)

(; dict ;)

def thm_455 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) -> hol.proof (p_1 hol.false) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) => hol.PROVE_HYP (hol.and (p_1 hol.true) (p_1 hol.false)) (p_1 hol.false) (thm_453 p_1 hyp_1) (hyp_2 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) => thm_454 p_1 hyp_2).

(; Theorem: |- ((= (p Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_456 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) -> hol.proof (hol.eq hol.bool (p_1 hol.false) hol.true) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) => hol.EQ_MP (p_1 hol.false) (hol.eq hol.bool (p_1 hol.false) hol.true) (thm_452 p_1) (thm_455 p_1 hyp_1).

(; Theorem: |- ((= Data.Bool.T) (p Data.Bool.F)) ;)

(; dict ;)

def thm_457 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) -> hol.proof (hol.eq hol.bool hol.true (p_1 hol.false)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) => hol.SYM hol.bool (p_1 hol.false) hol.true (hol.EQ_MP (hol.eq hol.bool (p_1 hol.false) hol.true) (hol.eq hol.bool (p_1 hol.false) hol.true) (thm_451 p_1) (thm_456 p_1 hyp_1)).

(; Theorem: |- (p b) ;)

(; dict ;)

def thm_458 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) -> hyp_2 : hol.proof (hol.and (p_2 hol.true) (p_2 hol.false)) -> hol.proof (p_2 b_1) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) => hyp_2 : hol.proof (hol.and (p_2 hol.true) (p_2 hol.false)) => hol.EQ_MP (p_2 hol.false) (p_2 b_1) (thm_449 b_1 p_2 hyp_1) (hol.EQ_MP hol.true (p_2 hol.false) (thm_457 p_2 hyp_2) thm_6).

(; Theorem: |- ((Data.Bool.==> ((= b) Data.Bool.F)) (p b)) ;)

(; dict ;)

def thm_459 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) -> hol.proof (hol.imp (hol.eq hol.bool b_2 hol.false) (p_1 b_2)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) => hyp_2 : hol.proof (hol.eq hol.bool b_2 hol.false) => thm_458 b_2 p_1 hyp_2 hyp_1.

(; Theorem: |- ((= (= (\lambda _422. (p _422) b))) (= (\lambda _422. (p _422) b))) ;)

(; dict ;)

def thm_460 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__422_3 : hol.term hol.bool => p_2 __422_3) b_1)) (hol.eq hol.bool ((__422_3 : hol.term hol.bool => p_2 __422_3) b_1))) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__422_3 : hol.term hol.bool => p_2 __422_3) b_1)).

(; Theorem: |- ((= (\lambda _422. (p _422) Data.Bool.T)) (p Data.Bool.T)) ;)

(; dict ;)

def thm_461 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool ((__422_2 : hol.term hol.bool => p_1 __422_2) hol.true) (p_1 hol.true)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.BETA_CONV hol.bool hol.bool (__422_2 : hol.term hol.bool => p_1 __422_2) hol.true.

(; Theorem: |- ((= ((= (\lambda _422. (p _422) b)) (\lambda _422. (p _422) Data.Bool.T))) ((= (\lambda _422. (p _422) b)) (p Data.Bool.T))) ;)

(; dict ;)

def thm_462 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__422_3 : hol.term hol.bool => p_2 __422_3) b_1) ((__422_3 : hol.term hol.bool => p_2 __422_3) hol.true)) (hol.eq hol.bool ((__422_3 : hol.term hol.bool => p_2 __422_3) b_1) (p_2 hol.true))) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__422_3 : hol.term hol.bool => p_2 __422_3) b_1)) (hol.eq hol.bool ((__422_3 : hol.term hol.bool => p_2 __422_3) b_1)) ((__422_3 : hol.term hol.bool => p_2 __422_3) hol.true) (p_2 hol.true) (thm_460 b_1 p_2) (thm_461 p_2).

(; Theorem: |- ((= (\lambda _422. (p _422) b)) (p b)) ;)

(; dict ;)

def thm_463 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool ((__422_3 : hol.term hol.bool => p_2 __422_3) b_1) (p_2 b_1)) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hol.BETA_CONV hol.bool hol.bool (__422_3 : hol.term hol.bool => p_2 __422_3) b_1.

(; Theorem: |- ((= (= (\lambda _422. (p _422) b))) (= (p b))) ;)

(; dict ;)

def thm_464 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__422_3 : hol.term hol.bool => p_2 __422_3) b_1)) (hol.eq hol.bool (p_2 b_1))) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__422_3 : hol.term hol.bool => p_2 __422_3) b_1) (p_2 b_1) thm_121 (thm_463 b_1 p_2).

(; Theorem: |- ((= (p Data.Bool.T)) (p Data.Bool.T)) ;)

(; dict ;)

def thm_465 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (p_1 hol.true) (p_1 hol.true)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.REFL hol.bool (p_1 hol.true).

(; Theorem: |- ((= ((= (\lambda _422. (p _422) b)) (p Data.Bool.T))) ((= (p b)) (p Data.Bool.T))) ;)

(; dict ;)

def thm_466 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__422_3 : hol.term hol.bool => p_2 __422_3) b_1) (p_2 hol.true)) (hol.eq hol.bool (p_2 b_1) (p_2 hol.true))) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__422_3 : hol.term hol.bool => p_2 __422_3) b_1)) (hol.eq hol.bool (p_2 b_1)) (p_2 hol.true) (p_2 hol.true) (thm_464 b_1 p_2) (thm_465 p_2).

(; Theorem: |- ((= ((= (\lambda _422. (p _422) b)) (\lambda _422. (p _422) Data.Bool.T))) ((= (p b)) (p Data.Bool.T))) ;)

(; dict ;)

def thm_467 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__422_3 : hol.term hol.bool => p_2 __422_3) b_1) ((__422_3 : hol.term hol.bool => p_2 __422_3) hol.true)) (hol.eq hol.bool (p_2 b_1) (p_2 hol.true))) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool ((__422_3 : hol.term hol.bool => p_2 __422_3) b_1) ((__422_3 : hol.term hol.bool => p_2 __422_3) hol.true)) (hol.eq hol.bool ((__422_3 : hol.term hol.bool => p_2 __422_3) b_1) (p_2 hol.true)) (hol.eq hol.bool (p_2 b_1) (p_2 hol.true)) (thm_462 b_1 p_2) (thm_466 b_1 p_2).

(; Theorem: |- ((= \lambda _422. (p _422)) \lambda _422. (p _422)) ;)

(; dict ;)

def thm_468 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__422_2 : hol.term hol.bool => p_1 __422_2) (__422_2 : hol.term hol.bool => p_1 __422_2)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (__422_2 : hol.term hol.bool => p_1 __422_2).

(; Theorem: |- ((= b) Data.Bool.T) ;)

(; dict ;)

def thm_469 : b_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) -> hol.proof (hol.eq hol.bool b_1 hol.true) :=
  b_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) => hyp_1.

(; Theorem: |- ((= (\lambda _422. (p _422) b)) (\lambda _422. (p _422) Data.Bool.T)) ;)

(; dict ;)

def thm_470 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) -> hol.proof (hol.eq hol.bool ((__422_3 : hol.term hol.bool => p_2 __422_3) b_1) ((__422_3 : hol.term hol.bool => p_2 __422_3) hol.true)) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) => hol.APP_THM hol.bool hol.bool (__422_3 : hol.term hol.bool => p_2 __422_3) (__422_3 : hol.term hol.bool => p_2 __422_3) b_1 hol.true (thm_468 p_2) (thm_469 b_1 hyp_1).

(; Theorem: |- ((= (p b)) (p Data.Bool.T)) ;)

(; dict ;)

def thm_471 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) -> hol.proof (hol.eq hol.bool (p_2 b_1) (p_2 hol.true)) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__422_3 : hol.term hol.bool => p_2 __422_3) b_1) ((__422_3 : hol.term hol.bool => p_2 __422_3) hol.true)) (hol.eq hol.bool (p_2 b_1) (p_2 hol.true)) (thm_467 b_1 p_2) (thm_470 b_1 p_2 hyp_1).

(; Theorem: |- ((= (p Data.Bool.T)) (p b)) ;)

(; dict ;)

def thm_472 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) -> hol.proof (hol.eq hol.bool (p_2 hol.true) (p_2 b_1)) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) => hol.SYM hol.bool (p_2 b_1) (p_2 hol.true) (thm_471 b_1 p_2 hyp_1).

(; Theorem: |- ((= ((= (p Data.Bool.T)) Data.Bool.T)) ((= (p Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_473 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_1 hol.true) hol.true) (hol.eq hol.bool (p_1 hol.true) hol.true)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (p_1 hol.true) hol.true).

(; Theorem: |- ((= ((= (p Data.Bool.T)) Data.Bool.T)) ((= (p Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_474 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_1 hol.true) hol.true) (hol.eq hol.bool (p_1 hol.true) hol.true)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (p_1 hol.true) hol.true) (hol.eq hol.bool (p_1 hol.true) hol.true) (hol.eq hol.bool (p_1 hol.true) hol.true) (thm_473 p_1) (thm_473 p_1).

(; Theorem: |- ((= (p Data.Bool.T)) ((= (p Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_475 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (p_1 hol.true) (hol.eq hol.bool (p_1 hol.true) hol.true)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => (t_1 : hol.term hol.bool => thm_127 t_1) (p_1 hol.true).

(; Theorem: |- (p Data.Bool.T) ;)

(; dict ;)

def thm_476 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) -> hol.proof (p_1 hol.true) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_212 q_1 p_2 hyp_1) (p_1 hol.false) (p_1 hol.true) hyp_1.

(; Theorem: |- (p Data.Bool.T) ;)

(; dict ;)

def thm_477 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) -> hol.proof (p_1 hol.true) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) => hol.PROVE_HYP (hol.and (p_1 hol.true) (p_1 hol.false)) (p_1 hol.true) (thm_453 p_1 hyp_1) (hyp_2 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) => thm_476 p_1 hyp_2).

(; Theorem: |- ((= (p Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_478 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) -> hol.proof (hol.eq hol.bool (p_1 hol.true) hol.true) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) => hol.EQ_MP (p_1 hol.true) (hol.eq hol.bool (p_1 hol.true) hol.true) (thm_475 p_1) (thm_477 p_1 hyp_1).

(; Theorem: |- ((= Data.Bool.T) (p Data.Bool.T)) ;)

(; dict ;)

def thm_479 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) -> hol.proof (hol.eq hol.bool hol.true (p_1 hol.true)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) => hol.SYM hol.bool (p_1 hol.true) hol.true (hol.EQ_MP (hol.eq hol.bool (p_1 hol.true) hol.true) (hol.eq hol.bool (p_1 hol.true) hol.true) (thm_474 p_1) (thm_478 p_1 hyp_1)).

(; Theorem: |- (p b) ;)

(; dict ;)

def thm_480 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) -> hyp_2 : hol.proof (hol.and (p_2 hol.true) (p_2 hol.false)) -> hol.proof (p_2 b_1) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) => hyp_2 : hol.proof (hol.and (p_2 hol.true) (p_2 hol.false)) => hol.EQ_MP (p_2 hol.true) (p_2 b_1) (thm_472 b_1 p_2 hyp_1) (hol.EQ_MP hol.true (p_2 hol.true) (thm_479 p_2 hyp_2) thm_6).

(; Theorem: |- ((Data.Bool.==> ((= b) Data.Bool.T)) (p b)) ;)

(; dict ;)

def thm_481 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) -> hol.proof (hol.imp (hol.eq hol.bool b_2 hol.true) (p_1 b_2)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) => hyp_2 : hol.proof (hol.eq hol.bool b_2 hol.true) => thm_480 b_2 p_1 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((= b) Data.Bool.T)) ((= b) Data.Bool.F)) ;)

(; dict ;)

def thm_482 : b_1 : hol.term hol.bool -> hol.proof (hol.or (hol.eq hol.bool b_1 hol.true) (hol.eq hol.bool b_1 hol.false)) :=
  b_1 : hol.term hol.bool => thm_18 b_1.

(; Theorem: |- (p b) ;)

(; dict ;)

def thm_483 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_1 hol.false) (p_2 b_1)) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_1 hol.true) (p_2 b_1)) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_1 hol.true) (hol.eq hol.bool b_1 hol.false)) -> hol.proof (p_2 b_1) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_1 hol.false) (p_2 b_1)) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_1 hol.true) (p_2 b_1)) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_1 hol.true) (hol.eq hol.bool b_1 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_358 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool b_1 hol.false) (hol.eq hol.bool b_1 hol.true) (p_2 b_1) hyp_2 hyp_1 hyp_3.

(; Theorem: |- (p b) ;)

(; dict ;)

def thm_484 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_1 hol.false) (p_2 b_1)) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_1 hol.true) (p_2 b_1)) -> hol.proof (p_2 b_1) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_1 hol.false) (p_2 b_1)) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_1 hol.true) (p_2 b_1)) => hol.PROVE_HYP (hol.or (hol.eq hol.bool b_1 hol.true) (hol.eq hol.bool b_1 hol.false)) (p_2 b_1) (thm_482 b_1) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_1 hol.true) (hol.eq hol.bool b_1 hol.false)) => thm_483 b_1 p_2 hyp_1 hyp_2 hyp_3).

(; Theorem: |- (p b) ;)

(; dict ;)

def thm_485 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.and (p_2 hol.true) (p_2 hol.false)) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_1 hol.false) (p_2 b_1)) -> hol.proof (p_2 b_1) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.and (p_2 hol.true) (p_2 hol.false)) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_1 hol.false) (p_2 b_1)) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool b_1 hol.true) (p_2 b_1)) (p_2 b_1) (thm_481 p_2 b_1 hyp_1) (hyp_3 : hol.proof (hol.imp (hol.eq hol.bool b_1 hol.true) (p_2 b_1)) => thm_484 b_1 p_2 hyp_2 hyp_3).

(; Theorem: |- (p b) ;)

(; dict ;)

def thm_486 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.and (p_2 hol.true) (p_2 hol.false)) -> hol.proof (p_2 b_1) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.and (p_2 hol.true) (p_2 hol.false)) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool b_1 hol.false) (p_2 b_1)) (p_2 b_1) (thm_459 p_2 b_1 hyp_1) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_1 hol.false) (p_2 b_1)) => thm_485 b_1 p_2 hyp_1 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda b. (p b)) ;)

(; dict ;)

def thm_487 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) -> hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) => b_2 : hol.term hol.bool => thm_486 b_2 p_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (p Data.Bool.T)) (p Data.Bool.F))) (Data.Bool.! \lambda b. (p b))) ;)

(; dict ;)

def thm_488 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.imp (hol.and (p_1 hol.true) (p_1 hol.false)) (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) => hol.EQ_MP (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (thm_436 p_1) (hol.EQ_MP (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (thm_435 p_1) (thm_487 p_1 hyp_1)).

(; Theorem: |- ((= Data.Bool./\) Data.Bool./\) ;)

(; dict ;)

def thm_489 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and hol.and) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and.

(; Theorem: |- ((= ((= (p b)) Data.Bool.T)) ((= (p b)) Data.Bool.T)) ;)

(; dict ;)

def thm_490 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_2 b_1) hol.true) (hol.eq hol.bool (p_2 b_1) hol.true)) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (p_2 b_1) hol.true).

(; Theorem: |- ((= ((= (p b)) Data.Bool.T)) ((= (p b)) Data.Bool.T)) ;)

(; dict ;)

def thm_491 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_2 b_1) hol.true) (hol.eq hol.bool (p_2 b_1) hol.true)) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (p_2 b_1) hol.true) (hol.eq hol.bool (p_2 b_1) hol.true) (hol.eq hol.bool (p_2 b_1) hol.true) (thm_490 b_1 p_2) (thm_490 b_1 p_2).

(; Theorem: |- ((= (p b)) ((= (p b)) Data.Bool.T)) ;)

(; dict ;)

def thm_492 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (p_2 b_1) (hol.eq hol.bool (p_2 b_1) hol.true)) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => (t_1 : hol.term hol.bool => thm_127 t_1) (p_2 b_1).

(; Theorem: |- (Data.Bool.! \lambda b. (p b)) ;)

(; dict ;)

def thm_493 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) -> hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) => hyp_1.

(; Theorem: |- (p b) ;)

(; dict ;)

def thm_494 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.forall hol.bool (b_3 : hol.term hol.bool => p_2 b_3)) -> hol.proof (p_2 b_1) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.forall hol.bool (b_3 : hol.term hol.bool => p_2 b_3)) => thm_493 p_2 hyp_1 b_1.

(; Theorem: |- ((= (p b)) Data.Bool.T) ;)

(; dict ;)

def thm_495 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.forall hol.bool (b_3 : hol.term hol.bool => p_2 b_3)) -> hol.proof (hol.eq hol.bool (p_2 b_1) hol.true) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.forall hol.bool (b_3 : hol.term hol.bool => p_2 b_3)) => hol.EQ_MP (p_2 b_1) (hol.eq hol.bool (p_2 b_1) hol.true) (thm_492 b_1 p_2) (thm_494 b_1 p_2 hyp_1).

(; Theorem: |- ((= (p Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_496 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) -> hol.proof (hol.eq hol.bool (p_1 hol.true) hol.true) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) => (b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.forall hol.bool (b_3 : hol.term hol.bool => p_2 b_3)) => hol.EQ_MP (hol.eq hol.bool (p_2 b_1) hol.true) (hol.eq hol.bool (p_2 b_1) hol.true) (thm_491 b_1 p_2) (thm_495 b_1 p_2 hyp_1)) hol.true p_1 hyp_1.

(; Theorem: |- ((= (Data.Bool./\ (p Data.Bool.T))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_497 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (p_1 hol.true)) (hol.and hol.true)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (p_1 hol.true) hol.true thm_489 (thm_496 p_1 hyp_1).

(; Theorem: |- ((= (p Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_498 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) -> hol.proof (hol.eq hol.bool (p_1 hol.false) hol.true) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) => (b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.forall hol.bool (b_3 : hol.term hol.bool => p_2 b_3)) => thm_495 b_1 p_2 hyp_1) hol.false p_1 hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ (p Data.Bool.T)) (p Data.Bool.F))) ((Data.Bool./\ Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_499 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) -> hol.proof (hol.eq hol.bool (hol.and (p_1 hol.true) (p_1 hol.false)) (hol.and hol.true hol.true)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) => hol.APP_THM hol.bool hol.bool (hol.and (p_1 hol.true)) (hol.and hol.true) (p_1 hol.false) hol.true (thm_497 p_1 hyp_1) (thm_498 p_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_500 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_501 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_500 t_1) (thm_500 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_502 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_503 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_502 thm_502.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) ;)

(; dict ;)

def thm_504 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_68 thm_503.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_505 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_21 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_506 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_103 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_507 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_500 t_1) (thm_505 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => thm_506 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_508 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_509 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_508 t_1) (thm_508 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_510 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_22 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_511 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_103 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_512 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_509 t_1) (thm_510 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => thm_511 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_513 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_514 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_513 t_1) (thm_513 t_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_515 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => thm_23 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_516 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_103 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_517 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_514 t_1) (thm_515 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => thm_516 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_518 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_519 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_518 t_1) (thm_518 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_520 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => thm_24 t_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_521 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_103 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_522 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_519 t_1) (thm_520 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => thm_521 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_523 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_524 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_523 t_1) (thm_523 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) t)) t) ;)

(; dict ;)

def thm_525 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_25 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_526 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (thm_522 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_524 t_1) (thm_525 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_527 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (thm_517 t_1) (thm_526 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_528 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (thm_512 t_1) (thm_527 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_529 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (thm_507 t_1) (thm_528 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_530 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => thm_529 t_1.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_531 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_212 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.eq hol.bool (hol.and hol.true t_1) t_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_532 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) thm_504 thm_530 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => thm_531 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_533 : hol.proof (hol.eq hol.bool (hol.and hol.true hol.true) hol.true) :=
  (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_501 t_1) (thm_532 t_1)) hol.true.

(; Theorem: |- ((= ((Data.Bool./\ (p Data.Bool.T)) (p Data.Bool.F))) Data.Bool.T) ;)

(; dict ;)

def thm_534 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) -> hol.proof (hol.eq hol.bool (hol.and (p_1 hol.true) (p_1 hol.false)) hol.true) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) => hol.TRANS hol.bool (hol.and (p_1 hol.true) (p_1 hol.false)) (hol.and hol.true hol.true) hol.true (thm_499 p_1 hyp_1) thm_533.

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool./\ (p Data.Bool.T)) (p Data.Bool.F))) ;)

(; dict ;)

def thm_535 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) -> hol.proof (hol.eq hol.bool hol.true (hol.and (p_1 hol.true) (p_1 hol.false))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) => hol.SYM hol.bool (hol.and (p_1 hol.true) (p_1 hol.false)) hol.true (thm_534 p_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ (p Data.Bool.T)) (p Data.Bool.F)) ;)

(; dict ;)

def thm_536 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) -> hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) => hol.EQ_MP hol.true (hol.and (p_1 hol.true) (p_1 hol.false)) (thm_535 p_1 hyp_1) thm_6.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda b. (p b))) ((Data.Bool./\ (p Data.Bool.T)) (p Data.Bool.F))) ;)

(; dict ;)

def thm_537 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.imp (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.and (p_1 hol.true) (p_1 hol.false))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) => thm_536 p_1 hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda b. (p b))) ((Data.Bool./\ (p Data.Bool.T)) (p Data.Bool.F))) ;)

(; dict ;)

def thm_538 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.and (p_1 hol.true) (p_1 hol.false))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.PROP_EXT (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.and (p_1 hol.true) (p_1 hol.false)) (hyp_1 : hol.proof (hol.and (p_1 hol.true) (p_1 hol.false)) => thm_488 p_1 (thm_453 p_1 hyp_1)) (hyp_1 : hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) => thm_537 p_1 (thm_493 p_1 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda b. (p b))) ((Data.Bool./\ (p Data.Bool.T)) (p Data.Bool.F)))) ;)

(; dict ;)

def thm_539 : hol.proof (hol.forall (hol.arr hol.bool hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.and (p_1 hol.true) (p_1 hol.false)))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => thm_538 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda b. (p b))) ((Data.Bool./\ (p Data.Bool.T)) (p Data.Bool.F)))) ;)

(; thm ;)

def thm_540 : hol.proof (hol.forall (hol.arr hol.bool hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.and (p_1 hol.true) (p_1 hol.false)))) :=
  hol.EQ_MP (hol.forall (hol.arr hol.bool hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.and (p_1 hol.true) (p_1 hol.false)))) (hol.forall (hol.arr hol.bool hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => p_1 b_2)) (hol.and (p_1 hol.true) (p_1 hol.false)))) thm_434 thm_539.

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.? \lambda b. (p b))) ((Data.Bool.\/ (p Data.Bool.T)) (p Data.Bool.F)))) \lambda p. ((= (Data.Bool.? \lambda b. (p b))) ((Data.Bool.\/ (p Data.Bool.T)) (p Data.Bool.F)))) ;)

(; dict ;)

def thm_541 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)) (hol.or (p_1 hol.true) (p_1 hol.false))) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)) (hol.or (p_1 hol.true) (p_1 hol.false)))) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)) (hol.or (p_1 hol.true) (p_1 hol.false))).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.? \lambda b. (p b))) ((Data.Bool.\/ (p Data.Bool.T)) (p Data.Bool.F)))) \lambda p. ((= (Data.Bool.? \lambda b. (p b))) ((Data.Bool.\/ (p Data.Bool.T)) (p Data.Bool.F)))) ;)

(; dict ;)

def thm_542 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)) (hol.or (p_1 hol.true) (p_1 hol.false))) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)) (hol.or (p_1 hol.true) (p_1 hol.false)))) :=
  hol.TRANS (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)) (hol.or (p_1 hol.true) (p_1 hol.false))) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)) (hol.or (p_1 hol.true) (p_1 hol.false))) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)) (hol.or (p_1 hol.true) (p_1 hol.false))) thm_541 thm_541.

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda b. (p b))) ((Data.Bool.\/ (p Data.Bool.T)) (p Data.Bool.F))))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda b. (p b))) ((Data.Bool.\/ (p Data.Bool.T)) (p Data.Bool.F))))) ;)

(; dict ;)

def thm_543 : hol.proof (hol.eq hol.bool (hol.forall (hol.arr hol.bool hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)) (hol.or (p_1 hol.true) (p_1 hol.false)))) (hol.forall (hol.arr hol.bool hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)) (hol.or (p_1 hol.true) (p_1 hol.false))))) :=
  hol.APP_THM (hol.arr (hol.arr hol.bool hol.bool) hol.bool) hol.bool (hol.forall (hol.arr hol.bool hol.bool)) (hol.forall (hol.arr hol.bool hol.bool)) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)) (hol.or (p_1 hol.true) (p_1 hol.false))) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)) (hol.or (p_1 hol.true) (p_1 hol.false))) thm_431 thm_542.

(; Theorem: |- ((= ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q))) ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q))) ;)

(; dict ;)

def thm_544 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)).

(; Theorem: |- ((= ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q))) ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q))) ;)

(; dict ;)

def thm_545 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (thm_544 q_1 p_2) (thm_544 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q)) ;)

(; dict ;)

def thm_546 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) -> hol.proof (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) => hyp_1.

(; Theorem: |- ((= (Data.Bool.~ p)) (Data.Bool.~ q)) ;)

(; dict ;)

def thm_547 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) -> hol.proof (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) => hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_548 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) => thm_546 q_1 p_2 hyp_2 (thm_547 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q))) ((= p) q)) ;)

(; dict ;)

def thm_549 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) -> hol.proof (hol.imp (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (hol.eq hol.bool p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) => thm_548 q_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q))) ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q))) ;)

(; dict ;)

def thm_550 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) => hyp_2 : hol.proof (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) => thm_549 q_1 p_2 hyp_2 (thm_546 q_1 p_2 hyp_1).

(; Theorem: |- ((= (= (\lambda _428. ((Data.Bool.==> ((= (Data.Bool.~ _428)) (Data.Bool.~ q))) ((= _428) q)) p))) (= (\lambda _428. ((Data.Bool.==> ((= (Data.Bool.~ _428)) (Data.Bool.~ q))) ((= _428) q)) p))) ;)

(; dict ;)

def thm_551 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) p_1)) (hol.eq hol.bool ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) p_1))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) p_1)).

(; Theorem: |- ((= (\lambda _428. ((Data.Bool.==> ((= (Data.Bool.~ _428)) (Data.Bool.~ q))) ((= _428) q)) Data.Bool.F)) ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))) ((= Data.Bool.F) q))) ;)

(; dict ;)

def thm_552 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__428_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_2) (hol.not q_1)) (hol.eq hol.bool __428_2 q_1)) hol.false) (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_1)) (hol.eq hol.bool hol.false q_1))) :=
  q_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__428_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_2) (hol.not q_1)) (hol.eq hol.bool __428_2 q_1)) hol.false.

(; Theorem: |- ((= ((= (\lambda _428. ((Data.Bool.==> ((= (Data.Bool.~ _428)) (Data.Bool.~ q))) ((= _428) q)) p)) (\lambda _428. ((Data.Bool.==> ((= (Data.Bool.~ _428)) (Data.Bool.~ q))) ((= _428) q)) Data.Bool.F))) ((= (\lambda _428. ((Data.Bool.==> ((= (Data.Bool.~ _428)) (Data.Bool.~ q))) ((= _428) q)) p)) ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))) ((= Data.Bool.F) q)))) ;)

(; dict ;)

def thm_553 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) p_1) ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) hol.false)) (hol.eq hol.bool ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) p_1) (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_2)) (hol.eq hol.bool hol.false q_2)))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) p_1)) (hol.eq hol.bool ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) p_1)) ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) hol.false) (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_2)) (hol.eq hol.bool hol.false q_2)) (thm_551 p_1 q_2) (thm_552 q_2).

(; Theorem: |- ((= (\lambda _428. ((Data.Bool.==> ((= (Data.Bool.~ _428)) (Data.Bool.~ q))) ((= _428) q)) p)) ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q))) ;)

(; dict ;)

def thm_554 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) p_1) (hol.imp (hol.eq hol.bool (hol.not p_1) (hol.not q_2)) (hol.eq hol.bool p_1 q_2))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) p_1.

(; Theorem: |- ((= (= (\lambda _428. ((Data.Bool.==> ((= (Data.Bool.~ _428)) (Data.Bool.~ q))) ((= _428) q)) p))) (= ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q)))) ;)

(; dict ;)

def thm_555 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) p_1)) (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not p_1) (hol.not q_2)) (hol.eq hol.bool p_1 q_2)))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) p_1) (hol.imp (hol.eq hol.bool (hol.not p_1) (hol.not q_2)) (hol.eq hol.bool p_1 q_2)) thm_121 (thm_554 p_1 q_2).

(; Theorem: |- ((= ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))) ((= Data.Bool.F) q))) ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))) ((= Data.Bool.F) q))) ;)

(; dict ;)

def thm_556 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_1)) (hol.eq hol.bool hol.false q_1)) (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_1)) (hol.eq hol.bool hol.false q_1))) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_1)) (hol.eq hol.bool hol.false q_1)).

(; Theorem: |- ((= ((= (\lambda _428. ((Data.Bool.==> ((= (Data.Bool.~ _428)) (Data.Bool.~ q))) ((= _428) q)) p)) ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))) ((= Data.Bool.F) q)))) ((= ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q))) ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))) ((= Data.Bool.F) q)))) ;)

(; dict ;)

def thm_557 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) p_1) (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_2)) (hol.eq hol.bool hol.false q_2))) (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not p_1) (hol.not q_2)) (hol.eq hol.bool p_1 q_2)) (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_2)) (hol.eq hol.bool hol.false q_2)))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) p_1)) (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not p_1) (hol.not q_2)) (hol.eq hol.bool p_1 q_2))) (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_2)) (hol.eq hol.bool hol.false q_2)) (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_2)) (hol.eq hol.bool hol.false q_2)) (thm_555 p_1 q_2) (thm_556 q_2).

(; Theorem: |- ((= ((= (\lambda _428. ((Data.Bool.==> ((= (Data.Bool.~ _428)) (Data.Bool.~ q))) ((= _428) q)) p)) (\lambda _428. ((Data.Bool.==> ((= (Data.Bool.~ _428)) (Data.Bool.~ q))) ((= _428) q)) Data.Bool.F))) ((= ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q))) ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))) ((= Data.Bool.F) q)))) ;)

(; dict ;)

def thm_558 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) p_1) ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) hol.false)) (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not p_1) (hol.not q_2)) (hol.eq hol.bool p_1 q_2)) (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_2)) (hol.eq hol.bool hol.false q_2)))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) p_1) ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) hol.false)) (hol.eq hol.bool ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) p_1) (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_2)) (hol.eq hol.bool hol.false q_2))) (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not p_1) (hol.not q_2)) (hol.eq hol.bool p_1 q_2)) (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_2)) (hol.eq hol.bool hol.false q_2))) (thm_553 p_1 q_2) (thm_557 p_1 q_2).

(; Theorem: |- ((= \lambda _428. ((Data.Bool.==> ((= (Data.Bool.~ _428)) (Data.Bool.~ q))) ((= _428) q))) \lambda _428. ((Data.Bool.==> ((= (Data.Bool.~ _428)) (Data.Bool.~ q))) ((= _428) q))) ;)

(; dict ;)

def thm_559 : q_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__428_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_2) (hol.not q_1)) (hol.eq hol.bool __428_2 q_1)) (__428_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_2) (hol.not q_1)) (hol.eq hol.bool __428_2 q_1))) :=
  q_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__428_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_2) (hol.not q_1)) (hol.eq hol.bool __428_2 q_1)).

(; Theorem: |- ((= p) Data.Bool.F) ;)

(; dict ;)

def thm_560 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) -> hol.proof (hol.eq hol.bool p_1 hol.false) :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) => hyp_1.

(; Theorem: |- ((= (\lambda _428. ((Data.Bool.==> ((= (Data.Bool.~ _428)) (Data.Bool.~ q))) ((= _428) q)) p)) (\lambda _428. ((Data.Bool.==> ((= (Data.Bool.~ _428)) (Data.Bool.~ q))) ((= _428) q)) Data.Bool.F)) ;)

(; dict ;)

def thm_561 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) -> hol.proof (hol.eq hol.bool ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) p_1) ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) hol.false)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) => hol.APP_THM hol.bool hol.bool (__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) (__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_2)) (hol.eq hol.bool __428_3 q_2)) p_1 hol.false (thm_559 q_2) (thm_560 p_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q))) ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))) ((= Data.Bool.F) q))) ;)

(; dict ;)

def thm_562 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_1)) (hol.eq hol.bool hol.false q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_1)) (hol.eq hol.bool __428_3 q_1)) p_2) ((__428_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __428_3) (hol.not q_1)) (hol.eq hol.bool __428_3 q_1)) hol.false)) (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_1)) (hol.eq hol.bool hol.false q_1))) (thm_558 p_2 q_1) (thm_561 p_2 q_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))) ((= Data.Bool.F) q))) ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q))) ;)

(; dict ;)

def thm_563 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_2)) (hol.eq hol.bool hol.false q_2)) (hol.imp (hol.eq hol.bool (hol.not p_1) (hol.not q_2)) (hol.eq hol.bool p_1 q_2))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.false) => hol.SYM hol.bool (hol.imp (hol.eq hol.bool (hol.not p_1) (hol.not q_2)) (hol.eq hol.bool p_1 q_2)) (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_2)) (hol.eq hol.bool hol.false q_2)) (thm_562 q_2 p_1 hyp_1).

(; Theorem: |- ((= Data.Bool.==>) Data.Bool.==>) ;)

(; dict ;)

def thm_564 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp hol.imp) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp.

(; Theorem: |- ((= (Data.Bool.~ q)) (Data.Bool.~ q)) ;)

(; dict ;)

def thm_565 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not q_1) (hol.not q_1)) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool (hol.not q_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))) ((= Data.Bool.T) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_566 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not q_1)) (hol.eq hol.bool hol.true (hol.not q_1))) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not hol.false)) (hol.eq hol.bool hol.true) (hol.not q_1) (hol.not q_1) thm_288 (thm_565 q_1).

(; Theorem: |- ((= ((= Data.Bool.T) (Data.Bool.~ q))) (Data.Bool.~ q)) ;)

(; dict ;)

def thm_567 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not q_1)) (hol.not q_1)) :=
  q_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_262 t_1) (hol.not q_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))) (Data.Bool.~ q)) ;)

(; dict ;)

def thm_568 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not q_1)) (hol.not q_1)) :=
  q_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not q_1)) (hol.eq hol.bool hol.true (hol.not q_1)) (hol.not q_1) (thm_566 q_1) (thm_567 q_1).

(; Theorem: |- ((= (Data.Bool.==> ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q)))) (Data.Bool.==> (Data.Bool.~ q))) ;)

(; dict ;)

def thm_569 : q_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_1))) (hol.imp (hol.not q_1))) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_1)) (hol.not q_1) thm_564 (thm_568 q_1).

(; Theorem: |- ((= ((= Data.Bool.F) q)) (Data.Bool.~ q)) ;)

(; dict ;)

def thm_570 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false q_1) (hol.not q_1)) :=
  q_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_270 t_1) q_1.

(; Theorem: |- ((= ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))) ((= Data.Bool.F) q))) ((Data.Bool.==> (Data.Bool.~ q)) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_571 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_1)) (hol.eq hol.bool hol.false q_1)) (hol.imp (hol.not q_1) (hol.not q_1))) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_1))) (hol.imp (hol.not q_1)) (hol.eq hol.bool hol.false q_1) (hol.not q_1) (thm_569 q_1) (thm_570 q_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ q)) (Data.Bool.~ q))) Data.Bool.T) ;)

(; dict ;)

def thm_572 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.not q_1) (hol.not q_1)) hol.true) :=
  q_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_130 t_1) (hol.not q_1).

(; Theorem: |- ((= ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))) ((= Data.Bool.F) q))) Data.Bool.T) ;)

(; dict ;)

def thm_573 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_1)) (hol.eq hol.bool hol.false q_1)) hol.true) :=
  q_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_1)) (hol.eq hol.bool hol.false q_1)) (hol.imp (hol.not q_1) (hol.not q_1)) hol.true (thm_571 q_1) (thm_572 q_1).

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))) ((= Data.Bool.F) q))) ;)

(; dict ;)

def thm_574 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_1)) (hol.eq hol.bool hol.false q_1))) :=
  q_1 : hol.term hol.bool => hol.SYM hol.bool (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_1)) (hol.eq hol.bool hol.false q_1)) hol.true (thm_573 q_1).

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ q))) ((= Data.Bool.F) q)) ;)

(; dict ;)

def thm_575 : q_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_1)) (hol.eq hol.bool hol.false q_1)) :=
  q_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_1)) (hol.eq hol.bool hol.false q_1)) (thm_574 q_1) thm_6.

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q)) ;)

(; dict ;)

def thm_576 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.false) -> hol.proof (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.false) => hol.EQ_MP (hol.imp (hol.eq hol.bool (hol.not hol.false) (hol.not q_1)) (hol.eq hol.bool hol.false q_1)) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (thm_563 p_2 q_1 hyp_1) (thm_575 q_1).

(; Theorem: |- ((Data.Bool.==> ((= p) Data.Bool.F)) ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q))) ;)

(; dict ;)

def thm_577 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.false) => thm_576 q_1 p_2 hyp_1.

(; Theorem: |- ((= (= (\lambda _426. ((Data.Bool.==> ((= (Data.Bool.~ _426)) (Data.Bool.~ q))) ((= _426) q)) p))) (= (\lambda _426. ((Data.Bool.==> ((= (Data.Bool.~ _426)) (Data.Bool.~ q))) ((= _426) q)) p))) ;)

(; dict ;)

def thm_578 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) p_1)) (hol.eq hol.bool ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) p_1))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) p_1)).

(; Theorem: |- ((= (\lambda _426. ((Data.Bool.==> ((= (Data.Bool.~ _426)) (Data.Bool.~ q))) ((= _426) q)) Data.Bool.T)) ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))) ((= Data.Bool.T) q))) ;)

(; dict ;)

def thm_579 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__426_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_2) (hol.not q_1)) (hol.eq hol.bool __426_2 q_1)) hol.true) (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_1)) (hol.eq hol.bool hol.true q_1))) :=
  q_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__426_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_2) (hol.not q_1)) (hol.eq hol.bool __426_2 q_1)) hol.true.

(; Theorem: |- ((= ((= (\lambda _426. ((Data.Bool.==> ((= (Data.Bool.~ _426)) (Data.Bool.~ q))) ((= _426) q)) p)) (\lambda _426. ((Data.Bool.==> ((= (Data.Bool.~ _426)) (Data.Bool.~ q))) ((= _426) q)) Data.Bool.T))) ((= (\lambda _426. ((Data.Bool.==> ((= (Data.Bool.~ _426)) (Data.Bool.~ q))) ((= _426) q)) p)) ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))) ((= Data.Bool.T) q)))) ;)

(; dict ;)

def thm_580 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) p_1) ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) hol.true)) (hol.eq hol.bool ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) p_1) (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_2)) (hol.eq hol.bool hol.true q_2)))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) p_1)) (hol.eq hol.bool ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) p_1)) ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) hol.true) (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_2)) (hol.eq hol.bool hol.true q_2)) (thm_578 p_1 q_2) (thm_579 q_2).

(; Theorem: |- ((= (\lambda _426. ((Data.Bool.==> ((= (Data.Bool.~ _426)) (Data.Bool.~ q))) ((= _426) q)) p)) ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q))) ;)

(; dict ;)

def thm_581 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) p_1) (hol.imp (hol.eq hol.bool (hol.not p_1) (hol.not q_2)) (hol.eq hol.bool p_1 q_2))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) p_1.

(; Theorem: |- ((= (= (\lambda _426. ((Data.Bool.==> ((= (Data.Bool.~ _426)) (Data.Bool.~ q))) ((= _426) q)) p))) (= ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q)))) ;)

(; dict ;)

def thm_582 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) p_1)) (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not p_1) (hol.not q_2)) (hol.eq hol.bool p_1 q_2)))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) p_1) (hol.imp (hol.eq hol.bool (hol.not p_1) (hol.not q_2)) (hol.eq hol.bool p_1 q_2)) thm_121 (thm_581 p_1 q_2).

(; Theorem: |- ((= ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))) ((= Data.Bool.T) q))) ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))) ((= Data.Bool.T) q))) ;)

(; dict ;)

def thm_583 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_1)) (hol.eq hol.bool hol.true q_1)) (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_1)) (hol.eq hol.bool hol.true q_1))) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_1)) (hol.eq hol.bool hol.true q_1)).

(; Theorem: |- ((= ((= (\lambda _426. ((Data.Bool.==> ((= (Data.Bool.~ _426)) (Data.Bool.~ q))) ((= _426) q)) p)) ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))) ((= Data.Bool.T) q)))) ((= ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q))) ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))) ((= Data.Bool.T) q)))) ;)

(; dict ;)

def thm_584 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) p_1) (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_2)) (hol.eq hol.bool hol.true q_2))) (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not p_1) (hol.not q_2)) (hol.eq hol.bool p_1 q_2)) (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_2)) (hol.eq hol.bool hol.true q_2)))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) p_1)) (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not p_1) (hol.not q_2)) (hol.eq hol.bool p_1 q_2))) (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_2)) (hol.eq hol.bool hol.true q_2)) (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_2)) (hol.eq hol.bool hol.true q_2)) (thm_582 p_1 q_2) (thm_583 q_2).

(; Theorem: |- ((= ((= (\lambda _426. ((Data.Bool.==> ((= (Data.Bool.~ _426)) (Data.Bool.~ q))) ((= _426) q)) p)) (\lambda _426. ((Data.Bool.==> ((= (Data.Bool.~ _426)) (Data.Bool.~ q))) ((= _426) q)) Data.Bool.T))) ((= ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q))) ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))) ((= Data.Bool.T) q)))) ;)

(; dict ;)

def thm_585 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) p_1) ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) hol.true)) (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not p_1) (hol.not q_2)) (hol.eq hol.bool p_1 q_2)) (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_2)) (hol.eq hol.bool hol.true q_2)))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) p_1) ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) hol.true)) (hol.eq hol.bool ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) p_1) (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_2)) (hol.eq hol.bool hol.true q_2))) (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not p_1) (hol.not q_2)) (hol.eq hol.bool p_1 q_2)) (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_2)) (hol.eq hol.bool hol.true q_2))) (thm_580 p_1 q_2) (thm_584 p_1 q_2).

(; Theorem: |- ((= \lambda _426. ((Data.Bool.==> ((= (Data.Bool.~ _426)) (Data.Bool.~ q))) ((= _426) q))) \lambda _426. ((Data.Bool.==> ((= (Data.Bool.~ _426)) (Data.Bool.~ q))) ((= _426) q))) ;)

(; dict ;)

def thm_586 : q_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__426_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_2) (hol.not q_1)) (hol.eq hol.bool __426_2 q_1)) (__426_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_2) (hol.not q_1)) (hol.eq hol.bool __426_2 q_1))) :=
  q_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__426_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_2) (hol.not q_1)) (hol.eq hol.bool __426_2 q_1)).

(; Theorem: |- ((= p) Data.Bool.T) ;)

(; dict ;)

def thm_587 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) -> hol.proof (hol.eq hol.bool p_1 hol.true) :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) => hyp_1.

(; Theorem: |- ((= (\lambda _426. ((Data.Bool.==> ((= (Data.Bool.~ _426)) (Data.Bool.~ q))) ((= _426) q)) p)) (\lambda _426. ((Data.Bool.==> ((= (Data.Bool.~ _426)) (Data.Bool.~ q))) ((= _426) q)) Data.Bool.T)) ;)

(; dict ;)

def thm_588 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) -> hol.proof (hol.eq hol.bool ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) p_1) ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) hol.true)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) => hol.APP_THM hol.bool hol.bool (__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) (__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_2)) (hol.eq hol.bool __426_3 q_2)) p_1 hol.true (thm_586 q_2) (thm_587 p_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q))) ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))) ((= Data.Bool.T) q))) ;)

(; dict ;)

def thm_589 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_1)) (hol.eq hol.bool hol.true q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_1)) (hol.eq hol.bool __426_3 q_1)) p_2) ((__426_3 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.not __426_3) (hol.not q_1)) (hol.eq hol.bool __426_3 q_1)) hol.true)) (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_1)) (hol.eq hol.bool hol.true q_1))) (thm_585 p_2 q_1) (thm_588 p_2 q_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))) ((= Data.Bool.T) q))) ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q))) ;)

(; dict ;)

def thm_590 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_2)) (hol.eq hol.bool hol.true q_2)) (hol.imp (hol.eq hol.bool (hol.not p_1) (hol.not q_2)) (hol.eq hol.bool p_1 q_2))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 hol.true) => hol.SYM hol.bool (hol.imp (hol.eq hol.bool (hol.not p_1) (hol.not q_2)) (hol.eq hol.bool p_1 q_2)) (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_2)) (hol.eq hol.bool hol.true q_2)) (thm_589 q_2 p_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))) ((= Data.Bool.F) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_591 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not q_1)) (hol.eq hol.bool hol.false (hol.not q_1))) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not hol.true)) (hol.eq hol.bool hol.false) (hol.not q_1) (hol.not q_1) thm_329 (thm_565 q_1).

(; Theorem: |- ((= ((= Data.Bool.F) (Data.Bool.~ q))) (Data.Bool.~ (Data.Bool.~ q))) ;)

(; dict ;)

def thm_592 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not q_1)) (hol.not (hol.not q_1))) :=
  q_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_270 t_1) (hol.not q_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))) (Data.Bool.~ (Data.Bool.~ q))) ;)

(; dict ;)

def thm_593 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not q_1)) (hol.not (hol.not q_1))) :=
  q_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not q_1)) (hol.eq hol.bool hol.false (hol.not q_1)) (hol.not (hol.not q_1)) (thm_591 q_1) (thm_592 q_1).

(; Theorem: |- ((= (Data.Bool.==> ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q)))) (Data.Bool.==> (Data.Bool.~ (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_594 : q_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_1))) (hol.imp (hol.not (hol.not q_1)))) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_1)) (hol.not (hol.not q_1)) thm_564 (thm_593 q_1).

(; Theorem: |- ((= ((= Data.Bool.T) q)) q) ;)

(; dict ;)

def thm_595 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true q_1) q_1) :=
  q_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_262 t_1) q_1.

(; Theorem: |- ((= ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))) ((= Data.Bool.T) q))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.~ q))) q)) ;)

(; dict ;)

def thm_596 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_1)) (hol.eq hol.bool hol.true q_1)) (hol.imp (hol.not (hol.not q_1)) q_1)) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_1))) (hol.imp (hol.not (hol.not q_1))) (hol.eq hol.bool hol.true q_1) q_1 (thm_594 q_1) (thm_595 q_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.~ q))) q)) ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))) ((= Data.Bool.T) q))) ;)

(; dict ;)

def thm_597 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.not q_1)) q_1) (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_1)) (hol.eq hol.bool hol.true q_1))) :=
  q_1 : hol.term hol.bool => hol.SYM hol.bool (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_1)) (hol.eq hol.bool hol.true q_1)) (hol.imp (hol.not (hol.not q_1)) q_1) (thm_596 q_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ q))) q) ;)

(; dict ;)

def thm_598 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.not q_1)) q_1) :=
  q_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_215 t_1) q_1.

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.~ (Data.Bool.~ q)))) (Data.Bool.==> q)) ;)

(; dict ;)

def thm_599 : q_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.not (hol.not q_1))) (hol.imp q_1)) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.not (hol.not q_1)) q_1 thm_564 (thm_598 q_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.~ q))) q)) ((Data.Bool.==> q) q)) ;)

(; dict ;)

def thm_600 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.not q_1)) q_1) (hol.imp q_1 q_1)) :=
  q_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.imp (hol.not (hol.not q_1))) (hol.imp q_1) q_1 q_1 (thm_599 q_1) (thm_84 q_1).

(; Theorem: |- ((= ((Data.Bool.==> q) q)) Data.Bool.T) ;)

(; dict ;)

def thm_601 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp q_1 q_1) hol.true) :=
  q_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_130 t_1) q_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.~ q))) q)) Data.Bool.T) ;)

(; dict ;)

def thm_602 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.not q_1)) q_1) hol.true) :=
  q_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.imp (hol.not (hol.not q_1)) q_1) (hol.imp q_1 q_1) hol.true (thm_600 q_1) (thm_601 q_1).

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.~ q))) q)) ;)

(; dict ;)

def thm_603 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.imp (hol.not (hol.not q_1)) q_1)) :=
  q_1 : hol.term hol.bool => hol.SYM hol.bool (hol.imp (hol.not (hol.not q_1)) q_1) hol.true (thm_602 q_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ (Data.Bool.~ q))) q) ;)

(; dict ;)

def thm_604 : q_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.not (hol.not q_1)) q_1) :=
  q_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.imp (hol.not (hol.not q_1)) q_1) (thm_603 q_1) thm_6.

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ q))) ((= Data.Bool.T) q)) ;)

(; dict ;)

def thm_605 : q_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_1)) (hol.eq hol.bool hol.true q_1)) :=
  q_1 : hol.term hol.bool => hol.EQ_MP (hol.imp (hol.not (hol.not q_1)) q_1) (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_1)) (hol.eq hol.bool hol.true q_1)) (thm_597 q_1) (thm_604 q_1).

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q)) ;)

(; dict ;)

def thm_606 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.true) -> hol.proof (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.true) => hol.EQ_MP (hol.imp (hol.eq hol.bool (hol.not hol.true) (hol.not q_1)) (hol.eq hol.bool hol.true q_1)) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (thm_590 p_2 q_1 hyp_1) (thm_605 q_1).

(; Theorem: |- ((Data.Bool.==> ((= p) Data.Bool.T)) ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q))) ;)

(; dict ;)

def thm_607 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 hol.true) => thm_606 q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((= p) Data.Bool.T)) ((= p) Data.Bool.F)) ;)

(; dict ;)

def thm_608 : p_1 : hol.term hol.bool -> hol.proof (hol.or (hol.eq hol.bool p_1 hol.true) (hol.eq hol.bool p_1 hol.false)) :=
  p_1 : hol.term hol.bool => thm_18 p_1.

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q)) ;)

(; dict ;)

def thm_609 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool p_2 hol.false)) -> hol.proof (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool p_2 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_358 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool p_2 hol.false) (hol.eq hol.bool p_2 hol.true) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q)) ;)

(; dict ;)

def thm_610 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1))) -> hol.proof (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool p_2 hol.false)) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (thm_608 p_2) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool p_2 hol.true) (hol.eq hol.bool p_2 hol.false)) => thm_609 q_1 p_2 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q)) ;)

(; dict ;)

def thm_611 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1))) -> hol.proof (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1))) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (thm_607 q_1 p_2) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.true) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1))) => thm_610 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.~ p)) (Data.Bool.~ q))) ((= p) q)) ;)

(; dict ;)

def thm_612 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1))) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (thm_577 q_1 p_2) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool p_2 hol.false) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1))) => thm_611 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.~ (Data.Bool.? \lambda b. (p b)))) (Data.Bool.~ ((Data.Bool.\/ (p Data.Bool.T)) (p Data.Bool.F))))) ((= (Data.Bool.? \lambda b. (p b))) ((Data.Bool.\/ (p Data.Bool.T)) (p Data.Bool.F)))) ;)

(; dict ;)

def thm_613 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.imp (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2))) (hol.not (hol.or (p_1 hol.true) (p_1 hol.false)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)) (hol.or (p_1 hol.true) (p_1 hol.false)))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (thm_545 q_1 p_2) (thm_550 q_1 p_2 (hol.EQ_MP (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (thm_544 q_1 p_2) (hol.EQ_MP (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (hol.imp (hol.eq hol.bool (hol.not p_2) (hol.not q_1)) (hol.eq hol.bool p_2 q_1)) (thm_544 q_1 p_2) (thm_612 q_1 p_2))))) (hol.or (p_1 hol.true) (p_1 hol.false)) (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_614 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.? \lambda b. (p b)))) (Data.Bool.! \lambda b. (Data.Bool.~ (p b))))) ((= (Data.Bool.~ (Data.Bool.? \lambda b. (p b)))) (Data.Bool.! \lambda b. (Data.Bool.~ (p b))))) ;)

(; dict ;)

def thm_615 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_2 : hol.term A => p_1 b_2))) (hol.forall A (b_2 : hol.term A => hol.not (p_1 b_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_2 : hol.term A => p_1 b_2))) (hol.forall A (b_2 : hol.term A => hol.not (p_1 b_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_2 : hol.term A => p_1 b_2))) (hol.forall A (b_2 : hol.term A => hol.not (p_1 b_2)))).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) ((= (Data.Bool.~ (Data.Bool.? \lambda b. (p b)))) (Data.Bool.! \lambda b. (Data.Bool.~ (p b))))) ;)

(; dict ;)

def thm_616 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_2 : hol.term A => p_1 b_2))) (hol.forall A (b_2 : hol.term A => hol.not (p_1 b_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_2 : hol.term A => p_1 b_2))) (hol.forall A (b_2 : hol.term A => hol.not (p_1 b_2)))) (thm_614 A p_1) (thm_615 A p_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda b. (p b)))) (Data.Bool.! \lambda b. (Data.Bool.~ (p b)))) ;)

(; dict ;)

def thm_617 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_2 : hol.term A => p_1 b_2))) (hol.forall A (b_2 : hol.term A => hol.not (p_1 b_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (b_2 : hol.term A => p_1 b_2))) (hol.forall A (b_2 : hol.term A => hol.not (p_1 b_2)))) (thm_616 A p_1) (thm_237 A p_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda b. (p b)))) (Data.Bool.! \lambda b. (Data.Bool.~ (p b)))) ;)

(; dict ;)

def thm_618 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2))) (hol.forall hol.bool (b_2 : hol.term hol.bool => hol.not (p_1 b_2)))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_617 A p_1) hol.bool p_1.

(; Theorem: |- ((= (\lambda b. (Data.Bool.~ (p b)) b)) (Data.Bool.~ (p b))) ;)

(; dict ;)

def thm_619 : b_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool ((b_3 : hol.term hol.bool => hol.not (p_2 b_3)) b_1) (hol.not (p_2 b_1))) :=
  b_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hol.BETA_CONV hol.bool hol.bool (b_3 : hol.term hol.bool => hol.not (p_2 b_3)) b_1.

(; Theorem: |- ((= \lambda b. (\lambda b. (Data.Bool.~ (p b)) b)) \lambda b. (Data.Bool.~ (p b))) ;)

(; dict ;)

def thm_620 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (b_2 : hol.term hol.bool => (b_3 : hol.term hol.bool => hol.not (p_1 b_3)) b_2) (b_2 : hol.term hol.bool => hol.not (p_1 b_2))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.ABS_THM hol.bool hol.bool (b_2 : hol.term hol.bool => (b_3 : hol.term hol.bool => hol.not (p_1 b_3)) b_2) (b_2 : hol.term hol.bool => hol.not (p_1 b_2)) (b_2 : hol.term hol.bool => thm_619 b_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (\lambda b. (Data.Bool.~ (p b)) b))) (Data.Bool.! \lambda b. (Data.Bool.~ (p b)))) ;)

(; dict ;)

def thm_621 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => (b_3 : hol.term hol.bool => hol.not (p_1 b_3)) b_2)) (hol.forall hol.bool (b_2 : hol.term hol.bool => hol.not (p_1 b_2)))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (b_2 : hol.term hol.bool => (b_3 : hol.term hol.bool => hol.not (p_1 b_3)) b_2) (b_2 : hol.term hol.bool => hol.not (p_1 b_2)) thm_68 (thm_620 p_1).

(; Theorem: |- ((= (= (Data.Bool.! \lambda b. (\lambda b. (Data.Bool.~ (p b)) b)))) (= (Data.Bool.! \lambda b. (Data.Bool.~ (p b))))) ;)

(; dict ;)

def thm_622 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => (b_3 : hol.term hol.bool => hol.not (p_1 b_3)) b_2))) (hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => hol.not (p_1 b_2))))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall hol.bool (b_2 : hol.term hol.bool => (b_3 : hol.term hol.bool => hol.not (p_1 b_3)) b_2)) (hol.forall hol.bool (b_2 : hol.term hol.bool => hol.not (p_1 b_2))) thm_121 (thm_621 p_1).

(; Theorem: |- ((= (\lambda b. (Data.Bool.~ (p b)) Data.Bool.T)) (Data.Bool.~ (p Data.Bool.T))) ;)

(; dict ;)

def thm_623 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool ((b_2 : hol.term hol.bool => hol.not (p_1 b_2)) hol.true) (hol.not (p_1 hol.true))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.BETA_CONV hol.bool hol.bool (b_2 : hol.term hol.bool => hol.not (p_1 b_2)) hol.true.

(; Theorem: |- ((= (Data.Bool./\ (\lambda b. (Data.Bool.~ (p b)) Data.Bool.T))) (Data.Bool./\ (Data.Bool.~ (p Data.Bool.T)))) ;)

(; dict ;)

def thm_624 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and ((b_2 : hol.term hol.bool => hol.not (p_1 b_2)) hol.true)) (hol.and (hol.not (p_1 hol.true)))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and ((b_2 : hol.term hol.bool => hol.not (p_1 b_2)) hol.true) (hol.not (p_1 hol.true)) thm_489 (thm_623 p_1).

(; Theorem: |- ((= (\lambda b. (Data.Bool.~ (p b)) Data.Bool.F)) (Data.Bool.~ (p Data.Bool.F))) ;)

(; dict ;)

def thm_625 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool ((b_2 : hol.term hol.bool => hol.not (p_1 b_2)) hol.false) (hol.not (p_1 hol.false))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.BETA_CONV hol.bool hol.bool (b_2 : hol.term hol.bool => hol.not (p_1 b_2)) hol.false.

(; Theorem: |- ((= ((Data.Bool./\ (\lambda b. (Data.Bool.~ (p b)) Data.Bool.T)) (\lambda b. (Data.Bool.~ (p b)) Data.Bool.F))) ((Data.Bool./\ (Data.Bool.~ (p Data.Bool.T))) (Data.Bool.~ (p Data.Bool.F)))) ;)

(; dict ;)

def thm_626 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.and ((b_2 : hol.term hol.bool => hol.not (p_1 b_2)) hol.true) ((b_2 : hol.term hol.bool => hol.not (p_1 b_2)) hol.false)) (hol.and (hol.not (p_1 hol.true)) (hol.not (p_1 hol.false)))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.APP_THM hol.bool hol.bool (hol.and ((b_2 : hol.term hol.bool => hol.not (p_1 b_2)) hol.true)) (hol.and (hol.not (p_1 hol.true))) ((b_2 : hol.term hol.bool => hol.not (p_1 b_2)) hol.false) (hol.not (p_1 hol.false)) (thm_624 p_1) (thm_625 p_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda b. (\lambda b. (Data.Bool.~ (p b)) b))) ((Data.Bool./\ (\lambda b. (Data.Bool.~ (p b)) Data.Bool.T)) (\lambda b. (Data.Bool.~ (p b)) Data.Bool.F)))) ((= (Data.Bool.! \lambda b. (Data.Bool.~ (p b)))) ((Data.Bool./\ (Data.Bool.~ (p Data.Bool.T))) (Data.Bool.~ (p Data.Bool.F))))) ;)

(; dict ;)

def thm_627 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => (b_3 : hol.term hol.bool => hol.not (p_1 b_3)) b_2)) (hol.and ((b_2 : hol.term hol.bool => hol.not (p_1 b_2)) hol.true) ((b_2 : hol.term hol.bool => hol.not (p_1 b_2)) hol.false))) (hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => hol.not (p_1 b_2))) (hol.and (hol.not (p_1 hol.true)) (hol.not (p_1 hol.false))))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => (b_3 : hol.term hol.bool => hol.not (p_1 b_3)) b_2))) (hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => hol.not (p_1 b_2)))) (hol.and ((b_2 : hol.term hol.bool => hol.not (p_1 b_2)) hol.true) ((b_2 : hol.term hol.bool => hol.not (p_1 b_2)) hol.false)) (hol.and (hol.not (p_1 hol.true)) (hol.not (p_1 hol.false))) (thm_622 p_1) (thm_626 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (\lambda b. (Data.Bool.~ (p b)) b))) ((Data.Bool./\ (\lambda b. (Data.Bool.~ (p b)) Data.Bool.T)) (\lambda b. (Data.Bool.~ (p b)) Data.Bool.F))) ;)

(; dict ;)

def thm_628 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => (b_3 : hol.term hol.bool => hol.not (p_1 b_3)) b_2)) (hol.and ((b_2 : hol.term hol.bool => hol.not (p_1 b_2)) hol.true) ((b_2 : hol.term hol.bool => hol.not (p_1 b_2)) hol.false))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => (p_1 : hol.term (hol.arr hol.bool hol.bool) => thm_538 p_1) (b_2 : hol.term hol.bool => hol.not (p_1 b_2)).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (Data.Bool.~ (p b)))) ((Data.Bool./\ (Data.Bool.~ (p Data.Bool.T))) (Data.Bool.~ (p Data.Bool.F)))) ;)

(; dict ;)

def thm_629 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => hol.not (p_1 b_2))) (hol.and (hol.not (p_1 hol.true)) (hol.not (p_1 hol.false)))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => (b_3 : hol.term hol.bool => hol.not (p_1 b_3)) b_2)) (hol.and ((b_2 : hol.term hol.bool => hol.not (p_1 b_2)) hol.true) ((b_2 : hol.term hol.bool => hol.not (p_1 b_2)) hol.false))) (hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => hol.not (p_1 b_2))) (hol.and (hol.not (p_1 hol.true)) (hol.not (p_1 hol.false)))) (thm_627 p_1) (thm_628 p_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda b. (p b)))) ((Data.Bool./\ (Data.Bool.~ (p Data.Bool.T))) (Data.Bool.~ (p Data.Bool.F)))) ;)

(; dict ;)

def thm_630 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2))) (hol.and (hol.not (p_1 hol.true)) (hol.not (p_1 hol.false)))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.TRANS hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2))) (hol.forall hol.bool (b_2 : hol.term hol.bool => hol.not (p_1 b_2))) (hol.and (hol.not (p_1 hol.true)) (hol.not (p_1 hol.false))) (thm_618 p_1) (thm_629 p_1).

(; Theorem: |- ((= (= (Data.Bool.~ (Data.Bool.? \lambda b. (p b))))) (= ((Data.Bool./\ (Data.Bool.~ (p Data.Bool.T))) (Data.Bool.~ (p Data.Bool.F))))) ;)

(; dict ;)

def thm_631 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)))) (hol.eq hol.bool (hol.and (hol.not (p_1 hol.true)) (hol.not (p_1 hol.false))))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2))) (hol.and (hol.not (p_1 hol.true)) (hol.not (p_1 hol.false))) thm_121 (thm_630 p_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_632 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_633 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (thm_632 t2_1 t1_2) (thm_632 t2_1 t1_2).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) ;)

(; dict ;)

def thm_634 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) ;)

(; dict ;)

def thm_635 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) thm_634 thm_634.

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))))) ;)

(; dict ;)

def thm_636 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) thm_68 thm_635.

(; Theorem: |- ((= \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_637 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))).

(; Theorem: |- ((= \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_638 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (thm_637 t1_1) (thm_637 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) ;)

(; dict ;)

def thm_639 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))))) :=
  t1_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) thm_68 (thm_638 t1_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_640 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_641 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (thm_640 t2_1 t1_2) (thm_640 t2_1 t1_2).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_642 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => thm_26 t1_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_643 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_642 t1_2 t2_1.

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_644 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_103 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) hyp_1.

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_645 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (thm_641 t2_1 t1_2) (thm_643 t2_1 t1_2)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) => thm_644 t2_1 t1_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_646 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => thm_27 t1_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_647 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_646 t1_2 t2_1.

(; Theorem: |- ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_648 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) (thm_645 t2_1 t1_2) (hol.EQ_MP (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (thm_632 t2_1 t1_2) (thm_647 t2_1 t1_2)).

(; Theorem: |- (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_649 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => thm_648 t2_2 t1_1.

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) ;)

(; dict ;)

def thm_650 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))))) :=
  t1_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (thm_639 t1_1) (thm_649 t1_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_651 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) -> hol.proof (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_95 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) hyp_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_652 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.EQ_MP (hol.forall hol.bool (t1_3 : hol.term hol.bool => hol.forall hol.bool (t2_4 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_3 t2_4)) (hol.or (hol.not t1_3) (hol.not t2_4))) (hol.eq hol.bool (hol.not (hol.or t1_3 t2_4)) (hol.and (hol.not t1_3) (hol.not t2_4)))))) (hol.forall hol.bool (t1_3 : hol.term hol.bool => hol.forall hol.bool (t2_4 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_3 t2_4)) (hol.or (hol.not t1_3) (hol.not t2_4))) (hol.eq hol.bool (hol.not (hol.or t1_3 t2_4)) (hol.and (hol.not t1_3) (hol.not t2_4)))))) thm_636 thm_650 t1_2 t2_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) => thm_651 t2_1 t1_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ (p Data.Bool.T)) (p Data.Bool.F)))) ((Data.Bool./\ (Data.Bool.~ (p Data.Bool.T))) (Data.Bool.~ (p Data.Bool.F)))) ;)

(; dict ;)

def thm_653 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.or (p_1 hol.true) (p_1 hol.false))) (hol.and (hol.not (p_1 hol.true)) (hol.not (p_1 hol.false)))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (thm_633 t2_1 t1_2) (thm_652 t2_1 t1_2)) (p_1 hol.false) (p_1 hol.true).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.? \lambda b. (p b)))) (Data.Bool.~ ((Data.Bool.\/ (p Data.Bool.T)) (p Data.Bool.F))))) ((= ((Data.Bool./\ (Data.Bool.~ (p Data.Bool.T))) (Data.Bool.~ (p Data.Bool.F)))) ((Data.Bool./\ (Data.Bool.~ (p Data.Bool.T))) (Data.Bool.~ (p Data.Bool.F))))) ;)

(; dict ;)

def thm_654 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2))) (hol.not (hol.or (p_1 hol.true) (p_1 hol.false)))) (hol.eq hol.bool (hol.and (hol.not (p_1 hol.true)) (hol.not (p_1 hol.false))) (hol.and (hol.not (p_1 hol.true)) (hol.not (p_1 hol.false))))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)))) (hol.eq hol.bool (hol.and (hol.not (p_1 hol.true)) (hol.not (p_1 hol.false)))) (hol.not (hol.or (p_1 hol.true) (p_1 hol.false))) (hol.and (hol.not (p_1 hol.true)) (hol.not (p_1 hol.false))) (thm_631 p_1) (thm_653 p_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.~ (p Data.Bool.T))) (Data.Bool.~ (p Data.Bool.F)))) ((Data.Bool./\ (Data.Bool.~ (p Data.Bool.T))) (Data.Bool.~ (p Data.Bool.F))))) Data.Bool.T) ;)

(; dict ;)

def thm_655 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (hol.not (p_1 hol.true)) (hol.not (p_1 hol.false))) (hol.and (hol.not (p_1 hol.true)) (hol.not (p_1 hol.false)))) hol.true) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => (x_1 : hol.term hol.bool => thm_307 x_1) (hol.and (hol.not (p_1 hol.true)) (hol.not (p_1 hol.false))).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.? \lambda b. (p b)))) (Data.Bool.~ ((Data.Bool.\/ (p Data.Bool.T)) (p Data.Bool.F))))) Data.Bool.T) ;)

(; dict ;)

def thm_656 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2))) (hol.not (hol.or (p_1 hol.true) (p_1 hol.false)))) hol.true) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2))) (hol.not (hol.or (p_1 hol.true) (p_1 hol.false)))) (hol.eq hol.bool (hol.and (hol.not (p_1 hol.true)) (hol.not (p_1 hol.false))) (hol.and (hol.not (p_1 hol.true)) (hol.not (p_1 hol.false)))) hol.true (thm_654 p_1) (thm_655 p_1).

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ (Data.Bool.? \lambda b. (p b)))) (Data.Bool.~ ((Data.Bool.\/ (p Data.Bool.T)) (p Data.Bool.F))))) ;)

(; dict ;)

def thm_657 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2))) (hol.not (hol.or (p_1 hol.true) (p_1 hol.false))))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2))) (hol.not (hol.or (p_1 hol.true) (p_1 hol.false)))) hol.true (thm_656 p_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda b. (p b)))) (Data.Bool.~ ((Data.Bool.\/ (p Data.Bool.T)) (p Data.Bool.F)))) ;)

(; dict ;)

def thm_658 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2))) (hol.not (hol.or (p_1 hol.true) (p_1 hol.false)))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2))) (hol.not (hol.or (p_1 hol.true) (p_1 hol.false)))) (thm_657 p_1) thm_6.

(; Theorem: |- ((= (Data.Bool.? \lambda b. (p b))) ((Data.Bool.\/ (p Data.Bool.T)) (p Data.Bool.F))) ;)

(; dict ;)

def thm_659 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)) (hol.or (p_1 hol.true) (p_1 hol.false))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => thm_613 p_1 (thm_658 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda b. (p b))) ((Data.Bool.\/ (p Data.Bool.T)) (p Data.Bool.F)))) ;)

(; dict ;)

def thm_660 : hol.proof (hol.forall (hol.arr hol.bool hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)) (hol.or (p_1 hol.true) (p_1 hol.false)))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => thm_659 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda b. (p b))) ((Data.Bool.\/ (p Data.Bool.T)) (p Data.Bool.F)))) ;)

(; thm ;)

def thm_661 : hol.proof (hol.forall (hol.arr hol.bool hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)) (hol.or (p_1 hol.true) (p_1 hol.false)))) :=
  hol.EQ_MP (hol.forall (hol.arr hol.bool hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)) (hol.or (p_1 hol.true) (p_1 hol.false)))) (hol.forall (hol.arr hol.bool hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_2 : hol.term hol.bool => p_1 b_2)) (hol.or (p_1 hol.true) (p_1 hol.false)))) thm_543 thm_660.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)))) ;)

(; dict ;)

def thm_662 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)))) ;)

(; dict ;)

def thm_663 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (thm_662 A) (thm_662 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q))))) ;)

(; dict ;)

def thm_664 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (thm_33 A) (thm_663 A).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q))) \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_665 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q))) \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_666 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) (thm_665 A p_1) (thm_665 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)))) (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)))) ;)

(; dict ;)

def thm_667 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) thm_68 (thm_666 A p_1).

(; Theorem: |- ((= ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b)))) ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_668 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))).

(; Theorem: |- ((= ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b)))) ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_669 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) (thm_668 b_1 a_2) (thm_668 b_1 a_2).

(; Theorem: |- ((= (= (\lambda _432. ((= ((= _432) b)) ((= (Data.Bool.~ _432)) (Data.Bool.~ b))) a))) (= (\lambda _432. ((= ((= _432) b)) ((= (Data.Bool.~ _432)) (Data.Bool.~ b))) a))) ;)

(; dict ;)

def thm_670 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) a_1)) (hol.eq hol.bool ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) a_1))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) a_1)).

(; Theorem: |- ((= (\lambda _432. ((= ((= _432) b)) ((= (Data.Bool.~ _432)) (Data.Bool.~ b))) Data.Bool.F)) ((= ((= Data.Bool.F) b)) ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_671 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__432_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_2 b_1) (hol.eq hol.bool (hol.not __432_2) (hol.not b_1))) hol.false) (hol.eq hol.bool (hol.eq hol.bool hol.false b_1) (hol.eq hol.bool (hol.not hol.false) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__432_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_2 b_1) (hol.eq hol.bool (hol.not __432_2) (hol.not b_1))) hol.false.

(; Theorem: |- ((= ((= (\lambda _432. ((= ((= _432) b)) ((= (Data.Bool.~ _432)) (Data.Bool.~ b))) a)) (\lambda _432. ((= ((= _432) b)) ((= (Data.Bool.~ _432)) (Data.Bool.~ b))) Data.Bool.F))) ((= (\lambda _432. ((= ((= _432) b)) ((= (Data.Bool.~ _432)) (Data.Bool.~ b))) a)) ((= ((= Data.Bool.F) b)) ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b))))) ;)

(; dict ;)

def thm_672 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) a_1) ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) hol.false)) (hol.eq hol.bool ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) a_1) (hol.eq hol.bool (hol.eq hol.bool hol.false b_2) (hol.eq hol.bool (hol.not hol.false) (hol.not b_2))))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) a_1)) (hol.eq hol.bool ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) a_1)) ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) hol.false) (hol.eq hol.bool (hol.eq hol.bool hol.false b_2) (hol.eq hol.bool (hol.not hol.false) (hol.not b_2))) (thm_670 a_1 b_2) (thm_671 b_2).

(; Theorem: |- ((= (\lambda _432. ((= ((= _432) b)) ((= (Data.Bool.~ _432)) (Data.Bool.~ b))) a)) ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_673 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) a_1) (hol.eq hol.bool (hol.eq hol.bool a_1 b_2) (hol.eq hol.bool (hol.not a_1) (hol.not b_2)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) a_1.

(; Theorem: |- ((= (= (\lambda _432. ((= ((= _432) b)) ((= (Data.Bool.~ _432)) (Data.Bool.~ b))) a))) (= ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b))))) ;)

(; dict ;)

def thm_674 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) a_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 b_2) (hol.eq hol.bool (hol.not a_1) (hol.not b_2))))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) a_1) (hol.eq hol.bool (hol.eq hol.bool a_1 b_2) (hol.eq hol.bool (hol.not a_1) (hol.not b_2))) thm_121 (thm_673 a_1 b_2).

(; Theorem: |- ((= ((= ((= Data.Bool.F) b)) ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b)))) ((= ((= Data.Bool.F) b)) ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_675 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false b_1) (hol.eq hol.bool (hol.not hol.false) (hol.not b_1))) (hol.eq hol.bool (hol.eq hol.bool hol.false b_1) (hol.eq hol.bool (hol.not hol.false) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false b_1) (hol.eq hol.bool (hol.not hol.false) (hol.not b_1))).

(; Theorem: |- ((= ((= (\lambda _432. ((= ((= _432) b)) ((= (Data.Bool.~ _432)) (Data.Bool.~ b))) a)) ((= ((= Data.Bool.F) b)) ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b))))) ((= ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b)))) ((= ((= Data.Bool.F) b)) ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b))))) ;)

(; dict ;)

def thm_676 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) a_1) (hol.eq hol.bool (hol.eq hol.bool hol.false b_2) (hol.eq hol.bool (hol.not hol.false) (hol.not b_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 b_2) (hol.eq hol.bool (hol.not a_1) (hol.not b_2))) (hol.eq hol.bool (hol.eq hol.bool hol.false b_2) (hol.eq hol.bool (hol.not hol.false) (hol.not b_2))))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) a_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 b_2) (hol.eq hol.bool (hol.not a_1) (hol.not b_2)))) (hol.eq hol.bool (hol.eq hol.bool hol.false b_2) (hol.eq hol.bool (hol.not hol.false) (hol.not b_2))) (hol.eq hol.bool (hol.eq hol.bool hol.false b_2) (hol.eq hol.bool (hol.not hol.false) (hol.not b_2))) (thm_674 a_1 b_2) (thm_675 b_2).

(; Theorem: |- ((= ((= (\lambda _432. ((= ((= _432) b)) ((= (Data.Bool.~ _432)) (Data.Bool.~ b))) a)) (\lambda _432. ((= ((= _432) b)) ((= (Data.Bool.~ _432)) (Data.Bool.~ b))) Data.Bool.F))) ((= ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b)))) ((= ((= Data.Bool.F) b)) ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b))))) ;)

(; dict ;)

def thm_677 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) a_1) ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 b_2) (hol.eq hol.bool (hol.not a_1) (hol.not b_2))) (hol.eq hol.bool (hol.eq hol.bool hol.false b_2) (hol.eq hol.bool (hol.not hol.false) (hol.not b_2))))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) a_1) ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) hol.false)) (hol.eq hol.bool ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) a_1) (hol.eq hol.bool (hol.eq hol.bool hol.false b_2) (hol.eq hol.bool (hol.not hol.false) (hol.not b_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 b_2) (hol.eq hol.bool (hol.not a_1) (hol.not b_2))) (hol.eq hol.bool (hol.eq hol.bool hol.false b_2) (hol.eq hol.bool (hol.not hol.false) (hol.not b_2)))) (thm_672 a_1 b_2) (thm_676 a_1 b_2).

(; Theorem: |- ((= \lambda _432. ((= ((= _432) b)) ((= (Data.Bool.~ _432)) (Data.Bool.~ b)))) \lambda _432. ((= ((= _432) b)) ((= (Data.Bool.~ _432)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_678 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__432_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_2 b_1) (hol.eq hol.bool (hol.not __432_2) (hol.not b_1))) (__432_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_2 b_1) (hol.eq hol.bool (hol.not __432_2) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__432_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_2 b_1) (hol.eq hol.bool (hol.not __432_2) (hol.not b_1))).

(; Theorem: |- ((= (\lambda _432. ((= ((= _432) b)) ((= (Data.Bool.~ _432)) (Data.Bool.~ b))) a)) (\lambda _432. ((= ((= _432) b)) ((= (Data.Bool.~ _432)) (Data.Bool.~ b))) Data.Bool.F)) ;)

(; dict ;)

def thm_679 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) -> hol.proof (hol.eq hol.bool ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) a_1) ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) hol.false)) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) => hol.APP_THM hol.bool hol.bool (__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) (__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_2) (hol.eq hol.bool (hol.not __432_3) (hol.not b_2))) a_1 hol.false (thm_678 b_2) (thm_251 a_1 hyp_1).

(; Theorem: |- ((= ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b)))) ((= ((= Data.Bool.F) b)) ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_680 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.eq hol.bool hol.false b_1) (hol.eq hol.bool (hol.not hol.false) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_1) (hol.eq hol.bool (hol.not __432_3) (hol.not b_1))) a_2) ((__432_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __432_3 b_1) (hol.eq hol.bool (hol.not __432_3) (hol.not b_1))) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.eq hol.bool hol.false b_1) (hol.eq hol.bool (hol.not hol.false) (hol.not b_1)))) (thm_677 a_2 b_1) (thm_679 a_2 b_1 hyp_1).

(; Theorem: |- ((= ((= ((= Data.Bool.F) b)) ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b)))) ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_681 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false b_2) (hol.eq hol.bool (hol.not hol.false) (hol.not b_2))) (hol.eq hol.bool (hol.eq hol.bool a_1 b_2) (hol.eq hol.bool (hol.not a_1) (hol.not b_2)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.false) => hol.SYM hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 b_2) (hol.eq hol.bool (hol.not a_1) (hol.not b_2))) (hol.eq hol.bool (hol.eq hol.bool hol.false b_2) (hol.eq hol.bool (hol.not hol.false) (hol.not b_2))) (thm_680 b_2 a_1 hyp_1).

(; Theorem: |- ((= (= ((= Data.Bool.F) b))) (= (Data.Bool.~ b))) ;)

(; dict ;)

def thm_682 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.eq hol.bool hol.false b_1)) (hol.eq hol.bool (hol.not b_1))) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.eq hol.bool hol.false b_1) (hol.not b_1) thm_121 (thm_331 b_1).

(; Theorem: |- ((= (Data.Bool.~ b)) (Data.Bool.~ b)) ;)

(; dict ;)

def thm_683 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not b_1) (hol.not b_1)) :=
  b_1 : hol.term hol.bool => hol.REFL hol.bool (hol.not b_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b))) ((= Data.Bool.T) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_684 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not b_1)) (hol.eq hol.bool hol.true (hol.not b_1))) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not hol.false)) (hol.eq hol.bool hol.true) (hol.not b_1) (hol.not b_1) thm_288 (thm_683 b_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b))) (Data.Bool.~ b)) ;)

(; dict ;)

def thm_685 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not b_1)) (hol.not b_1)) :=
  b_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not b_1)) (hol.eq hol.bool hol.true (hol.not b_1)) (hol.not b_1) (thm_684 b_1) (thm_327 b_1).

(; Theorem: |- ((= ((= ((= Data.Bool.F) b)) ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b)))) ((= (Data.Bool.~ b)) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_686 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false b_1) (hol.eq hol.bool (hol.not hol.false) (hol.not b_1))) (hol.eq hol.bool (hol.not b_1) (hol.not b_1))) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false b_1)) (hol.eq hol.bool (hol.not b_1)) (hol.eq hol.bool (hol.not hol.false) (hol.not b_1)) (hol.not b_1) (thm_682 b_1) (thm_685 b_1).

(; Theorem: |- ((= ((= ((= Data.Bool.F) b)) ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b)))) Data.Bool.T) ;)

(; dict ;)

def thm_687 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false b_1) (hol.eq hol.bool (hol.not hol.false) (hol.not b_1))) hol.true) :=
  b_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false b_1) (hol.eq hol.bool (hol.not hol.false) (hol.not b_1))) (hol.eq hol.bool (hol.not b_1) (hol.not b_1)) hol.true (thm_686 b_1) (thm_334 b_1).

(; Theorem: |- ((= Data.Bool.T) ((= ((= Data.Bool.F) b)) ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_688 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.eq hol.bool hol.false b_1) (hol.eq hol.bool (hol.not hol.false) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false b_1) (hol.eq hol.bool (hol.not hol.false) (hol.not b_1))) hol.true (thm_687 b_1).

(; Theorem: |- ((= ((= Data.Bool.F) b)) ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_689 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false b_1) (hol.eq hol.bool (hol.not hol.false) (hol.not b_1))) :=
  b_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.eq hol.bool hol.false b_1) (hol.eq hol.bool (hol.not hol.false) (hol.not b_1))) (thm_688 b_1) thm_6.

(; Theorem: |- ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_690 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.false) => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.false b_1) (hol.eq hol.bool (hol.not hol.false) (hol.not b_1))) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) (thm_681 a_2 b_1 hyp_1) (thm_689 b_1).

(; Theorem: |- ((Data.Bool.==> ((= a) Data.Bool.F)) ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_691 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.false) => thm_690 b_1 a_2 hyp_1.

(; Theorem: |- ((= (= (\lambda _430. ((= ((= _430) b)) ((= (Data.Bool.~ _430)) (Data.Bool.~ b))) a))) (= (\lambda _430. ((= ((= _430) b)) ((= (Data.Bool.~ _430)) (Data.Bool.~ b))) a))) ;)

(; dict ;)

def thm_692 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) a_1)) (hol.eq hol.bool ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) a_1))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) a_1)).

(; Theorem: |- ((= (\lambda _430. ((= ((= _430) b)) ((= (Data.Bool.~ _430)) (Data.Bool.~ b))) Data.Bool.T)) ((= ((= Data.Bool.T) b)) ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_693 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__430_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_2 b_1) (hol.eq hol.bool (hol.not __430_2) (hol.not b_1))) hol.true) (hol.eq hol.bool (hol.eq hol.bool hol.true b_1) (hol.eq hol.bool (hol.not hol.true) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__430_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_2 b_1) (hol.eq hol.bool (hol.not __430_2) (hol.not b_1))) hol.true.

(; Theorem: |- ((= ((= (\lambda _430. ((= ((= _430) b)) ((= (Data.Bool.~ _430)) (Data.Bool.~ b))) a)) (\lambda _430. ((= ((= _430) b)) ((= (Data.Bool.~ _430)) (Data.Bool.~ b))) Data.Bool.T))) ((= (\lambda _430. ((= ((= _430) b)) ((= (Data.Bool.~ _430)) (Data.Bool.~ b))) a)) ((= ((= Data.Bool.T) b)) ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b))))) ;)

(; dict ;)

def thm_694 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) a_1) ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) hol.true)) (hol.eq hol.bool ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) a_1) (hol.eq hol.bool (hol.eq hol.bool hol.true b_2) (hol.eq hol.bool (hol.not hol.true) (hol.not b_2))))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) a_1)) (hol.eq hol.bool ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) a_1)) ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) hol.true) (hol.eq hol.bool (hol.eq hol.bool hol.true b_2) (hol.eq hol.bool (hol.not hol.true) (hol.not b_2))) (thm_692 a_1 b_2) (thm_693 b_2).

(; Theorem: |- ((= (\lambda _430. ((= ((= _430) b)) ((= (Data.Bool.~ _430)) (Data.Bool.~ b))) a)) ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_695 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) a_1) (hol.eq hol.bool (hol.eq hol.bool a_1 b_2) (hol.eq hol.bool (hol.not a_1) (hol.not b_2)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) a_1.

(; Theorem: |- ((= (= (\lambda _430. ((= ((= _430) b)) ((= (Data.Bool.~ _430)) (Data.Bool.~ b))) a))) (= ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b))))) ;)

(; dict ;)

def thm_696 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) a_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 b_2) (hol.eq hol.bool (hol.not a_1) (hol.not b_2))))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) a_1) (hol.eq hol.bool (hol.eq hol.bool a_1 b_2) (hol.eq hol.bool (hol.not a_1) (hol.not b_2))) thm_121 (thm_695 a_1 b_2).

(; Theorem: |- ((= ((= ((= Data.Bool.T) b)) ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b)))) ((= ((= Data.Bool.T) b)) ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_697 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true b_1) (hol.eq hol.bool (hol.not hol.true) (hol.not b_1))) (hol.eq hol.bool (hol.eq hol.bool hol.true b_1) (hol.eq hol.bool (hol.not hol.true) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true b_1) (hol.eq hol.bool (hol.not hol.true) (hol.not b_1))).

(; Theorem: |- ((= ((= (\lambda _430. ((= ((= _430) b)) ((= (Data.Bool.~ _430)) (Data.Bool.~ b))) a)) ((= ((= Data.Bool.T) b)) ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b))))) ((= ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b)))) ((= ((= Data.Bool.T) b)) ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b))))) ;)

(; dict ;)

def thm_698 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) a_1) (hol.eq hol.bool (hol.eq hol.bool hol.true b_2) (hol.eq hol.bool (hol.not hol.true) (hol.not b_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 b_2) (hol.eq hol.bool (hol.not a_1) (hol.not b_2))) (hol.eq hol.bool (hol.eq hol.bool hol.true b_2) (hol.eq hol.bool (hol.not hol.true) (hol.not b_2))))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) a_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 b_2) (hol.eq hol.bool (hol.not a_1) (hol.not b_2)))) (hol.eq hol.bool (hol.eq hol.bool hol.true b_2) (hol.eq hol.bool (hol.not hol.true) (hol.not b_2))) (hol.eq hol.bool (hol.eq hol.bool hol.true b_2) (hol.eq hol.bool (hol.not hol.true) (hol.not b_2))) (thm_696 a_1 b_2) (thm_697 b_2).

(; Theorem: |- ((= ((= (\lambda _430. ((= ((= _430) b)) ((= (Data.Bool.~ _430)) (Data.Bool.~ b))) a)) (\lambda _430. ((= ((= _430) b)) ((= (Data.Bool.~ _430)) (Data.Bool.~ b))) Data.Bool.T))) ((= ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b)))) ((= ((= Data.Bool.T) b)) ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b))))) ;)

(; dict ;)

def thm_699 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) a_1) ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 b_2) (hol.eq hol.bool (hol.not a_1) (hol.not b_2))) (hol.eq hol.bool (hol.eq hol.bool hol.true b_2) (hol.eq hol.bool (hol.not hol.true) (hol.not b_2))))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) a_1) ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) hol.true)) (hol.eq hol.bool ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) a_1) (hol.eq hol.bool (hol.eq hol.bool hol.true b_2) (hol.eq hol.bool (hol.not hol.true) (hol.not b_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 b_2) (hol.eq hol.bool (hol.not a_1) (hol.not b_2))) (hol.eq hol.bool (hol.eq hol.bool hol.true b_2) (hol.eq hol.bool (hol.not hol.true) (hol.not b_2)))) (thm_694 a_1 b_2) (thm_698 a_1 b_2).

(; Theorem: |- ((= \lambda _430. ((= ((= _430) b)) ((= (Data.Bool.~ _430)) (Data.Bool.~ b)))) \lambda _430. ((= ((= _430) b)) ((= (Data.Bool.~ _430)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_700 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__430_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_2 b_1) (hol.eq hol.bool (hol.not __430_2) (hol.not b_1))) (__430_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_2 b_1) (hol.eq hol.bool (hol.not __430_2) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__430_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_2 b_1) (hol.eq hol.bool (hol.not __430_2) (hol.not b_1))).

(; Theorem: |- ((= (\lambda _430. ((= ((= _430) b)) ((= (Data.Bool.~ _430)) (Data.Bool.~ b))) a)) (\lambda _430. ((= ((= _430) b)) ((= (Data.Bool.~ _430)) (Data.Bool.~ b))) Data.Bool.T)) ;)

(; dict ;)

def thm_701 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) -> hol.proof (hol.eq hol.bool ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) a_1) ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) hol.true)) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) => hol.APP_THM hol.bool hol.bool (__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) (__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_2) (hol.eq hol.bool (hol.not __430_3) (hol.not b_2))) a_1 hol.true (thm_700 b_2) (thm_323 a_1 hyp_1).

(; Theorem: |- ((= ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b)))) ((= ((= Data.Bool.T) b)) ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_702 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.eq hol.bool hol.true b_1) (hol.eq hol.bool (hol.not hol.true) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_1) (hol.eq hol.bool (hol.not __430_3) (hol.not b_1))) a_2) ((__430_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool __430_3 b_1) (hol.eq hol.bool (hol.not __430_3) (hol.not b_1))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.eq hol.bool hol.true b_1) (hol.eq hol.bool (hol.not hol.true) (hol.not b_1)))) (thm_699 a_2 b_1) (thm_701 a_2 b_1 hyp_1).

(; Theorem: |- ((= ((= ((= Data.Bool.T) b)) ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b)))) ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_703 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true b_2) (hol.eq hol.bool (hol.not hol.true) (hol.not b_2))) (hol.eq hol.bool (hol.eq hol.bool a_1 b_2) (hol.eq hol.bool (hol.not a_1) (hol.not b_2)))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 hol.true) => hol.SYM hol.bool (hol.eq hol.bool (hol.eq hol.bool a_1 b_2) (hol.eq hol.bool (hol.not a_1) (hol.not b_2))) (hol.eq hol.bool (hol.eq hol.bool hol.true b_2) (hol.eq hol.bool (hol.not hol.true) (hol.not b_2))) (thm_702 b_2 a_1 hyp_1).

(; Theorem: |- ((= (= ((= Data.Bool.T) b))) (= b)) ;)

(; dict ;)

def thm_704 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.eq hol.bool hol.true b_1)) (hol.eq hol.bool b_1)) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.eq hol.bool hol.true b_1) b_1 thm_121 (thm_291 b_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b))) ((= Data.Bool.F) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_705 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not b_1)) (hol.eq hol.bool hol.false (hol.not b_1))) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not hol.true)) (hol.eq hol.bool hol.false) (hol.not b_1) (hol.not b_1) thm_329 (thm_683 b_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b))) (Data.Bool.~ (Data.Bool.~ b))) ;)

(; dict ;)

def thm_706 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not b_1)) (hol.not (hol.not b_1))) :=
  b_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not b_1)) (hol.eq hol.bool hol.false (hol.not b_1)) (hol.not (hol.not b_1)) (thm_705 b_1) (thm_286 b_1).

(; Theorem: |- ((= ((= ((= Data.Bool.T) b)) ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b)))) ((= b) (Data.Bool.~ (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_707 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true b_1) (hol.eq hol.bool (hol.not hol.true) (hol.not b_1))) (hol.eq hol.bool b_1 (hol.not (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true b_1)) (hol.eq hol.bool b_1) (hol.eq hol.bool (hol.not hol.true) (hol.not b_1)) (hol.not (hol.not b_1)) (thm_704 b_1) (thm_706 b_1).

(; Theorem: |- ((= ((= b) (Data.Bool.~ (Data.Bool.~ b)))) ((= ((= Data.Bool.T) b)) ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_708 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool b_1 (hol.not (hol.not b_1))) (hol.eq hol.bool (hol.eq hol.bool hol.true b_1) (hol.eq hol.bool (hol.not hol.true) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true b_1) (hol.eq hol.bool (hol.not hol.true) (hol.not b_1))) (hol.eq hol.bool b_1 (hol.not (hol.not b_1))) (thm_707 b_1).

(; Theorem: |- ((= (= b)) (= b)) ;)

(; dict ;)

def thm_709 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool b_1) (hol.eq hol.bool b_1)) :=
  b_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool b_1).

(; Theorem: |- ((= ((= b) (Data.Bool.~ (Data.Bool.~ b)))) ((= b) b)) ;)

(; dict ;)

def thm_710 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool b_1 (hol.not (hol.not b_1))) (hol.eq hol.bool b_1 b_1)) :=
  b_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool b_1) (hol.eq hol.bool b_1) (hol.not (hol.not b_1)) b_1 (thm_709 b_1) (thm_295 b_1).

(; Theorem: |- ((= ((= b) (Data.Bool.~ (Data.Bool.~ b)))) Data.Bool.T) ;)

(; dict ;)

def thm_711 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool b_1 (hol.not (hol.not b_1))) hol.true) :=
  b_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool b_1 (hol.not (hol.not b_1))) (hol.eq hol.bool b_1 b_1) hol.true (thm_710 b_1) (thm_308 b_1).

(; Theorem: |- ((= Data.Bool.T) ((= b) (Data.Bool.~ (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_712 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool b_1 (hol.not (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool b_1 (hol.not (hol.not b_1))) hol.true (thm_711 b_1).

(; Theorem: |- ((= b) (Data.Bool.~ (Data.Bool.~ b))) ;)

(; dict ;)

def thm_713 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool b_1 (hol.not (hol.not b_1))) :=
  b_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool b_1 (hol.not (hol.not b_1))) (thm_712 b_1) thm_6.

(; Theorem: |- ((= ((= Data.Bool.T) b)) ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_714 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true b_1) (hol.eq hol.bool (hol.not hol.true) (hol.not b_1))) :=
  b_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool b_1 (hol.not (hol.not b_1))) (hol.eq hol.bool (hol.eq hol.bool hol.true b_1) (hol.eq hol.bool (hol.not hol.true) (hol.not b_1))) (thm_708 b_1) (thm_713 b_1).

(; Theorem: |- ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_715 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.true) => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.true b_1) (hol.eq hol.bool (hol.not hol.true) (hol.not b_1))) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) (thm_703 a_2 b_1 hyp_1) (thm_714 b_1).

(; Theorem: |- ((Data.Bool.==> ((= a) Data.Bool.T)) ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b)))) ;)

(; dict ;)

def thm_716 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1)))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 hol.true) => thm_715 b_1 a_2 hyp_1.

(; Theorem: |- ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_717 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1)))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool a_2 hol.false)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1)))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool a_2 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_358 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_718 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1)))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1)))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool a_2 hol.false)) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) (thm_340 a_2) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool a_2 hol.false)) => thm_717 b_1 a_2 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_719 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1)))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1)))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1)))) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) (thm_716 b_1 a_2) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1)))) => thm_718 b_1 a_2 hyp_1 hyp_2).

(; Theorem: |- ((= ((= a) b)) ((= (Data.Bool.~ a)) (Data.Bool.~ b))) ;)

(; dict ;)

def thm_720 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1)))) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) (thm_691 b_1 a_2) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool a_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1)))) => thm_719 b_1 a_2 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q))) ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) (Data.Bool.~ ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)))) ;)

(; dict ;)

def thm_721 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.not (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) (thm_669 b_1 a_2) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) (thm_668 b_1 a_2) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.eq hol.bool (hol.not a_2) (hol.not b_1))) (thm_668 b_1 a_2) (thm_720 b_1 a_2)))) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) (Data.Bool.~ ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)))) ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_722 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.not (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.not (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1))) (thm_721 A q_1 p_2).

(; Theorem: |- ((= (\lambda x. ((Data.Bool.\/ (p x)) q) x)) ((Data.Bool.\/ (p x)) q)) ;)

(; dict ;)

def thm_723 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) x_1) (hol.or (p_3 x_1) q_2)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (x_4 : hol.term A => hol.or (p_3 x_4) q_2) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. ((Data.Bool.\/ (p x)) q) x)) \lambda x. ((Data.Bool.\/ (p x)) q)) ;)

(; dict ;)

def thm_724 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_3 : hol.term A => (x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3) (x_3 : hol.term A => hol.or (p_2 x_3) q_1) (x_3 : hol.term A => thm_723 A x_3 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.\/ (p x)) q) x))) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ;)

(; dict ;)

def thm_725 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3)) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => (x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3) (x_3 : hol.term A => hol.or (p_2 x_3) q_1) (thm_197 A) (thm_724 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.\/ (p x)) q) x)))) (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) ;)

(; dict ;)

def thm_726 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3))) (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3)) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) thm_153 (thm_725 A q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool.~ (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.\/ (p x)) q) x))))) (= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))))) ;)

(; dict ;)

def thm_727 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3)))) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3))) (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) thm_121 (thm_726 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (\lambda x. ((Data.Bool.\/ (p x)) q) x))) (Data.Bool.~ ((Data.Bool.\/ (p x)) q))) ;)

(; dict ;)

def thm_728 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) x_1)) (hol.not (hol.or (p_3 x_1) q_2))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool hol.not hol.not ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) x_1) (hol.or (p_3 x_1) q_2) thm_153 (thm_723 A x_1 q_2 p_3).

(; Theorem: |- ((= \lambda x. (Data.Bool.~ (\lambda x. ((Data.Bool.\/ (p x)) q) x))) \lambda x. (Data.Bool.~ ((Data.Bool.\/ (p x)) q))) ;)

(; dict ;)

def thm_729 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3)) (x_3 : hol.term A => hol.not (hol.or (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3)) (x_3 : hol.term A => hol.not (hol.or (p_2 x_3) q_1)) (x_3 : hol.term A => thm_728 A x_3 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ (\lambda x. ((Data.Bool.\/ (p x)) q) x)))) (Data.Bool.? \lambda x. (Data.Bool.~ ((Data.Bool.\/ (p x)) q)))) ;)

(; dict ;)

def thm_730 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.or (p_2 x_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3)) (x_3 : hol.term A => hol.not (hol.or (p_2 x_3) q_1)) (thm_367 A) (thm_729 A q_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.\/ (p x)) q) x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (\lambda x. ((Data.Bool.\/ (p x)) q) x))))) ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) (Data.Bool.? \lambda x. (Data.Bool.~ ((Data.Bool.\/ (p x)) q))))) ;)

(; dict ;)

def thm_731 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3)))) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.or (p_2 x_3) q_1))))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3)))) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.or (p_2 x_3) q_1))) (thm_727 A q_1 p_2) (thm_730 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.\/ (p x)) q) x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (\lambda x. ((Data.Bool.\/ (p x)) q) x)))) ;)

(; dict ;)

def thm_732 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_414 A p_1) A (x_3 : hol.term A => hol.or (p_2 x_3) q_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) (Data.Bool.? \lambda x. (Data.Bool.~ ((Data.Bool.\/ (p x)) q)))) ;)

(; dict ;)

def thm_733 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.or (p_2 x_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3)))) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.or (p_2 x_3) q_1)))) (thm_731 A q_1 p_2) (thm_732 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ (p x)) q))) ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_734 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.or (p_3 x_2) q_1)) (hol.and (hol.not (p_3 x_2)) (hol.not q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_647 t2_1 t1_2) q_1 (p_3 x_2).

(; Theorem: |- ((= \lambda x. (Data.Bool.~ ((Data.Bool.\/ (p x)) q))) \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_735 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.not (hol.or (p_2 x_3) q_1)) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.not q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.not (hol.or (p_2 x_3) q_1)) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.not q_1)) (x_3 : hol.term A => thm_734 A q_1 x_3 p_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ ((Data.Bool.\/ (p x)) q)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_736 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.or (p_2 x_3) q_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.not q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_3 : hol.term A => hol.not (hol.or (p_2 x_3) q_1)) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.not q_1)) (thm_367 A) (thm_735 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool./\ (\lambda x. (Data.Bool.~ (p x)) x))) (Data.Bool./\ (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_737 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and ((x_3 : hol.term A => hol.not (p_2 x_3)) x_1)) (hol.and (hol.not (p_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and ((x_3 : hol.term A => hol.not (p_2 x_3)) x_1) (hol.not (p_2 x_1)) thm_489 (thm_368 A x_1 p_2).

(; Theorem: |- ((= ((Data.Bool./\ (\lambda x. (Data.Bool.~ (p x)) x)) (Data.Bool.~ q))) ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_738 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and ((x_4 : hol.term A => hol.not (p_3 x_4)) x_2) (hol.not q_1)) (hol.and (hol.not (p_3 x_2)) (hol.not q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.and ((x_4 : hol.term A => hol.not (p_3 x_4)) x_2)) (hol.and (hol.not (p_3 x_2))) (hol.not q_1) (hol.not q_1) (thm_737 A x_2 p_3) (thm_565 q_1).

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.~ (p x)) x)) (Data.Bool.~ q))) \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_739 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.not q_1)) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.not q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.not q_1)) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.not q_1)) (x_3 : hol.term A => thm_738 A q_1 x_3 p_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.~ (p x)) x)) (Data.Bool.~ q)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_740 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.not q_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.not q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.not q_1)) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.not q_1)) (thm_367 A) (thm_739 A q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool.? \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.~ (p x)) x)) (Data.Bool.~ q))))) (= (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.~ q))))) ;)

(; dict ;)

def thm_741 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.not q_1)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.not q_1))))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.not q_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.not q_1))) thm_121 (thm_740 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (p x)) x)))) (Data.Bool./\ (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_742 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) thm_489 (thm_370 A p_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (p x)) x))) (Data.Bool.~ q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_743 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3)) (hol.not q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3)))) (hol.not q_1) (hol.not q_1) (thm_742 A p_2) (thm_565 q_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.~ (p x)) x)) (Data.Bool.~ q)))) ((Data.Bool./\ (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (p x)) x))) (Data.Bool.~ q)))) ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.~ q)))) ((Data.Bool./\ (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_744 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.not q_1))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3)) (hol.not q_1))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.not q_1))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.not q_1)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.not q_1)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3)) (hol.not q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1)) (thm_741 A q_1 p_2) (thm_743 A q_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q))) ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_745 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q))) ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_746 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)) (thm_745 A q_1 p_2) (thm_745 A q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_747 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_28 A p_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_748 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_747 A p_2 q_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.~ (p x)) x)) (Data.Bool.~ q)))) ((Data.Bool./\ (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (p x)) x))) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_749 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.not q_1))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3)) (hol.not q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)) (thm_746 A q_1 p_2) (thm_748 A q_1 p_2)) A q_1 p_2) A (hol.not q_1) (x_3 : hol.term A => hol.not (p_2 x_3)).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.~ q)))) ((Data.Bool./\ (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_750 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.not q_1))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.not q_1))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3)) (hol.not q_1))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.not q_1))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1))) (thm_744 A q_1 p_2) (thm_749 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ ((Data.Bool.\/ (p x)) q)))) ((Data.Bool./\ (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_751 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.or (p_2 x_3) q_1))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.or (p_2 x_3) q_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.not q_1))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1)) (thm_736 A q_1 p_2) (thm_750 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) ((Data.Bool./\ (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_752 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.or (p_2 x_3) q_1))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1)) (thm_733 A q_1 p_2) (thm_751 A q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))))) (= ((Data.Bool./\ (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_753 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1)) thm_121 (thm_752 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q))) ((Data.Bool./\ (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_754 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.and (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (hol.not q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_647 t2_1 t1_2) q_1 (hol.forall A (x_3 : hol.term A => p_2 x_3)).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) (Data.Bool./\ (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_755 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) thm_489 (thm_414 A p_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.~ q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_756 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (hol.not q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.and (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3)))) (hol.not q_1) (hol.not q_1) (thm_755 A p_2) (thm_565 q_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_757 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.not (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.and (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (hol.not q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1)) (thm_754 A q_1 p_2) (thm_756 A q_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) (Data.Bool.~ ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)))) ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_758 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.not (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1))) (hol.not (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1)) (thm_753 A q_1 p_2) (thm_757 A q_1 p_2).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ q)))) Data.Bool.T) ;)

(; dict ;)

def thm_759 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1))) hol.true) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (x_1 : hol.term hol.bool => thm_307 x_1) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1)).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) (Data.Bool.~ ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)))) Data.Bool.T) ;)

(; dict ;)

def thm_760 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.not (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1))) hol.true) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.not (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (p_2 x_3))) (hol.not q_1))) hol.true (thm_758 A q_1 p_2) (thm_759 A q_1 p_2).

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) (Data.Bool.~ ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)))) ;)

(; dict ;)

def thm_761 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.not (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.not (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1))) hol.true (thm_760 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) (Data.Bool.~ ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_762 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.not (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.not (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1))) (thm_761 A q_1 p_2) thm_6.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_763 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.not (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (thm_722 A q_1 p_2) (thm_762 A q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_764 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => thm_763 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)))) ;)

(; dict ;)

def thm_765 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (thm_667 A p_1) (thm_764 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)))) ;)

(; thm ;)

def thm_766 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) (thm_664 A) (thm_765 A).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))))) ;)

(; dict ;)

def thm_767 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))))) ;)

(; dict ;)

def thm_768 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (thm_767 A) (thm_767 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x))))))) ;)

(; dict ;)

def thm_769 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) thm_68 (thm_768 A).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x))))) \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_770 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x))))) \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_771 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (thm_770 A p_1) (thm_770 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))))) (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))))) ;)

(; dict ;)

def thm_772 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (thm_33 A) (thm_771 A p_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x))))) ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) (Data.Bool.~ ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))))) ;)

(; dict ;)

def thm_773 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (hol.not (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => (b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => thm_720 b_1 a_2) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) (Data.Bool.~ ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))))) ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_774 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (hol.not (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (hol.not (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))))) (thm_773 A q_1 p_2).

(; Theorem: |- ((= (\lambda x. ((Data.Bool.\/ p) (q x)) x)) ((Data.Bool.\/ p) (q x))) ;)

(; dict ;)

def thm_775 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1) (hol.or p_3 (q_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hol.BETA_CONV A hol.bool (x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. ((Data.Bool.\/ p) (q x)) x)) \lambda x. ((Data.Bool.\/ p) (q x))) ;)

(; dict ;)

def thm_776 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.ABS_THM A hol.bool (x_3 : hol.term A => (x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3) (x_3 : hol.term A => hol.or p_2 (q_1 x_3)) (x_3 : hol.term A => thm_775 A x_3 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.\/ p) (q x)) x))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ;)

(; dict ;)

def thm_777 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3)) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => (x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3) (x_3 : hol.term A => hol.or p_2 (q_1 x_3)) (thm_197 A) (thm_776 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.\/ p) (q x)) x)))) (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) ;)

(; dict ;)

def thm_778 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3))) (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3)) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) thm_153 (thm_777 A q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool.~ (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.\/ p) (q x)) x))))) (= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))))) ;)

(; dict ;)

def thm_779 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3)))) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3))) (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) thm_121 (thm_778 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (\lambda x. ((Data.Bool.\/ p) (q x)) x))) (Data.Bool.~ ((Data.Bool.\/ p) (q x)))) ;)

(; dict ;)

def thm_780 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1)) (hol.not (hol.or p_3 (q_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not hol.not ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1) (hol.or p_3 (q_2 x_1)) thm_153 (thm_775 A x_1 q_2 p_3).

(; Theorem: |- ((= \lambda x. (Data.Bool.~ (\lambda x. ((Data.Bool.\/ p) (q x)) x))) \lambda x. (Data.Bool.~ ((Data.Bool.\/ p) (q x)))) ;)

(; dict ;)

def thm_781 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3)) (x_3 : hol.term A => hol.not (hol.or p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3)) (x_3 : hol.term A => hol.not (hol.or p_2 (q_1 x_3))) (x_3 : hol.term A => thm_780 A x_3 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ (\lambda x. ((Data.Bool.\/ p) (q x)) x)))) (Data.Bool.? \lambda x. (Data.Bool.~ ((Data.Bool.\/ p) (q x))))) ;)

(; dict ;)

def thm_782 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.or p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3)) (x_3 : hol.term A => hol.not (hol.or p_2 (q_1 x_3))) (thm_367 A) (thm_781 A q_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.\/ p) (q x)) x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (\lambda x. ((Data.Bool.\/ p) (q x)) x))))) ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) (Data.Bool.? \lambda x. (Data.Bool.~ ((Data.Bool.\/ p) (q x)))))) ;)

(; dict ;)

def thm_783 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3)))) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.or p_2 (q_1 x_3)))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3)))) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.or p_2 (q_1 x_3)))) (thm_779 A q_1 p_2) (thm_782 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.\/ p) (q x)) x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (\lambda x. ((Data.Bool.\/ p) (q x)) x)))) ;)

(; dict ;)

def thm_784 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_414 A p_1) A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) (Data.Bool.? \lambda x. (Data.Bool.~ ((Data.Bool.\/ p) (q x))))) ;)

(; dict ;)

def thm_785 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.or p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3)))) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.or p_2 (q_1 x_3))))) (thm_783 A q_1 p_2) (thm_784 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ p) (q x)))) ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.~ (q x)))) ;)

(; dict ;)

def thm_786 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.or p_3 (q_2 x_1))) (hol.and (hol.not p_3) (hol.not (q_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_647 t2_1 t1_2) (q_2 x_1) p_3.

(; Theorem: |- ((= \lambda x. (Data.Bool.~ ((Data.Bool.\/ p) (q x)))) \lambda x. ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.~ (q x)))) ;)

(; dict ;)

def thm_787 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.not (hol.or p_2 (q_1 x_3))) (x_3 : hol.term A => hol.and (hol.not p_2) (hol.not (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.not (hol.or p_2 (q_1 x_3))) (x_3 : hol.term A => hol.and (hol.not p_2) (hol.not (q_1 x_3))) (x_3 : hol.term A => thm_786 A x_3 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ ((Data.Bool.\/ p) (q x))))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.~ (q x))))) ;)

(; dict ;)

def thm_788 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.or p_2 (q_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not p_2) (hol.not (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_3 : hol.term A => hol.not (hol.or p_2 (q_1 x_3))) (x_3 : hol.term A => hol.and (hol.not p_2) (hol.not (q_1 x_3))) (thm_367 A) (thm_787 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.~ p))) (Data.Bool./\ (Data.Bool.~ p))) ;)

(; dict ;)

def thm_789 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.not p_1)) (hol.and (hol.not p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.and (hol.not p_1)).

(; Theorem: |- ((= (\lambda x. (Data.Bool.~ (q x)) x)) (Data.Bool.~ (q x))) ;)

(; dict ;)

def thm_790 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => hol.not (q_2 x_3)) x_1) (hol.not (q_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (x_3 : hol.term A => hol.not (q_2 x_3)) x_1.

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.~ p)) (\lambda x. (Data.Bool.~ (q x)) x))) ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.~ (q x)))) ;)

(; dict ;)

def thm_791 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.not p_3) ((x_4 : hol.term A => hol.not (q_2 x_4)) x_1)) (hol.and (hol.not p_3) (hol.not (q_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and (hol.not p_3)) (hol.and (hol.not p_3)) ((x_4 : hol.term A => hol.not (q_2 x_4)) x_1) (hol.not (q_2 x_1)) (thm_789 p_3) (thm_790 A x_1 q_2).

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ (Data.Bool.~ p)) (\lambda x. (Data.Bool.~ (q x)) x))) \lambda x. ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.~ (q x)))) ;)

(; dict ;)

def thm_792 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.and (hol.not p_2) ((x_4 : hol.term A => hol.not (q_1 x_4)) x_3)) (x_3 : hol.term A => hol.and (hol.not p_2) (hol.not (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.and (hol.not p_2) ((x_4 : hol.term A => hol.not (q_1 x_4)) x_3)) (x_3 : hol.term A => hol.and (hol.not p_2) (hol.not (q_1 x_3))) (x_3 : hol.term A => thm_791 A x_3 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ p)) (\lambda x. (Data.Bool.~ (q x)) x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.~ (q x))))) ;)

(; dict ;)

def thm_793 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not p_2) ((x_4 : hol.term A => hol.not (q_1 x_4)) x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not p_2) (hol.not (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_3 : hol.term A => hol.and (hol.not p_2) ((x_4 : hol.term A => hol.not (q_1 x_4)) x_3)) (x_3 : hol.term A => hol.and (hol.not p_2) (hol.not (q_1 x_3))) (thm_367 A) (thm_792 A q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ p)) (\lambda x. (Data.Bool.~ (q x)) x))))) (= (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.~ (q x)))))) ;)

(; dict ;)

def thm_794 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not p_2) ((x_4 : hol.term A => hol.not (q_1 x_4)) x_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not p_2) (hol.not (q_1 x_3)))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not p_2) ((x_4 : hol.term A => hol.not (q_1 x_4)) x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not p_2) (hol.not (q_1 x_3)))) thm_121 (thm_793 A q_1 p_2).

(; Theorem: |- ((= \lambda x. (\lambda x. (Data.Bool.~ (q x)) x)) \lambda x. (Data.Bool.~ (q x))) ;)

(; dict ;)

def thm_795 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (q_1 x_3)) x_2) (x_2 : hol.term A => hol.not (q_1 x_2))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_2 : hol.term A => (x_3 : hol.term A => hol.not (q_1 x_3)) x_2) (x_2 : hol.term A => hol.not (q_1 x_2)) (x_2 : hol.term A => thm_790 A x_2 q_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (q x)) x))) (Data.Bool.? \lambda x. (Data.Bool.~ (q x)))) ;)

(; dict ;)

def thm_796 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (q_1 x_3)) x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (q_1 x_2)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (q_1 x_3)) x_2) (x_2 : hol.term A => hol.not (q_1 x_2)) (thm_367 A) (thm_795 A q_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (q x)) x)))) ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.? \lambda x. (Data.Bool.~ (q x))))) ;)

(; dict ;)

def thm_797 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (q_1 x_4)) x_3))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and (hol.not p_2)) (hol.and (hol.not p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (q_1 x_4)) x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3))) (thm_789 p_2) (thm_796 A q_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ p)) (\lambda x. (Data.Bool.~ (q x)) x)))) ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (q x)) x))))) ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.~ (q x))))) ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.? \lambda x. (Data.Bool.~ (q x)))))) ;)

(; dict ;)

def thm_798 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not p_2) ((x_4 : hol.term A => hol.not (q_1 x_4)) x_3))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (q_1 x_4)) x_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not p_2) (hol.not (q_1 x_3)))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3)))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not p_2) ((x_4 : hol.term A => hol.not (q_1 x_4)) x_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not p_2) (hol.not (q_1 x_3))))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (q_1 x_4)) x_3))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3)))) (thm_794 A q_1 p_2) (thm_797 A q_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x))))) ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_799 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x))))) ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_800 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (thm_799 A q_1 p_2) (thm_799 A q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_801 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => thm_29 A p_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_802 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => thm_801 A p_2 q_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ p)) (\lambda x. (Data.Bool.~ (q x)) x)))) ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (q x)) x)))) ;)

(; dict ;)

def thm_803 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not p_2) ((x_4 : hol.term A => hol.not (q_1 x_4)) x_3))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (q_1 x_4)) x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (thm_800 A q_1 p_2) (thm_802 A q_1 p_2)) A q_1 p_2) A (x_3 : hol.term A => hol.not (q_1 x_3)) (hol.not p_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.~ (q x))))) ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.? \lambda x. (Data.Bool.~ (q x))))) ;)

(; dict ;)

def thm_804 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not p_2) (hol.not (q_1 x_3)))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not p_2) ((x_4 : hol.term A => hol.not (q_1 x_4)) x_3))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (q_1 x_4)) x_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not p_2) (hol.not (q_1 x_3)))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3))))) (thm_798 A q_1 p_2) (thm_803 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ ((Data.Bool.\/ p) (q x))))) ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.? \lambda x. (Data.Bool.~ (q x))))) ;)

(; dict ;)

def thm_805 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.or p_2 (q_1 x_3)))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.TRANS hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.or p_2 (q_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not p_2) (hol.not (q_1 x_3)))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3)))) (thm_788 A q_1 p_2) (thm_804 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.? \lambda x. (Data.Bool.~ (q x))))) ;)

(; dict ;)

def thm_806 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.or p_2 (q_1 x_3)))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3)))) (thm_785 A q_1 p_2) (thm_805 A q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))))) (= ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.? \lambda x. (Data.Bool.~ (q x)))))) ;)

(; dict ;)

def thm_807 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))))) (hol.eq hol.bool (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3)))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3)))) thm_121 (thm_806 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x))))) ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.~ (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_808 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.and (hol.not p_2) (hol.not (hol.forall A (x_3 : hol.term A => q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_647 t2_1 t1_2) (hol.forall A (x_3 : hol.term A => q_1 x_3)) p_2.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (q x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (q x)))) ;)

(; dict ;)

def thm_809 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => q_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (q_1 x_2)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_414 A p_1) A q_1.

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.~ (Data.Bool.! \lambda x. (q x))))) ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.? \lambda x. (Data.Bool.~ (q x))))) ;)

(; dict ;)

def thm_810 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.not p_2) (hol.not (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and (hol.not p_2)) (hol.and (hol.not p_2)) (hol.not (hol.forall A (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3))) (thm_789 p_2) (thm_809 A q_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x))))) ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.? \lambda x. (Data.Bool.~ (q x))))) ;)

(; dict ;)

def thm_811 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.not (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.and (hol.not p_2) (hol.not (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3)))) (thm_808 A q_1 p_2) (thm_810 A q_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) (Data.Bool.~ ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))))) ((= ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.? \lambda x. (Data.Bool.~ (q x))))) ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.? \lambda x. (Data.Bool.~ (q x)))))) ;)

(; dict ;)

def thm_812 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (hol.not (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))))) (hol.eq hol.bool (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3)))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3)))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))))) (hol.eq hol.bool (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3))))) (hol.not (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3)))) (thm_807 A q_1 p_2) (thm_811 A q_1 p_2).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.? \lambda x. (Data.Bool.~ (q x))))) ((Data.Bool./\ (Data.Bool.~ p)) (Data.Bool.? \lambda x. (Data.Bool.~ (q x)))))) Data.Bool.T) ;)

(; dict ;)

def thm_813 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3)))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3))))) hol.true) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => (x_1 : hol.term hol.bool => thm_307 x_1) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3)))).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) (Data.Bool.~ ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))))) Data.Bool.T) ;)

(; dict ;)

def thm_814 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (hol.not (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))))) hol.true) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (hol.not (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))))) (hol.eq hol.bool (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3)))) (hol.and (hol.not p_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (q_1 x_3))))) hol.true (thm_812 A q_1 p_2) (thm_813 A q_1 p_2).

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) (Data.Bool.~ ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))))) ;)

(; dict ;)

def thm_815 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (hol.not (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (hol.not (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))))) hol.true (thm_814 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) (Data.Bool.~ ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_816 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (hol.not (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (hol.not (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))))) (thm_815 A q_1 p_2) thm_6.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) ;)

(; dict ;)

def thm_817 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (hol.not (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (thm_774 A q_1 p_2) (thm_816 A q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_818 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => thm_817 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))))) ;)

(; dict ;)

def thm_819 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (thm_772 A p_1) (thm_818 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))))) ;)

(; thm ;)

def thm_820 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) (thm_769 A) (thm_819 A).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))))) ;)

(; dict ;)

def thm_821 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))))) ;)

(; dict ;)

def thm_822 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (thm_821 A) (thm_821 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))))) ;)

(; dict ;)

def thm_823 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (thm_33 A) (thm_822 A).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) ;)

(; dict ;)

def thm_824 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) ;)

(; dict ;)

def thm_825 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))) (thm_824 A p_1) (thm_824 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))))) (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))))) ;)

(; dict ;)

def thm_826 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))) thm_68 (thm_825 A p_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) ;)

(; dict ;)

def thm_827 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) ;)

(; dict ;)

def thm_828 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (thm_827 A q_1 p_2) (thm_827 A q_1 p_2).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ;)

(; dict ;)

def thm_829 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_830 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) => hol.SYM hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (thm_829 A q_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_831 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ;)

(; dict ;)

def thm_832 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) => hol.SYM hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (thm_831 A q_1 p_2 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q))) ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) ;)

(; dict ;)

def thm_833 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) => thm_830 A q_1 p_2 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) => thm_832 A q_1 p_2 hyp_1).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q))) \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) ;)

(; dict ;)

def thm_834 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.ABS_THM hol.bool hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => thm_833 A q_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)))) (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))))) ;)

(; dict ;)

def thm_835 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))) thm_68 (thm_834 A p_1).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))))) ;)

(; dict ;)

def thm_836 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))))) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => thm_835 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))))) ;)

(; dict ;)

def thm_837 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (thm_33 A) (thm_836 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))))) ;)

(; dict ;)

def thm_838 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))))) (thm_837 A) (thm_765 A).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q)))) ;)

(; dict ;)

def thm_839 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_838 A p_1.

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ;)

(; dict ;)

def thm_840 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_839 A p_2 q_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))))) ;)

(; thm ;)

def thm_841 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2))))) (thm_823 A) (p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (thm_826 A p_1) (q_2 : hol.term hol.bool => (A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (thm_828 A q_1 p_2) (thm_840 A q_1 p_2)) A q_2 p_1)).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))))) ;)

(; dict ;)

def thm_842 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))))) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))))) ;)

(; dict ;)

def thm_843 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))))) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) (thm_842 A) (thm_842 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))))) ;)

(; dict ;)

def thm_844 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) thm_68 (thm_843 A).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) ;)

(; dict ;)

def thm_845 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) ;)

(; dict ;)

def thm_846 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))) (thm_845 A p_1) (thm_845 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))))) (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))))) ;)

(; dict ;)

def thm_847 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))) (thm_33 A) (thm_846 A p_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) ;)

(; dict ;)

def thm_848 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) ;)

(; dict ;)

def thm_849 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (thm_848 A q_1 p_2) (thm_848 A q_1 p_2).

(; Theorem: |- ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ;)

(; dict ;)

def thm_850 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) -> hol.proof (hol.eq hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) ;)

(; dict ;)

def thm_851 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) => hol.SYM hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (thm_850 A q_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) ;)

(; dict ;)

def thm_852 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ;)

(; dict ;)

def thm_853 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) -> hol.proof (hol.eq hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) => hol.SYM hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (thm_852 A q_1 p_2 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x))))) ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) ;)

(; dict ;)

def thm_854 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.PROP_EXT (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) => thm_851 A q_1 p_2 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) => thm_853 A q_1 p_2 hyp_1).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x))))) \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) ;)

(; dict ;)

def thm_855 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.ABS_THM (hol.arr A hol.bool) hol.bool (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => thm_854 A q_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))))) (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))))) ;)

(; dict ;)

def thm_856 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))) (thm_33 A) (thm_855 A p_1).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))))) ;)

(; dict ;)

def thm_857 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))))) :=
  A : hol.type => hol.ABS_THM hol.bool hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => thm_856 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))))) ;)

(; dict ;)

def thm_858 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) thm_68 (thm_857 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))))) ;)

(; dict ;)

def thm_859 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))))) :=
  A : hol.type => hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))))) (thm_858 A) (thm_819 A).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x))))) ;)

(; dict ;)

def thm_860 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => thm_859 A p_1.

(; Theorem: |- ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ;)

(; dict ;)

def thm_861 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => thm_860 A p_2 q_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))))) ;)

(; thm ;)

def thm_862 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))))) :=
  A : hol.type => hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))))) (thm_844 A) (p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) (thm_847 A p_1) (q_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (thm_849 A q_1 p_2) (thm_861 A q_1 p_2)) A q_2 p_1)).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))))) ;)

(; dict ;)

def thm_863 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))))) ;)

(; dict ;)

def thm_864 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (thm_863 A) (thm_863 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q)))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q)))))) ;)

(; dict ;)

def thm_865 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (thm_33 A) (thm_864 A).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q)))) \lambda q. ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q)))) ;)

(; dict ;)

def thm_866 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q)))) \lambda q. ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q)))) ;)

(; dict ;)

def thm_867 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))) (thm_866 A p_1) (thm_866 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))))) (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))))) ;)

(; dict ;)

def thm_868 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))) thm_68 (thm_867 A p_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q)))) ((= (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))))) ;)

(; dict ;)

def thm_869 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) (hol.eq hol.bool (hol.not (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => thm_720 b_1 a_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))))) ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q)))) ;)

(; dict ;)

def thm_870 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)))) (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) (hol.eq hol.bool (hol.not (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)))) (thm_869 A q_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_871 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_872 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (thm_871 t2_1 t1_2) (thm_871 t2_1 t1_2).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_873 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => thm_30 t1_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_874 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_873 t1_2 t2_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_875 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.not q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (thm_872 t2_1 t1_2) (thm_874 t2_1 t1_2)) q_1 (hol.forall A (x_3 : hol.term A => p_2 x_3)).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q)))) ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q)))) ;)

(; dict ;)

def thm_876 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1))) (hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1))).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q)))) ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q)))) ;)

(; dict ;)

def thm_877 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1))) (hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1))) (hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1))) (hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1))) (thm_876 A q_1 p_2) (thm_876 A q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q)))) ;)

(; dict ;)

def thm_878 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_31 A p_1.

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q))) ;)

(; dict ;)

def thm_879 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_878 A p_2 q_1.

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.~ q))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_880 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.not q_1)) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (hol.not q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1))) (hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1))) (thm_877 A q_1 p_2) (thm_879 A q_1 p_2)) A q_1 p_2) A (hol.not q_1) p_2.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_881 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (hol.not q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.not (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.not q_1)) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (hol.not q_1))) (thm_875 A q_1 p_2) (thm_880 A q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)))) (= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.~ q))))) ;)

(; dict ;)

def thm_882 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (hol.not q_1))))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (hol.not q_1))) thm_121 (thm_881 A q_1 p_2).

(; Theorem: |- ((= (\lambda x. ((Data.Bool.==> (p x)) q) x)) ((Data.Bool.==> (p x)) q)) ;)

(; dict ;)

def thm_883 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => hol.imp (p_3 x_4) q_2) x_1) (hol.imp (p_3 x_1) q_2)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (x_4 : hol.term A => hol.imp (p_3 x_4) q_2) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. ((Data.Bool.==> (p x)) q) x)) \lambda x. ((Data.Bool.==> (p x)) q)) ;)

(; dict ;)

def thm_884 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (p_2 x_4) q_1) x_3) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (p_2 x_4) q_1) x_3) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1) (x_3 : hol.term A => thm_883 A x_3 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (\lambda x. ((Data.Bool.==> (p x)) q) x))) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ;)

(; dict ;)

def thm_885 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (p_2 x_4) q_1) x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (p_2 x_4) q_1) x_3) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1) (thm_367 A) (thm_884 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (\lambda x. ((Data.Bool.==> (p x)) q) x)))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q)))) ;)

(; dict ;)

def thm_886 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (p_2 x_4) q_1) x_3))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool hol.not hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (p_2 x_4) q_1) x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) thm_153 (thm_885 A q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool.~ (Data.Bool.? \lambda x. (\lambda x. ((Data.Bool.==> (p x)) q) x))))) (= (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))))) ;)

(; dict ;)

def thm_887 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (p_2 x_4) q_1) x_3)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (p_2 x_4) q_1) x_3))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) thm_121 (thm_886 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (\lambda x. ((Data.Bool.==> (p x)) q) x))) (Data.Bool.~ ((Data.Bool.==> (p x)) q))) ;)

(; dict ;)

def thm_888 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not ((x_4 : hol.term A => hol.imp (p_3 x_4) q_2) x_1)) (hol.not (hol.imp (p_3 x_1) q_2))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool hol.not hol.not ((x_4 : hol.term A => hol.imp (p_3 x_4) q_2) x_1) (hol.imp (p_3 x_1) q_2) thm_153 (thm_883 A x_1 q_2 p_3).

(; Theorem: |- ((= \lambda x. (Data.Bool.~ (\lambda x. ((Data.Bool.==> (p x)) q) x))) \lambda x. (Data.Bool.~ ((Data.Bool.==> (p x)) q))) ;)

(; dict ;)

def thm_889 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp (p_2 x_4) q_1) x_3)) (x_3 : hol.term A => hol.not (hol.imp (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp (p_2 x_4) q_1) x_3)) (x_3 : hol.term A => hol.not (hol.imp (p_2 x_3) q_1)) (x_3 : hol.term A => thm_888 A x_3 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda x. ((Data.Bool.==> (p x)) q) x)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Data.Bool.==> (p x)) q)))) ;)

(; dict ;)

def thm_890 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp (p_2 x_4) q_1) x_3))) (hol.forall A (x_3 : hol.term A => hol.not (hol.imp (p_2 x_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp (p_2 x_4) q_1) x_3)) (x_3 : hol.term A => hol.not (hol.imp (p_2 x_3) q_1)) (thm_197 A) (thm_889 A q_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.? \lambda x. (\lambda x. ((Data.Bool.==> (p x)) q) x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda x. ((Data.Bool.==> (p x)) q) x))))) ((= (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Data.Bool.==> (p x)) q))))) ;)

(; dict ;)

def thm_891 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (p_2 x_4) q_1) x_3))) (hol.forall A (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp (p_2 x_4) q_1) x_3)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) (hol.forall A (x_3 : hol.term A => hol.not (hol.imp (p_2 x_3) q_1))))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (p_2 x_4) q_1) x_3)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)))) (hol.forall A (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp (p_2 x_4) q_1) x_3))) (hol.forall A (x_3 : hol.term A => hol.not (hol.imp (p_2 x_3) q_1))) (thm_887 A q_1 p_2) (thm_890 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (\lambda x. ((Data.Bool.==> (p x)) q) x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda x. ((Data.Bool.==> (p x)) q) x)))) ;)

(; dict ;)

def thm_892 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (p_2 x_4) q_1) x_3))) (hol.forall A (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp (p_2 x_4) q_1) x_3)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_237 A p_1) A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Data.Bool.==> (p x)) q)))) ;)

(; dict ;)

def thm_893 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) (hol.forall A (x_3 : hol.term A => hol.not (hol.imp (p_2 x_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (p_2 x_4) q_1) x_3))) (hol.forall A (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp (p_2 x_4) q_1) x_3)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) (hol.forall A (x_3 : hol.term A => hol.not (hol.imp (p_2 x_3) q_1)))) (thm_891 A q_1 p_2) (thm_892 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> (p x)) q))) ((Data.Bool./\ (p x)) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_894 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.imp (p_3 x_2) q_1)) (hol.and (p_3 x_2) (hol.not q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_874 t2_1 t1_2) q_1 (p_3 x_2).

(; Theorem: |- ((= \lambda x. (Data.Bool.~ ((Data.Bool.==> (p x)) q))) \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_895 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.not (hol.imp (p_2 x_3) q_1)) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.not q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.not (hol.imp (p_2 x_3) q_1)) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.not q_1)) (x_3 : hol.term A => thm_894 A q_1 x_3 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ ((Data.Bool.==> (p x)) q)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_896 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.not (hol.imp (p_2 x_3) q_1))) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (hol.not q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.not (hol.imp (p_2 x_3) q_1)) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.not q_1)) (thm_197 A) (thm_895 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_897 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (hol.not q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) (hol.forall A (x_3 : hol.term A => hol.not (hol.imp (p_2 x_3) q_1))) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (hol.not q_1))) (thm_893 A q_1 p_2) (thm_896 A q_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))))) ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.~ q)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.~ q))))) ;)

(; dict ;)

def thm_898 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (hol.not q_1))) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (hol.not q_1))))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (hol.not q_1)))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (hol.not q_1))) (thm_882 A q_1 p_2) (thm_897 A q_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.~ q)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.~ q))))) Data.Bool.T) ;)

(; dict ;)

def thm_899 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (hol.not q_1))) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (hol.not q_1)))) hol.true) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (x_1 : hol.term hol.bool => thm_307 x_1) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (hol.not q_1))).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))))) Data.Bool.T) ;)

(; dict ;)

def thm_900 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)))) hol.true) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (hol.not q_1))) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (hol.not q_1)))) hol.true (thm_898 A q_1 p_2) (thm_899 A q_1 p_2).

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))))) ;)

(; dict ;)

def thm_901 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)))) hol.true (thm_900 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q)))) ;)

(; dict ;)

def thm_902 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)))) (thm_901 A q_1 p_2) thm_6.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ;)

(; dict ;)

def thm_903 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)))) (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) (thm_870 A q_1 p_2) (thm_902 A q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q)))) ;)

(; dict ;)

def thm_904 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => thm_903 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))))) ;)

(; dict ;)

def thm_905 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (thm_868 A p_1) (thm_904 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))))) ;)

(; thm ;)

def thm_906 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))))) (thm_865 A) (thm_905 A).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)))) ;)

(; dict ;)

def thm_907 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)))) ;)

(; dict ;)

def thm_908 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (thm_907 A) (thm_907 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))))) ;)

(; dict ;)

def thm_909 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (thm_33 A) (thm_908 A).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))) \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_910 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))) \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_911 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) (thm_910 A p_1) (thm_910 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)))) (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)))) ;)

(; dict ;)

def thm_912 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) thm_68 (thm_911 A p_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))) ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_913 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))) ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_914 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (thm_913 A q_1 p_2) (thm_913 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_915 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ;)

(; dict ;)

def thm_916 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (thm_915 A q_1 p_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ;)

(; dict ;)

def thm_917 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_918 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) => hol.SYM hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (thm_917 A q_1 p_2 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q)))) ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_919 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) => thm_916 A q_1 p_2 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) => thm_918 A q_1 p_2 hyp_1).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q)))) \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_920 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.ABS_THM hol.bool hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => thm_919 A q_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))))) (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)))) ;)

(; dict ;)

def thm_921 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) thm_68 (thm_920 A p_1).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)))) ;)

(; dict ;)

def thm_922 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => thm_921 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q)))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))))) ;)

(; dict ;)

def thm_923 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (thm_33 A) (thm_922 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)))) ;)

(; dict ;)

def thm_924 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) (thm_923 A) (thm_905 A).

(; Theorem: |- (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_925 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_924 A p_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_926 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_925 A p_2 q_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) q)))) ;)

(; thm ;)

def thm_927 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))) (thm_909 A) (p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) (thm_912 A p_1) (q_2 : hol.term hol.bool => (A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (thm_914 A q_1 p_2) (thm_926 A q_1 p_2)) A q_2 p_1)).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))))) ;)

(; dict ;)

def thm_928 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))))) ;)

(; dict ;)

def thm_929 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (thm_928 A) (thm_928 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))))) ;)

(; dict ;)

def thm_930 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) thm_68 (thm_929 A).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_931 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_932 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))) (thm_931 A p_1) (thm_931 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))))) (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))))) ;)

(; dict ;)

def thm_933 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))) (thm_33 A) (thm_932 A p_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) ((= (Data.Bool.~ ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))))) ;)

(; dict ;)

def thm_934 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.not (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => (b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => thm_720 b_1 a_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))))) ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_935 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))))) (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.not (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))))) (thm_934 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))) ((Data.Bool./\ p) (Data.Bool.~ (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_936 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.and p_2 (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_874 t2_1 t1_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) p_2.

(; Theorem: |- ((= (Data.Bool./\ p)) (Data.Bool./\ p)) ;)

(; dict ;)

def thm_937 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (hol.and p_1)) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.and p_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (q x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (q x)))) ;)

(; dict ;)

def thm_938 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => q_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (q_1 x_2)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_237 A p_1) A q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) (Data.Bool.~ (Data.Bool.? \lambda x. (q x))))) ((Data.Bool./\ p) (Data.Bool.! \lambda x. (Data.Bool.~ (q x))))) ;)

(; dict ;)

def thm_939 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.and p_2 (hol.forall A (x_3 : hol.term A => hol.not (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (hol.and p_2) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.not (q_1 x_3))) (thm_937 p_2) (thm_938 A q_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ (q x)) x))) (Data.Bool.! \lambda x. (Data.Bool.~ (q x)))) ;)

(; dict ;)

def thm_940 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.not (q_1 x_3)) x_2)) (hol.forall A (x_2 : hol.term A => hol.not (q_1 x_2)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (q_1 x_3)) x_2) (x_2 : hol.term A => hol.not (q_1 x_2)) (thm_197 A) (thm_795 A q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ (q x)) x)))) ((Data.Bool./\ p) (Data.Bool.! \lambda x. (Data.Bool.~ (q x))))) ;)

(; dict ;)

def thm_941 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (q_1 x_4)) x_3))) (hol.and p_2 (hol.forall A (x_3 : hol.term A => hol.not (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (hol.and p_2) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (q_1 x_4)) x_3)) (hol.forall A (x_3 : hol.term A => hol.not (q_1 x_3))) (thm_937 p_2) (thm_940 A q_1).

(; Theorem: |- ((= (= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ (q x)) x))))) (= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (Data.Bool.~ (q x)))))) ;)

(; dict ;)

def thm_942 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (q_1 x_4)) x_3)))) (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => hol.not (q_1 x_3)))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.and p_2 (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (q_1 x_4)) x_3))) (hol.and p_2 (hol.forall A (x_3 : hol.term A => hol.not (q_1 x_3)))) thm_121 (thm_941 A q_1 p_2).

(; Theorem: |- ((= ((Data.Bool./\ p) (\lambda x. (Data.Bool.~ (q x)) x))) ((Data.Bool./\ p) (Data.Bool.~ (q x)))) ;)

(; dict ;)

def thm_943 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_3 ((x_4 : hol.term A => hol.not (q_2 x_4)) x_1)) (hol.and p_3 (hol.not (q_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_3) (hol.and p_3) ((x_4 : hol.term A => hol.not (q_2 x_4)) x_1) (hol.not (q_2 x_1)) (thm_937 p_3) (thm_790 A x_1 q_2).

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ p) (\lambda x. (Data.Bool.~ (q x)) x))) \lambda x. ((Data.Bool./\ p) (Data.Bool.~ (q x)))) ;)

(; dict ;)

def thm_944 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.and p_2 ((x_4 : hol.term A => hol.not (q_1 x_4)) x_3)) (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.and p_2 ((x_4 : hol.term A => hol.not (q_1 x_4)) x_3)) (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3))) (x_3 : hol.term A => thm_943 A x_3 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool./\ p) (\lambda x. (Data.Bool.~ (q x)) x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (Data.Bool.~ (q x))))) ;)

(; dict ;)

def thm_945 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and p_2 ((x_4 : hol.term A => hol.not (q_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.and p_2 ((x_4 : hol.term A => hol.not (q_1 x_4)) x_3)) (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3))) (thm_197 A) (thm_944 A q_1 p_2).

(; Theorem: |- ((= ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ (q x)) x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (\lambda x. (Data.Bool.~ (q x)) x))))) ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (Data.Bool.~ (q x))))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (Data.Bool.~ (q x)))))) ;)

(; dict ;)

def thm_946 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (q_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 ((x_4 : hol.term A => hol.not (q_1 x_4)) x_3)))) (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => hol.not (q_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3)))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (q_1 x_4)) x_3)))) (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => hol.not (q_1 x_3))))) (hol.forall A (x_3 : hol.term A => hol.and p_2 ((x_4 : hol.term A => hol.not (q_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3)))) (thm_942 A q_1 p_2) (thm_945 A q_1 p_2).

(; Theorem: |- ((= ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x))))) ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x))))) ;)

(; dict ;)

def thm_947 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))).

(; Theorem: |- ((= ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x))))) ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x))))) ;)

(; dict ;)

def thm_948 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))) (thm_947 A q_1 p_2) (thm_947 A q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x))))) ;)

(; dict ;)

def thm_949 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => thm_32 A p_1.

(; Theorem: |- ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x)))) ;)

(; dict ;)

def thm_950 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => thm_949 A p_2 q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ (q x)) x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (\lambda x. (Data.Bool.~ (q x)) x)))) ;)

(; dict ;)

def thm_951 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (q_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 ((x_4 : hol.term A => hol.not (q_1 x_4)) x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))) (thm_948 A q_1 p_2) (thm_950 A q_1 p_2)) A q_1 p_2) A (x_3 : hol.term A => hol.not (q_1 x_3)) p_2.

(; Theorem: |- ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (Data.Bool.~ (q x))))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (Data.Bool.~ (q x))))) ;)

(; dict ;)

def thm_952 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => hol.not (q_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (q_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 ((x_4 : hol.term A => hol.not (q_1 x_4)) x_3)))) (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => hol.not (q_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3))))) (thm_946 A q_1 p_2) (thm_951 A q_1 p_2).

(; Theorem: |- ((= ((Data.Bool./\ p) (Data.Bool.~ (Data.Bool.? \lambda x. (q x))))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (Data.Bool.~ (q x))))) ;)

(; dict ;)

def thm_953 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.and p_2 (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.and p_2 (hol.forall A (x_3 : hol.term A => hol.not (q_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3)))) (thm_939 A q_1 p_2) (thm_952 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (Data.Bool.~ (q x))))) ;)

(; dict ;)

def thm_954 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.not (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.and p_2 (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3)))) (thm_936 A q_1 p_2) (thm_953 A q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool.~ ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))))) (= (Data.Bool.! \lambda x. ((Data.Bool./\ p) (Data.Bool.~ (q x)))))) ;)

(; dict ;)

def thm_955 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3)))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3)))) thm_121 (thm_954 A q_1 p_2).

(; Theorem: |- ((= (\lambda x. ((Data.Bool.==> p) (q x)) x)) ((Data.Bool.==> p) (q x))) ;)

(; dict ;)

def thm_956 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => hol.imp p_3 (q_2 x_4)) x_1) (hol.imp p_3 (q_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hol.BETA_CONV A hol.bool (x_4 : hol.term A => hol.imp p_3 (q_2 x_4)) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. ((Data.Bool.==> p) (q x)) x)) \lambda x. ((Data.Bool.==> p) (q x))) ;)

(; dict ;)

def thm_957 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp p_2 (q_1 x_4)) x_3) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.ABS_THM A hol.bool (x_3 : hol.term A => (x_4 : hol.term A => hol.imp p_2 (q_1 x_4)) x_3) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)) (x_3 : hol.term A => thm_956 A x_3 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (\lambda x. ((Data.Bool.==> p) (q x)) x))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ;)

(; dict ;)

def thm_958 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp p_2 (q_1 x_4)) x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp p_2 (q_1 x_4)) x_3) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)) (thm_367 A) (thm_957 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (\lambda x. ((Data.Bool.==> p) (q x)) x)))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_959 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp p_2 (q_1 x_4)) x_3))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp p_2 (q_1 x_4)) x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) thm_153 (thm_958 A q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool.~ (Data.Bool.? \lambda x. (\lambda x. ((Data.Bool.==> p) (q x)) x))))) (= (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))))) ;)

(; dict ;)

def thm_960 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp p_2 (q_1 x_4)) x_3)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp p_2 (q_1 x_4)) x_3))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) thm_121 (thm_959 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (\lambda x. ((Data.Bool.==> p) (q x)) x))) (Data.Bool.~ ((Data.Bool.==> p) (q x)))) ;)

(; dict ;)

def thm_961 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not ((x_4 : hol.term A => hol.imp p_3 (q_2 x_4)) x_1)) (hol.not (hol.imp p_3 (q_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not hol.not ((x_4 : hol.term A => hol.imp p_3 (q_2 x_4)) x_1) (hol.imp p_3 (q_2 x_1)) thm_153 (thm_956 A x_1 q_2 p_3).

(; Theorem: |- ((= \lambda x. (Data.Bool.~ (\lambda x. ((Data.Bool.==> p) (q x)) x))) \lambda x. (Data.Bool.~ ((Data.Bool.==> p) (q x)))) ;)

(; dict ;)

def thm_962 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp p_2 (q_1 x_4)) x_3)) (x_3 : hol.term A => hol.not (hol.imp p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp p_2 (q_1 x_4)) x_3)) (x_3 : hol.term A => hol.not (hol.imp p_2 (q_1 x_3))) (x_3 : hol.term A => thm_961 A x_3 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda x. ((Data.Bool.==> p) (q x)) x)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_963 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp p_2 (q_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => hol.not (hol.imp p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp p_2 (q_1 x_4)) x_3)) (x_3 : hol.term A => hol.not (hol.imp p_2 (q_1 x_3))) (thm_197 A) (thm_962 A q_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.? \lambda x. (\lambda x. ((Data.Bool.==> p) (q x)) x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda x. ((Data.Bool.==> p) (q x)) x))))) ((= (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Data.Bool.==> p) (q x)))))) ;)

(; dict ;)

def thm_964 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp p_2 (q_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp p_2 (q_1 x_4)) x_3)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (hol.imp p_2 (q_1 x_3)))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp p_2 (q_1 x_4)) x_3)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))))) (hol.forall A (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp p_2 (q_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => hol.not (hol.imp p_2 (q_1 x_3)))) (thm_960 A q_1 p_2) (thm_963 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (\lambda x. ((Data.Bool.==> p) (q x)) x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda x. ((Data.Bool.==> p) (q x)) x)))) ;)

(; dict ;)

def thm_965 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp p_2 (q_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp p_2 (q_1 x_4)) x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_237 A p_1) A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_966 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (hol.imp p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp p_2 (q_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp p_2 (q_1 x_4)) x_3)))) (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (hol.imp p_2 (q_1 x_3))))) (thm_964 A q_1 p_2) (thm_965 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> p) (q x)))) ((Data.Bool./\ p) (Data.Bool.~ (q x)))) ;)

(; dict ;)

def thm_967 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.imp p_3 (q_2 x_1))) (hol.and p_3 (hol.not (q_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_874 t2_1 t1_2) (q_2 x_1) p_3.

(; Theorem: |- ((= \lambda x. (Data.Bool.~ ((Data.Bool.==> p) (q x)))) \lambda x. ((Data.Bool./\ p) (Data.Bool.~ (q x)))) ;)

(; dict ;)

def thm_968 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.not (hol.imp p_2 (q_1 x_3))) (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.not (hol.imp p_2 (q_1 x_3))) (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3))) (x_3 : hol.term A => thm_967 A x_3 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ ((Data.Bool.==> p) (q x))))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (Data.Bool.~ (q x))))) ;)

(; dict ;)

def thm_969 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.not (hol.imp p_2 (q_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.not (hol.imp p_2 (q_1 x_3))) (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3))) (thm_197 A) (thm_968 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (Data.Bool.~ (q x))))) ;)

(; dict ;)

def thm_970 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (hol.imp p_2 (q_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3)))) (thm_966 A q_1 p_2) (thm_969 A q_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))))) ((= (Data.Bool.! \lambda x. ((Data.Bool./\ p) (Data.Bool.~ (q x))))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (Data.Bool.~ (q x)))))) ;)

(; dict ;)

def thm_971 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3)))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3))))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3)))) (thm_955 A q_1 p_2) (thm_970 A q_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool./\ p) (Data.Bool.~ (q x))))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (Data.Bool.~ (q x)))))) Data.Bool.T) ;)

(; dict ;)

def thm_972 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3))))) hol.true) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => (x_1 : hol.term hol.bool => thm_307 x_1) (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3)))).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))))) Data.Bool.T) ;)

(; dict ;)

def thm_973 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))))) hol.true) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (hol.not (q_1 x_3))))) hol.true (thm_971 A q_1 p_2) (thm_972 A q_1 p_2).

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))))) ;)

(; dict ;)

def thm_974 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))))) hol.true (thm_973 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_975 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))))) (thm_974 A q_1 p_2) thm_6.

(; Theorem: |- ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ;)

(; dict ;)

def thm_976 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))))) (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (thm_935 A q_1 p_2) (thm_975 A q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_977 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => thm_976 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))))) ;)

(; dict ;)

def thm_978 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (thm_933 A p_1) (thm_977 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))))) ;)

(; thm ;)

def thm_979 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) :=
  A : hol.type => hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) (thm_930 A) (thm_978 A).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))))) ;)

(; dict ;)

def thm_980 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))))) ;)

(; dict ;)

def thm_981 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (thm_980 A) (thm_980 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))))) ;)

(; dict ;)

def thm_982 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) thm_68 (thm_981 A).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))) \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_983 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))) \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_984 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (thm_983 A p_1) (thm_983 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))))) (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))))) ;)

(; dict ;)

def thm_985 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (thm_33 A) (thm_984 A p_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))) ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_986 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))) ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_987 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (thm_986 A q_1 p_2) (thm_986 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_988 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ;)

(; dict ;)

def thm_989 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) -> hol.proof (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (thm_988 A q_1 p_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ;)

(; dict ;)

def thm_990 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) -> hol.proof (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_991 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) => hol.SYM hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (thm_990 A q_1 p_2 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_992 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.PROP_EXT (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) => thm_989 A q_1 p_2 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) => thm_991 A q_1 p_2 hyp_1).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_993 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.ABS_THM (hol.arr A hol.bool) hol.bool (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => thm_992 A q_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))))) (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))))) ;)

(; dict ;)

def thm_994 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (thm_33 A) (thm_993 A p_1).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))))) ;)

(; dict ;)

def thm_995 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.ABS_THM hol.bool hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => thm_994 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))))) ;)

(; dict ;)

def thm_996 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) thm_68 (thm_995 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))))) ;)

(; dict ;)

def thm_997 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) (thm_996 A) (thm_978 A).

(; Theorem: |- (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_998 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => thm_997 A p_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_999 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => thm_998 A p_2 q_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))))) ;)

(; thm ;)

def thm_1000 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) (thm_982 A) (p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (thm_985 A p_1) (q_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) (thm_987 A q_1 p_2) (thm_999 A q_1 p_2)) A q_2 p_1)).
