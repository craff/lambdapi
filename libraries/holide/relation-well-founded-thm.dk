
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME relation_2Dwell_2Dfounded_2Dthm.

Relation_2EwellFounded : A : hol.type -> hol.term A.

Data_2EBool_2E_3F : A : hol.type -> hol.term A.

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))))).

(; axiom ;)

thm_1 : hol.proof (hol.eq hol.bool hol.false (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1))).

(; axiom ;)

thm_2 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) hol.not (p_1 : hol.term hol.bool => hol.imp p_1 hol.false)).

(; axiom ;)

thm_3 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1)).

(; axiom ;)

thm_4 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))).

(; axiom ;)

thm_5 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)).

(; axiom ;)

thm_6 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true)).

(; axiom ;)

thm_7 : hol.proof hol.true.

(; axiom ;)

thm_8 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.imp t_1 t_1)).

(; axiom ;)

thm_9 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))).

(; axiom ;)

thm_10 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)).

(; axiom ;)

thm_11 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)).

(; axiom ;)

thm_12 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))).

(; axiom ;)

thm_13 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))).

(; axiom ;)

thm_14 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)))).

(; axiom ;)

thm_15 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) q_2))).

(; axiom ;)

thm_16 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)).

(; axiom ;)

thm_17 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.or t_1 (hol.not t_1))).

(; axiom ;)

thm_18 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.or (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp p_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))).

(; axiom ;)

thm_19 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1)))).

(; axiom ;)

thm_20 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false).

(; axiom ;)

thm_21 : hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true).

(; axiom ;)

thm_22 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))).

(; axiom ;)

thm_23 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))))).

(; axiom ;)

thm_24 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)).

(; axiom ;)

thm_25 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))).

(; axiom ;)

thm_26 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)).

(; axiom ;)

thm_27 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)).

(; axiom ;)

thm_28 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)).

(; axiom ;)

thm_29 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)).

(; axiom ;)

thm_30 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)).

(; axiom ;)

thm_31 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)).

(; axiom ;)

thm_32 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1)).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_33 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) hol.bool) (hol.forall (hol.arr A (hol.arr A hol.bool))) (hol.forall (hol.arr A (hol.arr A hol.bool)))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) hol.bool) (hol.forall (hol.arr A (hol.arr A hol.bool))).

(; Theorem: |- ((= \lambda r. ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) \lambda r. ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ;)

(; dict ;)

def thm_34 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))).

(; Theorem: |- ((= \lambda r. ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) \lambda r. ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ;)

(; dict ;)

def thm_35 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (thm_34 A) (thm_34 A).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))))) (Data.Bool.! \lambda r. ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))))) ;)

(; dict ;)

def thm_36 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))))) (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr A hol.bool))) (hol.forall (hol.arr A (hol.arr A hol.bool))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (thm_33 A) (thm_35 A).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_37 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool) (hol.eq hol.bool)) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool).

(; Theorem: |- ((= ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ;)

(; dict ;)

def thm_38 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL hol.bool (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))).

(; Theorem: |- ((= ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ;)

(; dict ;)

def thm_39 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.TRANS hol.bool (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (thm_38 A r_1) (thm_38 A r_1).

(; Theorem: |- ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ;)

(; dict ;)

def thm_40 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => thm_0 A r_1.

(; Theorem: |- ((= (= (Relation.wellFounded r))) (= (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ;)

(; dict ;)

def thm_41 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1)) (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) thm_37 ((A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.EQ_MP (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (thm_39 A r_1) (thm_40 A r_1)) A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ;)

(; dict ;)

def thm_42 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))).

(; Theorem: |- ((= ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ((= (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ;)

(; dict ;)

def thm_43 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1)) (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (thm_41 A r_1) (thm_42 A r_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ;)

(; dict ;)

def thm_44 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.SYM hol.bool (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (thm_43 A r_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_45 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr A hol.bool)).

(; Theorem: |- ((= ((= \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ((= \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ;)

(; dict ;)

def thm_46 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))).

(; Theorem: |- ((= ((= \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ((= \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ;)

(; dict ;)

def thm_47 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.TRANS hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (thm_46 A r_1) (thm_46 A r_1).

(; Theorem: |- ((= Data.Bool.==>) Data.Bool.==>) ;)

(; dict ;)

def thm_48 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp hol.imp) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp.

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. (p x))) Data.Bool.F)) ((= (Data.Bool.? \lambda x. (p x))) Data.Bool.F)) ;)

(; dict ;)

def thm_49 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.false) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.false)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.false).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. (p x))) Data.Bool.F)) ((= (Data.Bool.? \lambda x. (p x))) Data.Bool.F)) ;)

(; dict ;)

def thm_50 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.false) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.false)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.false) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.false) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.false) (thm_49 A p_1) (thm_49 A p_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_51 : hyp_1 : hol.proof hol.false -> hol.proof hol.false :=
  hyp_1 : hol.proof hol.false => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda p. p) ;)

(; dict ;)

def thm_52 : hyp_1 : hol.proof hol.false -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1)) :=
  hyp_1 : hol.proof hol.false => hol.EQ_MP hol.false (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1)) thm_1 (thm_51 hyp_1).

(; Theorem: |- P ;)

(; dict ;)

def thm_53 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.false -> hol.proof P_1 :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => thm_52 hyp_1 P_1.

(; Theorem: |- ((Data.Bool.==> Data.Bool.F) P) ;)

(; dict ;)

def thm_54 : P_1 : hol.term hol.bool -> hol.proof (hol.imp hol.false P_1) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => thm_53 P_1 hyp_1.

(; Theorem: |- ((= (= (Data.Bool.~ P))) (= (Data.Bool.~ P))) ;)

(; dict ;)

def thm_55 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not P_1)) (hol.eq hol.bool (hol.not P_1))) :=
  P_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not P_1)).

(; Theorem: |- ((= (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P)) ((Data.Bool.==> P) Data.Bool.F)) ;)

(; dict ;)

def thm_56 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1) (hol.imp P_1 hol.false)) :=
  P_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1.

(; Theorem: |- ((= ((= (Data.Bool.~ P)) (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P))) ((= (Data.Bool.~ P)) ((Data.Bool.==> P) Data.Bool.F))) ;)

(; dict ;)

def thm_57 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false))) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not P_1)) (hol.eq hol.bool (hol.not P_1)) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1) (hol.imp P_1 hol.false) (thm_55 P_1) (thm_56 P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_58 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool P_1 P_1) :=
  P_1 : hol.term hol.bool => hol.REFL hol.bool P_1.

(; Theorem: |- ((= (Data.Bool.~ P)) (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P)) ;)

(; dict ;)

def thm_59 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not (p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1 P_1 thm_2 (thm_58 P_1).

(; Theorem: |- ((= (Data.Bool.~ P)) ((Data.Bool.==> P) Data.Bool.F)) ;)

(; dict ;)

def thm_60 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false)) :=
  P_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false)) (thm_57 P_1) (thm_59 P_1).

(; Theorem: |- (Data.Bool.~ P) ;)

(; dict ;)

def thm_61 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not P_1) -> hol.proof (hol.not P_1) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> P) Data.Bool.F) ;)

(; dict ;)

def thm_62 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not P_1) -> hol.proof (hol.imp P_1 hol.false) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => hol.EQ_MP (hol.not P_1) (hol.imp P_1 hol.false) ((P_1 : hol.term hol.bool => thm_60 P_1) P_1) (thm_61 P_1 hyp_1).

(; Theorem: |- P ;)

(; dict ;)

def thm_63 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof P_1 -> hol.proof P_1 :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof P_1 => hyp_1.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_64 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof P_1 -> hyp_2 : hol.proof (hol.not P_1) -> hol.proof hol.false :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof P_1 => hyp_2 : hol.proof (hol.not P_1) => thm_62 P_1 hyp_2 (thm_63 P_1 hyp_1).

(; Theorem: |- ((= P) Data.Bool.F) ;)

(; dict ;)

def thm_65 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not P_1) -> hol.proof (hol.eq hol.bool P_1 hol.false) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => hol.PROP_EXT P_1 hol.false (hyp_2 : hol.proof hol.false => thm_54 P_1 (thm_51 hyp_2)) (hyp_2 : hol.proof P_1 => thm_64 P_1 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ P)) ((= P) Data.Bool.F)) ;)

(; dict ;)

def thm_66 : P_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.not P_1) (hol.eq hol.bool P_1 hol.false)) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => thm_65 P_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) ((= (Data.Bool.? \lambda x. (p x))) Data.Bool.F)) ;)

(; dict ;)

def thm_67 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.false)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (P_1 : hol.term hol.bool => thm_66 P_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)).

(; Theorem: |- (Data.Bool.~ (Data.Bool.? \lambda x. (p x))) ;)

(; dict ;)

def thm_68 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) -> hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. (p x))) Data.Bool.F) ;)

(; dict ;)

def thm_69 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.false) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) => thm_67 A p_1 (thm_68 A p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.? \lambda x. (p x)))) (Data.Bool.==> Data.Bool.F)) ;)

(; dict ;)

def thm_70 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.imp hol.false)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.false thm_48 ((A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.false) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.false) (thm_50 A p_1) (thm_69 A p_1 hyp_1)) A p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))) ;)

(; dict ;)

def thm_71 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ((Data.Bool.==> Data.Bool.F) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_72 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.imp hol.false (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) => hol.APP_THM hol.bool hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (hol.imp hol.false) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (thm_70 A p_2 hyp_1) (thm_71 A r_1 p_2).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_73 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_74 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_73 t_1) (thm_73 t_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_75 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool) (hol.forall hol.bool)) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_76 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_77 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_76 thm_76.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) ;)

(; dict ;)

def thm_78 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_75 thm_77.

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_79 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_80 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_79 t_1) (thm_79 t_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_81 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_3 t_1.

(; Theorem: |- ((= (= ((Data.Bool./\ p) q))) (= ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_82 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_83 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q))) ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_84 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_82 q_1 p_2) (thm_83 q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool./\ p))) (= (Data.Bool./\ p))) ;)

(; dict ;)

def thm_85 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_86 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1.

(; Theorem: |- ((= ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p))) ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_87 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)) (thm_85 p_1) (thm_86 p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_88 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 p_1) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool p_1.

(; Theorem: |- ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) ;)

(; dict ;)

def thm_89 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1 p_1 thm_4 (thm_88 p_1).

(; Theorem: |- ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_90 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) (thm_87 p_1) (thm_89 p_1).

(; Theorem: |- ((= q) q) ;)

(; dict ;)

def thm_91 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_1 q_1) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) ;)

(; dict ;)

def thm_92 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1 q_1 (thm_90 p_2) (thm_91 q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_93 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) (thm_84 q_1 p_2) (thm_92 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_94 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_95 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hol.EQ_MP (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_93 q_1 p_2) (thm_94 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) q))) q) ;)

(; dict ;)

def thm_96 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 q_1)) q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_95 q_1 p_2 hyp_1 q_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_97 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_98 : q_1 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof q_1 :=
  q_1 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_99 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.PROP_EXT p_2 q_1 (hyp_3 : hol.proof q_1 => thm_97 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_98 q_1 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_100 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.EQ_MP p_1 q_2 (thm_99 q_2 p_1 hyp_1 hyp_2) (thm_97 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) q) ;)

(; dict ;)

def thm_101 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 q_2) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_100 p_1 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) q)) ;)

(; dict ;)

def thm_102 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_101 p_2 q_1 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_103 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_96 q_2 p_1 hyp_1 (thm_102 q_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_104 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_93 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) x)) ;)

(; dict ;)

def thm_105 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) -> hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) x) ;)

(; dict ;)

def thm_106 : p_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) -> hol.proof (hol.imp q_3 x_2) :=
  p_1 : hol.term hol.bool => x_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) => thm_105 x_2 q_3 p_1 hyp_2 (thm_97 p_1 hyp_1).

(; Theorem: |- x ;)

(; dict ;)

def thm_107 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) -> hol.proof x_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) => thm_106 p_2 x_3 q_1 hyp_1 hyp_3 (thm_98 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x) ;)

(; dict ;)

def thm_108 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.imp (hol.imp p_3 (hol.imp q_2 x_1)) x_1) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hyp_3 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => thm_107 q_2 p_3 x_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_109 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => x_3 : hol.term hol.bool => thm_108 x_3 q_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_110 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1) (thm_104 q_1 p_2) (thm_109 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= q) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_111 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool q_2 (hol.and p_1 q_2)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hol.PROP_EXT q_2 (hol.and p_1 q_2) (hyp_2 : hol.proof (hol.and p_1 q_2) => thm_103 p_1 q_2 hyp_2) (hyp_2 : hol.proof q_2 => thm_110 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_112 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_111 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_113 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_80 t_1) (thm_81 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => thm_112 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_114 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_115 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_114 t_1) (thm_114 t_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_116 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => thm_5 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_117 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_111 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_118 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_115 t_1) (thm_116 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => thm_117 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_119 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => thm_6 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_120 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_111 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_121 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_73 t_1) (thm_119 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => thm_120 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_122 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_123 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_122 t_1) (thm_122 t_1).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_124 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_125 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_124 thm_124.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) ;)

(; dict ;)

def thm_126 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_75 thm_125.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_127 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_128 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_127 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_129 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_128 t_1 hyp_1) thm_7.

(; Theorem: |- t ;)

(; dict ;)

def thm_130 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_131 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_130 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_7).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_132 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_129 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_131 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> t) t)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_133 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_132 t_1) (hol.imp t_1 t_1).

(; Theorem: |- ((Data.Bool.==> t) t) ;)

(; dict ;)

def thm_134 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 t_1) :=
  t_1 : hol.term hol.bool => thm_8 t_1.

(; Theorem: |- ((= ((Data.Bool.==> t) t)) Data.Bool.T) ;)

(; dict ;)

def thm_135 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_133 t_1) (thm_134 t_1).

(; Theorem: |- ((= (= ((Data.Bool.==> t) t))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_136 : t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp t_1 t_1) hol.true thm_37 (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_122 t_1) (thm_135 t_1)).

(; Theorem: |- ((= Data.Bool.T) Data.Bool.T) ;)

(; dict ;)

def thm_137 : hol.proof (hol.eq hol.bool hol.true hol.true) :=
  hol.REFL hol.bool hol.true.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_138 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true) hol.true hol.true (thm_136 t_1) thm_137.

(; Theorem: |- ((= ((= Data.Bool.T) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_139 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true) (thm_138 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_140 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_139 t_1) thm_137.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_141 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_111 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_142 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_123 t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) thm_126 thm_140 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => thm_141 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_143 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_144 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_143 t_1) (thm_143 t_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_145 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_9 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_146 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (thm_142 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_144 t_1) (thm_145 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_147 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_121 t_1) (thm_146 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_148 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (thm_118 t_1) (thm_147 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_149 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (thm_113 t_1) (thm_148 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_150 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => thm_149 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_151 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_103 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_152 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) thm_78 thm_150 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => thm_151 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_153 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_103 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_154 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_152 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) => thm_153 t_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) p))) p) ;)

(; dict ;)

def thm_155 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 p_2)) p_2) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_95 q_1 p_2 hyp_1 p_2.

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_156 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.SYM hol.bool p_1 q_2 (thm_99 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_157 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP q_1 p_2 (thm_156 p_2 q_1 hyp_1 hyp_2) (thm_98 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_158 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_157 q_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_159 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_158 p_2 q_1 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_160 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_155 q_1 p_2 hyp_1 (thm_159 q_1 p_2).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_161 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_160 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_162 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_154 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) => thm_161 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) Data.Bool.T) ;)

(; dict ;)

def thm_163 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp hol.false (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) hol.true) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_74 t_1) (thm_162 t_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) Data.Bool.T) ;)

(; dict ;)

def thm_164 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) hol.true) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) => hol.TRANS hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.imp hol.false (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) hol.true (thm_72 A r_1 p_2 hyp_1) (thm_163 A r_1 p_2).

(; Theorem: |- ((= (= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_165 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.eq hol.bool hol.true)) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) hol.true thm_37 (thm_164 A r_1 p_2 hyp_1).

(; Theorem: |- ((= (= (Data.Bool.? \lambda x. (p x)))) (= Data.Bool.F)) ;)

(; dict ;)

def thm_166 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.eq hol.bool hol.false)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.false thm_37 (thm_69 A p_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ((= Data.Bool.F) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_167 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool hol.false (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (hol.eq hol.bool hol.false) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (thm_166 A p_2 hyp_1) (thm_71 A r_1 p_2).

(; Theorem: |- ((= ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_168 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)).

(; Theorem: |- ((= ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_169 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_168 t_1) (thm_168 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_170 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_171 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) thm_170 thm_170.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_172 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) thm_75 thm_171.

(; Theorem: |- ((= ((= ((= Data.Bool.T) t)) t)) ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_173 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((= Data.Bool.T) t)) t)) ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_174 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_173 t_1) (thm_173 t_1).

(; Theorem: |- ((= ((= Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_175 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_10 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_176 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_111 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_177 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_174 t_1) (thm_175 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) => thm_176 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.T)) t)) ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_178 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.T)) t)) ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_179 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_178 t_1) (thm_178 t_1).

(; Theorem: |- ((= ((= t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_180 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_11 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_181 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_111 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_182 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_179 t_1) (thm_180 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) => thm_181 t_1 hyp_1).

(; Theorem: |- ((= ((= Data.Bool.F) t)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_183 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_12 t_1.

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_184 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_111 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_185 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_168 t_1) (thm_183 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) => thm_184 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_186 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_187 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_186 t_1) (thm_186 t_1).

(; Theorem: |- ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_188 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_13 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_189 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (thm_185 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_187 t_1) (thm_188 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_190 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (thm_182 t_1) (thm_189 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_191 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (thm_177 t_1) (thm_190 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_192 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => thm_191 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_193 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_103 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_194 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_2) (hol.not t_2)) (hol.eq hol.bool (hol.eq hol.bool t_2 hol.false) (hol.not t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_2) (hol.not t_2)) (hol.eq hol.bool (hol.eq hol.bool t_2 hol.false) (hol.not t_2)))))) thm_172 thm_192 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) => thm_193 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_195 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_103 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_196 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (thm_194 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) => thm_195 t_1 hyp_1).

(; Theorem: |- ((= ((= Data.Bool.F) t)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_197 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_160 q_1 p_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= Data.Bool.F) t)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_198 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_196 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) => thm_197 t_1 hyp_1).

(; Theorem: |- ((= ((= Data.Bool.F) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_199 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_169 t_1) (thm_198 t_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_200 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool hol.false (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (thm_167 A r_1 p_2 hyp_1) (thm_199 A r_1 p_2).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ((= Data.Bool.T) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ;)

(; dict ;)

def thm_201 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.eq hol.bool hol.true (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.eq hol.bool hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (thm_165 A r_1 p_2 hyp_1) (thm_200 A r_1 p_2 hyp_1).

(; Theorem: |- ((= ((= Data.Bool.T) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_202 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_175 t_1) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_203 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.eq hol.bool hol.true (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (thm_201 A r_1 p_2 hyp_1) (thm_202 A r_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ;)

(; dict ;)

def thm_204 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) => hol.SYM hol.bool (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (thm_203 A r_1 p_2 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ;)

(; dict ;)

def thm_205 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ;)

(; dict ;)

def thm_206 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (thm_205 t2_1 t1_2) (thm_205 t2_1 t1_2).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ;)

(; dict ;)

def thm_207 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) :=
  t1_1 : hol.term hol.bool => thm_14 t1_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)) ;)

(; dict ;)

def thm_208 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_207 t1_2 t2_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))) (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_209 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (thm_206 t2_1 t1_2) (thm_208 t2_1 t1_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))) (Data.Bool.? \lambda x. (p x)))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ;)

(; dict ;)

def thm_210 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (thm_209 A r_1 p_2).

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_211 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_212 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) => hol.EQ_MP p_1 q_2 (thm_211 q_2 p_1 hyp_2) (thm_97 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_213 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.imp p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_2 : hol.proof p_2 => thm_212 p_2 q_1 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= p) q)) ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_214 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 q_1) (hol.imp p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => thm_213 q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ((Data.Bool.==> (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_215 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_214 q_1 p_2) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1).

(; Theorem: |- ((= (= (Data.Bool.? P))) (= (Data.Bool.? P))) ;)

(; dict ;)

def thm_216 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)).

(; Theorem: |- ((= (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_217 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1.

(; Theorem: |- ((= ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P))) ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_218 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_216 A P_1) (thm_217 A P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_219 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) P_1 P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) P_1.

(; Theorem: |- ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) ;)

(; dict ;)

def thm_220 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1 P_1 (thm_15 A) (thm_219 A P_1).

(; Theorem: |- ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_221 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (thm_218 A P_1) (thm_220 A P_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_222 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => thm_215 A P_1 (thm_221 A P_1).

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_223 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)) ;)

(; dict ;)

def thm_224 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => thm_222 A P_1 (thm_223 A P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_225 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) => thm_224 A P_2 hyp_1 Q_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q)) ;)

(; dict ;)

def thm_226 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_227 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) Q_2)) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof Q_2 :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => Q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) Q_2)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => thm_225 A Q_2 P_1 hyp_2 (thm_226 A Q_2 P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? P)) Q) ;)

(; dict ;)

def thm_228 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) => thm_227 A P_2 Q_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) ((Data.Bool.==> (Data.Bool.? P)) Q)) ;)

(; dict ;)

def thm_229 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => thm_228 A Q_1 P_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) x)) (Data.Bool.? \lambda x. (p x))))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))) (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_230 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.and (p_2 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (hol.not (p_2 y_5))))) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_229 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))).

(; Theorem: |- ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) ;)

(; dict ;)

def thm_231 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not (p_3 y_4))))) -> hol.proof (hol.and (p_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not (p_3 y_4))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not (p_3 y_4))))) => hyp_1.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_232 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not (p_3 y_4))))) -> hol.proof (p_3 x_2) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not (p_3 y_4))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_160 q_1 p_2 hyp_1) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not (p_3 y_4)))) (p_3 x_2) hyp_1.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_233 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not (p_3 y_4))))) -> hol.proof (p_3 x_2) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not (p_3 y_4))))) => hol.PROVE_HYP (hol.and (p_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not (p_3 y_4))))) (p_3 x_2) (thm_231 A r_1 x_2 p_3 hyp_1) (hyp_2 : hol.proof (hol.and (p_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not (p_3 y_4))))) => thm_232 A r_1 x_2 p_3 hyp_2).

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_234 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (p_2 x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hyp_1.

(; Theorem: |- ((= (\lambda x. (p x) x)) (p x)) ;)

(; dict ;)

def thm_235 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => p_2 x_3) x_1) (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (x_3 : hol.term A => p_2 x_3) x_1.

(; Theorem: |- ((= (p x)) (\lambda x. (p x) x)) ;)

(; dict ;)

def thm_236 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_2 x_1) ((x_3 : hol.term A => p_2 x_3) x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool ((x_3 : hol.term A => p_2 x_3) x_1) (p_2 x_1) (thm_235 A x_1 p_2).

(; Theorem: |- (\lambda x. (p x) x) ;)

(; dict ;)

def thm_237 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hol.EQ_MP (p_2 x_1) ((x_3 : hol.term A => p_2 x_3) x_1) (thm_236 A x_1 p_2) (thm_234 A x_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) (Data.Bool.? P)) ;)

(; dict ;)

def thm_238 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_221 A P_1).

(; Theorem: |- ((Data.Bool.==> (P x)) Q) ;)

(; dict ;)

def thm_239 : A : hol.type -> Q_1 : hol.term hol.bool -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) -> hol.proof (hol.imp (P_3 x_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) => thm_226 A Q_1 P_3 hyp_1 x_2.

(; Theorem: |- (P x) ;)

(; dict ;)

def thm_240 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (P_2 x_1) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_241 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (P_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) -> hol.proof Q_3 :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (P_2 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) => thm_239 A Q_3 x_1 P_2 hyp_2 (thm_240 A x_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_242 : A : hol.type -> x_1 : hol.term A -> Q_2 : hol.term hol.bool -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_3 x_1) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) Q_2) :=
  A : hol.type => x_1 : hol.term A => Q_2 : hol.term hol.bool => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_3 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) => thm_241 A x_1 P_3 Q_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda Q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q)) ;)

(; dict ;)

def thm_243 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => Q_3 : hol.term hol.bool => thm_242 A x_1 Q_3 P_2 hyp_1.

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_244 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hol.EQ_MP (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) (thm_238 A P_2) (thm_243 A x_1 P_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_245 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_244 A x_1 P_2 hyp_1) A x_1 (x_3 : hol.term A => p_2 x_3) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_246 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hol.PROVE_HYP ((x_3 : hol.term A => p_2 x_3) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (thm_237 A x_1 p_2 hyp_1) (hyp_2 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) => thm_245 A x_1 p_2 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_247 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hol.PROVE_HYP (p_2 x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (thm_234 A x_1 p_2 hyp_1) (hyp_2 : hol.proof (p_2 x_1) => thm_246 A x_1 p_2 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_248 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not (p_3 y_4))))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not (p_3 y_4))))) => hol.PROVE_HYP (p_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (thm_233 A r_1 x_2 p_3 hyp_1) (hyp_2 : hol.proof (p_3 x_2) => thm_247 A x_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))) (Data.Bool.? \lambda x. (p x))) ;)

(; dict ;)

def thm_249 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.and (p_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not (p_3 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not (p_3 y_4))))) => thm_248 A r_1 x_2 p_3 hyp_1.

(; Theorem: |- ((= (\lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) x)) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))) ;)

(; dict ;)

def thm_250 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5))))) x_1) (hol.and (p_3 x_1) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_1) (hol.not (p_3 y_4)))))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_3 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5))))) x_1.

(; Theorem: |- (\lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) x) ;)

(; dict ;)

def thm_251 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5))))) x_1) -> hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5))))) x_1) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5))))) x_1) => hyp_1.

(; Theorem: |- ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) ;)

(; dict ;)

def thm_252 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (hol.not (p_3 y_5))))) x_2) -> hol.proof (hol.and (p_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not (p_3 y_4))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (hol.not (p_3 y_5))))) x_2) => hol.EQ_MP ((x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (hol.not (p_3 y_5))))) x_2) (hol.and (p_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not (p_3 y_4))))) (thm_250 A x_2 r_1 p_3) (thm_251 A x_2 r_1 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_253 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5))))) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5))))) x_1) => thm_249 A r_2 x_1 p_3 (thm_252 A r_2 x_1 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) x)) (Data.Bool.? \lambda x. (p x))) ;)

(; dict ;)

def thm_254 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp ((x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5))))) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5))))) x_1) => thm_253 A x_1 r_2 p_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) x)) (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_255 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.and (p_2 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (hol.not (p_2 y_5))))) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => thm_254 A x_3 r_1 p_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))) (Data.Bool.? \lambda x. (p x))) ;)

(; dict ;)

def thm_256 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => thm_230 A r_1 p_2 (thm_255 A r_1 p_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))) ;)

(; dict ;)

def thm_257 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_258 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) => thm_256 A r_1 p_2 (thm_257 A r_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_259 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (thm_210 A r_1 p_2) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) => thm_258 A r_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.~ (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))) ;)

(; dict ;)

def thm_260 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) -> hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) => thm_259 A r_1 p_2 (thm_68 A p_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_261 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) => hol.EQ_MP (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (thm_204 A r_1 p_2 hyp_1) (thm_260 A r_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ;)

(; dict ;)

def thm_262 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) => thm_261 A r_1 p_2 hyp_1.

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. (p x))) Data.Bool.T)) ((= (Data.Bool.? \lambda x. (p x))) Data.Bool.T)) ;)

(; dict ;)

def thm_263 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.true).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. (p x))) Data.Bool.T)) ((= (Data.Bool.? \lambda x. (p x))) Data.Bool.T)) ;)

(; dict ;)

def thm_264 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.true) (thm_263 A p_1) (thm_263 A p_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (p x))) ((= (Data.Bool.? \lambda x. (p x))) Data.Bool.T)) ;)

(; dict ;)

def thm_265 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_132 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)).

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_266 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) => hyp_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. (p x))) Data.Bool.T) ;)

(; dict ;)

def thm_267 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.true) (thm_265 A p_1) (thm_266 A p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.? \lambda x. (p x)))) (Data.Bool.==> Data.Bool.T)) ;)

(; dict ;)

def thm_268 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.imp hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.true thm_48 ((A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.true) (thm_264 A p_1) (thm_267 A p_1 hyp_1)) A p_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ((Data.Bool.==> Data.Bool.T) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_269 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.imp hol.true (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) => hol.APP_THM hol.bool hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (hol.imp hol.true) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (thm_268 A p_2 hyp_1) (thm_71 A r_1 p_2).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))) ;)

(; dict ;)

def thm_270 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp hol.true (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_81 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))) ;)

(; dict ;)

def thm_271 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) => hol.TRANS hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.imp hol.true (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (thm_269 A r_1 p_2 hyp_1) (thm_270 A r_1 p_2).

(; Theorem: |- ((= (= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) (= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_272 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) thm_37 (thm_271 A r_1 p_2 hyp_1).

(; Theorem: |- ((= (= (Data.Bool.? \lambda x. (p x)))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_273 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.eq hol.bool hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hol.true thm_37 (thm_267 A p_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ((= Data.Bool.T) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_274 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool hol.true (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (hol.eq hol.bool hol.true) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (thm_273 A p_2 hyp_1) (thm_71 A r_1 p_2).

(; Theorem: |- ((= ((= Data.Bool.T) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))) ;)

(; dict ;)

def thm_275 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_175 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))) ;)

(; dict ;)

def thm_276 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool hol.true (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (thm_274 A r_1 p_2 hyp_1) (thm_275 A r_1 p_2).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_277 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (thm_272 A r_1 p_2 hyp_1) (thm_276 A r_1 p_2 hyp_1).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_278 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_279 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_278 A x_1) (thm_278 A x_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_280 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_281 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_282 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_281 A) (thm_281 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_283 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_280 A) (thm_282 A).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_284 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_132 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_285 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => thm_16 A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_286 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_284 A x_1) (thm_285 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_287 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_278 A x_1) (thm_286 A x_1)) A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_288 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_1 x_1) hol.true) :=
  x_1 : hol.term hol.bool => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_279 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_283 A) (thm_287 A) x_1)) hol.bool x_1.

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) Data.Bool.T) ;)

(; dict ;)

def thm_289 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) hol.true) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => (x_1 : hol.term hol.bool => thm_288 x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) Data.Bool.T) ;)

(; dict ;)

def thm_290 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) hol.true) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) hol.true (thm_277 A r_1 p_2 hyp_1) (thm_289 A r_1 p_2).

(; Theorem: |- ((= Data.Bool.T) ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ;)

(; dict ;)

def thm_291 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) => hol.SYM hol.bool (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) hol.true (thm_290 A r_1 p_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_292 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) => hol.EQ_MP hol.true (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (thm_291 A r_1 p_2 hyp_1) thm_7.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ;)

(; dict ;)

def thm_293 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) => thm_292 A r_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_294 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_17 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)).

(; Theorem: |- ((= (= ((Data.Bool.\/ P) Q))) (= ((Data.Bool.\/ P) Q))) ;)

(; dict ;)

def thm_295 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or P_2 Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or P_2 Q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r)))) ;)

(; dict ;)

def thm_296 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ P) Q)) (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q))) ((= ((Data.Bool.\/ P) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r))))) ;)

(; dict ;)

def thm_297 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or P_2 Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) (thm_295 Q_1 P_2) (thm_296 Q_1 P_2).

(; Theorem: |- ((= (= (Data.Bool.\/ P))) (= (Data.Bool.\/ P))) ;)

(; dict ;)

def thm_298 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1))) :=
  P_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r)))) ;)

(; dict ;)

def thm_299 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) :=
  P_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1.

(; Theorem: |- ((= ((= (Data.Bool.\/ P)) (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P))) ((= (Data.Bool.\/ P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))))) ;)

(; dict ;)

def thm_300 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3))))) :=
  P_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3))) (thm_298 P_1) (thm_299 P_1).

(; Theorem: |- ((= (Data.Bool.\/ P)) (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P)) ;)

(; dict ;)

def thm_301 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1 P_1 thm_18 (thm_58 P_1).

(; Theorem: |- ((= (Data.Bool.\/ P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r)))) ;)

(; dict ;)

def thm_302 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) :=
  P_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) (thm_300 P_1) (thm_301 P_1).

(; Theorem: |- ((= Q) Q) ;)

(; dict ;)

def thm_303 : Q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool Q_1 Q_1) :=
  Q_1 : hol.term hol.bool => hol.REFL hol.bool Q_1.

(; Theorem: |- ((= ((Data.Bool.\/ P) Q)) (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q)) ;)

(; dict ;)

def thm_304 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.or P_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1 Q_1 (thm_302 P_2) (thm_303 Q_1).

(; Theorem: |- ((= ((Data.Bool.\/ P) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r)))) ;)

(; dict ;)

def thm_305 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) (thm_297 Q_1 P_2) (thm_304 Q_1 P_2).

(; Theorem: |- ((Data.Bool.\/ P) Q) ;)

(; dict ;)

def thm_306 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_2 Q_1) -> hol.proof (hol.or P_2 Q_1) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_2 Q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r))) ;)

(; dict ;)

def thm_307 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_2 Q_1) -> hol.proof (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_2 Q_1) => hol.EQ_MP (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) (thm_305 Q_1 P_2) (thm_306 Q_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> P) R)) ((Data.Bool.==> ((Data.Bool.==> Q) R)) R)) ;)

(; dict ;)

def thm_308 : Q_1 : hol.term hol.bool -> R_2 : hol.term hol.bool -> P_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_3 Q_1) -> hol.proof (hol.imp (hol.imp P_3 R_2) (hol.imp (hol.imp Q_1 R_2) R_2)) :=
  Q_1 : hol.term hol.bool => R_2 : hol.term hol.bool => P_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_3 Q_1) => thm_307 Q_1 P_3 hyp_1 R_2.

(; Theorem: |- ((Data.Bool.==> P) R) ;)

(; dict ;)

def thm_309 : R_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_2 R_1) -> hol.proof (hol.imp P_2 R_1) :=
  R_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> Q) R)) R) ;)

(; dict ;)

def thm_310 : P_1 : hol.term hol.bool -> R_2 : hol.term hol.bool -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_1 R_2) -> hyp_2 : hol.proof (hol.or P_1 Q_3) -> hol.proof (hol.imp (hol.imp Q_3 R_2) R_2) :=
  P_1 : hol.term hol.bool => R_2 : hol.term hol.bool => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_1 R_2) => hyp_2 : hol.proof (hol.or P_1 Q_3) => thm_308 Q_3 R_2 P_1 hyp_2 (thm_309 R_2 P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> Q) R) ;)

(; dict ;)

def thm_311 : R_1 : hol.term hol.bool -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp Q_2 R_1) -> hol.proof (hol.imp Q_2 R_1) :=
  R_1 : hol.term hol.bool => Q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp Q_2 R_1) => hyp_1.

(; Theorem: |- R ;)

(; dict ;)

def thm_312 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> R_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_2 R_3) -> hyp_2 : hol.proof (hol.imp Q_1 R_3) -> hyp_3 : hol.proof (hol.or P_2 Q_1) -> hol.proof R_3 :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_310 P_2 R_3 Q_1 hyp_1 hyp_3 (thm_311 R_3 Q_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_313 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) -> hyp_2 : hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) -> hyp_3 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)))) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) => hyp_2 : hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) => hyp_3 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)))) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_312 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_314 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) -> hyp_2 : hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) => hyp_2 : hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) => hol.PROVE_HYP (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)))) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (thm_294 A p_2) (hyp_3 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)))) => thm_313 A r_1 p_2 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_315 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) => hol.PROVE_HYP (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (thm_293 A r_1 p_2) (hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) => thm_314 A r_1 p_2 hyp_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_316 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.PROVE_HYP (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (thm_262 A r_1 p_2) (hyp_1 : hol.proof (hol.imp (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) => thm_315 A r_1 p_2 hyp_1).

(; Theorem: |- ((= \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_317 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.ABS_THM (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (p_2 : hol.term (hol.arr A hol.bool) => thm_316 A r_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ;)

(; dict ;)

def thm_318 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (thm_45 A) (hol.EQ_MP (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (thm_47 A r_1) (thm_317 A r_1)).

(; Theorem: |- ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ;)

(; dict ;)

def thm_319 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.EQ_MP (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (thm_44 A r_1) (thm_318 A r_1).

(; Theorem: |- (Data.Bool.! \lambda r. ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ;)

(; dict ;)

def thm_320 : A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => thm_319 A r_1.

(; Theorem: |- (Data.Bool.! \lambda r. ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ;)

(; thm ;)

def thm_321 : A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))))) (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))))) (thm_36 A) (thm_320 A).

(; Theorem: |- ((= \lambda r. ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))))) \lambda r. ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))))) ;)

(; dict ;)

def thm_322 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))).

(; Theorem: |- ((= \lambda r. ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))))) \lambda r. ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))))) ;)

(; dict ;)

def thm_323 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (thm_322 A) (thm_322 A).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))))) (Data.Bool.! \lambda r. ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))))) ;)

(; dict ;)

def thm_324 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))))) (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr A hol.bool))) (hol.forall (hol.arr A (hol.arr A hol.bool))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (thm_33 A) (thm_323 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_325 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))).

(; Theorem: |- ((= ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))))) ((= (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))))) ;)

(; dict ;)

def thm_326 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1)) (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (thm_41 A r_1) (thm_325 A r_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))))) ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))))) ;)

(; dict ;)

def thm_327 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.SYM hol.bool (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (thm_326 A r_1).

(; Theorem: |- ((= \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_328 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))).

(; Theorem: |- ((= \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_329 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (thm_328 A r_1) (thm_328 A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ;)

(; dict ;)

def thm_330 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (thm_45 A) (thm_329 A r_1).

(; Theorem: |- ((= (Data.Bool.==> ((r y) x))) (Data.Bool.==> ((r y) x))) ;)

(; dict ;)

def thm_331 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (r_3 y_2 x_1)) (hol.imp (r_3 y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL (hol.arr hol.bool hol.bool) (hol.imp (r_3 y_2 x_1)).

(; Theorem: |- ((= (\lambda x. (Data.Bool.~ (p x)) x)) (Data.Bool.~ (p x))) ;)

(; dict ;)

def thm_332 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => hol.not (p_2 x_3)) x_1) (hol.not (p_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (x_3 : hol.term A => hol.not (p_2 x_3)) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. (Data.Bool.~ (p x)) x)) \lambda x. (Data.Bool.~ (p x))) ;)

(; dict ;)

def thm_333 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2) (x_2 : hol.term A => hol.not (p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2) (x_2 : hol.term A => hol.not (p_1 x_2)) (x_2 : hol.term A => thm_332 A x_2 p_1).

(; Theorem: |- ((= y) y) ;)

(; dict ;)

def thm_334 : A : hol.type -> y_1 : hol.term A -> hol.proof (hol.eq A y_1 y_1) :=
  A : hol.type => y_1 : hol.term A => hol.REFL A y_1.

(; Theorem: |- ((= (\lambda x. (\lambda x. (Data.Bool.~ (p x)) x) y)) (\lambda x. (Data.Bool.~ (p x)) y)) ;)

(; dict ;)

def thm_335 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3) y_1) ((x_3 : hol.term A => hol.not (p_2 x_3)) y_1)) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM A hol.bool (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (x_3 : hol.term A => hol.not (p_2 x_3)) y_1 y_1 (thm_333 A p_2) (thm_334 A y_1).

(; Theorem: |- ((= (= (\lambda x. (\lambda x. (Data.Bool.~ (p x)) x) y))) (= (\lambda x. (Data.Bool.~ (p x)) y))) ;)

(; dict ;)

def thm_336 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3) y_1)) (hol.eq hol.bool ((x_3 : hol.term A => hol.not (p_2 x_3)) y_1))) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3) y_1) ((x_3 : hol.term A => hol.not (p_2 x_3)) y_1) thm_37 (thm_335 A y_1 p_2).

(; Theorem: |- ((= (\lambda x. (Data.Bool.~ (p x)) y)) (Data.Bool.~ (p y))) ;)

(; dict ;)

def thm_337 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => hol.not (p_2 x_3)) y_1) (hol.not (p_2 y_1))) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (x_3 : hol.term A => hol.not (p_2 x_3)) y_1.

(; Theorem: |- ((= ((= (\lambda x. (\lambda x. (Data.Bool.~ (p x)) x) y)) (\lambda x. (Data.Bool.~ (p x)) y))) ((= (\lambda x. (Data.Bool.~ (p x)) y)) (Data.Bool.~ (p y)))) ;)

(; dict ;)

def thm_338 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3) y_1) ((x_3 : hol.term A => hol.not (p_2 x_3)) y_1)) (hol.eq hol.bool ((x_3 : hol.term A => hol.not (p_2 x_3)) y_1) (hol.not (p_2 y_1)))) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3) y_1)) (hol.eq hol.bool ((x_3 : hol.term A => hol.not (p_2 x_3)) y_1)) ((x_3 : hol.term A => hol.not (p_2 x_3)) y_1) (hol.not (p_2 y_1)) (thm_336 A y_1 p_2) (thm_337 A y_1 p_2).

(; Theorem: |- ((= ((Data.Bool.==> ((r y) x)) (\lambda x. (Data.Bool.~ (p x)) y))) ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))) ;)

(; dict ;)

def thm_339 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> y_3 : hol.term A -> r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (r_4 y_3 x_2) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_3)) (hol.imp (r_4 y_3 x_2) (hol.not (p_1 y_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => y_3 : hol.term A => r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp (r_4 y_3 x_2)) (hol.imp (r_4 y_3 x_2)) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_3) (hol.not (p_1 y_3)) (thm_331 A x_2 y_3 r_4) (hol.EQ_MP (hol.eq hol.bool ((x_5 : hol.term A => (x_6 : hol.term A => hol.not (p_1 x_6)) x_5) y_3) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_3)) (hol.eq hol.bool ((x_5 : hol.term A => hol.not (p_1 x_5)) y_3) (hol.not (p_1 y_3))) (thm_338 A y_3 p_1) (thm_335 A y_3 p_1)).

(; Theorem: |- ((= \lambda y. ((Data.Bool.==> ((r y) x)) (\lambda x. (Data.Bool.~ (p x)) y))) \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))) ;)

(; dict ;)

def thm_340 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4)) (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not (p_1 y_4)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.ABS_THM A hol.bool (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4)) (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not (p_1 y_4))) (y_4 : hol.term A => thm_339 A p_1 x_2 y_4 r_3).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (\lambda x. (Data.Bool.~ (p x)) y)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) ;)

(; dict ;)

def thm_341 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not (p_1 y_4))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4)) (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not (p_1 y_4))) (thm_280 A) (thm_340 A p_1 x_2 r_3).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (\lambda x. (Data.Bool.~ (p x)) y))))) (Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))) ;)

(; dict ;)

def thm_342 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4)))) (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not (p_1 y_4)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not (p_1 y_4)))) thm_48 (thm_341 A p_1 x_2 r_3).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (\lambda x. (Data.Bool.~ (p x)) y)))) (\lambda x. (Data.Bool.~ (p x)) x))) ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_343 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_2)) (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not (p_1 y_4)))) (hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4)))) (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not (p_1 y_4))))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_2) (hol.not (p_1 x_2)) (thm_342 A p_1 x_2 r_3) (thm_332 A x_2 p_1).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (\lambda x. (Data.Bool.~ (p x)) y)))) (\lambda x. (Data.Bool.~ (p x)) x))) \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_344 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3)) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3)) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))) (x_3 : hol.term A => thm_343 A p_1 x_3 r_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (\lambda x. (Data.Bool.~ (p x)) y)))) (\lambda x. (Data.Bool.~ (p x)) x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_345 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3)) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))) (thm_280 A) (thm_344 A p_1 r_2).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (\lambda x. (Data.Bool.~ (p x)) y)))) (\lambda x. (Data.Bool.~ (p x)) x))))) (Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x)))))) ;)

(; dict ;)

def thm_346 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3)))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) thm_48 (thm_345 A p_1 r_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ (p x)) x))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_347 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2)) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2) (x_2 : hol.term A => hol.not (p_1 x_2)) (thm_280 A) (thm_333 A p_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (\lambda x. (Data.Bool.~ (p x)) y)))) (\lambda x. (Data.Bool.~ (p x)) x)))) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ (p x)) x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_348 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3)))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))))) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_1 x_4)) x_3)) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3))) (thm_346 A p_1 r_2) (thm_347 A p_1).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (\lambda x. (Data.Bool.~ (p x)) y)))) (\lambda x. (Data.Bool.~ (p x)) x)))) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ (p x)) x))))) (Data.Bool.==> ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))))) ;)

(; dict ;)

def thm_349 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_1 x_4)) x_3)))) (hol.imp (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3)))) thm_48 (thm_348 A p_1 r_2).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_350 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (\lambda x. (Data.Bool.~ (p x)) y)))) (\lambda x. (Data.Bool.~ (p x)) x)))) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ (p x)) x)))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ;)

(; dict ;)

def thm_351 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))))))) (hol.imp (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4))))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_1 x_4)) x_3)))) (hol.imp (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4))))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4))))))) (thm_349 A p_1 r_2) (thm_350 A r_2 p_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (\lambda x. (Data.Bool.~ (p x)) y)))) (\lambda x. (Data.Bool.~ (p x)) x)))) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ (p x)) x)))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ;)

(; dict ;)

def thm_352 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))))))) (hol.imp (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4))))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.SYM hol.bool (hol.imp (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))))))) (hol.imp (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))))))) (thm_351 A p_1 r_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_353 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3)))) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3)))) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (p x) x)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_354 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => p_2 x_4) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_2 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (hol.not (p_2 y_5)))))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_229 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (x_3 : hol.term A => p_2 x_3).

(; Theorem: |- ((= Data.Bool.?) Data.Bool.?) ;)

(; dict ;)

def thm_355 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)).

(; Theorem: |- ((= ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1))) ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1))) ;)

(; dict ;)

def thm_356 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t1_2 t2_1) (hol.and t2_1 t1_2)) (hol.eq hol.bool (hol.and t1_2 t2_1) (hol.and t2_1 t1_2))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t1_2 t2_1) (hol.and t2_1 t1_2)).

(; Theorem: |- ((= ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1))) ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1))) ;)

(; dict ;)

def thm_357 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t1_2 t2_1) (hol.and t2_1 t1_2)) (hol.eq hol.bool (hol.and t1_2 t2_1) (hol.and t2_1 t1_2))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t1_2 t2_1) (hol.and t2_1 t1_2)) (hol.eq hol.bool (hol.and t1_2 t2_1) (hol.and t2_1 t1_2)) (hol.eq hol.bool (hol.and t1_2 t2_1) (hol.and t2_1 t1_2)) (thm_356 t2_1 t1_2) (thm_356 t2_1 t1_2).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1))) ;)

(; dict ;)

def thm_358 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1))) :=
  t1_1 : hol.term hol.bool => thm_19 t1_1.

(; Theorem: |- ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1)) ;)

(; dict ;)

def thm_359 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t1_2 t2_1) (hol.and t2_1 t1_2)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_358 t1_2 t2_1.

(; Theorem: |- ((= ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))) ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x))) ;)

(; dict ;)

def thm_360 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (p_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not (p_3 y_4))))) (hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not (p_3 y_4)))) (p_3 x_2))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t1_2 t2_1) (hol.and t2_1 t1_2)) (hol.eq hol.bool (hol.and t1_2 t2_1) (hol.and t2_1 t1_2)) (thm_357 t2_1 t1_2) (thm_359 t2_1 t1_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not (p_3 y_4)))) (p_3 x_2).

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))) \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x))) ;)

(; dict ;)

def thm_361 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))) (p_2 x_3))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))) (p_2 x_3)) (x_3 : hol.term A => thm_360 A r_1 x_3 p_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x)))) ;)

(; dict ;)

def thm_362 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))) (p_2 x_3)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))) (p_2 x_3)) (thm_355 A) (thm_361 A r_1 p_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))) ;)

(; dict ;)

def thm_363 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3))) (thm_362 A r_2 p_1).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x)))))) (Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x)))))) ;)

(; dict ;)

def thm_364 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL (hol.arr hol.bool hol.bool) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))))).

(; Theorem: |- ((= Data.Bool.~) Data.Bool.~) ;)

(; dict ;)

def thm_365 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) hol.not hol.not) :=
  hol.REFL (hol.arr hol.bool hol.bool) hol.not.

(; Theorem: |- ((= ((= (p x)) Data.Bool.T)) ((= (p x)) Data.Bool.T)) ;)

(; dict ;)

def thm_366 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_2 x_1) hol.true) (hol.eq hol.bool (p_2 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (p_2 x_1) hol.true).

(; Theorem: |- ((= ((= (p x)) Data.Bool.T)) ((= (p x)) Data.Bool.T)) ;)

(; dict ;)

def thm_367 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_2 x_1) hol.true) (hol.eq hol.bool (p_2 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (p_2 x_1) hol.true) (hol.eq hol.bool (p_2 x_1) hol.true) (hol.eq hol.bool (p_2 x_1) hol.true) (thm_366 A x_1 p_2) (thm_366 A x_1 p_2).

(; Theorem: |- ((= (p x)) ((= (p x)) Data.Bool.T)) ;)

(; dict ;)

def thm_368 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_2 x_1) (hol.eq hol.bool (p_2 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_132 t_1) (p_2 x_1).

(; Theorem: |- ((= (p x)) Data.Bool.T) ;)

(; dict ;)

def thm_369 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (hol.eq hol.bool (p_2 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hol.EQ_MP (p_2 x_1) (hol.eq hol.bool (p_2 x_1) hol.true) (thm_368 A x_1 p_2) (thm_234 A x_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (p x))) (Data.Bool.~ Data.Bool.T)) ;)

(; dict ;)

def thm_370 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (hol.eq hol.bool (hol.not (p_2 x_1)) (hol.not hol.true)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hol.APP_THM hol.bool hol.bool hol.not hol.not (p_2 x_1) hol.true thm_365 (hol.EQ_MP (hol.eq hol.bool (p_2 x_1) hol.true) (hol.eq hol.bool (p_2 x_1) hol.true) (thm_367 A x_1 p_2) (thm_369 A x_1 p_2 hyp_1)).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ;)

(; dict ;)

def thm_371 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false)) :=
  hol.REFL hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ;)

(; dict ;)

def thm_372 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false)) :=
  hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_371 thm_371.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_373 : hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_111 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true) hyp_1.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_374 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hol.PROVE_HYP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) (hol.EQ_MP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_371 thm_20) (hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) => thm_373 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_375 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.REFL hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_376 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_375 thm_375.

(; Theorem: |- ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_377 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) thm_374 (hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_376 thm_21).

(; Theorem: |- ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F) ;)

(; dict ;)

def thm_378 : hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) -> hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) :=
  hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_160 q_1 p_2 hyp_1) (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.true) hol.false) hyp_1.

(; Theorem: |- ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F) ;)

(; dict ;)

def thm_379 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) :=
  hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_377 (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) => thm_378 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (p x))) Data.Bool.F) ;)

(; dict ;)

def thm_380 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (hol.eq hol.bool (hol.not (p_2 x_1)) hol.false) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hol.TRANS hol.bool (hol.not (p_2 x_1)) (hol.not hol.true) hol.false (thm_370 A x_1 p_2 hyp_1) (hol.EQ_MP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_372 thm_379).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.~ (p x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) Data.Bool.F)) ;)

(; dict ;)

def thm_381 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) (hol.not (p_2 x_1))) (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) hol.false)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (p_2 x_1) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4))))) (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4))))) (hol.not (p_2 x_1)) hol.false (thm_364 A p_2 r_3) (thm_380 A x_1 p_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) Data.Bool.F)) (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x)))))) ;)

(; dict ;)

def thm_382 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) hol.false) (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => (t_1 : hol.term hol.bool => thm_145 t_1) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))).

(; Theorem: |- ((= (\lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))) x)) ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_383 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4))) x_1) (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (hol.not (p_2 y_4)))) (hol.not (p_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.BETA_CONV A hol.bool (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4))) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))) x)) \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_384 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4))) x_3) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.ABS_THM A hol.bool (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4))) x_3) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))) (x_3 : hol.term A => thm_383 A x_3 p_1 r_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))) x))) (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_385 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4))) x_3)) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4))) x_3) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))) (thm_280 A) (thm_384 A p_1 r_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))) x)))) (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x)))))) ;)

(; dict ;)

def thm_386 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4))) x_3))) (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4))) x_3)) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) thm_365 (thm_385 A p_1 r_2).

(; Theorem: |- ((= (= (Data.Bool.~ (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))) x))))) (= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))))) ;)

(; dict ;)

def thm_387 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4))) x_3)))) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4))) x_3))) (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))))) thm_37 (thm_386 A p_1 r_2).

(; Theorem: |- ((= (Data.Bool.~ (\lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))) x))) (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_388 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not ((x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4))) x_1)) (hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (hol.not (p_2 y_4)))) (hol.not (p_2 x_1))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool hol.not hol.not ((x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4))) x_1) (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (hol.not (p_2 y_4)))) (hol.not (p_2 x_1))) thm_365 (thm_383 A x_1 p_2 r_3).

(; Theorem: |- ((= \lambda x. (Data.Bool.~ (\lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))) x))) \lambda x. (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_389 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4))) x_3)) (x_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4))) x_3)) (x_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (x_3 : hol.term A => thm_388 A x_3 p_1 r_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ (\lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))) x)))) (Data.Bool.? \lambda x. (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x)))))) ;)

(; dict ;)

def thm_390 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4))) x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4))) x_3)) (x_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (thm_355 A) (thm_389 A p_1 r_2).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))) x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (\lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))) x))))) ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x)))))) (Data.Bool.? \lambda x. (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))))) ;)

(; dict ;)

def thm_391 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4))) x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4))) x_3)))) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4))) x_3)))) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4))) x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))))) (thm_387 A p_1 r_2) (thm_390 A p_1 r_2).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_392 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_393 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (thm_392 A p_1) (thm_392 A p_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_394 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_22 A p_1.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (\lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))) x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (\lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))) x)))) ;)

(; dict ;)

def thm_395 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4))) x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4))) x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (thm_393 A p_1) (thm_394 A p_1)) A p_1) A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x)))))) (Data.Bool.? \lambda x. (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x)))))) ;)

(; dict ;)

def thm_396 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4))) x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4))) x_3)))) (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))))) (thm_391 A p_1 r_2) (thm_395 A p_1 r_2).

(; Theorem: |- ((= ((= \lambda _11351. (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _11351)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p _11351))))) \lambda _11351. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _11351)) (Data.Bool.~ (p y))))) (p _11351)))) ((= \lambda _11351. (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _11351)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p _11351))))) \lambda _11351. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _11351)) (Data.Bool.~ (p y))))) (p _11351)))) ;)

(; dict ;)

def thm_397 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (__11351_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __11351_3) (hol.not (p_1 y_4)))) (hol.not (p_1 __11351_3)))) (__11351_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __11351_3) (hol.not (p_1 y_4)))) (p_1 __11351_3))) (hol.eq (hol.arr A hol.bool) (__11351_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __11351_3) (hol.not (p_1 y_4)))) (hol.not (p_1 __11351_3)))) (__11351_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __11351_3) (hol.not (p_1 y_4)))) (p_1 __11351_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL hol.bool (hol.eq (hol.arr A hol.bool) (__11351_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __11351_3) (hol.not (p_1 y_4)))) (hol.not (p_1 __11351_3)))) (__11351_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __11351_3) (hol.not (p_1 y_4)))) (p_1 __11351_3))).

(; Theorem: |- ((= ((= \lambda x. (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x)))) ((= \lambda x. (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x)))) ;)

(; dict ;)

def thm_398 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3))) (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL hol.bool (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3))).

(; Theorem: |- ((= ((= \lambda _11351. (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _11351)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p _11351))))) \lambda _11351. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _11351)) (Data.Bool.~ (p y))))) (p _11351)))) ((= \lambda x. (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x)))) ;)

(; dict ;)

def thm_399 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (__11351_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __11351_3) (hol.not (p_1 y_4)))) (hol.not (p_1 __11351_3)))) (__11351_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __11351_3) (hol.not (p_1 y_4)))) (p_1 __11351_3))) (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.TRANS hol.bool (hol.eq (hol.arr A hol.bool) (__11351_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __11351_3) (hol.not (p_1 y_4)))) (hol.not (p_1 __11351_3)))) (__11351_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __11351_3) (hol.not (p_1 y_4)))) (p_1 __11351_3))) (hol.eq (hol.arr A hol.bool) (__11351_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __11351_3) (hol.not (p_1 y_4)))) (hol.not (p_1 __11351_3)))) (__11351_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __11351_3) (hol.not (p_1 y_4)))) (p_1 __11351_3))) (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3))) (thm_397 A p_1 r_2) (thm_398 A p_1 r_2).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_400 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_401 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (thm_400 t2_1 t1_2) (thm_400 t2_1 t1_2).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_402 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => thm_23 t1_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_403 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_402 t1_2 t2_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _11351)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p _11351))))) ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _11351)) (Data.Bool.~ (p y))))) (Data.Bool.~ (Data.Bool.~ (p _11351))))) ;)

(; dict ;)

def thm_404 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> __11351_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 __11351_2) (hol.not (p_1 y_4)))) (hol.not (p_1 __11351_2)))) (hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 __11351_2) (hol.not (p_1 y_4)))) (hol.not (hol.not (p_1 __11351_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => __11351_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (thm_401 t2_1 t1_2) (thm_403 t2_1 t1_2)) (hol.not (p_1 __11351_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 __11351_2) (hol.not (p_1 y_4)))).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _11351)) (Data.Bool.~ (p y)))))) (Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _11351)) (Data.Bool.~ (p y)))))) ;)

(; dict ;)

def thm_405 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> __11351_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 __11351_2) (hol.not (p_1 y_4))))) (hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 __11351_2) (hol.not (p_1 y_4)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => __11351_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL (hol.arr hol.bool hol.bool) (hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 __11351_2) (hol.not (p_1 y_4))))).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_406 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_407 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (thm_406 t_1) (thm_406 t_1).

(; Theorem: |- ((= ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ((Data.Bool./\ (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t))) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)))) ;)

(; dict ;)

def thm_408 : hyp_1 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)))) :=
  hyp_1 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_111 p_1 q_2 hyp_1) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ((Data.Bool./\ (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t))) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)))) ;)

(; dict ;)

def thm_409 : hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)))) :=
  hol.PROVE_HYP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)))) thm_24 (hyp_1 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) => thm_408 hyp_1).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t))) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_410 : hol.proof (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hol.EQ_MP (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) thm_409 thm_377.

(; Theorem: |- (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_411 : hyp_1 : hol.proof (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  hyp_1 : hol.proof (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_160 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_412 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  hol.PROVE_HYP (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) thm_410 (hyp_1 : hol.proof (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) => thm_411 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ t))) t) ;)

(; dict ;)

def thm_413 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) :=
  t_1 : hol.term hol.bool => thm_412 t_1.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ (p _11351)))) (p _11351)) ;)

(; dict ;)

def thm_414 : A : hol.type -> __11351_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.not (p_2 __11351_1))) (p_2 __11351_1)) :=
  A : hol.type => __11351_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (thm_407 t_1) (thm_413 t_1)) (p_2 __11351_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _11351)) (Data.Bool.~ (p y))))) (Data.Bool.~ (Data.Bool.~ (p _11351))))) ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _11351)) (Data.Bool.~ (p y))))) (p _11351))) ;)

(; dict ;)

def thm_415 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> __11351_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 __11351_2) (hol.not (p_1 y_4)))) (hol.not (hol.not (p_1 __11351_2)))) (hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 __11351_2) (hol.not (p_1 y_4)))) (p_1 __11351_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => __11351_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 __11351_2) (hol.not (p_1 y_4))))) (hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 __11351_2) (hol.not (p_1 y_4))))) (hol.not (hol.not (p_1 __11351_2))) (p_1 __11351_2) (thm_405 A p_1 __11351_2 r_3) (thm_414 A __11351_2 p_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _11351)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p _11351))))) ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _11351)) (Data.Bool.~ (p y))))) (p _11351))) ;)

(; dict ;)

def thm_416 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> __11351_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 __11351_2) (hol.not (p_1 y_4)))) (hol.not (p_1 __11351_2)))) (hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 __11351_2) (hol.not (p_1 y_4)))) (p_1 __11351_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => __11351_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.TRANS hol.bool (hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 __11351_2) (hol.not (p_1 y_4)))) (hol.not (p_1 __11351_2)))) (hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 __11351_2) (hol.not (p_1 y_4)))) (hol.not (hol.not (p_1 __11351_2)))) (hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 __11351_2) (hol.not (p_1 y_4)))) (p_1 __11351_2)) (thm_404 A p_1 __11351_2 r_3) (thm_415 A p_1 __11351_2 r_3).

(; Theorem: |- ((= \lambda _11351. (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _11351)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p _11351))))) \lambda _11351. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _11351)) (Data.Bool.~ (p y))))) (p _11351))) ;)

(; dict ;)

def thm_417 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (__11351_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __11351_3) (hol.not (p_1 y_4)))) (hol.not (p_1 __11351_3)))) (__11351_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __11351_3) (hol.not (p_1 y_4)))) (p_1 __11351_3))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.ABS_THM A hol.bool (__11351_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __11351_3) (hol.not (p_1 y_4)))) (hol.not (p_1 __11351_3)))) (__11351_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __11351_3) (hol.not (p_1 y_4)))) (p_1 __11351_3)) (__11351_3 : hol.term A => thm_416 A p_1 __11351_3 r_2).

(; Theorem: |- ((= \lambda x. (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x))) ;)

(; dict ;)

def thm_418 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.EQ_MP (hol.eq (hol.arr A hol.bool) (__11351_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __11351_3) (hol.not (p_1 y_4)))) (hol.not (p_1 __11351_3)))) (__11351_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __11351_3) (hol.not (p_1 y_4)))) (p_1 __11351_3))) (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3))) (thm_399 A p_1 r_2) (thm_417 A p_1 r_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x)))))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x)))) ;)

(; dict ;)

def thm_419 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3)) (thm_355 A) (thm_418 A p_1 r_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x)))))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x)))) ;)

(; dict ;)

def thm_420 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.TRANS hol.bool (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.not (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3))) (thm_396 A p_1 r_2) (thm_419 A p_1 r_2).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) Data.Bool.F)) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x)))) ;)

(; dict ;)

def thm_421 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) hol.false) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.TRANS hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) hol.false) (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3))) (thm_382 A p_1 r_2) (thm_420 A p_1 r_2).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.~ (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x)))) ;)

(; dict ;)

def thm_422 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) (hol.not (p_2 x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (p_2 x_4)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (p_2 x_1) => hol.TRANS hol.bool (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) (hol.not (p_2 x_1))) (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) hol.false) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (p_2 x_4))) (thm_381 A x_1 p_2 r_3 hyp_1) (thm_421 A p_2 r_3).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.~ (p x))))) (Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x))))) ;)

(; dict ;)

def thm_423 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) (hol.not (p_2 x_1)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (p_2 x_4))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (p_2 x_1) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) (hol.not (p_2 x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (p_2 x_4))) thm_48 (thm_422 A x_1 p_2 r_3 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x)))) ;)

(; dict ;)

def thm_424 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3))).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.~ (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x))))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x))))) ;)

(; dict ;)

def thm_425 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) (hol.not (p_2 x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (p_2 x_4)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (p_2 x_4))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (p_2 x_4))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (p_2 x_1) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) (hol.not (p_2 x_1)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (p_2 x_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (p_2 x_4))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (p_2 x_4))) (thm_423 A x_1 p_2 r_3 hyp_1) (thm_424 A p_2 r_3).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x))))) Data.Bool.T) ;)

(; dict ;)

def thm_426 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3)))) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => (t_1 : hol.term hol.bool => thm_135 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (p_1 x_3))).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.~ (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x))))) Data.Bool.T) ;)

(; dict ;)

def thm_427 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) (hol.not (p_2 x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (p_2 x_4)))) hol.true) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (p_2 x_1) => hol.TRANS hol.bool (hol.imp (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) (hol.not (p_2 x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (p_2 x_4)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (p_2 x_4))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (p_2 x_4)))) hol.true (thm_425 A x_1 p_2 r_3 hyp_1) (thm_426 A p_2 r_3).

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.~ (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x))))) ;)

(; dict ;)

def thm_428 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (hol.eq hol.bool hol.true (hol.imp (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) (hol.not (p_2 x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (p_2 x_4))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (p_2 x_1) => hol.SYM hol.bool (hol.imp (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) (hol.not (p_2 x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (p_2 x_4)))) hol.true (thm_427 A x_1 p_2 r_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.~ (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x)))) ;)

(; dict ;)

def thm_429 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (hol.imp (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) (hol.not (p_2 x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (p_2 x_4)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (p_2 x_1) => hol.EQ_MP hol.true (hol.imp (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) (hol.not (p_2 x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (p_2 x_4)))) (thm_428 A x_1 p_2 r_3 hyp_1) thm_7.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ (p x)) x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_430 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3))))) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_1 x_4)) x_3)) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3))) (thm_364 A p_1 r_2) (thm_347 A p_1).

(; Theorem: |- ((= (= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ (p x)) x))))) (= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))))) ;)

(; dict ;)

def thm_431 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_1 x_4)) x_3)))) (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3)))) thm_37 (thm_430 A p_1 r_2).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (\lambda x. (Data.Bool.~ (p x)) x))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_432 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) ((x_4 : hol.term A => hol.not (p_2 x_4)) x_1)) (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) (hol.not (p_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4))))) (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4))))) ((x_4 : hol.term A => hol.not (p_2 x_4)) x_1) (hol.not (p_2 x_1)) (thm_364 A p_2 r_3) (thm_332 A x_1 p_2).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (\lambda x. (Data.Bool.~ (p x)) x))) \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_433 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4)))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3)) (x_3 : hol.term A => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4)))) (hol.not (p_1 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4)))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3)) (x_3 : hol.term A => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4)))) (hol.not (p_1 x_3))) (x_3 : hol.term A => thm_432 A x_3 p_1 r_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (\lambda x. (Data.Bool.~ (p x)) x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_434 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4)))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4)))) (hol.not (p_1 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4)))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3)) (x_3 : hol.term A => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4)))) (hol.not (p_1 x_3))) (thm_280 A) (thm_433 A p_1 r_2).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ (p x)) x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (\lambda x. (Data.Bool.~ (p x)) x))))) ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.~ (p x)))))) ;)

(; dict ;)

def thm_435 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4)))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3)))) (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4)))) (hol.not (p_1 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_1 x_4)) x_3)))) (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3))))) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4)))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4)))) (hol.not (p_1 x_3)))) (thm_431 A p_1 r_2) (thm_434 A p_1 r_2).

(; Theorem: |- ((= ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))))) ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_436 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))).

(; Theorem: |- ((= ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))))) ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_437 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (thm_436 A q_1 p_2) (thm_436 A q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_438 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => thm_25 A p_1.

(; Theorem: |- ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ;)

(; dict ;)

def thm_439 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => thm_438 A p_2 q_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ (p x)) x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (\lambda x. (Data.Bool.~ (p x)) x)))) ;)

(; dict ;)

def thm_440 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4)))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (thm_437 A q_1 p_2) (thm_439 A q_1 p_2)) A q_1 p_2) A (x_3 : hol.term A => hol.not (p_1 x_3)) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.~ (p x))))) ;)

(; dict ;)

def thm_441 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4)))) (hol.not (p_1 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.EQ_MP (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4)))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3)))) (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4)))) (hol.not (p_1 x_3))))) (thm_435 A p_1 r_2) (thm_440 A p_1 r_2).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_442 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3)))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4)))) (hol.not (p_1 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3)))) => hol.EQ_MP (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_1 y_5)))) (hol.not (p_1 x_4)))) (hol.not (p_1 x_3)))) (thm_441 A p_1 r_2) (thm_353 A p_1 r_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x_1. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x_1)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x_1))))) (Data.Bool.~ (p x))) ;)

(; dict ;)

def thm_443 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) (hol.forall A (x_4 : hol.term A => hol.not (p_2 x_4)))) -> hol.proof (hol.imp (hol.forall A (x__1_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x__1_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x__1_4)))) (hol.not (p_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) (hol.forall A (x_4 : hol.term A => hol.not (p_2 x_4)))) => thm_442 A p_2 r_3 hyp_1 x_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (p x))) ;)

(; dict ;)

def thm_444 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (p_2 x_1) -> hyp_2 : hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) (hol.forall A (x_4 : hol.term A => hol.not (p_2 x_4)))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (p_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (p_2 x_1) => hyp_2 : hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (hol.not (p_2 y_5)))) (hol.not (p_2 x_4)))) (hol.forall A (x_4 : hol.term A => hol.not (p_2 x_4)))) => thm_429 A x_1 p_2 r_3 hyp_1 (thm_443 A x_1 p_2 r_3 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))) ;)

(; dict ;)

def thm_445 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hyp_2 : hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))) (hol.not (p_3 x_4)))) (hol.forall A (x_4 : hol.term A => hol.not (p_3 x_4)))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hyp_2 : hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))) (hol.not (p_3 x_4)))) (hol.forall A (x_4 : hol.term A => hol.not (p_3 x_4)))) => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))) (p_3 x_4))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))))) (thm_363 A p_3 r_2) (thm_444 A x_1 p_3 r_2 hyp_1 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))) ;)

(; dict ;)

def thm_446 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hyp_2 : hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))) (hol.not (p_3 x_4)))) (hol.forall A (x_4 : hol.term A => hol.not (p_3 x_4)))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hyp_2 : hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))) (hol.not (p_3 x_4)))) (hol.forall A (x_4 : hol.term A => hol.not (p_3 x_4)))) => hol.PROVE_HYP (p_3 x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))))) (thm_234 A x_1 p_3 hyp_1) (hyp_3 : hol.proof (p_3 x_1) => thm_445 A x_1 r_2 p_3 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> (p x)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))) ;)

(; dict ;)

def thm_447 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (hol.not (p_3 y_5)))) (hol.not (p_3 x_4)))) (hol.forall A (x_4 : hol.term A => hol.not (p_3 x_4)))) -> hol.proof (hol.imp (p_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (hol.not (p_3 y_5))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (hol.not (p_3 y_5)))) (hol.not (p_3 x_4)))) (hol.forall A (x_4 : hol.term A => hol.not (p_3 x_4)))) => hyp_2 : hol.proof (p_3 x_2) => thm_446 A x_2 r_1 p_3 hyp_2 hyp_1.

(; Theorem: |- (\lambda x. (p x) x) ;)

(; dict ;)

def thm_448 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) -> hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) => hyp_1.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_449 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) -> hol.proof (p_2 x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) => hol.EQ_MP ((x_3 : hol.term A => p_2 x_3) x_1) (p_2 x_1) (thm_235 A x_1 p_2) (thm_448 A x_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))) ;)

(; dict ;)

def thm_450 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => p_3 x_4) x_1) -> hyp_2 : hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))) (hol.not (p_3 x_4)))) (hol.forall A (x_4 : hol.term A => hol.not (p_3 x_4)))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => p_3 x_4) x_1) => hyp_2 : hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))) (hol.not (p_3 x_4)))) (hol.forall A (x_4 : hol.term A => hol.not (p_3 x_4)))) => thm_447 A r_2 x_1 p_3 hyp_2 (thm_449 A x_1 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. (p x) x)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))) ;)

(; dict ;)

def thm_451 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (hol.not (p_3 y_5)))) (hol.not (p_3 x_4)))) (hol.forall A (x_4 : hol.term A => hol.not (p_3 x_4)))) -> hol.proof (hol.imp ((x_4 : hol.term A => p_3 x_4) x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (hol.not (p_3 y_5))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (hol.not (p_3 y_5)))) (hol.not (p_3 x_4)))) (hol.forall A (x_4 : hol.term A => hol.not (p_3 x_4)))) => hyp_2 : hol.proof ((x_4 : hol.term A => p_3 x_4) x_2) => thm_450 A x_2 r_1 p_3 hyp_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (p x) x)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_452 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))) (hol.not (p_2 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3)))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => p_2 x_4) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_2 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (hol.not (p_2 y_5)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))) (hol.not (p_2 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3)))) => x_3 : hol.term A => thm_451 A r_1 x_3 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))) ;)

(; dict ;)

def thm_453 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))) (hol.not (p_2 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3)))) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))) (hol.not (p_2 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3)))) => thm_354 A r_1 p_2 (thm_452 A r_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))) ;)

(; dict ;)

def thm_454 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) -> hyp_2 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))) (hol.not (p_2 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3)))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) => hyp_2 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))) (hol.not (p_2 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3)))) => thm_453 A r_1 p_2 hyp_2 (thm_266 A p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))) ;)

(; dict ;)

def thm_455 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))) (hol.not (p_2 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3)))) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))) (hol.not (p_2 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3)))) => hol.PROVE_HYP (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))) (hol.not (p_2 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) (thm_353 A p_2 r_1 hyp_1) (hyp_2 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))) (hol.not (p_2 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_2 x_3)))) => hyp_3 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) => thm_454 A r_1 p_2 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))) (Data.Bool.~ (p x))))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_456 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.imp (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3)))) => thm_455 A r_2 p_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (\lambda x. (Data.Bool.~ (p x)) y)))) (\lambda x. (Data.Bool.~ (p x)) x)))) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ (p x)) x)))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_457 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.imp (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.EQ_MP (hol.imp (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))) (hol.not (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.not (p_1 x_3)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))))))) (hol.imp (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (hol.not (p_1 y_4)))))))) (thm_352 A p_1 r_2) (thm_456 A p_1 r_2).

(; Theorem: |- (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_458 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) -> hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (\lambda x. (Data.Bool.~ (p x)) y)))) (\lambda x. (Data.Bool.~ (p x)) x)))) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ (p x)) x))) ;)

(; dict ;)

def thm_459 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (p_3 y_5))) (p_3 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4)))) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) ((x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_1 x_4)) x_3))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (p_3 y_5))) (p_3 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4)))) => thm_458 A r_2 hyp_1 (x_3 : hol.term A => hol.not (p_1 x_3)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))) ;)

(; dict ;)

def thm_460 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (p_3 y_5))) (p_3 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4)))) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (p_3 y_5))) (p_3 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4)))) => thm_457 A p_2 r_1 (thm_459 A p_2 r_1 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_461 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) -> hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) => p_2 : hol.term (hol.arr A hol.bool) => thm_460 A r_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ;)

(; dict ;)

def thm_462 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.imp (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (thm_330 A r_1) (thm_461 A r_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (p x)) x))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_463 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2) (x_2 : hol.term A => hol.not (p_1 x_2)) (thm_355 A) (thm_333 A p_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_464 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_465 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (thm_464 A p_1) (thm_464 A p_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_466 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_467 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (thm_466 A p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_468 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_469 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) => hol.SYM hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (thm_468 A p_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_470 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) => thm_467 A p_1 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) => thm_469 A p_1 hyp_1).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) \lambda p. ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_471 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => thm_470 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))))) ;)

(; dict ;)

def thm_472 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (thm_45 A) (thm_471 A).

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_473 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))))) (thm_472 A) (thm_22 A).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_474 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_473 A p_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (p x)) x))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_475 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2)) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (thm_463 A p_1) ((A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (thm_465 A p_1) (thm_474 A p_1)) A p_1).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (p x)) x)))) (Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_476 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2))) (hol.imp (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (p_1 x_3)) x_2)) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) thm_48 (thm_475 A p_1).

(; Theorem: |- ((= Data.Bool./\) Data.Bool./\) ;)

(; dict ;)

def thm_477 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and hol.and) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and.

(; Theorem: |- ((= (Data.Bool./\ (\lambda x. (Data.Bool.~ (p x)) x))) (Data.Bool./\ (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_478 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and ((x_3 : hol.term A => hol.not (p_2 x_3)) x_1)) (hol.and (hol.not (p_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and ((x_3 : hol.term A => hol.not (p_2 x_3)) x_1) (hol.not (p_2 x_1)) thm_477 (thm_332 A x_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (\lambda x. (Data.Bool.~ (p x)) y))) (Data.Bool.~ (Data.Bool.~ (p y)))) ;)

(; dict ;)

def thm_479 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not ((x_3 : hol.term A => hol.not (p_2 x_3)) y_1)) (hol.not (hol.not (p_2 y_1)))) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool hol.not hol.not ((x_3 : hol.term A => hol.not (p_2 x_3)) y_1) (hol.not (p_2 y_1)) thm_365 (thm_337 A y_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ (p y)))) (p y)) ;)

(; dict ;)

def thm_480 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.not (p_2 y_1))) (p_2 y_1)) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_413 t_1) (p_2 y_1).

(; Theorem: |- ((= (Data.Bool.~ (\lambda x. (Data.Bool.~ (p x)) y))) (p y)) ;)

(; dict ;)

def thm_481 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not ((x_3 : hol.term A => hol.not (p_2 x_3)) y_1)) (p_2 y_1)) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.not ((x_3 : hol.term A => hol.not (p_2 x_3)) y_1)) (hol.not (hol.not (p_2 y_1))) (p_2 y_1) (thm_479 A y_1 p_2) (thm_480 A y_1 p_2).

(; Theorem: |- ((= ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (\lambda x. (Data.Bool.~ (p x)) y)))) ((Data.Bool.==> ((r y) x)) (p y))) ;)

(; dict ;)

def thm_482 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> y_3 : hol.term A -> r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (r_4 y_3 x_2) (hol.not ((x_5 : hol.term A => hol.not (p_1 x_5)) y_3))) (hol.imp (r_4 y_3 x_2) (p_1 y_3))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => y_3 : hol.term A => r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp (r_4 y_3 x_2)) (hol.imp (r_4 y_3 x_2)) (hol.not ((x_5 : hol.term A => hol.not (p_1 x_5)) y_3)) (p_1 y_3) (thm_331 A x_2 y_3 r_4) (thm_481 A y_3 p_1).

(; Theorem: |- ((= \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (\lambda x. (Data.Bool.~ (p x)) y)))) \lambda y. ((Data.Bool.==> ((r y) x)) (p y))) ;)

(; dict ;)

def thm_483 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.ABS_THM A hol.bool (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4)) (y_4 : hol.term A => thm_482 A p_1 x_2 y_4 r_3).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (\lambda x. (Data.Bool.~ (p x)) y))))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) ;)

(; dict ;)

def thm_484 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4)))) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not ((x_5 : hol.term A => hol.not (p_1 x_5)) y_4))) (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4)) (thm_280 A) (thm_483 A p_1 x_2 r_3).

(; Theorem: |- ((= ((Data.Bool./\ (\lambda x. (Data.Bool.~ (p x)) x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (\lambda x. (Data.Bool.~ (p x)) y)))))) ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))) ;)

(; dict ;)

def thm_485 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and ((x_4 : hol.term A => hol.not (p_3 x_4)) x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not ((x_5 : hol.term A => hol.not (p_3 x_5)) y_4))))) (hol.and (hol.not (p_3 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.and ((x_4 : hol.term A => hol.not (p_3 x_4)) x_2)) (hol.and (hol.not (p_3 x_2))) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (hol.not ((x_5 : hol.term A => hol.not (p_3 x_5)) y_4)))) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4))) (thm_478 A x_2 p_3) (thm_484 A p_3 x_2 r_1).

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.~ (p x)) x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (\lambda x. (Data.Bool.~ (p x)) y)))))) \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))) ;)

(; dict ;)

def thm_486 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not ((x_5 : hol.term A => hol.not (p_2 x_5)) y_4))))) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not ((x_5 : hol.term A => hol.not (p_2 x_5)) y_4))))) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))) (x_3 : hol.term A => thm_485 A r_1 x_3 p_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.~ (p x)) x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (\lambda x. (Data.Bool.~ (p x)) y))))))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))))) ;)

(; dict ;)

def thm_487 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not ((x_5 : hol.term A => hol.not (p_2 x_5)) y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not ((x_5 : hol.term A => hol.not (p_2 x_5)) y_4))))) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))) (thm_355 A) (thm_486 A r_1 p_2).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (p x)) x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.~ (p x)) x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (\lambda x. (Data.Bool.~ (p x)) y)))))))) ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) ;)

(; dict ;)

def thm_488 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not ((x_5 : hol.term A => hol.not (p_2 x_5)) y_4))))))) (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3))) (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not ((x_5 : hol.term A => hol.not (p_2 x_5)) y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) (thm_476 A p_2) (thm_487 A r_1 p_2).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool.==> (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (p x)) x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.~ (p x)) x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (\lambda x. (Data.Bool.~ (p x)) y))))))))) (Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))))))) ;)

(; dict ;)

def thm_489 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not ((x_5 : hol.term A => hol.not (p_2 x_5)) y_4)))))))) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not ((x_5 : hol.term A => hol.not (p_2 x_5)) y_4))))))) (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) thm_48 (thm_488 A r_1 p_2).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_490 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))) (hol.forall A (x_3 : hol.term A => p_1 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))) (hol.forall A (x_3 : hol.term A => p_1 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))) (hol.forall A (x_3 : hol.term A => p_1 x_3))).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (p x)) x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.~ (p x)) x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (\lambda x. (Data.Bool.~ (p x)) y)))))))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_491 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not ((x_5 : hol.term A => hol.not (p_2 x_5)) y_4))))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not ((x_5 : hol.term A => hol.not (p_2 x_5)) y_4)))))))) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))) (thm_489 A r_1 p_2) (thm_490 A p_2 r_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (p x)) x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.~ (p x)) x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (\lambda x. (Data.Bool.~ (p x)) y)))))))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_492 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not ((x_5 : hol.term A => hol.not (p_2 x_5)) y_4))))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not ((x_5 : hol.term A => hol.not (p_2 x_5)) y_4))))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (thm_491 A r_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (p x))) Data.Bool.F)) ((= (Data.Bool.! \lambda x. (p x))) Data.Bool.F)) ;)

(; dict ;)

def thm_493 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)) hol.false) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)) hol.false)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)) hol.false).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (p x))) Data.Bool.F)) ((= (Data.Bool.! \lambda x. (p x))) Data.Bool.F)) ;)

(; dict ;)

def thm_494 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)) hol.false) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)) hol.false)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)) hol.false) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)) hol.false) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)) hol.false) (thm_493 A p_1) (thm_493 A p_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) ((= (Data.Bool.! \lambda x. (p x))) Data.Bool.F)) ;)

(; dict ;)

def thm_495 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)) hol.false)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (P_1 : hol.term hol.bool => thm_66 P_1) (hol.forall A (x_2 : hol.term A => p_1 x_2)).

(; Theorem: |- (Data.Bool.~ (Data.Bool.! \lambda x. (p x))) ;)

(; dict ;)

def thm_496 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) -> hol.proof (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (p x))) Data.Bool.F) ;)

(; dict ;)

def thm_497 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)) hol.false) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) => thm_495 A p_1 (thm_496 A p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.~ Data.Bool.F)) ;)

(; dict ;)

def thm_498 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (hol.not hol.false)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)) hol.false thm_365 ((A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)) hol.false) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)) hol.false) (thm_494 A p_1) (thm_497 A p_1 hyp_1)) A p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) Data.Bool.T) ;)

(; dict ;)

def thm_499 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) => hol.TRANS hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (hol.not hol.false) hol.true (thm_498 A p_1 hyp_1) thm_21.

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) (Data.Bool.==> Data.Bool.T)) ;)

(; dict ;)

def thm_500 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.imp hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) hol.true thm_48 (thm_499 A p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))))) ;)

(; dict ;)

def thm_501 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) ((Data.Bool.==> Data.Bool.T) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) ;)

(; dict ;)

def thm_502 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp hol.true (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (hol.imp hol.true) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) (thm_500 A p_2 hyp_1) (thm_501 A r_1 p_2).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))))) ;)

(; dict ;)

def thm_503 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp hol.true (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_81 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))))) ;)

(; dict ;)

def thm_504 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) => hol.TRANS hol.bool (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp hol.true (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) (thm_502 A r_1 p_2 hyp_1) (thm_503 A r_1 p_2).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))))))) (Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) ;)

(; dict ;)

def thm_505 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) thm_48 (thm_504 A r_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x))))) (Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x))))) ;)

(; dict ;)

def thm_506 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3)))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL (hol.arr hol.bool hol.bool) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3)))).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) Data.Bool.F)) ;)

(; dict ;)

def thm_507 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => p_1 x_3))) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))) (hol.forall A (x_3 : hol.term A => p_1 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))) hol.false)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => p_1 x_3))) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3)))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3)))) (hol.forall A (x_3 : hol.term A => p_1 x_3)) hol.false (thm_506 A p_1 r_2) (thm_497 A p_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) Data.Bool.F)) (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x))))) ;)

(; dict ;)

def thm_508 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))) hol.false) (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => (t_1 : hol.term hol.bool => thm_145 t_1) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x))))) ;)

(; dict ;)

def thm_509 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => p_1 x_3))) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))) (hol.forall A (x_3 : hol.term A => p_1 x_3))) (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => p_1 x_3))) => hol.TRANS hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))) (hol.forall A (x_3 : hol.term A => p_1 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))) hol.false) (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3)))) (thm_507 A p_1 r_2 hyp_1) (thm_508 A p_1 r_2).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))))) (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))))) ;)

(; dict ;)

def thm_510 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))) (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3)))) (thm_505 A r_1 p_2 hyp_1) (thm_509 A p_2 r_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))))) (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_511 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))))) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) => hol.SYM hol.bool (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))))) (thm_510 A r_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) x)) (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x))))))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))))) (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))))) ;)

(; dict ;)

def thm_512 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.and (hol.not (p_2 x_4)) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (p_2 y_5)))) x_3) (hol.not (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (p_2 y_5))) (p_2 x_4)))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_229 A Q_1 P_2) A (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3)))) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) ;)

(; dict ;)

def thm_513 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.not (p_3 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4)))) -> hol.proof (hol.and (hol.not (p_3 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.not (p_3 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4)))) => hyp_1.

(; Theorem: |- (Data.Bool.~ (p x)) ;)

(; dict ;)

def thm_514 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.not (p_3 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4)))) -> hol.proof (hol.not (p_3 x_2)) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.not (p_3 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4)))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_160 q_1 p_2 hyp_1) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4))) (hol.not (p_3 x_2)) hyp_1.

(; Theorem: |- (Data.Bool.~ (p x)) ;)

(; dict ;)

def thm_515 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.not (p_3 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4)))) -> hol.proof (hol.not (p_3 x_2)) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.not (p_3 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4)))) => hol.PROVE_HYP (hol.and (hol.not (p_3 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4)))) (hol.not (p_3 x_2)) (thm_513 A r_1 x_2 p_3 hyp_1) (hyp_2 : hol.proof (hol.and (hol.not (p_3 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4)))) => thm_514 A r_1 x_2 p_3 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))) ;)

(; dict ;)

def thm_516 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.not (p_1 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4)))) -> hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.and (hol.not (p_1 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_103 p_1 q_2 hyp_1) (hol.not (p_1 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))) ;)

(; dict ;)

def thm_517 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.not (p_1 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4)))) -> hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.and (hol.not (p_1 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4)))) => hol.PROVE_HYP (hol.and (hol.not (p_1 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4)))) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) (thm_513 A r_3 x_2 p_1 hyp_1) (hyp_2 : hol.proof (hol.and (hol.not (p_1 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4)))) => thm_516 A p_1 x_2 r_3 hyp_2).

(; Theorem: |- (Data.Bool.~ (p x)) ;)

(; dict ;)

def thm_518 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (p_2 x_1)) -> hol.proof (hol.not (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (p_2 x_1)) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))) ;)

(; dict ;)

def thm_519 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) -> hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x))) ;)

(; dict ;)

def thm_520 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (p x))) Data.Bool.F)) (Data.Bool.~ (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_521 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (p_2 x_1)) hol.false) (hol.not (hol.not (p_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_145 t_1) (hol.not (p_2 x_1)).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ (p x)))) (p x)) ;)

(; dict ;)

def thm_522 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (hol.not (p_2 x_1))) (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_413 t_1) (p_2 x_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (p x))) Data.Bool.F)) (p x)) ;)

(; dict ;)

def thm_523 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (p_2 x_1)) hol.false) (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.imp (hol.not (p_2 x_1)) hol.false) (hol.not (hol.not (p_2 x_1))) (p_2 x_1) (thm_521 A x_1 p_2) (thm_522 A x_1 p_2).

(; Theorem: |- ((= (p x)) ((Data.Bool.==> (Data.Bool.~ (p x))) Data.Bool.F)) ;)

(; dict ;)

def thm_524 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_2 x_1) (hol.imp (hol.not (p_2 x_1)) hol.false)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.imp (hol.not (p_2 x_1)) hol.false) (p_2 x_1) (thm_523 A x_1 p_2).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x))) ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x))) ;)

(; dict ;)

def thm_525 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) (p_1 x_2)) (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) (p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL hol.bool (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) (p_1 x_2)).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x))) ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x))) ;)

(; dict ;)

def thm_526 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) (p_1 x_2)) (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) (p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.TRANS hol.bool (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) (p_1 x_2)) (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) (p_1 x_2)) (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) (p_1 x_2)) (thm_525 A p_1 x_2 r_3) (thm_525 A p_1 x_2 r_3).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)) ;)

(; dict ;)

def thm_527 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_1 y_5))) (p_1 x_4))) -> hol.proof (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) (p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_1 y_5))) (p_1 x_4))) => thm_520 A p_1 r_3 hyp_1 x_2.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_528 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (p_3 y_5))) (p_3 x_4))) -> hyp_2 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4))) -> hol.proof (p_3 x_2) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (p_3 y_5))) (p_3 x_4))) => hyp_2 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4))) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_1 y_5))) (p_1 x_4))) => hol.EQ_MP (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) (p_1 x_2)) (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) (p_1 x_2)) (thm_526 A p_1 x_2 r_3) (thm_527 A p_1 x_2 r_3 hyp_1)) A p_3 x_2 r_1 hyp_1 (thm_519 A p_3 x_2 r_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ (p x))) Data.Bool.F) ;)

(; dict ;)

def thm_529 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (p_3 y_5))) (p_3 x_4))) -> hyp_2 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4))) -> hol.proof (hol.imp (hol.not (p_3 x_2)) hol.false) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (p_3 y_5))) (p_3 x_4))) => hyp_2 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4))) => hol.EQ_MP (p_3 x_2) (hol.imp (hol.not (p_3 x_2)) hol.false) (thm_524 A x_2 p_3) (thm_528 A r_1 x_2 p_3 hyp_1 hyp_2).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_530 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5))) (p_2 x_4))) -> hyp_2 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (p_2 y_4))) -> hyp_3 : hol.proof (hol.not (p_2 x_1)) -> hol.proof hol.false :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5))) (p_2 x_4))) => hyp_2 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (p_2 y_4))) => hyp_3 : hol.proof (hol.not (p_2 x_1)) => thm_529 A r_3 x_1 p_2 hyp_1 hyp_2 (thm_518 A x_1 p_2 hyp_3).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_531 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5))) (p_2 x_4))) -> hyp_2 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (p_2 y_4))) -> hyp_3 : hol.proof (hol.not (p_2 x_1)) -> hol.proof hol.false :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5))) (p_2 x_4))) => hyp_2 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (p_2 y_4))) => hyp_3 : hol.proof (hol.not (p_2 x_1)) => hol.PROVE_HYP (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5))) (p_2 x_4))) hol.false (thm_520 A p_2 r_3 hyp_1) (hyp_4 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5))) (p_2 x_4))) => thm_530 A x_1 p_2 r_3 hyp_4 hyp_2 hyp_3).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) Data.Bool.F) ;)

(; dict ;)

def thm_532 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (p_2 y_4))) -> hyp_2 : hol.proof (hol.not (p_2 x_1)) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5))) (p_2 x_4))) hol.false) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (p_2 y_4))) => hyp_2 : hol.proof (hol.not (p_2 x_1)) => hyp_3 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5))) (p_2 x_4))) => thm_531 A x_1 p_2 r_3 hyp_3 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) ;)

(; dict ;)

def thm_533 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (p_2 y_4))) -> hyp_2 : hol.proof (hol.not (p_2 x_1)) -> hol.proof (hol.not (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5))) (p_2 x_4)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (p_2 y_4))) => hyp_2 : hol.proof (hol.not (p_2 x_1)) => hol.EQ_MP (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5))) (p_2 x_4))) hol.false) (hol.not (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5))) (p_2 x_4)))) (thm_508 A p_2 r_3) (thm_532 A x_1 p_2 r_3 hyp_1 hyp_2).

(; Theorem: |- (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) ;)

(; dict ;)

def thm_534 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (p_2 y_4))) -> hyp_2 : hol.proof (hol.not (p_2 x_1)) -> hol.proof (hol.not (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5))) (p_2 x_4)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (p_2 y_4))) => hyp_2 : hol.proof (hol.not (p_2 x_1)) => hol.PROVE_HYP (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (p_2 y_4))) (hol.not (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5))) (p_2 x_4)))) (thm_519 A p_2 x_1 r_3 hyp_1) (hyp_3 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (p_2 y_4))) => thm_533 A x_1 p_2 r_3 hyp_3 hyp_2).

(; Theorem: |- (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) ;)

(; dict ;)

def thm_535 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (p_2 y_4))) -> hyp_2 : hol.proof (hol.not (p_2 x_1)) -> hol.proof (hol.not (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5))) (p_2 x_4)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (p_2 y_4))) => hyp_2 : hol.proof (hol.not (p_2 x_1)) => hol.PROVE_HYP (hol.not (p_2 x_1)) (hol.not (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5))) (p_2 x_4)))) (thm_518 A x_1 p_2 hyp_2) (hyp_3 : hol.proof (hol.not (p_2 x_1)) => thm_534 A x_1 p_2 r_3 hyp_1 hyp_3).

(; Theorem: |- (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) ;)

(; dict ;)

def thm_536 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.not (p_2 x_1)) -> hyp_2 : hol.proof (hol.and (hol.not (p_2 x_1)) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (p_2 y_4)))) -> hol.proof (hol.not (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5))) (p_2 x_4)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.not (p_2 x_1)) => hyp_2 : hol.proof (hol.and (hol.not (p_2 x_1)) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (p_2 y_4)))) => hol.PROVE_HYP (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (p_2 y_4))) (hol.not (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5))) (p_2 x_4)))) (thm_517 A p_2 x_1 r_3 hyp_2) (hyp_3 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (p_2 y_4))) => thm_535 A x_1 p_2 r_3 hyp_3 hyp_1).

(; Theorem: |- (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) ;)

(; dict ;)

def thm_537 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.not (p_2 x_1)) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (p_2 y_4)))) -> hol.proof (hol.not (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5))) (p_2 x_4)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.and (hol.not (p_2 x_1)) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (p_2 y_4)))) => hol.PROVE_HYP (hol.not (p_2 x_1)) (hol.not (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5))) (p_2 x_4)))) (thm_515 A r_3 x_1 p_2 hyp_1) (hyp_2 : hol.proof (hol.not (p_2 x_1)) => thm_536 A x_1 p_2 r_3 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))) (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x))))) ;)

(; dict ;)

def thm_538 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.and (hol.not (p_3 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4)))) (hol.not (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (p_3 y_5))) (p_3 x_4))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.not (p_3 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4)))) => thm_537 A x_2 p_3 r_1 hyp_1.

(; Theorem: |- ((= (\lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) x)) ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))) ;)

(; dict ;)

def thm_539 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => hol.and (hol.not (p_3 x_4)) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (p_3 y_5)))) x_1) (hol.and (hol.not (p_3 x_1)) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_1) (p_3 y_4))))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_3 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (x_4 : hol.term A => hol.and (hol.not (p_3 x_4)) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (p_3 y_5)))) x_1.

(; Theorem: |- (\lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) x) ;)

(; dict ;)

def thm_540 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (hol.not (p_3 x_4)) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (p_3 y_5)))) x_1) -> hol.proof ((x_4 : hol.term A => hol.and (hol.not (p_3 x_4)) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (p_3 y_5)))) x_1) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (hol.not (p_3 x_4)) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (p_3 y_5)))) x_1) => hyp_1.

(; Theorem: |- ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) ;)

(; dict ;)

def thm_541 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (hol.not (p_3 x_4)) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (p_3 y_5)))) x_2) -> hol.proof (hol.and (hol.not (p_3 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (hol.not (p_3 x_4)) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (p_3 y_5)))) x_2) => hol.EQ_MP ((x_4 : hol.term A => hol.and (hol.not (p_3 x_4)) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (p_3 y_5)))) x_2) (hol.and (hol.not (p_3 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4)))) (thm_539 A x_2 r_1 p_3) (thm_540 A x_2 r_1 p_3 hyp_1).

(; Theorem: |- (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) ;)

(; dict ;)

def thm_542 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (hol.not (p_2 x_4)) (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5)))) x_1) -> hol.proof (hol.not (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5))) (p_2 x_4)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (hol.not (p_2 x_4)) (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_4) (p_2 y_5)))) x_1) => thm_538 A r_3 x_1 p_2 (thm_541 A r_3 x_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) x)) (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x))))) ;)

(; dict ;)

def thm_543 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp ((x_4 : hol.term A => hol.and (hol.not (p_3 x_4)) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (p_3 y_5)))) x_1) (hol.not (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (p_3 y_5))) (p_3 x_4))))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (hol.not (p_3 x_4)) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (p_3 y_5)))) x_1) => thm_542 A x_1 p_3 r_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) x)) (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))))) ;)

(; dict ;)

def thm_544 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.and (hol.not (p_2 x_4)) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (p_2 y_5)))) x_3) (hol.not (hol.forall A (x_4 : hol.term A => hol.imp (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (p_2 y_5))) (p_2 x_4)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => thm_543 A x_3 r_1 p_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))))) (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x))))) ;)

(; dict ;)

def thm_545 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => thm_512 A r_1 p_2 (thm_544 A r_1 p_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))) ;)

(; dict ;)

def thm_546 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) => hyp_1.

(; Theorem: |- (Data.Bool.~ (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) ;)

(; dict ;)

def thm_547 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_1 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))))) -> hol.proof (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_1 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))))) => thm_545 A r_2 p_1 (thm_546 A r_2 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_548 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) -> hol.proof (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) => hol.EQ_MP (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) (hol.not (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))))) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (thm_511 A r_1 p_2 hyp_1) (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) => thm_547 A p_2 r_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_549 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) => thm_548 A r_1 p_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (p x)) ;)

(; dict ;)

def thm_550 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => p_1 x_2)) -> hol.proof (hol.forall A (x_2 : hol.term A => p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => p_1 x_2)) => hyp_1.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_551 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) -> hol.proof (p_2 x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => thm_550 A p_2 hyp_1 x_1.

(; Theorem: |- ((= (p x)) Data.Bool.T) ;)

(; dict ;)

def thm_552 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool (p_2 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => hol.EQ_MP (p_2 x_1) (hol.eq hol.bool (p_2 x_1) hol.true) (thm_368 A x_1 p_2) (thm_551 A x_1 p_2 hyp_1).

(; Theorem: |- ((= \lambda x. (p x)) \lambda x. Data.Bool.T) ;)

(; dict ;)

def thm_553 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => p_1 x_2)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => p_1 x_2) (x_2 : hol.term A => hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => p_1 x_2)) => hol.ABS_THM A hol.bool (x_2 : hol.term A => p_1 x_2) (x_2 : hol.term A => hol.true) (x_2 : hol.term A => (A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => hol.EQ_MP (hol.eq hol.bool (p_2 x_1) hol.true) (hol.eq hol.bool (p_2 x_1) hol.true) (thm_366 A x_1 p_2) (thm_552 A x_1 p_2 hyp_1)) A x_2 p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_554 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => p_1 x_2)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.true))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => p_1 x_2)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => p_1 x_2) (x_2 : hol.term A => hol.true) (thm_280 A) (thm_553 A p_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_555 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_556 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (thm_555 A t_1) (thm_555 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_557 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_26 A t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_558 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (thm_556 A t_1) (thm_557 A t_1)) A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (p x))) Data.Bool.T) ;)

(; dict ;)

def thm_559 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => p_1 x_2)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => p_1 x_2)) => hol.TRANS hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.true)) hol.true (thm_554 A p_1 hyp_1) (thm_558 A).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.~ Data.Bool.T)) ;)

(; dict ;)

def thm_560 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => p_1 x_2)) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (hol.not hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => p_1 x_2)) => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)) hol.true thm_365 (thm_559 A p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) Data.Bool.F) ;)

(; dict ;)

def thm_561 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => p_1 x_2)) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) hol.false) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => p_1 x_2)) => hol.TRANS hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (hol.not hol.true) hol.false (thm_560 A p_1 hyp_1) thm_20.

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) (Data.Bool.==> Data.Bool.F)) ;)

(; dict ;)

def thm_562 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => p_1 x_2)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.imp hol.false)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => p_1 x_2)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) hol.false thm_48 (thm_561 A p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (p x))) (Data.Bool.~ Data.Bool.T)) ;)

(; dict ;)

def thm_563 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool (hol.not (p_2 x_1)) (hol.not hol.true)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => hol.APP_THM hol.bool hol.bool hol.not hol.not (p_2 x_1) hol.true thm_365 (thm_552 A x_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (p x))) Data.Bool.F) ;)

(; dict ;)

def thm_564 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool (hol.not (p_2 x_1)) hol.false) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => hol.TRANS hol.bool (hol.not (p_2 x_1)) (hol.not hol.true) hol.false (thm_563 A x_1 p_2 hyp_1) thm_20.

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.~ (p x)))) (Data.Bool./\ Data.Bool.F)) ;)

(; dict ;)

def thm_565 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.not (p_2 x_1))) (hol.and hol.false)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.not (p_2 x_1)) hol.false thm_477 (thm_564 A x_1 p_2 hyp_1).

(; Theorem: |- ((= (p y)) Data.Bool.T) ;)

(; dict ;)

def thm_566 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool (p_2 y_1) hol.true) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => (A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => thm_552 A x_1 p_2 hyp_1) A y_1 p_2 hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> ((r y) x)) (p y))) ((Data.Bool.==> ((r y) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_567 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> y_3 : hol.term A -> r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_1 x_5)) -> hol.proof (hol.eq hol.bool (hol.imp (r_4 y_3 x_2) (p_1 y_3)) (hol.imp (r_4 y_3 x_2) hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => y_3 : hol.term A => r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_1 x_5)) => hol.APP_THM hol.bool hol.bool (hol.imp (r_4 y_3 x_2)) (hol.imp (r_4 y_3 x_2)) (p_1 y_3) hol.true (thm_331 A x_2 y_3 r_4) (thm_566 A y_3 p_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((r y) x)) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_568 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (r_3 y_2 x_1) hol.true) hol.true) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => (t_1 : hol.term hol.bool => thm_116 t_1) (r_3 y_2 x_1).

(; Theorem: |- ((= ((Data.Bool.==> ((r y) x)) (p y))) Data.Bool.T) ;)

(; dict ;)

def thm_569 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> y_3 : hol.term A -> r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_1 x_5)) -> hol.proof (hol.eq hol.bool (hol.imp (r_4 y_3 x_2) (p_1 y_3)) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => y_3 : hol.term A => r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_1 x_5)) => hol.TRANS hol.bool (hol.imp (r_4 y_3 x_2) (p_1 y_3)) (hol.imp (r_4 y_3 x_2) hol.true) hol.true (thm_567 A p_1 x_2 y_3 r_4 hyp_1) (thm_568 A x_2 y_3 r_4).

(; Theorem: |- ((= \lambda y. ((Data.Bool.==> ((r y) x)) (p y))) \lambda y. Data.Bool.T) ;)

(; dict ;)

def thm_570 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4)) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4)) (y_4 : hol.term A => hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4)) => hol.ABS_THM A hol.bool (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4)) (y_4 : hol.term A => hol.true) (y_4 : hol.term A => thm_569 A p_1 x_2 y_4 r_3 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (Data.Bool.! \lambda y. Data.Bool.T)) ;)

(; dict ;)

def thm_571 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4)) -> hol.proof (hol.eq hol.bool (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) (hol.forall A (y_4 : hol.term A => hol.true))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4)) (y_4 : hol.term A => hol.true) (thm_280 A) (thm_570 A p_1 x_2 r_3 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda y. t)) t)) ((= (Data.Bool.! \lambda y. t)) t)) ;)

(; dict ;)

def thm_572 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda y. t)) t)) ;)

(; dict ;)

def thm_573 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1) (thm_555 A t_1) (thm_572 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda y. t)) t) ;)

(; dict ;)

def thm_574 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1) (thm_573 A t_1) (thm_557 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda y. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_575 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (y_1 : hol.term A => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_574 A t_1) A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) Data.Bool.T) ;)

(; dict ;)

def thm_576 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4)) -> hol.proof (hol.eq hol.bool (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4)) => hol.TRANS hol.bool (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) (hol.forall A (y_4 : hol.term A => hol.true)) hol.true (thm_571 A p_1 x_2 r_3 hyp_1) (thm_575 A).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))) ((Data.Bool./\ Data.Bool.F) Data.Bool.T)) ;)

(; dict ;)

def thm_577 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4)) -> hol.proof (hol.eq hol.bool (hol.and (hol.not (p_3 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4)))) (hol.and hol.false hol.true)) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4)) => hol.APP_THM hol.bool hol.bool (hol.and (hol.not (p_3 x_2))) (hol.and hol.false) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4))) hol.true (thm_565 A x_2 p_3 hyp_1) (thm_576 A p_3 x_2 r_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_578 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_579 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_578 t_1) (thm_578 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_580 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_581 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_580 thm_580.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) ;)

(; dict ;)

def thm_582 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_75 thm_581.

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_583 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_584 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_583 t_1) (thm_583 t_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_585 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_27 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_586 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_111 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_587 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_584 t_1) (thm_585 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => thm_586 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_588 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_589 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_588 t_1) (thm_588 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_590 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_28 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_591 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_111 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_592 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_589 t_1) (thm_590 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => thm_591 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_593 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => thm_29 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_594 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_111 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_595 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_578 t_1) (thm_593 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => thm_594 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_596 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_597 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_596 t_1) (thm_596 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_598 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => thm_30 t_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_599 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_111 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_600 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_597 t_1) (thm_598 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => thm_599 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_601 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_602 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_601 t_1) (thm_601 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) t)) t) ;)

(; dict ;)

def thm_603 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_31 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_604 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (thm_600 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_602 t_1) (thm_603 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_605 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (thm_595 t_1) (thm_604 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_606 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (thm_592 t_1) (thm_605 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_607 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (thm_587 t_1) (thm_606 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_608 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => thm_607 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_609 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_103 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_610 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) thm_582 thm_608 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => thm_609 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_611 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_103 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_612 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (thm_610 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) => thm_611 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_613 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) -> hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_160 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_614 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_612 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) => thm_613 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) Data.Bool.T)) Data.Bool.F) ;)

(; dict ;)

def thm_615 : hol.proof (hol.eq hol.bool (hol.and hol.false hol.true) hol.false) :=
  (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_579 t_1) (thm_614 t_1)) hol.true.

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))) Data.Bool.F) ;)

(; dict ;)

def thm_616 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4)) -> hol.proof (hol.eq hol.bool (hol.and (hol.not (p_3 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4)))) hol.false) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4)) => hol.TRANS hol.bool (hol.and (hol.not (p_3 x_2)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_2) (p_3 y_4)))) (hol.and hol.false hol.true) hol.false (thm_577 A r_1 x_2 p_3 hyp_1) thm_615.

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))) \lambda x. Data.Bool.F) ;)

(; dict ;)

def thm_617 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))) (x_3 : hol.term A => hol.false)) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))) (x_3 : hol.term A => hol.false) (x_3 : hol.term A => thm_616 A r_1 x_3 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))))) (Data.Bool.? \lambda x. Data.Bool.F)) ;)

(; dict ;)

def thm_618 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.false))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))) (x_3 : hol.term A => hol.false) (thm_355 A) (thm_617 A r_1 p_2 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. t)) t)) ((= (Data.Bool.? \lambda x. t)) t)) ;)

(; dict ;)

def thm_619 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. t)) t)) ((= (Data.Bool.? \lambda x. t)) t)) ;)

(; dict ;)

def thm_620 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) (thm_619 A t_1) (thm_619 A t_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. t)) t) ;)

(; dict ;)

def thm_621 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_32 A t_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_622 : A : hol.type -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => hol.false)) hol.false) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) (thm_620 A t_1) (thm_621 A t_1)) A t_1) A hol.false.

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))))) Data.Bool.F) ;)

(; dict ;)

def thm_623 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) hol.false) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => hol.TRANS hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.false)) hol.false (thm_618 A r_1 p_2 hyp_1) (thm_622 A).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) ((Data.Bool.==> Data.Bool.F) Data.Bool.F)) ;)

(; dict ;)

def thm_624 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp hol.false hol.false)) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (hol.imp hol.false) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))) hol.false (thm_562 A p_2 hyp_1) (thm_623 A r_1 p_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_625 : hol.proof (hol.eq hol.bool (hol.imp hol.false hol.false) hol.true) :=
  (t_1 : hol.term hol.bool => thm_119 t_1) hol.false.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) Data.Bool.T) ;)

(; dict ;)

def thm_626 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) hol.true) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => hol.TRANS hol.bool (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp hol.false hol.false) hol.true (thm_624 A r_1 p_2 hyp_1) thm_625.

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))))))) (Data.Bool.==> Data.Bool.T)) ;)

(; dict ;)

def thm_627 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))))) (hol.imp hol.true)) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) hol.true thm_48 (thm_626 A r_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))) (Data.Bool.==> Data.Bool.T)) ;)

(; dict ;)

def thm_628 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4)))) (hol.imp hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) hol.true thm_48 (thm_576 A p_1 x_2 r_3 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x))) ((Data.Bool.==> Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_629 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) (p_1 x_2)) (hol.imp hol.true hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4)) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4)))) (hol.imp hol.true) (p_1 x_2) hol.true (thm_628 A p_1 x_2 r_3 hyp_1) (thm_552 A x_2 p_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_630 : hol.proof (hol.eq hol.bool (hol.imp hol.true hol.true) hol.true) :=
  (t_1 : hol.term hol.bool => thm_81 t_1) hol.true.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x))) Data.Bool.T) ;)

(; dict ;)

def thm_631 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) (p_1 x_2)) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4)) => hol.TRANS hol.bool (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (p_1 y_4))) (p_1 x_2)) (hol.imp hol.true hol.true) hol.true (thm_629 A p_1 x_2 r_3 hyp_1) thm_630.

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x))) \lambda x. Data.Bool.T) ;)

(; dict ;)

def thm_632 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3)) (x_3 : hol.term A => hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3)) (x_3 : hol.term A => hol.true) (x_3 : hol.term A => thm_631 A p_1 x_3 r_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_633 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.true))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3)) (x_3 : hol.term A => hol.true) (thm_280 A) (thm_632 A p_1 r_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) Data.Bool.T) ;)

(; dict ;)

def thm_634 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) => hol.TRANS hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.true)) hol.true (thm_633 A p_1 r_2 hyp_1) (thm_558 A).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x))))) (Data.Bool.==> Data.Bool.T)) ;)

(; dict ;)

def thm_635 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3)))) (hol.imp hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))) hol.true thm_48 (thm_634 A p_1 r_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))) ((Data.Bool.==> Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_636 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))) (hol.forall A (x_3 : hol.term A => p_1 x_3))) (hol.imp hol.true hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3)))) (hol.imp hol.true) (hol.forall A (x_3 : hol.term A => p_1 x_3)) hol.true (thm_635 A p_1 r_2 hyp_1) (thm_559 A p_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))) Data.Bool.T) ;)

(; dict ;)

def thm_637 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))) (hol.forall A (x_3 : hol.term A => p_1 x_3))) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) => hol.TRANS hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))) (hol.forall A (x_3 : hol.term A => p_1 x_3))) (hol.imp hol.true hol.true) hol.true (thm_636 A p_1 r_2 hyp_1) thm_630.

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) ((Data.Bool.==> Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_638 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (hol.imp hol.true hol.true)) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))))))) (hol.imp hol.true) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))) hol.true (thm_627 A r_1 p_2 hyp_1) (thm_637 A p_2 r_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) Data.Bool.T) ;)

(; dict ;)

def thm_639 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) hol.true) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => hol.TRANS hol.bool (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (hol.imp hol.true hol.true) hol.true (thm_638 A r_1 p_2 hyp_1) thm_630.

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_640 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool hol.true (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => hol.SYM hol.bool (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) hol.true (thm_639 A r_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_641 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => hol.EQ_MP hol.true (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (thm_640 A r_1 p_2 hyp_1) thm_7.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_642 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => thm_641 A r_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_643 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.or (hol.forall A (x_2 : hol.term A => p_1 x_2)) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_17 (hol.forall A (x_2 : hol.term A => p_1 x_2)).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_644 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) -> hyp_2 : hol.proof (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) -> hyp_3 : hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3)))) -> hol.proof (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) => hyp_2 : hol.proof (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) => hyp_3 : hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3)))) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_312 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_645 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) -> hyp_2 : hol.proof (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) -> hol.proof (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) => hyp_2 : hol.proof (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) => hol.PROVE_HYP (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (thm_643 A p_2) (hyp_3 : hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3)))) => thm_644 A r_1 p_2 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_646 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) -> hol.proof (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) => hol.PROVE_HYP (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (thm_642 A r_1 p_2) (hyp_2 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) => thm_645 A r_1 p_2 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ (Data.Bool.~ (p x))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y))))))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_647 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.PROVE_HYP (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (thm_549 A r_1 p_2) (hyp_1 : hol.proof (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) => thm_646 A r_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (p x)) x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.~ (p x)) x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (\lambda x. (Data.Bool.~ (p x)) y)))))))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_648 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not ((x_5 : hol.term A => hol.not (p_2 x_5)) y_4))))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.imp (hol.imp (hol.not (hol.forall A (x_3 : hol.term A => p_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.not (p_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4)))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not ((x_5 : hol.term A => hol.not (p_2 x_5)) y_4))))))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (thm_492 A r_1 p_2) (thm_647 A r_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_649 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) -> hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (\lambda x. (Data.Bool.~ (p x)) x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.~ (p x)) x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (\lambda x. (Data.Bool.~ (p x)) y))))))) ;)

(; dict ;)

def thm_650 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (hol.not (p_3 y_5)))))))) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.not (p_2 x_4)) x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and ((x_4 : hol.term A => hol.not (p_2 x_4)) x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not ((x_5 : hol.term A => hol.not (p_2 x_5)) y_4))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (hol.not (p_3 y_5)))))))) => thm_649 A r_1 hyp_1 (x_3 : hol.term A => hol.not (p_2 x_3)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))) ;)

(; dict ;)

def thm_651 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))))))) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_3) (p_1 y_4))) (p_1 x_3))) (hol.forall A (x_3 : hol.term A => p_1 x_3))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))))))) => thm_648 A r_2 p_1 (thm_650 A r_2 p_1 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_652 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) -> hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) => p_2 : hol.term (hol.arr A hol.bool) => thm_651 A p_2 r_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_653 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.imp (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (thm_325 A r_1) (thm_652 A r_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_654 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.PROP_EXT (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) (hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))) => thm_462 A r_1 (thm_458 A r_1 hyp_1)) (hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) => thm_653 A r_1 (thm_649 A r_1 hyp_1)).

(; Theorem: |- ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_655 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.EQ_MP (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (thm_327 A r_1) (thm_654 A r_1).

(; Theorem: |- (Data.Bool.! \lambda r. ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))))) ;)

(; dict ;)

def thm_656 : A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => thm_655 A r_1.

(; Theorem: |- (Data.Bool.! \lambda r. ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))))) ;)

(; thm ;)

def thm_657 : A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))))) (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))))) (thm_324 A) (thm_656 A).
