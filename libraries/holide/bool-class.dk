
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME bool_2Dclass.

Data_2EBool_2E_3F : A : hol.type -> hol.term A.

(; axiom ;)

thm_0 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))).

(; axiom ;)

thm_1 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1)).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) q_2))).

(; axiom ;)

thm_3 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (P_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (P_1 x_2) (P_1 (hol.select A P_1))))).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_4 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_5 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) (thm_4 B A g_1 f_2) (thm_4 B A g_1 f_2).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((Data.Bool.==> (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)))) ;)

(; dict ;)

def thm_6 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda g. ((Data.Bool.==> (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_7 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.imp (hol.forall A (x_4 : hol.term A => hol.eq B (f_2 x_4) (g_3 x_4))) (hol.eq (hol.arr A B) f_2 g_3)))) -> hol.proof (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.imp (hol.forall A (x_4 : hol.term A => hol.eq B (f_2 x_4) (g_3 x_4))) (hol.eq (hol.arr A B) f_2 g_3)))) => thm_6 B A hyp_1 f_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)) ;)

(; dict ;)

def thm_8 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_3 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_4 : hol.term (hol.arr A B) => hol.imp (hol.forall A (x_5 : hol.term A => hol.eq B (f_3 x_5) (g_4 x_5))) (hol.eq (hol.arr A B) f_3 g_4)))) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_3 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_4 : hol.term (hol.arr A B) => hol.imp (hol.forall A (x_5 : hol.term A => hol.eq B (f_3 x_5) (g_4 x_5))) (hol.eq (hol.arr A B) f_3 g_4)))) => thm_7 B A f_2 hyp_1 g_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((= (f x)) (g x))) ;)

(; dict ;)

def thm_9 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) => hyp_1.

(; Theorem: |- ((= f) g) ;)

(; dict ;)

def thm_10 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) -> hyp_2 : hol.proof (hol.forall (hol.arr A B) (f_3 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_4 : hol.term (hol.arr A B) => hol.imp (hol.forall A (x_5 : hol.term A => hol.eq B (f_3 x_5) (g_4 x_5))) (hol.eq (hol.arr A B) f_3 g_4)))) -> hol.proof (hol.eq (hol.arr A B) f_2 g_1) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) => hyp_2 : hol.proof (hol.forall (hol.arr A B) (f_3 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_4 : hol.term (hol.arr A B) => hol.imp (hol.forall A (x_5 : hol.term A => hol.eq B (f_3 x_5) (g_4 x_5))) (hol.eq (hol.arr A B) f_3 g_4)))) => thm_8 B A g_1 f_2 hyp_2 (thm_9 B A g_1 f_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((Data.Bool.==> (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) ((= f) g)) ;)

(; dict ;)

def thm_11 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) -> hol.proof (hol.imp (hol.forall (hol.arr A B) (f_3 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_4 : hol.term (hol.arr A B) => hol.imp (hol.forall A (x_5 : hol.term A => hol.eq B (f_3 x_5) (g_4 x_5))) (hol.eq (hol.arr A B) f_3 g_4)))) (hol.eq (hol.arr A B) f_2 g_1)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) => hyp_2 : hol.proof (hol.forall (hol.arr A B) (f_3 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_4 : hol.term (hol.arr A B) => hol.imp (hol.forall A (x_5 : hol.term A => hol.eq B (f_3 x_5) (g_4 x_5))) (hol.eq (hol.arr A B) f_3 g_4)))) => thm_10 B A g_1 f_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((Data.Bool.==> (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((Data.Bool.==> (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) ;)

(; dict ;)

def thm_12 : B : hol.type -> A : hol.type -> hol.proof (hol.imp (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))))) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) => f_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr A B) => hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) => thm_11 B A g_2 f_1 hyp_2 (thm_6 B A hyp_1).

(; Theorem: |- (Data.Bool.! \lambda g. ((Data.Bool.==> (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_13 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => thm_12 B A (thm_0 B A) f_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)) ;)

(; dict ;)

def thm_14 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => thm_13 B A f_2 g_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)) ;)

(; dict ;)

def thm_15 : A : hol.type -> g_1 : hol.term (hol.arr (hol.arr A hol.bool) hol.bool) -> f_2 : hol.term (hol.arr (hol.arr A hol.bool) hol.bool) -> hol.proof (hol.imp (hol.forall (hol.arr A hol.bool) (x_3 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) f_2 g_1)) :=
  A : hol.type => g_1 : hol.term (hol.arr (hol.arr A hol.bool) hol.bool) => f_2 : hol.term (hol.arr (hol.arr A hol.bool) hol.bool) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) (thm_5 B A g_1 f_2) (thm_14 B A g_1 f_2)) hol.bool (hol.arr A hol.bool) g_1 f_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((= (Data.Bool.? x)) (\lambda p. (p (select p)) x)))) ((= Data.Bool.?) \lambda p. (p (select p)))) ;)

(; dict ;)

def thm_16 : A : hol.type -> hol.proof (hol.imp (hol.forall (hol.arr A hol.bool) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) x_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1)))) :=
  A : hol.type => (A : hol.type => g_1 : hol.term (hol.arr (hol.arr A hol.bool) hol.bool) => f_2 : hol.term (hol.arr (hol.arr A hol.bool) hol.bool) => thm_15 A g_1 f_2) A (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_17 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr A hol.bool)).

(; Theorem: |- ((= (= (Data.Bool.? x))) (= (Data.Bool.? x))) ;)

(; dict ;)

def thm_18 : A : hol.type -> x_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1))) :=
  A : hol.type => x_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1)).

(; Theorem: |- ((= (\lambda p. (p (select p)) x)) (x (select x))) ;)

(; dict ;)

def thm_19 : A : hol.type -> x_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) x_1) (x_1 (hol.select A x_1))) :=
  A : hol.type => x_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) x_1.

(; Theorem: |- ((= ((= (Data.Bool.? x)) (\lambda p. (p (select p)) x))) ((= (Data.Bool.? x)) (x (select x)))) ;)

(; dict ;)

def thm_20 : A : hol.type -> x_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) x_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) (x_1 (hol.select A x_1)))) :=
  A : hol.type => x_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1)) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) x_1) (x_1 (hol.select A x_1)) (thm_18 A x_1) (thm_19 A x_1).

(; Theorem: |- ((= \lambda x. ((= (Data.Bool.? x)) (\lambda p. (p (select p)) x))) \lambda x. ((= (Data.Bool.? x)) (x (select x)))) ;)

(; dict ;)

def thm_21 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) x_1)) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) (x_1 (hol.select A x_1)))) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) x_1)) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) (x_1 (hol.select A x_1))) (x_1 : hol.term (hol.arr A hol.bool) => thm_20 A x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (Data.Bool.? x)) (\lambda p. (p (select p)) x)))) (Data.Bool.! \lambda x. ((= (Data.Bool.? x)) (x (select x))))) ;)

(; dict ;)

def thm_22 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) x_1))) (hol.forall (hol.arr A hol.bool) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) (x_1 (hol.select A x_1))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) x_1)) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) (x_1 (hol.select A x_1))) (thm_17 A) (thm_21 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (Data.Bool.? x)) (x (select x))))) (Data.Bool.! \lambda x. ((= (Data.Bool.? x)) (\lambda p. (p (select p)) x)))) ;)

(; dict ;)

def thm_23 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) (x_1 (hol.select A x_1)))) (hol.forall (hol.arr A hol.bool) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) x_1)))) :=
  A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A hol.bool) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) x_1))) (hol.forall (hol.arr A hol.bool) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) (x_1 (hol.select A x_1)))) (thm_22 A).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.? p)) (p (select p)))) \lambda p. ((= (Data.Bool.? p)) (p (select p)))) ;)

(; dict ;)

def thm_24 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1)))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1))).

(; Theorem: |- ((= \lambda x. ((= (Data.Bool.? x)) (x (select x)))) \lambda x. ((= (Data.Bool.? x)) (x (select x)))) ;)

(; dict ;)

def thm_25 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) (x_1 (hol.select A x_1))) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) (x_1 (hol.select A x_1)))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) (x_1 (hol.select A x_1))).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.? p)) (p (select p)))) \lambda x. ((= (Data.Bool.? x)) (x (select x)))) ;)

(; dict ;)

def thm_26 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1))) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) (x_1 (hol.select A x_1)))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1))) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) (x_1 (hol.select A x_1))) (thm_24 A) (thm_25 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.? p)) (p (select p))))) (Data.Bool.! \lambda x. ((= (Data.Bool.? x)) (x (select x))))) ;)

(; dict ;)

def thm_27 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1)))) (hol.forall (hol.arr A hol.bool) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) (x_1 (hol.select A x_1))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1))) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) (x_1 (hol.select A x_1))) (thm_17 A) (thm_26 A).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_28 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool) (hol.eq hol.bool)) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool).

(; Theorem: |- ((= Data.Bool.?) Data.Bool.?) ;)

(; dict ;)

def thm_29 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)).

(; Theorem: |- ((= ((= t) \lambda x. (t x))) ((= t) \lambda x. (t x))) ;)

(; dict ;)

def thm_30 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)).

(; Theorem: |- ((= ((= t) \lambda x. (t x))) ((= t) \lambda x. (t x))) ;)

(; dict ;)

def thm_31 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (thm_30 B A t_1) (thm_30 B A t_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_32 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)).

(; Theorem: |- ((= t) \lambda x. (t x)) ;)

(; dict ;)

def thm_33 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) -> hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) => hyp_1.

(; Theorem: |- ((= \lambda x. (t x)) t) ;)

(; dict ;)

def thm_34 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) -> hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) => hol.SYM (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2) (thm_33 B A t_1 hyp_1).

(; Theorem: |- ((= \lambda x. (t x)) t) ;)

(; dict ;)

def thm_35 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) -> hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) => hyp_1.

(; Theorem: |- ((= t) \lambda x. (t x)) ;)

(; dict ;)

def thm_36 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) -> hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) => hol.SYM (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1 (thm_35 B A t_1 hyp_1).

(; Theorem: |- ((= ((= \lambda x. (t x)) t)) ((= t) \lambda x. (t x))) ;)

(; dict ;)

def thm_37 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hol.PROP_EXT (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (hyp_1 : hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) => thm_34 B A t_1 hyp_1) (hyp_1 : hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) => thm_36 B A t_1 hyp_1).

(; Theorem: |- ((= \lambda t. ((= \lambda x. (t x)) t)) \lambda t. ((= t) \lambda x. (t x))) ;)

(; dict ;)

def thm_38 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A B) hol.bool (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (t_1 : hol.term (hol.arr A B) => thm_37 B A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= \lambda x. (t x)) t))) (Data.Bool.! \lambda t. ((= t) \lambda x. (t x)))) ;)

(; dict ;)

def thm_39 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1)) (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (thm_32 B A) (thm_38 B A).

(; Theorem: |- (Data.Bool.! \lambda t. ((= t) \lambda x. (t x))) ;)

(; dict ;)

def thm_40 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1)) (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2))) (thm_39 B A) (thm_1 B A).

(; Theorem: |- ((= t) \lambda x. (t x)) ;)

(; dict ;)

def thm_41 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => thm_40 B A t_1.

(; Theorem: |- ((= t) \lambda x. (t x)) ;)

(; dict ;)

def thm_42 : A : hol.type -> t_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) t_1 (x_2 : hol.term A => t_1 x_2)) :=
  A : hol.type => t_1 : hol.term (hol.arr A hol.bool) => (B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (thm_31 B A t_1) (thm_41 B A t_1)) hol.bool A t_1.

(; Theorem: |- ((= p) \lambda x. (p x)) ;)

(; dict ;)

def thm_43 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) p_1 (x_2 : hol.term A => p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => t_1 : hol.term (hol.arr A hol.bool) => thm_42 A t_1) A p_1.

(; Theorem: |- ((= (Data.Bool.? p)) (Data.Bool.? \lambda x. (p x))) ;)

(; dict ;)

def thm_44 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) p_1 (x_2 : hol.term A => p_1 x_2) (thm_29 A) (thm_43 A p_1).

(; Theorem: |- ((= (= (Data.Bool.? p))) (= (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_45 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) thm_28 (thm_44 A p_1).

(; Theorem: |- ((= (p (select p))) (p (select p))) ;)

(; dict ;)

def thm_46 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_1 (hol.select A p_1)) (p_1 (hol.select A p_1))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (p_1 (hol.select A p_1)).

(; Theorem: |- ((= ((= (Data.Bool.? p)) (p (select p)))) ((= (Data.Bool.? \lambda x. (p x))) (p (select p)))) ;)

(; dict ;)

def thm_47 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (p_1 (hol.select A p_1)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (p_1 (hol.select A p_1)) (p_1 (hol.select A p_1)) (thm_45 A p_1) (thm_46 A p_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. (p x))) (p (select p)))) ((= (Data.Bool.? p)) (p (select p)))) ;)

(; dict ;)

def thm_48 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (p_1 (hol.select A p_1))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (p_1 (hol.select A p_1))) (thm_47 A p_1).

(; Theorem: |- ((= (\lambda x. (p x) (select p))) (p (select p))) ;)

(; dict ;)

def thm_49 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_2 : hol.term A => p_1 x_2) (hol.select A p_1)) (p_1 (hol.select A p_1))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (x_2 : hol.term A => p_1 x_2) (hol.select A p_1).

(; Theorem: |- ((= (p (select p))) (\lambda x. (p x) (select p))) ;)

(; dict ;)

def thm_50 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_1 (hol.select A p_1)) ((x_2 : hol.term A => p_1 x_2) (hol.select A p_1))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool ((x_2 : hol.term A => p_1 x_2) (hol.select A p_1)) (p_1 (hol.select A p_1)) (thm_49 A p_1).

(; Theorem: |- (p (select p)) ;)

(; dict ;)

def thm_51 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_1 (hol.select A p_1)) -> hol.proof (p_1 (hol.select A p_1)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_1 (hol.select A p_1)) => hyp_1.

(; Theorem: |- (\lambda x. (p x) (select p)) ;)

(; dict ;)

def thm_52 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_1 (hol.select A p_1)) -> hol.proof ((x_2 : hol.term A => p_1 x_2) (hol.select A p_1)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_1 (hol.select A p_1)) => hol.EQ_MP (p_1 (hol.select A p_1)) ((x_2 : hol.term A => p_1 x_2) (hol.select A p_1)) (thm_50 A p_1) (thm_51 A p_1 hyp_1).

(; Theorem: |- ((= (= (Data.Bool.? P))) (= (Data.Bool.? P))) ;)

(; dict ;)

def thm_53 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)).

(; Theorem: |- ((= (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_54 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1.

(; Theorem: |- ((= ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P))) ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_55 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_53 A P_1) (thm_54 A P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_56 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) P_1 P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) P_1.

(; Theorem: |- ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) ;)

(; dict ;)

def thm_57 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1 P_1 (thm_2 A) (thm_56 A P_1).

(; Theorem: |- ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_58 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (thm_55 A P_1) (thm_57 A P_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) (Data.Bool.? P)) ;)

(; dict ;)

def thm_59 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_58 A P_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q)) ;)

(; dict ;)

def thm_60 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (P x)) Q) ;)

(; dict ;)

def thm_61 : A : hol.type -> Q_1 : hol.term hol.bool -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) -> hol.proof (hol.imp (P_3 x_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) => thm_60 A Q_1 P_3 hyp_1 x_2.

(; Theorem: |- (P x) ;)

(; dict ;)

def thm_62 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (P_2 x_1) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_63 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (P_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) -> hol.proof Q_3 :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (P_2 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) => thm_61 A Q_3 x_1 P_2 hyp_2 (thm_62 A x_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_64 : A : hol.type -> x_1 : hol.term A -> Q_2 : hol.term hol.bool -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_3 x_1) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) Q_2) :=
  A : hol.type => x_1 : hol.term A => Q_2 : hol.term hol.bool => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_3 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) => thm_63 A x_1 P_3 Q_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda Q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q)) ;)

(; dict ;)

def thm_65 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => Q_3 : hol.term hol.bool => thm_64 A x_1 Q_3 P_2 hyp_1.

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_66 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hol.EQ_MP (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) (thm_59 A P_2) (thm_65 A x_1 P_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_67 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_2 : hol.term A => p_1 x_2) (hol.select A p_1)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_2 : hol.term A => p_1 x_2) (hol.select A p_1)) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_66 A x_1 P_2 hyp_1) A (hol.select A p_1) (x_2 : hol.term A => p_1 x_2) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_68 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_1 (hol.select A p_1)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_1 (hol.select A p_1)) => hol.PROVE_HYP ((x_2 : hol.term A => p_1 x_2) (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (thm_52 A p_1 hyp_1) (hyp_2 : hol.proof ((x_2 : hol.term A => p_1 x_2) (hol.select A p_1)) => thm_67 A p_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> (p (select p))) (Data.Bool.? \lambda x. (p x))) ;)

(; dict ;)

def thm_69 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_1 (hol.select A p_1)) => thm_68 A p_1 hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_70 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_71 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_72 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) => hol.EQ_MP p_1 q_2 (thm_70 q_2 p_1 hyp_2) (thm_71 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_73 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.imp p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_2 : hol.proof p_2 => thm_72 p_2 q_1 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= p) q)) ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_74 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 q_1) (hol.imp p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => thm_73 q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ((Data.Bool.==> (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_75 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_74 q_1 p_2) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_76 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => thm_75 A P_1 (thm_58 A P_1).

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_77 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)) ;)

(; dict ;)

def thm_78 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => thm_76 A P_1 (thm_77 A P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_79 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) => thm_78 A P_2 hyp_1 Q_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_80 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) Q_2)) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof Q_2 :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => Q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) Q_2)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => thm_79 A Q_2 P_1 hyp_2 (thm_60 A Q_2 P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? P)) Q) ;)

(; dict ;)

def thm_81 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) => thm_80 A P_2 Q_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) ((Data.Bool.==> (Data.Bool.? P)) Q)) ;)

(; dict ;)

def thm_82 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => thm_81 A Q_1 P_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (p x) x)) (p (select p))))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (p (select p)))) ;)

(; dict ;)

def thm_83 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_2 : hol.term A => hol.imp ((x_3 : hol.term A => p_1 x_3) x_2) (p_1 (hol.select A p_1)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (p_1 (hol.select A p_1)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_82 A Q_1 P_2) A (p_1 (hol.select A p_1)) (x_2 : hol.term A => p_1 x_2).

(; Theorem: |- ((= ((Data.Bool.==> (P x)) (P (select P)))) ((Data.Bool.==> (P x)) (P (select P)))) ;)

(; dict ;)

def thm_84 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (P_2 x_1) (P_2 (hol.select A P_2))) (hol.imp (P_2 x_1) (P_2 (hol.select A P_2)))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.imp (P_2 x_1) (P_2 (hol.select A P_2))).

(; Theorem: |- ((= ((Data.Bool.==> (P x)) (P (select P)))) ((Data.Bool.==> (P x)) (P (select P)))) ;)

(; dict ;)

def thm_85 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (P_2 x_1) (P_2 (hol.select A P_2))) (hol.imp (P_2 x_1) (P_2 (hol.select A P_2)))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.imp (P_2 x_1) (P_2 (hol.select A P_2))) (hol.imp (P_2 x_1) (P_2 (hol.select A P_2))) (hol.imp (P_2 x_1) (P_2 (hol.select A P_2))) (thm_84 A x_1 P_2) (thm_84 A x_1 P_2).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) (P (select P)))) ;)

(; dict ;)

def thm_86 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.imp (P_1 x_2) (P_1 (hol.select A P_1)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => thm_3 A P_1.

(; Theorem: |- ((Data.Bool.==> (P x)) (P (select P))) ;)

(; dict ;)

def thm_87 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (P_2 x_1) (P_2 (hol.select A P_2))) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => thm_86 A P_2 x_1.

(; Theorem: |- ((Data.Bool.==> (p x)) (p (select p))) ;)

(; dict ;)

def thm_88 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (p_2 x_1) (p_2 (hol.select A p_2))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.imp (P_2 x_1) (P_2 (hol.select A P_2))) (hol.imp (P_2 x_1) (P_2 (hol.select A P_2))) (thm_85 A x_1 P_2) (thm_87 A x_1 P_2)) A x_1 P_2) A x_1 p_2.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_89 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (p_2 x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hyp_1.

(; Theorem: |- (p (select p)) ;)

(; dict ;)

def thm_90 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (p_2 (hol.select A p_2)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => thm_88 A x_1 p_2 (thm_89 A x_1 p_2 hyp_1).

(; Theorem: |- ((= (\lambda x. (p x) x)) (p x)) ;)

(; dict ;)

def thm_91 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => p_2 x_3) x_1) (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (x_3 : hol.term A => p_2 x_3) x_1.

(; Theorem: |- (\lambda x. (p x) x) ;)

(; dict ;)

def thm_92 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) -> hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) => hyp_1.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_93 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) -> hol.proof (p_2 x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) => hol.EQ_MP ((x_3 : hol.term A => p_2 x_3) x_1) (p_2 x_1) (thm_91 A x_1 p_2) (thm_92 A x_1 p_2 hyp_1).

(; Theorem: |- (p (select p)) ;)

(; dict ;)

def thm_94 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) -> hol.proof (p_2 (hol.select A p_2)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) => (hyp_2 : hol.proof (p_2 x_1) => thm_90 A x_1 p_2 hyp_2) (thm_93 A x_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. (p x) x)) (p (select p))) ;)

(; dict ;)

def thm_95 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp ((x_3 : hol.term A => p_2 x_3) x_1) (p_2 (hol.select A p_2))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) => thm_94 A x_1 p_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (p x) x)) (p (select p)))) ;)

(; dict ;)

def thm_96 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.imp ((x_3 : hol.term A => p_1 x_3) x_2) (p_1 (hol.select A p_1)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => thm_95 A x_2 p_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (p (select p))) ;)

(; dict ;)

def thm_97 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (p_1 (hol.select A p_1))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_83 A p_1 (thm_96 A p_1).

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_98 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) => hyp_1.

(; Theorem: |- (p (select p)) ;)

(; dict ;)

def thm_99 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) -> hol.proof (p_1 (hol.select A p_1)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) => thm_97 A p_1 (thm_98 A p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (p x))) (p (select p))) ;)

(; dict ;)

def thm_100 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (p_1 (hol.select A p_1))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (p_1 (hol.select A p_1)) (hyp_1 : hol.proof (p_1 (hol.select A p_1)) => thm_69 A p_1 (thm_51 A p_1 hyp_1)) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) => (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) => thm_99 A p_1 hyp_2) (thm_98 A p_1 hyp_1)).

(; Theorem: |- ((= (Data.Bool.? p)) (p (select p))) ;)

(; dict ;)

def thm_101 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (p_1 (hol.select A p_1))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1))) (thm_48 A p_1) (thm_100 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.? p)) (p (select p)))) ;)

(; dict ;)

def thm_102 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_101 A p_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((= (Data.Bool.? x)) (x (select x)))) ;)

(; dict ;)

def thm_103 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) (x_1 (hol.select A x_1)))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1)))) (hol.forall (hol.arr A hol.bool) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) (x_1 (hol.select A x_1)))) (thm_27 A) (thm_102 A).

(; Theorem: |- (Data.Bool.! \lambda x. ((= (Data.Bool.? x)) (\lambda p. (p (select p)) x))) ;)

(; dict ;)

def thm_104 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) x_1))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) (x_1 (hol.select A x_1)))) (hol.forall (hol.arr A hol.bool) (x_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) x_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) x_1))) (thm_23 A) (thm_103 A).

(; Theorem: |- ((= Data.Bool.?) \lambda p. (p (select p))) ;)

(; dict ;)

def thm_105 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) :=
  A : hol.type => thm_16 A (thm_104 A).
