
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME bool_2Ddef_2Da8.

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))).

(; axiom ;)

thm_1 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))).

(; axiom ;)

thm_2 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))).

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_3 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))).

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_4 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (thm_3 B A g_1 f_2) (thm_3 B A g_1 f_2).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_5 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)).

(; Theorem: |- ((= ((= ((= x) y)) ((= y) x))) ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_6 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)).

(; Theorem: |- ((= ((= ((= x) y)) ((= y) x))) ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_7 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_6 A y_1 x_2) (thm_6 A y_1 x_2).

(; Theorem: |- (Data.Bool.! \lambda y. ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_8 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => thm_0 A x_1.

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_9 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => thm_8 A x_2 y_1.

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_10 : y_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_2 y_1) (hol.eq hol.bool y_1 x_2)) :=
  y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => (A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_7 A y_1 x_2) (thm_9 A y_1 x_2)) hol.bool y_1 x_2.

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_11 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => (y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => thm_10 y_1 x_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1).

(; Theorem: |- ((= \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_12 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM (hol.arr A B) hol.bool (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)) (g_2 : hol.term (hol.arr A B) => thm_11 B A g_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)))) ;)

(; dict ;)

def thm_13 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)) (thm_5 B A) (thm_12 B A f_1).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)))) ;)

(; dict ;)

def thm_14 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A B) hol.bool (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) (f_1 : hol.term (hol.arr A B) => thm_13 B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) ;)

(; dict ;)

def thm_15 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) (thm_5 B A) (thm_14 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))))) ;)

(; dict ;)

def thm_16 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (thm_15 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) ;)

(; dict ;)

def thm_17 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (thm_16 B A) (thm_1 B A).

(; Theorem: |- (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_18 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => thm_17 B A f_1.

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_19 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => thm_18 B A f_2 g_1.

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_20 : g_1 : hol.term (hol.arr hol.bool (hol.arr hol.bool hol.bool)) -> f_2 : hol.term (hol.arr hol.bool (hol.arr hol.bool hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) f_2 g_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.eq (hol.arr hol.bool hol.bool) (f_2 x_3) (g_1 x_3)))) :=
  g_1 : hol.term (hol.arr hol.bool (hol.arr hol.bool hol.bool)) => f_2 : hol.term (hol.arr hol.bool (hol.arr hol.bool hol.bool)) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (thm_4 B A g_1 f_2) (thm_19 B A g_1 f_2)) (hol.arr hol.bool hol.bool) hol.bool g_1 f_2.

(; Theorem: |- ((= ((= Data.Bool.==>) \lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p))) (Data.Bool.! \lambda x. ((= (Data.Bool.==> x)) (\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) x)))) ;)

(; dict ;)

def thm_21 : hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 q_2) p_1)) (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.eq (hol.arr hol.bool hol.bool) (hol.imp x_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) x_1)))) :=
  (g_1 : hol.term (hol.arr hol.bool (hol.arr hol.bool hol.bool)) => f_2 : hol.term (hol.arr hol.bool (hol.arr hol.bool hol.bool)) => thm_20 g_1 f_2) (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 q_2) p_1) hol.imp.

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_22 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool) (hol.forall hol.bool)) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool).

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_23 : g_1 : hol.term (hol.arr hol.bool hol.bool) -> f_2 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) f_2 g_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.eq hol.bool (f_2 x_3) (g_1 x_3)))) :=
  g_1 : hol.term (hol.arr hol.bool hol.bool) => f_2 : hol.term (hol.arr hol.bool hol.bool) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => thm_19 B A g_1 f_2) hol.bool hol.bool g_1 f_2.

(; Theorem: |- ((= ((= (Data.Bool.==> x)) (\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) x))) (Data.Bool.! \lambda x_1. ((= ((Data.Bool.==> x) x_1)) ((\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) x) x_1)))) ;)

(; dict ;)

def thm_24 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.imp x_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) x_1)) (hol.forall hol.bool (x__1_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x__1_2) ((p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 q_4) p_3) x_1 x__1_2)))) :=
  x_1 : hol.term hol.bool => (g_1 : hol.term (hol.arr hol.bool hol.bool) => f_2 : hol.term (hol.arr hol.bool hol.bool) => thm_23 g_1 f_2) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) x_1) (hol.imp x_1).

(; Theorem: |- ((= (= ((Data.Bool.==> x) x'))) (= ((Data.Bool.==> x) x'))) ;)

(; dict ;)

def thm_25 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp x_2 x_27_1)) (hol.eq hol.bool (hol.imp x_2 x_27_1))) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp x_2 x_27_1)).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_26 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) (hol.arr (hol.arr hol.bool hol.bool) hol.bool)) (hol.eq (hol.arr hol.bool hol.bool)) (hol.eq (hol.arr hol.bool hol.bool))) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) (hol.arr (hol.arr hol.bool hol.bool) hol.bool)) (hol.eq (hol.arr hol.bool hol.bool)).

(; Theorem: |- ((= (\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) p)) \lambda q. ((= ((Data.Bool./\ p) q)) p)) ;)

(; dict ;)

def thm_27 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) p_1) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 q_2) p_1)) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) p_1.

(; Theorem: |- ((= \lambda p. (\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) p)) \lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p)) ;)

(; dict ;)

def thm_28 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (p_1 : hol.term hol.bool => (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) p_1) (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 q_2) p_1)) :=
  hol.ABS_THM hol.bool (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) p_1) (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 q_2) p_1) (p_1 : hol.term hol.bool => thm_27 p_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_29 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool x_1 x_1) :=
  x_1 : hol.term hol.bool => hol.REFL hol.bool x_1.

(; Theorem: |- ((= (\lambda p. (\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) p) x)) (\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) x)) ;)

(; dict ;)

def thm_30 : x_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => (p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 q_4) p_3) p_2) x_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) x_1)) :=
  x_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => (p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 q_4) p_3) p_2) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) x_1 x_1 thm_28 (thm_29 x_1).

(; Theorem: |- ((= (= (\lambda p. (\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) p) x))) (= (\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) x))) ;)

(; dict ;)

def thm_31 : x_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => (p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 q_4) p_3) p_2) x_1)) (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) x_1))) :=
  x_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool)) (hol.eq (hol.arr hol.bool hol.bool)) ((p_2 : hol.term hol.bool => (p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 q_4) p_3) p_2) x_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) x_1) thm_26 (thm_30 x_1).

(; Theorem: |- ((= (\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) x)) \lambda q. ((= ((Data.Bool./\ x) q)) x)) ;)

(; dict ;)

def thm_32 : x_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) x_1) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and x_1 q_2) x_1)) :=
  x_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) x_1.

(; Theorem: |- ((= ((= (\lambda p. (\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) p) x)) (\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) x))) ((= (\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) x)) \lambda q. ((= ((Data.Bool./\ x) q)) x))) ;)

(; dict ;)

def thm_33 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => (p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 q_4) p_3) p_2) x_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) x_1)) (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) x_1) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and x_1 q_2) x_1))) :=
  x_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => (p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 q_4) p_3) p_2) x_1)) (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) x_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) x_1) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and x_1 q_2) x_1) (thm_31 x_1) (thm_32 x_1).

(; Theorem: |- ((= x') x') ;)

(; dict ;)

def thm_34 : x_27_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool x_27_1 x_27_1) :=
  x_27_1 : hol.term hol.bool => hol.REFL hol.bool x_27_1.

(; Theorem: |- ((= ((\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) x) x')) (\lambda q. ((= ((Data.Bool./\ x) q)) x) x')) ;)

(; dict ;)

def thm_35 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 q_4) p_3) x_2 x_27_1) ((q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_3) x_2) x_27_1)) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool ((p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 q_4) p_3) x_2) (q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_3) x_2) x_27_1 x_27_1 (hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) ((p_3 : hol.term hol.bool => (p_4 : hol.term hol.bool => q_5 : hol.term hol.bool => hol.eq hol.bool (hol.and p_4 q_5) p_4) p_3) x_2) ((p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 q_4) p_3) x_2)) (hol.eq (hol.arr hol.bool hol.bool) ((p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 q_4) p_3) x_2) (q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_3) x_2)) (thm_33 x_2) (thm_30 x_2)) (thm_34 x_27_1).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_36 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool) (hol.eq hol.bool)) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool).

(; Theorem: |- ((= (\lambda q. ((= ((Data.Bool./\ x) q)) x) q)) ((= ((Data.Bool./\ x) q)) x)) ;)

(; dict ;)

def thm_37 : q_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_3) x_2) q_1) (hol.eq hol.bool (hol.and x_2 q_1) x_2)) :=
  q_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_3) x_2) q_1.

(; Theorem: |- ((= \lambda q. (\lambda q. ((= ((Data.Bool./\ x) q)) x) q)) \lambda q. ((= ((Data.Bool./\ x) q)) x)) ;)

(; dict ;)

def thm_38 : x_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => (q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and x_1 q_3) x_1) q_2) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and x_1 q_2) x_1)) :=
  x_1 : hol.term hol.bool => hol.ABS_THM hol.bool hol.bool (q_2 : hol.term hol.bool => (q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and x_1 q_3) x_1) q_2) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and x_1 q_2) x_1) (q_2 : hol.term hol.bool => thm_37 q_2 x_1).

(; Theorem: |- ((= (\lambda q. (\lambda q. ((= ((Data.Bool./\ x) q)) x) q) x')) (\lambda q. ((= ((Data.Bool./\ x) q)) x) x')) ;)

(; dict ;)

def thm_39 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => (q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_4) x_2) q_3) x_27_1) ((q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_3) x_2) x_27_1)) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (q_3 : hol.term hol.bool => (q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_4) x_2) q_3) (q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_3) x_2) x_27_1 x_27_1 (thm_38 x_2) (thm_34 x_27_1).

(; Theorem: |- ((= (= (\lambda q. (\lambda q. ((= ((Data.Bool./\ x) q)) x) q) x'))) (= (\lambda q. ((= ((Data.Bool./\ x) q)) x) x'))) ;)

(; dict ;)

def thm_40 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((q_3 : hol.term hol.bool => (q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_4) x_2) q_3) x_27_1)) (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_3) x_2) x_27_1))) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((q_3 : hol.term hol.bool => (q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_4) x_2) q_3) x_27_1) ((q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_3) x_2) x_27_1) thm_36 (thm_39 x_27_1 x_2).

(; Theorem: |- ((= (\lambda q. ((= ((Data.Bool./\ x) q)) x) x')) ((= ((Data.Bool./\ x) x')) x)) ;)

(; dict ;)

def thm_41 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_3) x_2) x_27_1) (hol.eq hol.bool (hol.and x_2 x_27_1) x_2)) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_3) x_2) x_27_1.

(; Theorem: |- ((= ((= (\lambda q. (\lambda q. ((= ((Data.Bool./\ x) q)) x) q) x')) (\lambda q. ((= ((Data.Bool./\ x) q)) x) x'))) ((= (\lambda q. ((= ((Data.Bool./\ x) q)) x) x')) ((= ((Data.Bool./\ x) x')) x))) ;)

(; dict ;)

def thm_42 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((q_3 : hol.term hol.bool => (q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_4) x_2) q_3) x_27_1) ((q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_3) x_2) x_27_1)) (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_3) x_2) x_27_1) (hol.eq hol.bool (hol.and x_2 x_27_1) x_2))) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((q_3 : hol.term hol.bool => (q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_4) x_2) q_3) x_27_1)) (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_3) x_2) x_27_1)) ((q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_3) x_2) x_27_1) (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) (thm_40 x_27_1 x_2) (thm_41 x_27_1 x_2).

(; Theorem: |- ((= ((\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) x) x')) ((= ((Data.Bool./\ x) x')) x)) ;)

(; dict ;)

def thm_43 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 q_4) p_3) x_2 x_27_1) (hol.eq hol.bool (hol.and x_2 x_27_1) x_2)) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hol.TRANS hol.bool ((p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 q_4) p_3) x_2 x_27_1) ((q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_3) x_2) x_27_1) (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) (thm_35 x_27_1 x_2) (hol.EQ_MP (hol.eq hol.bool ((q_3 : hol.term hol.bool => (q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_4) x_2) q_3) x_27_1) ((q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_3) x_2) x_27_1)) (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and x_2 q_3) x_2) x_27_1) (hol.eq hol.bool (hol.and x_2 x_27_1) x_2)) (thm_42 x_27_1 x_2) (thm_39 x_27_1 x_2)).

(; Theorem: |- ((= ((= ((Data.Bool.==> x) x')) ((\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) x) x'))) ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x))) ;)

(; dict ;)

def thm_44 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp x_2 x_27_1) ((p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 q_4) p_3) x_2 x_27_1)) (hol.eq hol.bool (hol.imp x_2 x_27_1) (hol.eq hol.bool (hol.and x_2 x_27_1) x_2))) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp x_2 x_27_1)) (hol.eq hol.bool (hol.imp x_2 x_27_1)) ((p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 q_4) p_3) x_2 x_27_1) (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) (thm_25 x_27_1 x_2) (thm_43 x_27_1 x_2).

(; Theorem: |- ((= \lambda x'. ((= ((Data.Bool.==> x) x')) ((\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) x) x'))) \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x))) ;)

(; dict ;)

def thm_45 : x_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) ((p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 q_4) p_3) x_1 x_27_2)) (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))) :=
  x_1 : hol.term hol.bool => hol.ABS_THM hol.bool hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) ((p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 q_4) p_3) x_1 x_27_2)) (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)) (x_27_2 : hol.term hol.bool => thm_44 x_27_2 x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x'. ((= ((Data.Bool.==> x) x')) ((\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) x) x')))) (Data.Bool.! \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x)))) ;)

(; dict ;)

def thm_46 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) ((p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 q_4) p_3) x_1 x_27_2))) (hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)))) :=
  x_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) ((p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 q_4) p_3) x_1 x_27_2)) (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)) thm_22 (thm_45 x_1).

(; Theorem: |- ((= ((= (Data.Bool.==> x)) (\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) x))) (Data.Bool.! \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x)))) ;)

(; dict ;)

def thm_47 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.imp x_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) x_1)) (hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)))) :=
  x_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.imp x_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) x_1)) (hol.forall hol.bool (x__1_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x__1_2) ((p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 q_4) p_3) x_1 x__1_2))) (hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))) (thm_24 x_1) (thm_46 x_1).

(; Theorem: |- ((= \lambda x. ((= (Data.Bool.==> x)) (\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) x))) \lambda x. (Data.Bool.! \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x)))) ;)

(; dict ;)

def thm_48 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (x_1 : hol.term hol.bool => hol.eq (hol.arr hol.bool hol.bool) (hol.imp x_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) x_1)) (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)))) :=
  hol.ABS_THM hol.bool hol.bool (x_1 : hol.term hol.bool => hol.eq (hol.arr hol.bool hol.bool) (hol.imp x_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) x_1)) (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))) (x_1 : hol.term hol.bool => thm_47 x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (Data.Bool.==> x)) (\lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p) x)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x))))) ;)

(; dict ;)

def thm_49 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.eq (hol.arr hol.bool hol.bool) (hol.imp x_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) x_1))) (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (x_1 : hol.term hol.bool => hol.eq (hol.arr hol.bool hol.bool) (hol.imp x_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) x_1)) (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))) thm_22 thm_48.

(; Theorem: |- ((= ((= Data.Bool.==>) \lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x))))) ;)

(; dict ;)

def thm_50 : hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 q_2) p_1)) (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))))) :=
  hol.TRANS hol.bool (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 q_2) p_1)) (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.eq (hol.arr hol.bool hol.bool) (hol.imp x_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 q_3) p_2) x_1))) (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)))) thm_21 thm_49.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x))))) ((= Data.Bool.==>) \lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p))) ;)

(; dict ;)

def thm_51 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)))) (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 q_2) p_1))) :=
  hol.SYM hol.bool (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 q_2) p_1)) (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)))) thm_50.

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x)))) \lambda x. (Data.Bool.! \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x)))) ;)

(; dict ;)

def thm_52 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))) (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x)))) \lambda x. (Data.Bool.! \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x)))) ;)

(; dict ;)

def thm_53 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))) (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))) (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))) (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))) thm_52 thm_52.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x))))) ;)

(; dict ;)

def thm_54 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)))) (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))) (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))) thm_22 thm_53.

(; Theorem: |- ((= \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x))) \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x))) ;)

(; dict ;)

def thm_55 : x_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)) (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))) :=
  x_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)).

(; Theorem: |- ((= \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x))) \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x))) ;)

(; dict ;)

def thm_56 : x_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)) (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))) :=
  x_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)) (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)) (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)) (thm_55 x_1) (thm_55 x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x)))) (Data.Bool.! \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x)))) ;)

(; dict ;)

def thm_57 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))) (hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)))) :=
  x_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)) (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)) thm_22 (thm_56 x_1).

(; Theorem: |- x ;)

(; dict ;)

def thm_58 : x_1 : hol.term hol.bool -> hyp_1 : hol.proof x_1 -> hol.proof x_1 :=
  x_1 : hol.term hol.bool => hyp_1 : hol.proof x_1 => hyp_1.

(; Theorem: |- ((Data.Bool.==> x) ((Data.Bool./\ x) x')) ;)

(; dict ;)

def thm_59 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp x_2 (hol.and x_2 x_27_1)) -> hol.proof (hol.imp x_2 (hol.and x_2 x_27_1)) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp x_2 (hol.and x_2 x_27_1)) => hyp_1.

(; Theorem: |- ((Data.Bool./\ x) x') ;)

(; dict ;)

def thm_60 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof x_2 -> hyp_2 : hol.proof (hol.imp x_2 (hol.and x_2 x_27_1)) -> hol.proof (hol.and x_2 x_27_1) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof x_2 => hyp_2 : hol.proof (hol.imp x_2 (hol.and x_2 x_27_1)) => thm_59 x_27_1 x_2 hyp_2 (thm_58 x_2 hyp_1).

(; Theorem: |- ((= (= ((Data.Bool./\ p) q))) (= ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_61 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_62 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q))) ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_63 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_61 q_1 p_2) (thm_62 q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool./\ p))) (= (Data.Bool./\ p))) ;)

(; dict ;)

def thm_64 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_65 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1.

(; Theorem: |- ((= ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p))) ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_66 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)) (thm_64 p_1) (thm_65 p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_67 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 p_1) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool p_1.

(; Theorem: |- ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) ;)

(; dict ;)

def thm_68 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1 p_1 thm_2 (thm_67 p_1).

(; Theorem: |- ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_69 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) (thm_66 p_1) (thm_68 p_1).

(; Theorem: |- ((= q) q) ;)

(; dict ;)

def thm_70 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_1 q_1) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) ;)

(; dict ;)

def thm_71 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1 q_1 (thm_69 p_2) (thm_70 q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_72 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) (thm_63 q_1 p_2) (thm_71 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_73 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_74 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hol.EQ_MP (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_72 q_1 p_2) (thm_73 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) p))) p) ;)

(; dict ;)

def thm_75 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 p_2)) p_2) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_74 q_1 p_2 hyp_1 p_2.

(; Theorem: |- p ;)

(; dict ;)

def thm_76 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_77 : q_1 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof q_1 :=
  q_1 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_78 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.PROP_EXT p_2 q_1 (hyp_3 : hol.proof q_1 => thm_76 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_77 q_1 hyp_2).

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_79 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.SYM hol.bool p_1 q_2 (thm_78 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_80 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP q_1 p_2 (thm_79 p_2 q_1 hyp_1 hyp_2) (thm_77 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_81 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_80 q_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_82 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_81 p_2 q_1 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_83 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_75 q_1 p_2 hyp_1 (thm_82 q_1 p_2).

(; Theorem: |- x ;)

(; dict ;)

def thm_84 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and x_2 x_27_1) -> hol.proof x_2 :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and x_2 x_27_1) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_83 q_1 p_2 hyp_1) x_27_1 x_2 hyp_1.

(; Theorem: |- x ;)

(; dict ;)

def thm_85 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof x_2 -> hyp_2 : hol.proof (hol.imp x_2 (hol.and x_2 x_27_1)) -> hol.proof x_2 :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof x_2 => hyp_2 : hol.proof (hol.imp x_2 (hol.and x_2 x_27_1)) => hol.PROVE_HYP (hol.and x_2 x_27_1) x_2 (thm_60 x_27_1 x_2 hyp_1 hyp_2) (hyp_3 : hol.proof (hol.and x_2 x_27_1) => thm_84 x_27_1 x_2 hyp_3).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) q))) q) ;)

(; dict ;)

def thm_86 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 q_1)) q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_74 q_1 p_2 hyp_1 q_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_87 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.EQ_MP p_1 q_2 (thm_78 q_2 p_1 hyp_1 hyp_2) (thm_76 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) q) ;)

(; dict ;)

def thm_88 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 q_2) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_87 p_1 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) q)) ;)

(; dict ;)

def thm_89 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_88 p_2 q_1 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_90 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_86 q_2 p_1 hyp_1 (thm_89 q_2 p_1).

(; Theorem: |- x' ;)

(; dict ;)

def thm_91 : x_1 : hol.term hol.bool -> x_27_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and x_1 x_27_2) -> hol.proof x_27_2 :=
  x_1 : hol.term hol.bool => x_27_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and x_1 x_27_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_90 p_1 q_2 hyp_1) x_1 x_27_2 hyp_1.

(; Theorem: |- x' ;)

(; dict ;)

def thm_92 : x_1 : hol.term hol.bool -> x_27_2 : hol.term hol.bool -> hyp_1 : hol.proof x_1 -> hyp_2 : hol.proof (hol.imp x_1 (hol.and x_1 x_27_2)) -> hol.proof x_27_2 :=
  x_1 : hol.term hol.bool => x_27_2 : hol.term hol.bool => hyp_1 : hol.proof x_1 => hyp_2 : hol.proof (hol.imp x_1 (hol.and x_1 x_27_2)) => hol.PROVE_HYP (hol.and x_1 x_27_2) x_27_2 (thm_60 x_27_2 x_1 hyp_1 hyp_2) (hyp_3 : hol.proof (hol.and x_1 x_27_2) => thm_91 x_1 x_27_2 hyp_3).

(; Theorem: |- x' ;)

(; dict ;)

def thm_93 : x_1 : hol.term hol.bool -> x_27_2 : hol.term hol.bool -> hyp_1 : hol.proof x_1 -> hyp_2 : hol.proof (hol.imp x_1 (hol.and x_1 x_27_2)) -> hol.proof x_27_2 :=
  x_1 : hol.term hol.bool => x_27_2 : hol.term hol.bool => hyp_1 : hol.proof x_1 => hyp_2 : hol.proof (hol.imp x_1 (hol.and x_1 x_27_2)) => hol.PROVE_HYP x_1 x_27_2 (thm_85 x_27_2 x_1 hyp_1 hyp_2) (hyp_3 : hol.proof x_1 => thm_92 x_1 x_27_2 hyp_3 hyp_2).

(; Theorem: |- x' ;)

(; dict ;)

def thm_94 : x_1 : hol.term hol.bool -> x_27_2 : hol.term hol.bool -> hyp_1 : hol.proof x_1 -> hyp_2 : hol.proof (hol.imp x_1 (hol.and x_1 x_27_2)) -> hol.proof x_27_2 :=
  x_1 : hol.term hol.bool => x_27_2 : hol.term hol.bool => hyp_1 : hol.proof x_1 => hyp_2 : hol.proof (hol.imp x_1 (hol.and x_1 x_27_2)) => hol.PROVE_HYP x_1 x_27_2 (thm_58 x_1 hyp_1) (hyp_3 : hol.proof x_1 => thm_93 x_1 x_27_2 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool./\ x) x')) x)) x') ;)

(; dict ;)

def thm_95 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof x_2 -> hyp_2 : hol.proof (hol.imp x_2 (hol.and x_2 x_27_1)) -> hol.proof (hol.imp (hol.imp (hol.and x_2 x_27_1) x_2) x_27_1) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof x_2 => hyp_2 : hol.proof (hol.imp x_2 (hol.and x_2 x_27_1)) => hyp_3 : hol.proof (hol.imp (hol.and x_2 x_27_1) x_2) => thm_94 x_2 x_27_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> x) ((Data.Bool./\ x) x'))) ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool./\ x) x')) x)) x')) ;)

(; dict ;)

def thm_96 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof x_2 -> hol.proof (hol.imp (hol.imp x_2 (hol.and x_2 x_27_1)) (hol.imp (hol.imp (hol.and x_2 x_27_1) x_2) x_27_1)) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof x_2 => hyp_2 : hol.proof (hol.imp x_2 (hol.and x_2 x_27_1)) => thm_95 x_27_1 x_2 hyp_1 hyp_2.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_97 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_98 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) => hol.EQ_MP p_1 q_2 (thm_97 q_2 p_1 hyp_2) (thm_76 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_99 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.imp p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_2 : hol.proof p_2 => thm_98 p_2 q_1 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= p) q)) ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_100 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 q_1) (hol.imp p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => thm_99 q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= ((Data.Bool./\ x) x')) x)) ((Data.Bool.==> ((Data.Bool./\ x) x')) x)) ;)

(; dict ;)

def thm_101 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) (hol.imp (hol.and x_2 x_27_1) x_2)) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_100 q_1 p_2) x_2 (hol.and x_2 x_27_1).

(; Theorem: |- ((= ((Data.Bool./\ x) x')) x) ;)

(; dict ;)

def thm_102 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) -> hol.proof (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) => hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ x) x')) x) ;)

(; dict ;)

def thm_103 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) -> hol.proof (hol.imp (hol.and x_2 x_27_1) x_2) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) => thm_101 x_27_1 x_2 (thm_102 x_27_1 x_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_104 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_72 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) x)) ;)

(; dict ;)

def thm_105 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) -> hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) x) ;)

(; dict ;)

def thm_106 : p_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) -> hol.proof (hol.imp q_3 x_2) :=
  p_1 : hol.term hol.bool => x_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) => thm_105 x_2 q_3 p_1 hyp_2 (thm_76 p_1 hyp_1).

(; Theorem: |- x ;)

(; dict ;)

def thm_107 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) -> hol.proof x_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) => thm_106 p_2 x_3 q_1 hyp_1 hyp_3 (thm_77 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x) ;)

(; dict ;)

def thm_108 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.imp (hol.imp p_3 (hol.imp q_2 x_1)) x_1) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hyp_3 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => thm_107 q_2 p_3 x_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_109 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => x_3 : hol.term hol.bool => thm_108 x_3 q_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_110 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1) (thm_104 q_1 p_2) (thm_109 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= q) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_111 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool q_2 (hol.and p_1 q_2)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hol.PROP_EXT q_2 (hol.and p_1 q_2) (hyp_2 : hol.proof (hol.and p_1 q_2) => thm_90 p_1 q_2 hyp_2) (hyp_2 : hol.proof q_2 => thm_110 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool.==> x) ((Data.Bool./\ x) x'))) ((Data.Bool./\ ((Data.Bool.==> ((Data.Bool./\ x) x')) x)) ((Data.Bool.==> x) ((Data.Bool./\ x) x')))) ;)

(; dict ;)

def thm_112 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.and x_2 x_27_1) x_2) -> hol.proof (hol.eq hol.bool (hol.imp x_2 (hol.and x_2 x_27_1)) (hol.and (hol.imp (hol.and x_2 x_27_1) x_2) (hol.imp x_2 (hol.and x_2 x_27_1)))) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.and x_2 x_27_1) x_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_111 p_1 q_2 hyp_1) (hol.imp (hol.and x_2 x_27_1) x_2) (hol.imp x_2 (hol.and x_2 x_27_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> x) ((Data.Bool./\ x) x'))) ((Data.Bool./\ ((Data.Bool.==> ((Data.Bool./\ x) x')) x)) ((Data.Bool.==> x) ((Data.Bool./\ x) x')))) ;)

(; dict ;)

def thm_113 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) -> hol.proof (hol.eq hol.bool (hol.imp x_2 (hol.and x_2 x_27_1)) (hol.and (hol.imp (hol.and x_2 x_27_1) x_2) (hol.imp x_2 (hol.and x_2 x_27_1)))) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) => hol.PROVE_HYP (hol.imp (hol.and x_2 x_27_1) x_2) (hol.eq hol.bool (hol.imp x_2 (hol.and x_2 x_27_1)) (hol.and (hol.imp (hol.and x_2 x_27_1) x_2) (hol.imp x_2 (hol.and x_2 x_27_1)))) (thm_103 x_27_1 x_2 hyp_1) (hyp_2 : hol.proof (hol.imp (hol.and x_2 x_27_1) x_2) => thm_112 x_27_1 x_2 hyp_2).

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_114 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 q_2) -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 q_2) => hol.SYM hol.bool p_1 q_2 (thm_97 q_2 p_1 hyp_1).

(; Theorem: |- p ;)

(; dict ;)

def thm_115 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hyp_2 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_2 : hol.proof (hol.eq hol.bool p_2 q_1) => hol.EQ_MP q_1 p_2 (thm_114 p_2 q_1 hyp_2) (thm_77 q_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_116 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 q_2) -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 q_2) => hyp_2 : hol.proof q_2 => thm_115 q_2 p_1 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= p) q)) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_117 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 q_1) (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => thm_116 p_2 q_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= ((Data.Bool./\ x) x')) x)) ((Data.Bool.==> x) ((Data.Bool./\ x) x'))) ;)

(; dict ;)

def thm_118 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) (hol.imp x_2 (hol.and x_2 x_27_1))) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_117 q_1 p_2) x_2 (hol.and x_2 x_27_1).

(; Theorem: |- ((Data.Bool.==> x) ((Data.Bool./\ x) x')) ;)

(; dict ;)

def thm_119 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) -> hol.proof (hol.imp x_2 (hol.and x_2 x_27_1)) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) => thm_118 x_27_1 x_2 (thm_102 x_27_1 x_2 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.==> ((Data.Bool./\ x) x')) x)) ((Data.Bool.==> x) ((Data.Bool./\ x) x'))) ;)

(; dict ;)

def thm_120 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) -> hol.proof (hol.and (hol.imp (hol.and x_2 x_27_1) x_2) (hol.imp x_2 (hol.and x_2 x_27_1))) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) => hol.EQ_MP (hol.imp x_2 (hol.and x_2 x_27_1)) (hol.and (hol.imp (hol.and x_2 x_27_1) x_2) (hol.imp x_2 (hol.and x_2 x_27_1))) (thm_113 x_27_1 x_2 hyp_1) (thm_119 x_27_1 x_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> x) ((Data.Bool./\ x) x')) ;)

(; dict ;)

def thm_121 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp (hol.and x_2 x_27_1) x_2) (hol.imp x_2 (hol.and x_2 x_27_1))) -> hol.proof (hol.imp x_2 (hol.and x_2 x_27_1)) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp (hol.and x_2 x_27_1) x_2) (hol.imp x_2 (hol.and x_2 x_27_1))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_90 p_1 q_2 hyp_1) (hol.imp (hol.and x_2 x_27_1) x_2) (hol.imp x_2 (hol.and x_2 x_27_1)) hyp_1.

(; Theorem: |- ((Data.Bool.==> x) ((Data.Bool./\ x) x')) ;)

(; dict ;)

def thm_122 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) -> hol.proof (hol.imp x_2 (hol.and x_2 x_27_1)) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) => hol.PROVE_HYP (hol.and (hol.imp (hol.and x_2 x_27_1) x_2) (hol.imp x_2 (hol.and x_2 x_27_1))) (hol.imp x_2 (hol.and x_2 x_27_1)) (thm_120 x_27_1 x_2 hyp_1) (hyp_2 : hol.proof (hol.and (hol.imp (hol.and x_2 x_27_1) x_2) (hol.imp x_2 (hol.and x_2 x_27_1))) => thm_121 x_27_1 x_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool./\ x) x')) x)) x') ;)

(; dict ;)

def thm_123 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof x_2 -> hyp_2 : hol.proof (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) -> hol.proof (hol.imp (hol.imp (hol.and x_2 x_27_1) x_2) x_27_1) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof x_2 => hyp_2 : hol.proof (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) => thm_96 x_27_1 x_2 hyp_1 (thm_122 x_27_1 x_2 hyp_2).

(; Theorem: |- x' ;)

(; dict ;)

def thm_124 : x_1 : hol.term hol.bool -> x_27_2 : hol.term hol.bool -> hyp_1 : hol.proof x_1 -> hyp_2 : hol.proof (hol.eq hol.bool (hol.and x_1 x_27_2) x_1) -> hol.proof x_27_2 :=
  x_1 : hol.term hol.bool => x_27_2 : hol.term hol.bool => hyp_1 : hol.proof x_1 => hyp_2 : hol.proof (hol.eq hol.bool (hol.and x_1 x_27_2) x_1) => thm_123 x_27_2 x_1 hyp_1 hyp_2 (thm_103 x_27_2 x_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> x) x') ;)

(; dict ;)

def thm_125 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) -> hol.proof (hol.imp x_2 x_27_1) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) => hyp_2 : hol.proof x_2 => thm_124 x_2 x_27_1 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= ((Data.Bool./\ x) x')) x)) ((Data.Bool.==> x) x')) ;)

(; dict ;)

def thm_126 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) (hol.imp x_2 x_27_1)) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) => thm_125 x_27_1 x_2 hyp_1.

(; Theorem: |- ((= x') ((Data.Bool./\ x) x')) ;)

(; dict ;)

def thm_127 : x_1 : hol.term hol.bool -> x_27_2 : hol.term hol.bool -> hyp_1 : hol.proof x_1 -> hol.proof (hol.eq hol.bool x_27_2 (hol.and x_1 x_27_2)) :=
  x_1 : hol.term hol.bool => x_27_2 : hol.term hol.bool => hyp_1 : hol.proof x_1 => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_111 p_1 q_2 hyp_1) x_1 x_27_2 hyp_1.

(; Theorem: |- ((= x') ((Data.Bool./\ x) x')) ;)

(; dict ;)

def thm_128 : x_1 : hol.term hol.bool -> x_27_2 : hol.term hol.bool -> hyp_1 : hol.proof x_1 -> hol.proof (hol.eq hol.bool x_27_2 (hol.and x_1 x_27_2)) :=
  x_1 : hol.term hol.bool => x_27_2 : hol.term hol.bool => hyp_1 : hol.proof x_1 => hol.PROVE_HYP x_1 (hol.eq hol.bool x_27_2 (hol.and x_1 x_27_2)) (thm_58 x_1 hyp_1) (hyp_2 : hol.proof x_1 => thm_127 x_1 x_27_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> x) x') ;)

(; dict ;)

def thm_129 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp x_2 x_27_1) -> hol.proof (hol.imp x_2 x_27_1) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp x_2 x_27_1) => hyp_1.

(; Theorem: |- x' ;)

(; dict ;)

def thm_130 : x_1 : hol.term hol.bool -> x_27_2 : hol.term hol.bool -> hyp_1 : hol.proof x_1 -> hyp_2 : hol.proof (hol.imp x_1 x_27_2) -> hol.proof x_27_2 :=
  x_1 : hol.term hol.bool => x_27_2 : hol.term hol.bool => hyp_1 : hol.proof x_1 => hyp_2 : hol.proof (hol.imp x_1 x_27_2) => thm_129 x_27_2 x_1 hyp_2 (thm_58 x_1 hyp_1).

(; Theorem: |- x' ;)

(; dict ;)

def thm_131 : x_1 : hol.term hol.bool -> x_27_2 : hol.term hol.bool -> hyp_1 : hol.proof x_1 -> hyp_2 : hol.proof (hol.imp x_1 x_27_2) -> hol.proof x_27_2 :=
  x_1 : hol.term hol.bool => x_27_2 : hol.term hol.bool => hyp_1 : hol.proof x_1 => hyp_2 : hol.proof (hol.imp x_1 x_27_2) => hol.PROVE_HYP x_1 x_27_2 (thm_58 x_1 hyp_1) (hyp_3 : hol.proof x_1 => thm_130 x_1 x_27_2 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool./\ x) x') ;)

(; dict ;)

def thm_132 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof x_2 -> hyp_2 : hol.proof (hol.imp x_2 x_27_1) -> hol.proof (hol.and x_2 x_27_1) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof x_2 => hyp_2 : hol.proof (hol.imp x_2 x_27_1) => hol.EQ_MP x_27_1 (hol.and x_2 x_27_1) (thm_128 x_2 x_27_1 hyp_1) (thm_131 x_2 x_27_1 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> x) ((Data.Bool./\ x) x')) ;)

(; dict ;)

def thm_133 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp x_2 x_27_1) -> hol.proof (hol.imp x_2 (hol.and x_2 x_27_1)) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp x_2 x_27_1) => hyp_2 : hol.proof x_2 => thm_132 x_27_1 x_2 hyp_2 hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ x) x')) x) ;)

(; dict ;)

def thm_134 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp x_2 x_27_1) -> hol.proof (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp x_2 x_27_1) => hol.PROP_EXT (hol.and x_2 x_27_1) x_2 (hyp_2 : hol.proof x_2 => thm_133 x_27_1 x_2 hyp_1 (thm_58 x_2 hyp_2)) (hyp_2 : hol.proof (hol.and x_2 x_27_1) => thm_84 x_27_1 x_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x)) ;)

(; dict ;)

def thm_135 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.imp x_2 x_27_1) (hol.eq hol.bool (hol.and x_2 x_27_1) x_2)) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp x_2 x_27_1) => thm_134 x_27_1 x_2 hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x)) ;)

(; dict ;)

def thm_136 : x_27_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp x_2 x_27_1) (hol.eq hol.bool (hol.and x_2 x_27_1) x_2)) :=
  x_27_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hol.PROP_EXT (hol.imp x_2 x_27_1) (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and x_2 x_27_1) x_2) => thm_126 x_27_1 x_2 (thm_102 x_27_1 x_2 hyp_1)) (hyp_1 : hol.proof (hol.imp x_2 x_27_1) => thm_135 x_27_1 x_2 (thm_129 x_27_1 x_2 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x))) ;)

(; dict ;)

def thm_137 : x_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))) :=
  x_1 : hol.term hol.bool => x_27_2 : hol.term hol.bool => thm_136 x_27_2 x_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((= ((Data.Bool.==> x) x')) ((= ((Data.Bool./\ x) x')) x)))) ;)

(; dict ;)

def thm_138 : hol.proof (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)))) :=
  x_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))) (hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1))) (thm_57 x_1) (thm_137 x_1).

(; Theorem: |- ((= Data.Bool.==>) \lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p)) ;)

(; dict ;)

def thm_139 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 q_2) p_1)) :=
  hol.EQ_MP (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)))) (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 q_2) p_1)) thm_51 (hol.EQ_MP (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)))) (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.forall hol.bool (x_27_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp x_1 x_27_2) (hol.eq hol.bool (hol.and x_1 x_27_2) x_1)))) thm_54 thm_138).
