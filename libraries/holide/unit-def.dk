
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME unit_2Ddef.

Data_2EUnit_2Eunit : hol.type.

Data_2EBool_2E_3F : A : hol.type -> hol.term A.

HOLLight_2Eone__ABS : hol.term (hol.arr hol.bool Data_2EUnit_2Eunit).

HOLLight_2Eone__REP : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool).

(; Constant Data.Unit.() ;)

def Data_2EUnit_2E_28_29 : hol.term Data_2EUnit_2Eunit :=
  hol.select Data_2EUnit_2Eunit (x_1 : hol.term Data_2EUnit_2Eunit => hol.true).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))).

(; axiom ;)

thm_1 : hol.proof hol.true.

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) q_2))).

(; defineTypeOp ;)

thm_3 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_1 : hol.term hol.bool => hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1) (r_1 : hol.term hol.bool => (b_2 : hol.term hol.bool => b_2) r_1)).

(; defineTypeOp ;)

thm_4 : hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit Data_2EUnit_2Eunit) (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) (a_1 : hol.term Data_2EUnit_2Eunit => a_1)).

(; axiom ;)

thm_5 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)).

(; axiom ;)

thm_6 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)).

(; axiom ;)

thm_7 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))).

(; axiom ;)

thm_8 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)).

(; axiom ;)

thm_9 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))).

(; axiom ;)

thm_10 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))).

(; axiom ;)

thm_11 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)).

(; Theorem: |- ((= Data.Bool.==>) Data.Bool.==>) ;)

(; dict ;)

def thm_12 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp hol.imp) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp.

(; Theorem: |- ((= ((= Data.Bool.?) \lambda p. (p (select p)))) ((= Data.Bool.?) \lambda p. (p (select p)))) ;)

(; dict ;)

def thm_13 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1)))) :=
  A : hol.type => hol.REFL hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))).

(; Theorem: |- ((= ((= Data.Bool.?) \lambda p. (p (select p)))) ((= Data.Bool.?) \lambda p. (p (select p)))) ;)

(; dict ;)

def thm_14 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1)))) :=
  A : hol.type => hol.TRANS hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (thm_13 A) (thm_13 A).

(; Theorem: |- ((= Data.Bool.?) \lambda p. (p (select p))) ;)

(; dict ;)

def thm_15 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool)) (p_1 : hol.term (hol.arr hol.bool hol.bool) => p_1 (hol.select hol.bool p_1))) :=
  (A : hol.type => hol.EQ_MP (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (thm_14 A) (thm_0 A)) hol.bool.

(; Theorem: |- ((= \lambda b. b) \lambda b. b) ;)

(; dict ;)

def thm_16 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => b_1) (b_1 : hol.term hol.bool => b_1)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => b_1).

(; Theorem: |- ((= (Data.Bool.? \lambda b. b)) (\lambda p. (p (select p)) \lambda b. b)) ;)

(; dict ;)

def thm_17 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_1 : hol.term hol.bool => b_1)) ((p_1 : hol.term (hol.arr hol.bool hol.bool) => p_1 (hol.select hol.bool p_1)) (b_1 : hol.term hol.bool => b_1))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool)) (p_1 : hol.term (hol.arr hol.bool hol.bool) => p_1 (hol.select hol.bool p_1)) (b_1 : hol.term hol.bool => b_1) (b_1 : hol.term hol.bool => b_1) thm_15 thm_16.

(; Theorem: |- ((= (\lambda p. (p (select p)) \lambda b. b)) (\lambda b. b (select \lambda b. b))) ;)

(; dict ;)

def thm_18 : hol.proof (hol.eq hol.bool ((p_1 : hol.term (hol.arr hol.bool hol.bool) => p_1 (hol.select hol.bool p_1)) (b_1 : hol.term hol.bool => b_1)) ((b_1 : hol.term hol.bool => b_1) (hol.select hol.bool (b_1 : hol.term hol.bool => b_1)))) :=
  hol.BETA_CONV (hol.arr hol.bool hol.bool) hol.bool (p_1 : hol.term (hol.arr hol.bool hol.bool) => p_1 (hol.select hol.bool p_1)) (b_1 : hol.term hol.bool => b_1).

(; Theorem: |- ((= (Data.Bool.? \lambda b. b)) (\lambda b. b (select \lambda b. b))) ;)

(; dict ;)

def thm_19 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_1 : hol.term hol.bool => b_1)) ((b_1 : hol.term hol.bool => b_1) (hol.select hol.bool (b_1 : hol.term hol.bool => b_1)))) :=
  hol.TRANS hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_1 : hol.term hol.bool => b_1)) ((p_1 : hol.term (hol.arr hol.bool hol.bool) => p_1 (hol.select hol.bool p_1)) (b_1 : hol.term hol.bool => b_1)) ((b_1 : hol.term hol.bool => b_1) (hol.select hol.bool (b_1 : hol.term hol.bool => b_1))) thm_17 thm_18.

(; Theorem: |- ((= (\lambda b. b Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_20 : hol.proof (hol.eq hol.bool ((b_1 : hol.term hol.bool => b_1) hol.true) hol.true) :=
  hol.BETA_CONV hol.bool hol.bool (b_1 : hol.term hol.bool => b_1) hol.true.

(; Theorem: |- ((= Data.Bool.T) (\lambda b. b Data.Bool.T)) ;)

(; dict ;)

def thm_21 : hol.proof (hol.eq hol.bool hol.true ((b_1 : hol.term hol.bool => b_1) hol.true)) :=
  hol.SYM hol.bool ((b_1 : hol.term hol.bool => b_1) hol.true) hol.true thm_20.

(; Theorem: |- ((= Data.Bool.T) Data.Bool.T) ;)

(; dict ;)

def thm_22 : hol.proof (hol.eq hol.bool hol.true hol.true) :=
  hol.REFL hol.bool hol.true.

(; Theorem: |- ((= Data.Bool.T) Data.Bool.T) ;)

(; dict ;)

def thm_23 : hol.proof (hol.eq hol.bool hol.true hol.true) :=
  hol.SYM hol.bool hol.true hol.true thm_22.

(; Theorem: |- (\lambda b. b Data.Bool.T) ;)

(; dict ;)

def thm_24 : hol.proof ((b_1 : hol.term hol.bool => b_1) hol.true) :=
  hol.EQ_MP hol.true ((b_1 : hol.term hol.bool => b_1) hol.true) thm_21 (hol.EQ_MP hol.true hol.true thm_23 thm_1).

(; Theorem: |- ((= (= (Data.Bool.? P))) (= (Data.Bool.? P))) ;)

(; dict ;)

def thm_25 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)).

(; Theorem: |- ((= (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_26 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1.

(; Theorem: |- ((= ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P))) ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_27 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_25 A P_1) (thm_26 A P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_28 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) P_1 P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) P_1.

(; Theorem: |- ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) ;)

(; dict ;)

def thm_29 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1 P_1 (thm_2 A) (thm_28 A P_1).

(; Theorem: |- ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_30 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (thm_27 A P_1) (thm_29 A P_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) (Data.Bool.? P)) ;)

(; dict ;)

def thm_31 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_30 A P_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q)) ;)

(; dict ;)

def thm_32 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (P x)) Q) ;)

(; dict ;)

def thm_33 : A : hol.type -> Q_1 : hol.term hol.bool -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) -> hol.proof (hol.imp (P_3 x_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) => thm_32 A Q_1 P_3 hyp_1 x_2.

(; Theorem: |- (P x) ;)

(; dict ;)

def thm_34 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (P_2 x_1) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_35 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (P_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) -> hol.proof Q_3 :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (P_2 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) => thm_33 A Q_3 x_1 P_2 hyp_2 (thm_34 A x_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_36 : A : hol.type -> x_1 : hol.term A -> Q_2 : hol.term hol.bool -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_3 x_1) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) Q_2) :=
  A : hol.type => x_1 : hol.term A => Q_2 : hol.term hol.bool => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_3 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) => thm_35 A x_1 P_3 Q_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda Q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q)) ;)

(; dict ;)

def thm_37 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => Q_3 : hol.term hol.bool => thm_36 A x_1 Q_3 P_2 hyp_1.

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_38 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hol.EQ_MP (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) (thm_31 A P_2) (thm_37 A x_1 P_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda b. b) ;)

(; dict ;)

def thm_39 : hyp_1 : hol.proof ((b_1 : hol.term hol.bool => b_1) hol.true) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_1 : hol.term hol.bool => b_1)) :=
  hyp_1 : hol.proof ((b_1 : hol.term hol.bool => b_1) hol.true) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_38 A x_1 P_2 hyp_1) hol.bool hol.true (b_1 : hol.term hol.bool => b_1) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda b. b) ;)

(; dict ;)

def thm_40 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_1 : hol.term hol.bool => b_1)) :=
  hol.PROVE_HYP ((b_1 : hol.term hol.bool => b_1) hol.true) (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_1 : hol.term hol.bool => b_1)) thm_24 (hyp_1 : hol.proof ((b_1 : hol.term hol.bool => b_1) hol.true) => thm_39 hyp_1).

(; Theorem: |- (\lambda b. b (select \lambda b. b)) ;)

(; dict ;)

def thm_41 : hol.proof ((b_1 : hol.term hol.bool => b_1) (hol.select hol.bool (b_1 : hol.term hol.bool => b_1))) :=
  hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (b_1 : hol.term hol.bool => b_1)) ((b_1 : hol.term hol.bool => b_1) (hol.select hol.bool (b_1 : hol.term hol.bool => b_1))) thm_19 thm_40.

(; Theorem: |- ((= (HOLLight.one_ABS (HOLLight.one_REP a))) a) ;)

(; dict ;)

def thm_42 : a_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1) :=
  a_1 : hol.term Data_2EUnit_2Eunit => hol.EQ_MP (hol.eq Data_2EUnit_2Eunit ((a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_2)) a_1) ((a_2 : hol.term Data_2EUnit_2Eunit => a_2) a_1)) (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1) (hol.APP_THM Data_2EUnit_2Eunit hol.bool (hol.eq Data_2EUnit_2Eunit ((a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_2)) a_1)) (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) ((a_2 : hol.term Data_2EUnit_2Eunit => a_2) a_1) a_1 (hol.APP_THM Data_2EUnit_2Eunit (hol.arr Data_2EUnit_2Eunit hol.bool) (hol.eq Data_2EUnit_2Eunit) (hol.eq Data_2EUnit_2Eunit) ((a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_2)) a_1) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) (hol.REFL (hol.arr Data_2EUnit_2Eunit (hol.arr Data_2EUnit_2Eunit hol.bool)) (hol.eq Data_2EUnit_2Eunit)) (hol.BETA_CONV Data_2EUnit_2Eunit Data_2EUnit_2Eunit (a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_2)) a_1)) (hol.BETA_CONV Data_2EUnit_2Eunit Data_2EUnit_2Eunit (a_2 : hol.term Data_2EUnit_2Eunit => a_2) a_1)) (hol.APP_THM Data_2EUnit_2Eunit Data_2EUnit_2Eunit (a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_2)) (a_2 : hol.term Data_2EUnit_2Eunit => a_2) a_1 a_1 thm_4 (hol.REFL Data_2EUnit_2Eunit a_1)).

(; Theorem: |- ((= (\lambda b. b r)) ((= (HOLLight.one_REP (HOLLight.one_ABS r))) r)) ;)

(; dict ;)

def thm_43 : r_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((b_2 : hol.term hol.bool => b_2) r_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1)) :=
  r_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1) ((b_2 : hol.term hol.bool => b_2) r_1) (hol.EQ_MP (hol.eq hol.bool ((r_2 : hol.term hol.bool => hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_2)) r_2) r_1) ((r_2 : hol.term hol.bool => (b_3 : hol.term hol.bool => b_3) r_2) r_1)) (hol.eq hol.bool (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1) ((b_2 : hol.term hol.bool => b_2) r_1)) (hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((r_2 : hol.term hol.bool => hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_2)) r_2) r_1)) (hol.eq hol.bool (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1)) ((r_2 : hol.term hol.bool => (b_3 : hol.term hol.bool => b_3) r_2) r_1) ((b_2 : hol.term hol.bool => b_2) r_1) (hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((r_2 : hol.term hol.bool => hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_2)) r_2) r_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1) (hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool)) (hol.BETA_CONV hol.bool hol.bool (r_2 : hol.term hol.bool => hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_2)) r_2) r_1)) (hol.BETA_CONV hol.bool hol.bool (r_2 : hol.term hol.bool => (b_3 : hol.term hol.bool => b_3) r_2) r_1)) (hol.APP_THM hol.bool hol.bool (r_2 : hol.term hol.bool => hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_2)) r_2) (r_2 : hol.term hol.bool => (b_3 : hol.term hol.bool => b_3) r_2) r_1 r_1 thm_3 (hol.REFL hol.bool r_1))).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_44 : hol.proof (hol.eq (hol.arr (hol.arr Data_2EUnit_2Eunit hol.bool) hol.bool) (hol.forall Data_2EUnit_2Eunit) (hol.forall Data_2EUnit_2Eunit)) :=
  hol.REFL (hol.arr (hol.arr Data_2EUnit_2Eunit hol.bool) hol.bool) (hol.forall Data_2EUnit_2Eunit).

(; Theorem: |- ((= (= (HOLLight.one_REP a))) (= (HOLLight.one_REP a))) ;)

(; dict ;)

def thm_45 : a_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (HOLLight_2Eone__REP a_1)) (hol.eq hol.bool (HOLLight_2Eone__REP a_1))) :=
  a_1 : hol.term Data_2EUnit_2Eunit => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (HOLLight_2Eone__REP a_1)).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_46 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool) (hol.eq hol.bool)) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool).

(; Theorem: |- ((= HOLLight.one_REP) HOLLight.one_REP) ;)

(; dict ;)

def thm_47 : hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit hol.bool) HOLLight_2Eone__REP HOLLight_2Eone__REP) :=
  hol.REFL (hol.arr Data_2EUnit_2Eunit hol.bool) HOLLight_2Eone__REP.

(; Theorem: |- ((= (HOLLight.one_REP (HOLLight.one_ABS (HOLLight.one_REP a)))) (HOLLight.one_REP a)) ;)

(; dict ;)

def thm_48 : a_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1)) :=
  a_1 : hol.term Data_2EUnit_2Eunit => hol.APP_THM Data_2EUnit_2Eunit hol.bool HOLLight_2Eone__REP HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1 thm_47 (thm_42 a_1).

(; Theorem: |- ((= (= (HOLLight.one_REP (HOLLight.one_ABS (HOLLight.one_REP a))))) (= (HOLLight.one_REP a))) ;)

(; dict ;)

def thm_49 : a_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)))) (hol.eq hol.bool (HOLLight_2Eone__REP a_1))) :=
  a_1 : hol.term Data_2EUnit_2Eunit => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1) thm_46 (thm_48 a_1).

(; Theorem: |- ((= (HOLLight.one_REP a)) (HOLLight.one_REP a)) ;)

(; dict ;)

def thm_50 : a_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq hol.bool (HOLLight_2Eone__REP a_1) (HOLLight_2Eone__REP a_1)) :=
  a_1 : hol.term Data_2EUnit_2Eunit => hol.REFL hol.bool (HOLLight_2Eone__REP a_1).

(; Theorem: |- ((= ((= (HOLLight.one_REP (HOLLight.one_ABS (HOLLight.one_REP a)))) (HOLLight.one_REP a))) ((= (HOLLight.one_REP a)) (HOLLight.one_REP a))) ;)

(; dict ;)

def thm_51 : a_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1)) (hol.eq hol.bool (HOLLight_2Eone__REP a_1) (HOLLight_2Eone__REP a_1))) :=
  a_1 : hol.term Data_2EUnit_2Eunit => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)))) (hol.eq hol.bool (HOLLight_2Eone__REP a_1)) (HOLLight_2Eone__REP a_1) (HOLLight_2Eone__REP a_1) (thm_49 a_1) (thm_50 a_1).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_52 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_53 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_52 A x_1) (thm_52 A x_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_54 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_55 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_56 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_55 A) (thm_55 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_57 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_54 A) (thm_56 A).

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_58 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_59 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_58 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_60 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_59 t_1 hyp_1) thm_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_61 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_62 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_61 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_1).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_63 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_60 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_62 t_1 hyp_1).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_64 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_63 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_65 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => thm_5 A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_66 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_64 A x_1) (thm_65 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_67 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_52 A x_1) (thm_66 A x_1)) A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_68 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_1 x_1) hol.true) :=
  x_1 : hol.term hol.bool => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_53 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_57 A) (thm_67 A) x_1)) hol.bool x_1.

(; Theorem: |- ((= ((= (HOLLight.one_REP a)) (HOLLight.one_REP a))) Data.Bool.T) ;)

(; dict ;)

def thm_69 : a_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (HOLLight_2Eone__REP a_1) (HOLLight_2Eone__REP a_1)) hol.true) :=
  a_1 : hol.term Data_2EUnit_2Eunit => (x_1 : hol.term hol.bool => thm_68 x_1) (HOLLight_2Eone__REP a_1).

(; Theorem: |- ((= ((= (HOLLight.one_REP (HOLLight.one_ABS (HOLLight.one_REP a)))) (HOLLight.one_REP a))) Data.Bool.T) ;)

(; dict ;)

def thm_70 : a_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1)) hol.true) :=
  a_1 : hol.term Data_2EUnit_2Eunit => hol.TRANS hol.bool (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1)) (hol.eq hol.bool (HOLLight_2Eone__REP a_1) (HOLLight_2Eone__REP a_1)) hol.true (thm_51 a_1) (thm_69 a_1).

(; Theorem: |- ((= ((= (HOLLight.one_REP a)) ((= (HOLLight.one_REP (HOLLight.one_ABS (HOLLight.one_REP a)))) (HOLLight.one_REP a)))) ((= (HOLLight.one_REP a)) Data.Bool.T)) ;)

(; dict ;)

def thm_71 : a_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (HOLLight_2Eone__REP a_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1))) (hol.eq hol.bool (HOLLight_2Eone__REP a_1) hol.true)) :=
  a_1 : hol.term Data_2EUnit_2Eunit => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (HOLLight_2Eone__REP a_1)) (hol.eq hol.bool (HOLLight_2Eone__REP a_1)) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1)) hol.true (thm_45 a_1) (thm_70 a_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.T)) t)) ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_72 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.T)) t)) ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_73 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_72 t_1) (thm_72 t_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_74 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool) (hol.forall hol.bool)) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_75 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_76 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) thm_75 thm_75.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_77 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) thm_74 thm_76.

(; Theorem: |- ((= ((= ((= Data.Bool.T) t)) t)) ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_78 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((= Data.Bool.T) t)) t)) ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_79 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_78 t_1) (thm_78 t_1).

(; Theorem: |- ((= ((= Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_80 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_6 t_1.

(; Theorem: |- ((= (= ((Data.Bool./\ p) q))) (= ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_81 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_82 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q))) ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_83 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_81 q_1 p_2) (thm_82 q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool./\ p))) (= (Data.Bool./\ p))) ;)

(; dict ;)

def thm_84 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_85 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1.

(; Theorem: |- ((= ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p))) ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_86 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)) (thm_84 p_1) (thm_85 p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_87 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 p_1) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool p_1.

(; Theorem: |- ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) ;)

(; dict ;)

def thm_88 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1 p_1 thm_7 (thm_87 p_1).

(; Theorem: |- ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_89 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) (thm_86 p_1) (thm_88 p_1).

(; Theorem: |- ((= q) q) ;)

(; dict ;)

def thm_90 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_1 q_1) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) ;)

(; dict ;)

def thm_91 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1 q_1 (thm_89 p_2) (thm_90 q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_92 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) (thm_83 q_1 p_2) (thm_91 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_93 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_94 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hol.EQ_MP (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_92 q_1 p_2) (thm_93 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) q))) q) ;)

(; dict ;)

def thm_95 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 q_1)) q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_94 q_1 p_2 hyp_1 q_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_96 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_97 : q_1 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof q_1 :=
  q_1 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_98 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.PROP_EXT p_2 q_1 (hyp_3 : hol.proof q_1 => thm_96 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_97 q_1 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_99 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.EQ_MP p_1 q_2 (thm_98 q_2 p_1 hyp_1 hyp_2) (thm_96 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) q) ;)

(; dict ;)

def thm_100 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 q_2) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_99 p_1 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) q)) ;)

(; dict ;)

def thm_101 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_100 p_2 q_1 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_102 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_95 q_2 p_1 hyp_1 (thm_101 q_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_103 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_92 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) x)) ;)

(; dict ;)

def thm_104 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) -> hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) x) ;)

(; dict ;)

def thm_105 : p_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) -> hol.proof (hol.imp q_3 x_2) :=
  p_1 : hol.term hol.bool => x_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) => thm_104 x_2 q_3 p_1 hyp_2 (thm_96 p_1 hyp_1).

(; Theorem: |- x ;)

(; dict ;)

def thm_106 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) -> hol.proof x_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) => thm_105 p_2 x_3 q_1 hyp_1 hyp_3 (thm_97 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x) ;)

(; dict ;)

def thm_107 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.imp (hol.imp p_3 (hol.imp q_2 x_1)) x_1) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hyp_3 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => thm_106 q_2 p_3 x_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_108 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => x_3 : hol.term hol.bool => thm_107 x_3 q_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_109 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1) (thm_103 q_1 p_2) (thm_108 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= q) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_110 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool q_2 (hol.and p_1 q_2)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hol.PROP_EXT q_2 (hol.and p_1 q_2) (hyp_2 : hol.proof (hol.and p_1 q_2) => thm_102 p_1 q_2 hyp_2) (hyp_2 : hol.proof q_2 => thm_109 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_111 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_110 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_112 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_79 t_1) (thm_80 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) => thm_111 t_1 hyp_1).

(; Theorem: |- ((= ((= t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_113 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_8 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_114 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_110 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_115 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_72 t_1) (thm_113 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) => thm_114 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_116 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)).

(; Theorem: |- ((= ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_117 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_116 t_1) (thm_116 t_1).

(; Theorem: |- ((= ((= Data.Bool.F) t)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_118 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_9 t_1.

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_119 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_110 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_120 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_117 t_1) (thm_118 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) => thm_119 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_121 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_122 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_121 t_1) (thm_121 t_1).

(; Theorem: |- ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_123 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_10 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_124 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (thm_120 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_122 t_1) (thm_123 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_125 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (thm_115 t_1) (thm_124 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_126 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (thm_112 t_1) (thm_125 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_127 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => thm_126 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_128 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_102 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_129 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_2) (hol.not t_2)) (hol.eq hol.bool (hol.eq hol.bool t_2 hol.false) (hol.not t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_2) (hol.not t_2)) (hol.eq hol.bool (hol.eq hol.bool t_2 hol.false) (hol.not t_2)))))) thm_77 thm_127 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) => thm_128 t_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) p))) p) ;)

(; dict ;)

def thm_130 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 p_2)) p_2) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_94 q_1 p_2 hyp_1 p_2.

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_131 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.SYM hol.bool p_1 q_2 (thm_98 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_132 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP q_1 p_2 (thm_131 p_2 q_1 hyp_1 hyp_2) (thm_97 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_133 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_132 q_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_134 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_133 p_2 q_1 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_135 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_130 q_1 p_2 hyp_1 (thm_134 q_1 p_2).

(; Theorem: |- ((= ((= t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_136 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_135 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) hyp_1.

(; Theorem: |- ((= ((= t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_137 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_129 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) => thm_136 t_1 hyp_1).

(; Theorem: |- ((= ((= (HOLLight.one_REP a)) Data.Bool.T)) (HOLLight.one_REP a)) ;)

(; dict ;)

def thm_138 : a_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (HOLLight_2Eone__REP a_1) hol.true) (HOLLight_2Eone__REP a_1)) :=
  a_1 : hol.term Data_2EUnit_2Eunit => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_73 t_1) (thm_137 t_1)) (HOLLight_2Eone__REP a_1).

(; Theorem: |- ((= ((= (HOLLight.one_REP a)) ((= (HOLLight.one_REP (HOLLight.one_ABS (HOLLight.one_REP a)))) (HOLLight.one_REP a)))) (HOLLight.one_REP a)) ;)

(; dict ;)

def thm_139 : a_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (HOLLight_2Eone__REP a_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1)) :=
  a_1 : hol.term Data_2EUnit_2Eunit => hol.TRANS hol.bool (hol.eq hol.bool (HOLLight_2Eone__REP a_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1))) (hol.eq hol.bool (HOLLight_2Eone__REP a_1) hol.true) (HOLLight_2Eone__REP a_1) (thm_71 a_1) (thm_138 a_1).

(; Theorem: |- ((= \lambda a. ((= (HOLLight.one_REP a)) ((= (HOLLight.one_REP (HOLLight.one_ABS (HOLLight.one_REP a)))) (HOLLight.one_REP a)))) \lambda a. (HOLLight.one_REP a)) ;)

(; dict ;)

def thm_140 : hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit hol.bool) (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq hol.bool (HOLLight_2Eone__REP a_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1))) (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) :=
  hol.ABS_THM Data_2EUnit_2Eunit hol.bool (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq hol.bool (HOLLight_2Eone__REP a_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1))) (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1) (a_1 : hol.term Data_2EUnit_2Eunit => thm_139 a_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. ((= (HOLLight.one_REP a)) ((= (HOLLight.one_REP (HOLLight.one_ABS (HOLLight.one_REP a)))) (HOLLight.one_REP a))))) (Data.Bool.! \lambda a. (HOLLight.one_REP a))) ;)

(; dict ;)

def thm_141 : hol.proof (hol.eq hol.bool (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq hol.bool (HOLLight_2Eone__REP a_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1)))) (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1))) :=
  hol.APP_THM (hol.arr Data_2EUnit_2Eunit hol.bool) hol.bool (hol.forall Data_2EUnit_2Eunit) (hol.forall Data_2EUnit_2Eunit) (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq hol.bool (HOLLight_2Eone__REP a_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1))) (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1) thm_44 thm_140.

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.! \lambda a. ((= (HOLLight.one_REP a)) ((= (HOLLight.one_REP (HOLLight.one_ABS (HOLLight.one_REP a)))) (HOLLight.one_REP a)))))) (Data.Bool.==> (Data.Bool.! \lambda a. (HOLLight.one_REP a)))) ;)

(; dict ;)

def thm_142 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq hol.bool (HOLLight_2Eone__REP a_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1))))) (hol.imp (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)))) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq hol.bool (HOLLight_2Eone__REP a_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1)))) (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) thm_12 thm_141.

(; Theorem: |- ((= Data.Unit.()) (select \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_143 : hol.proof (hol.eq Data_2EUnit_2Eunit Data_2EUnit_2E_28_29 (hol.select Data_2EUnit_2Eunit (x_1 : hol.term Data_2EUnit_2Eunit => hol.true))) :=
  hol.REFL Data_2EUnit_2Eunit Data_2EUnit_2E_28_29.

(; Theorem: |- ((= (Data.Bool.! \lambda v. ((= v) Data.Unit.()))) (Data.Bool.! \lambda v. ((= v) Data.Unit.()))) ;)

(; dict ;)

def thm_144 : hol.proof (hol.eq hol.bool (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29)) (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29))) :=
  hol.REFL hol.bool (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29)).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda a. ((= (HOLLight.one_REP a)) ((= (HOLLight.one_REP (HOLLight.one_ABS (HOLLight.one_REP a)))) (HOLLight.one_REP a))))) (Data.Bool.! \lambda v. ((= v) Data.Unit.())))) ((Data.Bool.==> (Data.Bool.! \lambda a. (HOLLight.one_REP a))) (Data.Bool.! \lambda v. ((= v) Data.Unit.())))) ;)

(; dict ;)

def thm_145 : hol.proof (hol.eq hol.bool (hol.imp (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq hol.bool (HOLLight_2Eone__REP a_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1)))) (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29))) (hol.imp (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29)))) :=
  hol.APP_THM hol.bool hol.bool (hol.imp (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq hol.bool (HOLLight_2Eone__REP a_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1))))) (hol.imp (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1))) (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29)) (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29)) thm_142 thm_144.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda a. (HOLLight.one_REP a))) (Data.Bool.! \lambda v. ((= v) Data.Unit.())))) ((Data.Bool.==> (Data.Bool.! \lambda a. ((= (HOLLight.one_REP a)) ((= (HOLLight.one_REP (HOLLight.one_ABS (HOLLight.one_REP a)))) (HOLLight.one_REP a))))) (Data.Bool.! \lambda v. ((= v) Data.Unit.())))) ;)

(; dict ;)

def thm_146 : hol.proof (hol.eq hol.bool (hol.imp (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29))) (hol.imp (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq hol.bool (HOLLight_2Eone__REP a_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1)))) (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29)))) :=
  hol.SYM hol.bool (hol.imp (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq hol.bool (HOLLight_2Eone__REP a_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1)))) (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29))) (hol.imp (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29))) thm_145.

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_147 : hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit (hol.arr Data_2EUnit_2Eunit hol.bool)) (hol.eq Data_2EUnit_2Eunit) (hol.eq Data_2EUnit_2Eunit)) :=
  hol.REFL (hol.arr Data_2EUnit_2Eunit (hol.arr Data_2EUnit_2Eunit hol.bool)) (hol.eq Data_2EUnit_2Eunit).

(; Theorem: |- ((= ((= a) (HOLLight.one_ABS (HOLLight.one_REP a)))) ((= a) (HOLLight.one_ABS (HOLLight.one_REP a)))) ;)

(; dict ;)

def thm_148 : a_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq hol.bool (hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)))) :=
  a_1 : hol.term Data_2EUnit_2Eunit => hol.REFL hol.bool (hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))).

(; Theorem: |- ((= ((= a) (HOLLight.one_ABS (HOLLight.one_REP a)))) ((= a) (HOLLight.one_ABS (HOLLight.one_REP a)))) ;)

(; dict ;)

def thm_149 : a_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq hol.bool (hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)))) :=
  a_1 : hol.term Data_2EUnit_2Eunit => hol.TRANS hol.bool (hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (thm_148 a_1) (thm_148 a_1).

(; Theorem: |- ((= a) (HOLLight.one_ABS (HOLLight.one_REP a))) ;)

(; dict ;)

def thm_150 : a_1 : hol.term Data_2EUnit_2Eunit -> hyp_1 : hol.proof (hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) -> hol.proof (hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) :=
  a_1 : hol.term Data_2EUnit_2Eunit => hyp_1 : hol.proof (hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) => hyp_1.

(; Theorem: |- ((= (HOLLight.one_ABS (HOLLight.one_REP a))) a) ;)

(; dict ;)

def thm_151 : a_1 : hol.term Data_2EUnit_2Eunit -> hyp_1 : hol.proof (hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) -> hol.proof (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1) :=
  a_1 : hol.term Data_2EUnit_2Eunit => hyp_1 : hol.proof (hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) => hol.SYM Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) (thm_150 a_1 hyp_1).

(; Theorem: |- ((= (HOLLight.one_ABS (HOLLight.one_REP a))) a) ;)

(; dict ;)

def thm_152 : a_1 : hol.term Data_2EUnit_2Eunit -> hyp_1 : hol.proof (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1) -> hol.proof (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1) :=
  a_1 : hol.term Data_2EUnit_2Eunit => hyp_1 : hol.proof (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1) => hyp_1.

(; Theorem: |- ((= a) (HOLLight.one_ABS (HOLLight.one_REP a))) ;)

(; dict ;)

def thm_153 : a_1 : hol.term Data_2EUnit_2Eunit -> hyp_1 : hol.proof (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1) -> hol.proof (hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) :=
  a_1 : hol.term Data_2EUnit_2Eunit => hyp_1 : hol.proof (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1) => hol.SYM Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1 (thm_152 a_1 hyp_1).

(; Theorem: |- ((= ((= (HOLLight.one_ABS (HOLLight.one_REP a))) a)) ((= a) (HOLLight.one_ABS (HOLLight.one_REP a)))) ;)

(; dict ;)

def thm_154 : a_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq hol.bool (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1) (hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)))) :=
  a_1 : hol.term Data_2EUnit_2Eunit => hol.PROP_EXT (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1) (hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (hyp_1 : hol.proof (hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) => thm_151 a_1 hyp_1) (hyp_1 : hol.proof (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1) => thm_153 a_1 hyp_1).

(; Theorem: |- ((= \lambda a. ((= (HOLLight.one_ABS (HOLLight.one_REP a))) a)) \lambda a. ((= a) (HOLLight.one_ABS (HOLLight.one_REP a)))) ;)

(; dict ;)

def thm_155 : hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit hol.bool) (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1) (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)))) :=
  hol.ABS_THM Data_2EUnit_2Eunit hol.bool (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1) (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (a_1 : hol.term Data_2EUnit_2Eunit => thm_154 a_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. ((= (HOLLight.one_ABS (HOLLight.one_REP a))) a))) (Data.Bool.! \lambda a. ((= a) (HOLLight.one_ABS (HOLLight.one_REP a))))) ;)

(; dict ;)

def thm_156 : hol.proof (hol.eq hol.bool (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))))) :=
  hol.APP_THM (hol.arr Data_2EUnit_2Eunit hol.bool) hol.bool (hol.forall Data_2EUnit_2Eunit) (hol.forall Data_2EUnit_2Eunit) (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1) (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) thm_44 thm_155.

(; Theorem: |- (Data.Bool.! \lambda a. ((= (HOLLight.one_ABS (HOLLight.one_REP a))) a)) ;)

(; dict ;)

def thm_157 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) :=
  a_1 : hol.term Data_2EUnit_2Eunit => thm_42 a_1.

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= r) ((= (HOLLight.one_REP (HOLLight.one_ABS r))) r)))) ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.one_ABS (HOLLight.one_REP a))) a))) (Data.Bool.! \lambda r. ((= r) ((= (HOLLight.one_REP (HOLLight.one_ABS r))) r))))) ;)

(; dict ;)

def thm_158 : hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (r_1 : hol.term hol.bool => hol.eq hol.bool r_1 (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1))) (hol.and (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) (hol.forall hol.bool (r_1 : hol.term hol.bool => hol.eq hol.bool r_1 (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1))))) :=
  hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_110 p_1 q_2 hyp_1) (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) (hol.forall hol.bool (r_1 : hol.term hol.bool => hol.eq hol.bool r_1 (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1))) hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= r) ((= (HOLLight.one_REP (HOLLight.one_ABS r))) r)))) ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.one_ABS (HOLLight.one_REP a))) a))) (Data.Bool.! \lambda r. ((= r) ((= (HOLLight.one_REP (HOLLight.one_ABS r))) r))))) ;)

(; dict ;)

def thm_159 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (r_1 : hol.term hol.bool => hol.eq hol.bool r_1 (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1))) (hol.and (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) (hol.forall hol.bool (r_1 : hol.term hol.bool => hol.eq hol.bool r_1 (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1))))) :=
  hol.PROVE_HYP (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) (hol.eq hol.bool (hol.forall hol.bool (r_1 : hol.term hol.bool => hol.eq hol.bool r_1 (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1))) (hol.and (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) (hol.forall hol.bool (r_1 : hol.term hol.bool => hol.eq hol.bool r_1 (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1))))) thm_157 (hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) => thm_158 hyp_1).

(; Theorem: |- ((= (\lambda b. b r)) r) ;)

(; dict ;)

def thm_160 : r_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((b_2 : hol.term hol.bool => b_2) r_1) r_1) :=
  r_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (b_2 : hol.term hol.bool => b_2) r_1.

(; Theorem: |- ((= (= (\lambda b. b r))) (= r)) ;)

(; dict ;)

def thm_161 : r_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((b_2 : hol.term hol.bool => b_2) r_1)) (hol.eq hol.bool r_1)) :=
  r_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((b_2 : hol.term hol.bool => b_2) r_1) r_1 thm_46 (thm_160 r_1).

(; Theorem: |- ((= ((= (HOLLight.one_REP (HOLLight.one_ABS r))) r)) ((= (HOLLight.one_REP (HOLLight.one_ABS r))) r)) ;)

(; dict ;)

def thm_162 : r_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1)) :=
  r_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1).

(; Theorem: |- ((= ((= (\lambda b. b r)) ((= (HOLLight.one_REP (HOLLight.one_ABS r))) r))) ((= r) ((= (HOLLight.one_REP (HOLLight.one_ABS r))) r))) ;)

(; dict ;)

def thm_163 : r_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((b_2 : hol.term hol.bool => b_2) r_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1)) (hol.eq hol.bool r_1 (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1))) :=
  r_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((b_2 : hol.term hol.bool => b_2) r_1)) (hol.eq hol.bool r_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1) (thm_161 r_1) (thm_162 r_1).

(; Theorem: |- ((= r) ((= (HOLLight.one_REP (HOLLight.one_ABS r))) r)) ;)

(; dict ;)

def thm_164 : r_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool r_1 (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1)) :=
  r_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool ((b_2 : hol.term hol.bool => b_2) r_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1)) (hol.eq hol.bool r_1 (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1)) (thm_163 r_1) (thm_43 r_1).

(; Theorem: |- (Data.Bool.! \lambda r. ((= r) ((= (HOLLight.one_REP (HOLLight.one_ABS r))) r))) ;)

(; dict ;)

def thm_165 : hol.proof (hol.forall hol.bool (r_1 : hol.term hol.bool => hol.eq hol.bool r_1 (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1))) :=
  r_1 : hol.term hol.bool => thm_164 r_1.

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (HOLLight.one_ABS (HOLLight.one_REP a))) a))) (Data.Bool.! \lambda r. ((= r) ((= (HOLLight.one_REP (HOLLight.one_ABS r))) r)))) ;)

(; dict ;)

def thm_166 : hol.proof (hol.and (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) (hol.forall hol.bool (r_1 : hol.term hol.bool => hol.eq hol.bool r_1 (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1)))) :=
  hol.EQ_MP (hol.forall hol.bool (r_1 : hol.term hol.bool => hol.eq hol.bool r_1 (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1))) (hol.and (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) (hol.forall hol.bool (r_1 : hol.term hol.bool => hol.eq hol.bool r_1 (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1)))) thm_159 thm_165.

(; Theorem: |- (Data.Bool.! \lambda a. ((= (HOLLight.one_ABS (HOLLight.one_REP a))) a)) ;)

(; dict ;)

def thm_167 : hyp_1 : hol.proof (hol.and (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) (hol.forall hol.bool (r_1 : hol.term hol.bool => hol.eq hol.bool r_1 (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1)))) -> hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) :=
  hyp_1 : hol.proof (hol.and (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) (hol.forall hol.bool (r_1 : hol.term hol.bool => hol.eq hol.bool r_1 (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1)))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_135 q_1 p_2 hyp_1) (hol.forall hol.bool (r_1 : hol.term hol.bool => hol.eq hol.bool r_1 (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1))) (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda a. ((= (HOLLight.one_ABS (HOLLight.one_REP a))) a)) ;)

(; dict ;)

def thm_168 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) :=
  hol.PROVE_HYP (hol.and (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) (hol.forall hol.bool (r_1 : hol.term hol.bool => hol.eq hol.bool r_1 (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1)))) (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) thm_166 (hyp_1 : hol.proof (hol.and (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) (hol.forall hol.bool (r_1 : hol.term hol.bool => hol.eq hol.bool r_1 (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS r_1)) r_1)))) => thm_167 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda a. ((= a) (HOLLight.one_ABS (HOLLight.one_REP a)))) ;)

(; dict ;)

def thm_169 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)))) :=
  hol.EQ_MP (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)) a_1)) (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1)))) thm_156 thm_168.

(; Theorem: |- ((= a) (HOLLight.one_ABS (HOLLight.one_REP a))) ;)

(; dict ;)

def thm_170 : a_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) :=
  a_1 : hol.term Data_2EUnit_2Eunit => thm_169 a_1.

(; Theorem: |- ((= v) (HOLLight.one_ABS (HOLLight.one_REP v))) ;)

(; dict ;)

def thm_171 : v_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq Data_2EUnit_2Eunit v_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1))) :=
  v_1 : hol.term Data_2EUnit_2Eunit => (a_1 : hol.term Data_2EUnit_2Eunit => hol.EQ_MP (hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (hol.eq Data_2EUnit_2Eunit a_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (thm_149 a_1) (thm_170 a_1)) v_1.

(; Theorem: |- ((= (= v)) (= (HOLLight.one_ABS (HOLLight.one_REP v)))) ;)

(; dict ;)

def thm_172 : v_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit hol.bool) (hol.eq Data_2EUnit_2Eunit v_1) (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)))) :=
  v_1 : hol.term Data_2EUnit_2Eunit => hol.APP_THM Data_2EUnit_2Eunit (hol.arr Data_2EUnit_2Eunit hol.bool) (hol.eq Data_2EUnit_2Eunit) (hol.eq Data_2EUnit_2Eunit) v_1 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) thm_147 (thm_171 v_1).

(; Theorem: |- ((= Data.Unit.()) (HOLLight.one_ABS (HOLLight.one_REP Data.Unit.()))) ;)

(; dict ;)

def thm_173 : hol.proof (hol.eq Data_2EUnit_2Eunit Data_2EUnit_2E_28_29 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29))) :=
  (a_1 : hol.term Data_2EUnit_2Eunit => thm_170 a_1) Data_2EUnit_2E_28_29.

(; Theorem: |- ((= ((= v) Data.Unit.())) ((= (HOLLight.one_ABS (HOLLight.one_REP v))) (HOLLight.one_ABS (HOLLight.one_REP Data.Unit.())))) ;)

(; dict ;)

def thm_174 : v_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq hol.bool (hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29) (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29)))) :=
  v_1 : hol.term Data_2EUnit_2Eunit => hol.APP_THM Data_2EUnit_2Eunit hol.bool (hol.eq Data_2EUnit_2Eunit v_1) (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1))) Data_2EUnit_2E_28_29 (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29)) (thm_172 v_1) thm_173.

(; Theorem: |- ((= \lambda v. ((= v) Data.Unit.())) \lambda v. ((= (HOLLight.one_ABS (HOLLight.one_REP v))) (HOLLight.one_ABS (HOLLight.one_REP Data.Unit.())))) ;)

(; dict ;)

def thm_175 : hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit hol.bool) (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29) (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29)))) :=
  hol.ABS_THM Data_2EUnit_2Eunit hol.bool (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29) (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29))) (v_1 : hol.term Data_2EUnit_2Eunit => thm_174 v_1).

(; Theorem: |- ((= (Data.Bool.! \lambda v. ((= v) Data.Unit.()))) (Data.Bool.! \lambda v. ((= (HOLLight.one_ABS (HOLLight.one_REP v))) (HOLLight.one_ABS (HOLLight.one_REP Data.Unit.()))))) ;)

(; dict ;)

def thm_176 : hol.proof (hol.eq hol.bool (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29)) (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29))))) :=
  hol.APP_THM (hol.arr Data_2EUnit_2Eunit hol.bool) hol.bool (hol.forall Data_2EUnit_2Eunit) (hol.forall Data_2EUnit_2Eunit) (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29) (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29))) thm_44 thm_175.

(; Theorem: |- ((= (Data.Bool.! \lambda v. ((= (HOLLight.one_ABS (HOLLight.one_REP v))) (HOLLight.one_ABS (HOLLight.one_REP Data.Unit.()))))) (Data.Bool.! \lambda v. ((= v) Data.Unit.()))) ;)

(; dict ;)

def thm_177 : hol.proof (hol.eq hol.bool (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29)))) (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29))) :=
  hol.SYM hol.bool (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29)) (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29)))) thm_176.

(; Theorem: |- ((= HOLLight.one_ABS) HOLLight.one_ABS) ;)

(; dict ;)

def thm_178 : hol.proof (hol.eq (hol.arr hol.bool Data_2EUnit_2Eunit) HOLLight_2Eone__ABS HOLLight_2Eone__ABS) :=
  hol.REFL (hol.arr hol.bool Data_2EUnit_2Eunit) HOLLight_2Eone__ABS.

(; Theorem: |- ((= ((= (HOLLight.one_REP a)) Data.Bool.T)) ((= (HOLLight.one_REP a)) Data.Bool.T)) ;)

(; dict ;)

def thm_179 : a_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (HOLLight_2Eone__REP a_1) hol.true) (hol.eq hol.bool (HOLLight_2Eone__REP a_1) hol.true)) :=
  a_1 : hol.term Data_2EUnit_2Eunit => hol.REFL hol.bool (hol.eq hol.bool (HOLLight_2Eone__REP a_1) hol.true).

(; Theorem: |- ((= ((= (HOLLight.one_REP a)) Data.Bool.T)) ((= (HOLLight.one_REP a)) Data.Bool.T)) ;)

(; dict ;)

def thm_180 : a_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (HOLLight_2Eone__REP a_1) hol.true) (hol.eq hol.bool (HOLLight_2Eone__REP a_1) hol.true)) :=
  a_1 : hol.term Data_2EUnit_2Eunit => hol.TRANS hol.bool (hol.eq hol.bool (HOLLight_2Eone__REP a_1) hol.true) (hol.eq hol.bool (HOLLight_2Eone__REP a_1) hol.true) (hol.eq hol.bool (HOLLight_2Eone__REP a_1) hol.true) (thm_179 a_1) (thm_179 a_1).

(; Theorem: |- ((= (HOLLight.one_REP a)) ((= (HOLLight.one_REP a)) Data.Bool.T)) ;)

(; dict ;)

def thm_181 : a_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq hol.bool (HOLLight_2Eone__REP a_1) (hol.eq hol.bool (HOLLight_2Eone__REP a_1) hol.true)) :=
  a_1 : hol.term Data_2EUnit_2Eunit => (t_1 : hol.term hol.bool => thm_63 t_1) (HOLLight_2Eone__REP a_1).

(; Theorem: |- (Data.Bool.! \lambda a. (HOLLight.one_REP a)) ;)

(; dict ;)

def thm_182 : hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) -> hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) :=
  hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) => hyp_1.

(; Theorem: |- (HOLLight.one_REP a) ;)

(; dict ;)

def thm_183 : a_1 : hol.term Data_2EUnit_2Eunit -> hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_2)) -> hol.proof (HOLLight_2Eone__REP a_1) :=
  a_1 : hol.term Data_2EUnit_2Eunit => hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_2)) => thm_182 hyp_1 a_1.

(; Theorem: |- ((= (HOLLight.one_REP a)) Data.Bool.T) ;)

(; dict ;)

def thm_184 : a_1 : hol.term Data_2EUnit_2Eunit -> hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_2)) -> hol.proof (hol.eq hol.bool (HOLLight_2Eone__REP a_1) hol.true) :=
  a_1 : hol.term Data_2EUnit_2Eunit => hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_2)) => hol.EQ_MP (HOLLight_2Eone__REP a_1) (hol.eq hol.bool (HOLLight_2Eone__REP a_1) hol.true) (thm_181 a_1) (thm_183 a_1 hyp_1).

(; Theorem: |- ((= (HOLLight.one_REP v)) Data.Bool.T) ;)

(; dict ;)

def thm_185 : v_1 : hol.term Data_2EUnit_2Eunit -> hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_2)) -> hol.proof (hol.eq hol.bool (HOLLight_2Eone__REP v_1) hol.true) :=
  v_1 : hol.term Data_2EUnit_2Eunit => hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_2)) => (a_1 : hol.term Data_2EUnit_2Eunit => hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_2)) => hol.EQ_MP (hol.eq hol.bool (HOLLight_2Eone__REP a_1) hol.true) (hol.eq hol.bool (HOLLight_2Eone__REP a_1) hol.true) (thm_180 a_1) (thm_184 a_1 hyp_1)) v_1 hyp_1.

(; Theorem: |- ((= (HOLLight.one_ABS (HOLLight.one_REP v))) (HOLLight.one_ABS Data.Bool.T)) ;)

(; dict ;)

def thm_186 : v_1 : hol.term Data_2EUnit_2Eunit -> hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_2)) -> hol.proof (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS hol.true)) :=
  v_1 : hol.term Data_2EUnit_2Eunit => hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_2)) => hol.APP_THM hol.bool Data_2EUnit_2Eunit HOLLight_2Eone__ABS HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1) hol.true thm_178 (thm_185 v_1 hyp_1).

(; Theorem: |- ((= (= (HOLLight.one_ABS (HOLLight.one_REP v)))) (= (HOLLight.one_ABS Data.Bool.T))) ;)

(; dict ;)

def thm_187 : v_1 : hol.term Data_2EUnit_2Eunit -> hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_2)) -> hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit hol.bool) (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1))) (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS hol.true))) :=
  v_1 : hol.term Data_2EUnit_2Eunit => hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_2)) => hol.APP_THM Data_2EUnit_2Eunit (hol.arr Data_2EUnit_2Eunit hol.bool) (hol.eq Data_2EUnit_2Eunit) (hol.eq Data_2EUnit_2Eunit) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS hol.true) thm_147 (thm_186 v_1 hyp_1).

(; Theorem: |- ((= (HOLLight.one_REP Data.Unit.())) Data.Bool.T) ;)

(; dict ;)

def thm_188 : hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) -> hol.proof (hol.eq hol.bool (HOLLight_2Eone__REP Data_2EUnit_2E_28_29) hol.true) :=
  hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) => (a_1 : hol.term Data_2EUnit_2Eunit => hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_2)) => thm_184 a_1 hyp_1) Data_2EUnit_2E_28_29 hyp_1.

(; Theorem: |- ((= (HOLLight.one_ABS (HOLLight.one_REP Data.Unit.()))) (HOLLight.one_ABS Data.Bool.T)) ;)

(; dict ;)

def thm_189 : hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) -> hol.proof (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29)) (HOLLight_2Eone__ABS hol.true)) :=
  hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) => hol.APP_THM hol.bool Data_2EUnit_2Eunit HOLLight_2Eone__ABS HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29) hol.true thm_178 (thm_188 hyp_1).

(; Theorem: |- ((= ((= (HOLLight.one_ABS (HOLLight.one_REP v))) (HOLLight.one_ABS (HOLLight.one_REP Data.Unit.())))) ((= (HOLLight.one_ABS Data.Bool.T)) (HOLLight.one_ABS Data.Bool.T))) ;)

(; dict ;)

def thm_190 : v_1 : hol.term Data_2EUnit_2Eunit -> hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_2)) -> hol.proof (hol.eq hol.bool (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29))) (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS hol.true) (HOLLight_2Eone__ABS hol.true))) :=
  v_1 : hol.term Data_2EUnit_2Eunit => hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_2)) => hol.APP_THM Data_2EUnit_2Eunit hol.bool (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1))) (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS hol.true)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29)) (HOLLight_2Eone__ABS hol.true) (thm_187 v_1 hyp_1) (thm_189 hyp_1).

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_191 : x_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq hol.bool (hol.eq Data_2EUnit_2Eunit x_1 x_1) hol.true) :=
  x_1 : hol.term Data_2EUnit_2Eunit => (A : hol.type => x_1 : hol.term A => thm_66 A x_1) Data_2EUnit_2Eunit x_1.

(; Theorem: |- ((= ((= (HOLLight.one_ABS Data.Bool.T)) (HOLLight.one_ABS Data.Bool.T))) Data.Bool.T) ;)

(; dict ;)

def thm_192 : hol.proof (hol.eq hol.bool (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS hol.true) (HOLLight_2Eone__ABS hol.true)) hol.true) :=
  (x_1 : hol.term Data_2EUnit_2Eunit => thm_191 x_1) (HOLLight_2Eone__ABS hol.true).

(; Theorem: |- ((= ((= (HOLLight.one_ABS (HOLLight.one_REP v))) (HOLLight.one_ABS (HOLLight.one_REP Data.Unit.())))) Data.Bool.T) ;)

(; dict ;)

def thm_193 : v_1 : hol.term Data_2EUnit_2Eunit -> hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_2)) -> hol.proof (hol.eq hol.bool (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29))) hol.true) :=
  v_1 : hol.term Data_2EUnit_2Eunit => hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_2 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_2)) => hol.TRANS hol.bool (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29))) (hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS hol.true) (HOLLight_2Eone__ABS hol.true)) hol.true (thm_190 v_1 hyp_1) thm_192.

(; Theorem: |- ((= \lambda v. ((= (HOLLight.one_ABS (HOLLight.one_REP v))) (HOLLight.one_ABS (HOLLight.one_REP Data.Unit.())))) \lambda v. Data.Bool.T) ;)

(; dict ;)

def thm_194 : hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) -> hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit hol.bool) (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29))) (v_1 : hol.term Data_2EUnit_2Eunit => hol.true)) :=
  hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) => hol.ABS_THM Data_2EUnit_2Eunit hol.bool (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29))) (v_1 : hol.term Data_2EUnit_2Eunit => hol.true) (v_1 : hol.term Data_2EUnit_2Eunit => thm_193 v_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda v. ((= (HOLLight.one_ABS (HOLLight.one_REP v))) (HOLLight.one_ABS (HOLLight.one_REP Data.Unit.()))))) (Data.Bool.! \lambda v. Data.Bool.T)) ;)

(; dict ;)

def thm_195 : hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) -> hol.proof (hol.eq hol.bool (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29)))) (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.true))) :=
  hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) => hol.APP_THM (hol.arr Data_2EUnit_2Eunit hol.bool) hol.bool (hol.forall Data_2EUnit_2Eunit) (hol.forall Data_2EUnit_2Eunit) (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29))) (v_1 : hol.term Data_2EUnit_2Eunit => hol.true) thm_44 (thm_194 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_196 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda v. t)) t)) ((= (Data.Bool.! \lambda v. t)) t)) ;)

(; dict ;)

def thm_197 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (v_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (v_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (v_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda v. t)) t)) ;)

(; dict ;)

def thm_198 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (v_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (v_2 : hol.term A => t_1)) t_1) (thm_196 A t_1) (thm_197 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_199 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_11 A t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda v. t)) t) ;)

(; dict ;)

def thm_200 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (v_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (v_2 : hol.term A => t_1)) t_1) (thm_198 A t_1) (thm_199 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda v. t)) t) ;)

(; dict ;)

def thm_201 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall Data_2EUnit_2Eunit (v_2 : hol.term Data_2EUnit_2Eunit => t_1)) t_1) :=
  t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_200 A t_1) Data_2EUnit_2Eunit t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda v. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_202 : hol.proof (hol.eq hol.bool (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.true)) hol.true) :=
  (t_1 : hol.term hol.bool => thm_201 t_1) hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda v. ((= (HOLLight.one_ABS (HOLLight.one_REP v))) (HOLLight.one_ABS (HOLLight.one_REP Data.Unit.()))))) Data.Bool.T) ;)

(; dict ;)

def thm_203 : hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) -> hol.proof (hol.eq hol.bool (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29)))) hol.true) :=
  hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) => hol.TRANS hol.bool (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29)))) (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.true)) hol.true (thm_195 hyp_1) thm_202.

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda v. ((= (HOLLight.one_ABS (HOLLight.one_REP v))) (HOLLight.one_ABS (HOLLight.one_REP Data.Unit.()))))) ;)

(; dict ;)

def thm_204 : hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) -> hol.proof (hol.eq hol.bool hol.true (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29))))) :=
  hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) => hol.SYM hol.bool (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29)))) hol.true (thm_203 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda v. ((= (HOLLight.one_ABS (HOLLight.one_REP v))) (HOLLight.one_ABS (HOLLight.one_REP Data.Unit.())))) ;)

(; dict ;)

def thm_205 : hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) -> hol.proof (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29)))) :=
  hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) => hol.EQ_MP hol.true (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29)))) (thm_204 hyp_1) thm_1.

(; Theorem: |- (Data.Bool.! \lambda v. ((= v) Data.Unit.())) ;)

(; dict ;)

def thm_206 : hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) -> hol.proof (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29)) :=
  hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) => hol.EQ_MP (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit (HOLLight_2Eone__ABS (HOLLight_2Eone__REP v_1)) (HOLLight_2Eone__ABS (HOLLight_2Eone__REP Data_2EUnit_2E_28_29)))) (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29)) thm_177 (thm_205 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda a. (HOLLight.one_REP a))) (Data.Bool.! \lambda v. ((= v) Data.Unit.()))) ;)

(; dict ;)

def thm_207 : hol.proof (hol.imp (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29))) :=
  hyp_1 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) => thm_206 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda a. ((= (HOLLight.one_REP a)) ((= (HOLLight.one_REP (HOLLight.one_ABS (HOLLight.one_REP a)))) (HOLLight.one_REP a))))) (Data.Bool.! \lambda v. ((= v) Data.Unit.()))) ;)

(; dict ;)

def thm_208 : hol.proof (hol.imp (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq hol.bool (HOLLight_2Eone__REP a_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1)))) (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29))) :=
  hol.EQ_MP (hol.imp (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => HOLLight_2Eone__REP a_1)) (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29))) (hol.imp (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq hol.bool (HOLLight_2Eone__REP a_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1)))) (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29))) thm_146 thm_207.

(; Theorem: |- ((= (HOLLight.one_REP a)) ((= (HOLLight.one_REP (HOLLight.one_ABS (HOLLight.one_REP a)))) (HOLLight.one_REP a))) ;)

(; dict ;)

def thm_209 : a_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq hol.bool (HOLLight_2Eone__REP a_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1))) :=
  a_1 : hol.term Data_2EUnit_2Eunit => thm_165 (HOLLight_2Eone__REP a_1).

(; Theorem: |- (Data.Bool.! \lambda a. ((= (HOLLight.one_REP a)) ((= (HOLLight.one_REP (HOLLight.one_ABS (HOLLight.one_REP a)))) (HOLLight.one_REP a)))) ;)

(; dict ;)

def thm_210 : hol.proof (hol.forall Data_2EUnit_2Eunit (a_1 : hol.term Data_2EUnit_2Eunit => hol.eq hol.bool (HOLLight_2Eone__REP a_1) (hol.eq hol.bool (HOLLight_2Eone__REP (HOLLight_2Eone__ABS (HOLLight_2Eone__REP a_1))) (HOLLight_2Eone__REP a_1)))) :=
  a_1 : hol.term Data_2EUnit_2Eunit => thm_209 a_1.

(; Theorem: |- (Data.Bool.! \lambda v. ((= v) Data.Unit.())) ;)

(; dict ;)

def thm_211 : hol.proof (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 Data_2EUnit_2E_28_29)) :=
  thm_208 thm_210.
