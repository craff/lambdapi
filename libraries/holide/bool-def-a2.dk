
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME bool_2Ddef_2Da2.

(; Constant Data.Bool.? ;)

def Data_2EBool_2E_3F : A : hol.type -> hol.term (hol.arr (hol.arr A hol.bool) hol.bool) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) q_2).

(; Theorem: |- ((= Data.Bool.?) \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q))) ;)

(; dict ;)

def thm_0 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F A) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) q_2))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F A).
