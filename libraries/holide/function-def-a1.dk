
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME function_2Ddef_2Da1.

Data_2EBool_2E_3F : A : hol.type -> hol.term A.

(; Constant Function.injective ;)

def Function_2Einjective : B : hol.type -> A : hol.type -> hol.term (hol.arr (hol.arr A B) hol.bool) :=
  B : hol.type => A : hol.type => __1872_1 : hol.term (hol.arr A B) => hol.forall A (x1_2 : hol.term A => hol.forall A (x2_3 : hol.term A => hol.imp (hol.eq B (__1872_1 x1_2) (__1872_1 x2_3)) (hol.eq A x1_2 x2_3))).

(; Constant Function.surjective ;)

def Function_2Esurjective : B : hol.type -> A : hol.type -> hol.term (hol.arr (hol.arr A B) hol.bool) :=
  B : hol.type => A : hol.type => __1877_1 : hol.term (hol.arr A B) => hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B y_2 (__1877_1 x_3))).

(; Theorem: |- ((= Function.injective) \lambda _1872. (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. ((Data.Bool.==> ((= (_1872 x1)) (_1872 x2))) ((= x1) x2))))) ;)

(; dict ;)

def thm_0 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (Function_2Einjective B A) (__1872_1 : hol.term (hol.arr A B) => hol.forall A (x1_2 : hol.term A => hol.forall A (x2_3 : hol.term A => hol.imp (hol.eq B (__1872_1 x1_2) (__1872_1 x2_3)) (hol.eq A x1_2 x2_3))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A B) hol.bool) (Function_2Einjective B A).

(; Theorem: |- ((= _1872) _1872) ;)

(; dict ;)

def thm_1 : B : hol.type -> A : hol.type -> __1872_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) __1872_1 __1872_1) :=
  B : hol.type => A : hol.type => __1872_1 : hol.term (hol.arr A B) => hol.REFL (hol.arr A B) __1872_1.

(; Theorem: |- ((= (Function.injective _1872)) (\lambda _1872. (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. ((Data.Bool.==> ((= (_1872 x1)) (_1872 x2))) ((= x1) x2)))) _1872)) ;)

(; dict ;)

def thm_2 : B : hol.type -> A : hol.type -> __1872_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (Function_2Einjective B A __1872_1) ((__1872_2 : hol.term (hol.arr A B) => hol.forall A (x1_3 : hol.term A => hol.forall A (x2_4 : hol.term A => hol.imp (hol.eq B (__1872_2 x1_3) (__1872_2 x2_4)) (hol.eq A x1_3 x2_4)))) __1872_1)) :=
  B : hol.type => A : hol.type => __1872_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A B) hol.bool (Function_2Einjective B A) (__1872_2 : hol.term (hol.arr A B) => hol.forall A (x1_3 : hol.term A => hol.forall A (x2_4 : hol.term A => hol.imp (hol.eq B (__1872_2 x1_3) (__1872_2 x2_4)) (hol.eq A x1_3 x2_4)))) __1872_1 __1872_1 (thm_0 B A) (thm_1 B A __1872_1).

(; Theorem: |- ((= (\lambda _1872. (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. ((Data.Bool.==> ((= (_1872 x1)) (_1872 x2))) ((= x1) x2)))) _1872)) (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. ((Data.Bool.==> ((= (_1872 x1)) (_1872 x2))) ((= x1) x2))))) ;)

(; dict ;)

def thm_3 : B : hol.type -> A : hol.type -> __1872_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((__1872_2 : hol.term (hol.arr A B) => hol.forall A (x1_3 : hol.term A => hol.forall A (x2_4 : hol.term A => hol.imp (hol.eq B (__1872_2 x1_3) (__1872_2 x2_4)) (hol.eq A x1_3 x2_4)))) __1872_1) (hol.forall A (x1_2 : hol.term A => hol.forall A (x2_3 : hol.term A => hol.imp (hol.eq B (__1872_1 x1_2) (__1872_1 x2_3)) (hol.eq A x1_2 x2_3))))) :=
  B : hol.type => A : hol.type => __1872_1 : hol.term (hol.arr A B) => hol.BETA_CONV (hol.arr A B) hol.bool (__1872_2 : hol.term (hol.arr A B) => hol.forall A (x1_3 : hol.term A => hol.forall A (x2_4 : hol.term A => hol.imp (hol.eq B (__1872_2 x1_3) (__1872_2 x2_4)) (hol.eq A x1_3 x2_4)))) __1872_1.

(; Theorem: |- ((= (Function.injective _1872)) (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. ((Data.Bool.==> ((= (_1872 x1)) (_1872 x2))) ((= x1) x2))))) ;)

(; dict ;)

def thm_4 : B : hol.type -> A : hol.type -> __1872_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (Function_2Einjective B A __1872_1) (hol.forall A (x1_2 : hol.term A => hol.forall A (x2_3 : hol.term A => hol.imp (hol.eq B (__1872_1 x1_2) (__1872_1 x2_3)) (hol.eq A x1_2 x2_3))))) :=
  B : hol.type => A : hol.type => __1872_1 : hol.term (hol.arr A B) => hol.TRANS hol.bool (Function_2Einjective B A __1872_1) ((__1872_2 : hol.term (hol.arr A B) => hol.forall A (x1_3 : hol.term A => hol.forall A (x2_4 : hol.term A => hol.imp (hol.eq B (__1872_2 x1_3) (__1872_2 x2_4)) (hol.eq A x1_3 x2_4)))) __1872_1) (hol.forall A (x1_2 : hol.term A => hol.forall A (x2_3 : hol.term A => hol.imp (hol.eq B (__1872_1 x1_2) (__1872_1 x2_3)) (hol.eq A x1_2 x2_3)))) (thm_2 B A __1872_1) (thm_3 B A __1872_1).

(; Theorem: |- (Data.Bool.! \lambda _1872. ((= (Function.injective _1872)) (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. ((Data.Bool.==> ((= (_1872 x1)) (_1872 x2))) ((= x1) x2)))))) ;)

(; dict ;)

def thm_5 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (__1872_1 : hol.term (hol.arr A B) => hol.eq hol.bool (Function_2Einjective B A __1872_1) (hol.forall A (x1_2 : hol.term A => hol.forall A (x2_3 : hol.term A => hol.imp (hol.eq B (__1872_1 x1_2) (__1872_1 x2_3)) (hol.eq A x1_2 x2_3)))))) :=
  B : hol.type => A : hol.type => __1872_1 : hol.term (hol.arr A B) => thm_4 B A __1872_1.

(; Theorem: |- ((= (Function.injective f)) (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. ((Data.Bool.==> ((= (f x1)) (f x2))) ((= x1) x2))))) ;)

(; dict ;)

def thm_6 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (Function_2Einjective B A f_1) (hol.forall A (x1_2 : hol.term A => hol.forall A (x2_3 : hol.term A => hol.imp (hol.eq B (f_1 x1_2) (f_1 x2_3)) (hol.eq A x1_2 x2_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => (B : hol.type => A : hol.type => __1872_1 : hol.term (hol.arr A B) => thm_5 B A __1872_1) B A f_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. ((Data.Bool.==> ((= (f x1)) (f x2))) ((= x1) x2))))) (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. ((Data.Bool.==> ((= (f x1)) (f x2))) ((= x1) x2))))) ;)

(; dict ;)

def thm_7 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (x1_2 : hol.term A => hol.forall A (x2_3 : hol.term A => hol.imp (hol.eq B (f_1 x1_2) (f_1 x2_3)) (hol.eq A x1_2 x2_3)))) (hol.forall A (x1_2 : hol.term A => hol.forall A (x2_3 : hol.term A => hol.imp (hol.eq B (f_1 x1_2) (f_1 x2_3)) (hol.eq A x1_2 x2_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.forall A (x1_2 : hol.term A => hol.forall A (x2_3 : hol.term A => hol.imp (hol.eq B (f_1 x1_2) (f_1 x2_3)) (hol.eq A x1_2 x2_3)))).

(; Theorem: |- ((= (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. ((Data.Bool.==> ((= (f x1)) (f x2))) ((= x1) x2))))) (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. ((Data.Bool.==> ((= (f x1)) (f x2))) ((= x1) x2))))) ;)

(; dict ;)

def thm_8 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (x1_2 : hol.term A => hol.forall A (x2_3 : hol.term A => hol.imp (hol.eq B (f_1 x1_2) (f_1 x2_3)) (hol.eq A x1_2 x2_3)))) (hol.forall A (x1_2 : hol.term A => hol.forall A (x2_3 : hol.term A => hol.imp (hol.eq B (f_1 x1_2) (f_1 x2_3)) (hol.eq A x1_2 x2_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.SYM hol.bool (hol.forall A (x1_2 : hol.term A => hol.forall A (x2_3 : hol.term A => hol.imp (hol.eq B (f_1 x1_2) (f_1 x2_3)) (hol.eq A x1_2 x2_3)))) (hol.forall A (x1_2 : hol.term A => hol.forall A (x2_3 : hol.term A => hol.imp (hol.eq B (f_1 x1_2) (f_1 x2_3)) (hol.eq A x1_2 x2_3)))) (thm_7 B A f_1).

(; Theorem: |- ((= (Function.injective f)) (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. ((Data.Bool.==> ((= (f x1)) (f x2))) ((= x1) x2))))) ;)

(; dict ;)

def thm_9 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (Function_2Einjective B A f_1) (hol.forall A (x1_2 : hol.term A => hol.forall A (x2_3 : hol.term A => hol.imp (hol.eq B (f_1 x1_2) (f_1 x2_3)) (hol.eq A x1_2 x2_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.TRANS hol.bool (Function_2Einjective B A f_1) (hol.forall A (x1_2 : hol.term A => hol.forall A (x2_3 : hol.term A => hol.imp (hol.eq B (f_1 x1_2) (f_1 x2_3)) (hol.eq A x1_2 x2_3)))) (hol.forall A (x1_2 : hol.term A => hol.forall A (x2_3 : hol.term A => hol.imp (hol.eq B (f_1 x1_2) (f_1 x2_3)) (hol.eq A x1_2 x2_3)))) (thm_6 B A f_1) (thm_8 B A f_1).

(; Theorem: |- (Data.Bool.! \lambda f. ((= (Function.injective f)) (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. ((Data.Bool.==> ((= (f x1)) (f x2))) ((= x1) x2)))))) ;)

(; dict ;)

def thm_10 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (Function_2Einjective B A f_1) (hol.forall A (x1_2 : hol.term A => hol.forall A (x2_3 : hol.term A => hol.imp (hol.eq B (f_1 x1_2) (f_1 x2_3)) (hol.eq A x1_2 x2_3)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => thm_9 B A f_1.

(; Theorem: |- ((= Function.surjective) \lambda _1877. (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= y) (_1877 x))))) ;)

(; dict ;)

def thm_11 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (Function_2Esurjective B A) (__1877_1 : hol.term (hol.arr A B) => hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B y_2 (__1877_1 x_3))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A B) hol.bool) (Function_2Esurjective B A).

(; Theorem: |- ((= _1877) _1877) ;)

(; dict ;)

def thm_12 : B : hol.type -> A : hol.type -> __1877_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) __1877_1 __1877_1) :=
  B : hol.type => A : hol.type => __1877_1 : hol.term (hol.arr A B) => hol.REFL (hol.arr A B) __1877_1.

(; Theorem: |- ((= (Function.surjective _1877)) (\lambda _1877. (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= y) (_1877 x)))) _1877)) ;)

(; dict ;)

def thm_13 : B : hol.type -> A : hol.type -> __1877_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (Function_2Esurjective B A __1877_1) ((__1877_2 : hol.term (hol.arr A B) => hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B y_3 (__1877_2 x_4)))) __1877_1)) :=
  B : hol.type => A : hol.type => __1877_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A B) hol.bool (Function_2Esurjective B A) (__1877_2 : hol.term (hol.arr A B) => hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B y_3 (__1877_2 x_4)))) __1877_1 __1877_1 (thm_11 B A) (thm_12 B A __1877_1).

(; Theorem: |- ((= (\lambda _1877. (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= y) (_1877 x)))) _1877)) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= y) (_1877 x))))) ;)

(; dict ;)

def thm_14 : B : hol.type -> A : hol.type -> __1877_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((__1877_2 : hol.term (hol.arr A B) => hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B y_3 (__1877_2 x_4)))) __1877_1) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B y_2 (__1877_1 x_3))))) :=
  B : hol.type => A : hol.type => __1877_1 : hol.term (hol.arr A B) => hol.BETA_CONV (hol.arr A B) hol.bool (__1877_2 : hol.term (hol.arr A B) => hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B y_3 (__1877_2 x_4)))) __1877_1.

(; Theorem: |- ((= (Function.surjective _1877)) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= y) (_1877 x))))) ;)

(; dict ;)

def thm_15 : B : hol.type -> A : hol.type -> __1877_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (Function_2Esurjective B A __1877_1) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B y_2 (__1877_1 x_3))))) :=
  B : hol.type => A : hol.type => __1877_1 : hol.term (hol.arr A B) => hol.TRANS hol.bool (Function_2Esurjective B A __1877_1) ((__1877_2 : hol.term (hol.arr A B) => hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B y_3 (__1877_2 x_4)))) __1877_1) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B y_2 (__1877_1 x_3)))) (thm_13 B A __1877_1) (thm_14 B A __1877_1).

(; Theorem: |- (Data.Bool.! \lambda _1877. ((= (Function.surjective _1877)) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= y) (_1877 x)))))) ;)

(; dict ;)

def thm_16 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (__1877_1 : hol.term (hol.arr A B) => hol.eq hol.bool (Function_2Esurjective B A __1877_1) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B y_2 (__1877_1 x_3)))))) :=
  B : hol.type => A : hol.type => __1877_1 : hol.term (hol.arr A B) => thm_15 B A __1877_1.

(; Theorem: |- ((= (Function.surjective f)) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= y) (f x))))) ;)

(; dict ;)

def thm_17 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (Function_2Esurjective B A f_1) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B y_2 (f_1 x_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => (B : hol.type => A : hol.type => __1877_1 : hol.term (hol.arr A B) => thm_16 B A __1877_1) B A f_1.

(; Theorem: |- ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= y) (f x))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= y) (f x))))) ;)

(; dict ;)

def thm_18 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B y_2 (f_1 x_3)))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B y_2 (f_1 x_3))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B y_2 (f_1 x_3)))).

(; Theorem: |- ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= y) (f x))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= y) (f x))))) ;)

(; dict ;)

def thm_19 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B y_2 (f_1 x_3)))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B y_2 (f_1 x_3))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.SYM hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B y_2 (f_1 x_3)))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B y_2 (f_1 x_3)))) (thm_18 A B f_1).

(; Theorem: |- ((= (Function.surjective f)) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= y) (f x))))) ;)

(; dict ;)

def thm_20 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (Function_2Esurjective B A f_1) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B y_2 (f_1 x_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.TRANS hol.bool (Function_2Esurjective B A f_1) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B y_2 (f_1 x_3)))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B y_2 (f_1 x_3)))) (thm_17 B A f_1) (thm_19 A B f_1).

(; Theorem: |- (Data.Bool.! \lambda f. ((= (Function.surjective f)) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= y) (f x)))))) ;)

(; dict ;)

def thm_21 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (Function_2Esurjective B A f_1) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B y_2 (f_1 x_3)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => thm_20 B A f_1.
