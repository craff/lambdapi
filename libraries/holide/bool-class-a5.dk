
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME bool_2Dclass_2Da5.

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1))).

(; axiom ;)

thm_1 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))).

(; axiom ;)

thm_3 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false).

(; axiom ;)

thm_4 : hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true).

(; axiom ;)

thm_5 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true)).

(; axiom ;)

thm_6 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true)).

(; axiom ;)

thm_7 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1)).

(; axiom ;)

thm_8 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1)).

(; axiom ;)

thm_9 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1)).

(; axiom ;)

thm_10 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)).

(; axiom ;)

thm_11 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)).

(; axiom ;)

thm_12 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)).

(; axiom ;)

thm_13 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)).

(; axiom ;)

thm_14 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)).

(; axiom ;)

thm_15 : hol.proof hol.true.

(; axiom ;)

thm_16 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)).

(; axiom ;)

thm_17 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))).

(; axiom ;)

thm_18 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.or (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp p_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))).

(; axiom ;)

thm_19 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1)).

(; axiom ;)

thm_20 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1)).

(; axiom ;)

thm_21 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)).

(; axiom ;)

thm_22 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true)).

(; axiom ;)

thm_23 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.imp t_1 t_1)).

(; axiom ;)

thm_24 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_25 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool) (hol.forall hol.bool)) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool).

(; Theorem: |- ((= \lambda b. (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))))) \lambda b. (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))))) ;)

(; dict ;)

def thm_26 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3))))) (b_1 : hol.term hol.bool => hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3))))).

(; Theorem: |- ((= \lambda b. (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))))) \lambda b. (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))))) ;)

(; dict ;)

def thm_27 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3))))) (b_1 : hol.term hol.bool => hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3))))) (b_1 : hol.term hol.bool => hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3))))) (b_1 : hol.term hol.bool => hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3))))) thm_26 thm_26.

(; Theorem: |- ((= (Data.Bool.! \lambda b. (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2))))))) (Data.Bool.! \lambda b. (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2))))))) ;)

(; dict ;)

def thm_28 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3)))))) (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (b_1 : hol.term hol.bool => hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3))))) (b_1 : hol.term hol.bool => hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3))))) thm_25 thm_27.

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2))))) \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2))))) ;)

(; dict ;)

def thm_29 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3)))) (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3))))) :=
  b_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3)))).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2))))) \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2))))) ;)

(; dict ;)

def thm_30 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3)))) (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3))))) :=
  b_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3)))) (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3)))) (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3)))) (thm_29 b_1) (thm_29 b_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))))) ;)

(; dict ;)

def thm_31 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3))))) (hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3)))))) :=
  b_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3)))) (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3)))) thm_25 (thm_30 b_1).

(; Theorem: |- ((= \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))) \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))) ;)

(; dict ;)

def thm_32 : t1_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_2 t1_1 t2_3) (hol.and (hol.or (hol.not b_2) t1_1) (hol.or b_2 t2_3))) (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_2 t1_1 t2_3) (hol.and (hol.or (hol.not b_2) t1_1) (hol.or b_2 t2_3)))) :=
  t1_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_2 t1_1 t2_3) (hol.and (hol.or (hol.not b_2) t1_1) (hol.or b_2 t2_3))).

(; Theorem: |- ((= \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))) \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))) ;)

(; dict ;)

def thm_33 : t1_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_2 t1_1 t2_3) (hol.and (hol.or (hol.not b_2) t1_1) (hol.or b_2 t2_3))) (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_2 t1_1 t2_3) (hol.and (hol.or (hol.not b_2) t1_1) (hol.or b_2 t2_3)))) :=
  t1_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_2 t1_1 t2_3) (hol.and (hol.or (hol.not b_2) t1_1) (hol.or b_2 t2_3))) (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_2 t1_1 t2_3) (hol.and (hol.or (hol.not b_2) t1_1) (hol.or b_2 t2_3))) (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_2 t1_1 t2_3) (hol.and (hol.or (hol.not b_2) t1_1) (hol.or b_2 t2_3))) (thm_32 t1_1 b_2) (thm_32 t1_1 b_2).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2))))) (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2))))) ;)

(; dict ;)

def thm_34 : t1_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_2 t1_1 t2_3) (hol.and (hol.or (hol.not b_2) t1_1) (hol.or b_2 t2_3)))) (hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_2 t1_1 t2_3) (hol.and (hol.or (hol.not b_2) t1_1) (hol.or b_2 t2_3))))) :=
  t1_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_2 t1_1 t2_3) (hol.and (hol.or (hol.not b_2) t1_1) (hol.or b_2 t2_3))) (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_2 t1_1 t2_3) (hol.and (hol.or (hol.not b_2) t1_1) (hol.or b_2 t2_3))) thm_25 (thm_33 t1_1 b_2).

(; Theorem: |- ((= (= (\lambda _452. ((= (((Data.Bool.cond _452) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _452)) t1)) ((Data.Bool.\/ _452) t2))) b))) (= (\lambda _452. ((= (((Data.Bool.cond _452) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _452)) t1)) ((Data.Bool.\/ _452) t2))) b))) ;)

(; dict ;)

def thm_35 : b_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) b_1)) (hol.eq hol.bool ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) b_1))) :=
  b_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) b_1)).

(; Theorem: |- ((= (\lambda _452. ((= (((Data.Bool.cond _452) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _452)) t1)) ((Data.Bool.\/ _452) t2))) Data.Bool.F)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) t1)) ((Data.Bool.\/ Data.Bool.F) t2)))) ;)

(; dict ;)

def thm_36 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__452_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_3 t1_2 t2_1) (hol.and (hol.or (hol.not __452_3) t1_2) (hol.or __452_3 t2_1))) hol.false) (hol.eq hol.bool (hol.cond hol.bool hol.false t1_2 t2_1) (hol.and (hol.or (hol.not hol.false) t1_2) (hol.or hol.false t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__452_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_3 t1_2 t2_1) (hol.and (hol.or (hol.not __452_3) t1_2) (hol.or __452_3 t2_1))) hol.false.

(; Theorem: |- ((= ((= (\lambda _452. ((= (((Data.Bool.cond _452) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _452)) t1)) ((Data.Bool.\/ _452) t2))) b)) (\lambda _452. ((= (((Data.Bool.cond _452) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _452)) t1)) ((Data.Bool.\/ _452) t2))) Data.Bool.F))) ((= (\lambda _452. ((= (((Data.Bool.cond _452) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _452)) t1)) ((Data.Bool.\/ _452) t2))) b)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) t1)) ((Data.Bool.\/ Data.Bool.F) t2))))) ;)

(; dict ;)

def thm_37 : b_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) b_1) ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) hol.false)) (hol.eq hol.bool ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) b_1) (hol.eq hol.bool (hol.cond hol.bool hol.false t1_3 t2_2) (hol.and (hol.or (hol.not hol.false) t1_3) (hol.or hol.false t2_2))))) :=
  b_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) b_1)) (hol.eq hol.bool ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) b_1)) ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) hol.false) (hol.eq hol.bool (hol.cond hol.bool hol.false t1_3 t2_2) (hol.and (hol.or (hol.not hol.false) t1_3) (hol.or hol.false t2_2))) (thm_35 b_1 t2_2 t1_3) (thm_36 t2_2 t1_3).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_38 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool) (hol.eq hol.bool)) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool).

(; Theorem: |- ((= (\lambda _452. ((= (((Data.Bool.cond _452) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _452)) t1)) ((Data.Bool.\/ _452) t2))) b)) ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))) ;)

(; dict ;)

def thm_39 : b_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) b_1) (hol.eq hol.bool (hol.cond hol.bool b_1 t1_3 t2_2) (hol.and (hol.or (hol.not b_1) t1_3) (hol.or b_1 t2_2)))) :=
  b_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) b_1.

(; Theorem: |- ((= (= (\lambda _452. ((= (((Data.Bool.cond _452) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _452)) t1)) ((Data.Bool.\/ _452) t2))) b))) (= ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2))))) ;)

(; dict ;)

def thm_40 : b_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) b_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool b_1 t1_3 t2_2) (hol.and (hol.or (hol.not b_1) t1_3) (hol.or b_1 t2_2))))) :=
  b_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) b_1) (hol.eq hol.bool (hol.cond hol.bool b_1 t1_3 t2_2) (hol.and (hol.or (hol.not b_1) t1_3) (hol.or b_1 t2_2))) thm_38 (thm_39 b_1 t2_2 t1_3).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) t1)) ((Data.Bool.\/ Data.Bool.F) t2)))) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) t1)) ((Data.Bool.\/ Data.Bool.F) t2)))) ;)

(; dict ;)

def thm_41 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool hol.false t1_2 t2_1) (hol.and (hol.or (hol.not hol.false) t1_2) (hol.or hol.false t2_1))) (hol.eq hol.bool (hol.cond hol.bool hol.false t1_2 t2_1) (hol.and (hol.or (hol.not hol.false) t1_2) (hol.or hol.false t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.cond hol.bool hol.false t1_2 t2_1) (hol.and (hol.or (hol.not hol.false) t1_2) (hol.or hol.false t2_1))).

(; Theorem: |- ((= ((= (\lambda _452. ((= (((Data.Bool.cond _452) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _452)) t1)) ((Data.Bool.\/ _452) t2))) b)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) t1)) ((Data.Bool.\/ Data.Bool.F) t2))))) ((= ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) t1)) ((Data.Bool.\/ Data.Bool.F) t2))))) ;)

(; dict ;)

def thm_42 : b_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) b_1) (hol.eq hol.bool (hol.cond hol.bool hol.false t1_3 t2_2) (hol.and (hol.or (hol.not hol.false) t1_3) (hol.or hol.false t2_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool b_1 t1_3 t2_2) (hol.and (hol.or (hol.not b_1) t1_3) (hol.or b_1 t2_2))) (hol.eq hol.bool (hol.cond hol.bool hol.false t1_3 t2_2) (hol.and (hol.or (hol.not hol.false) t1_3) (hol.or hol.false t2_2))))) :=
  b_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) b_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool b_1 t1_3 t2_2) (hol.and (hol.or (hol.not b_1) t1_3) (hol.or b_1 t2_2)))) (hol.eq hol.bool (hol.cond hol.bool hol.false t1_3 t2_2) (hol.and (hol.or (hol.not hol.false) t1_3) (hol.or hol.false t2_2))) (hol.eq hol.bool (hol.cond hol.bool hol.false t1_3 t2_2) (hol.and (hol.or (hol.not hol.false) t1_3) (hol.or hol.false t2_2))) (thm_40 b_1 t2_2 t1_3) (thm_41 t2_2 t1_3).

(; Theorem: |- ((= ((= (\lambda _452. ((= (((Data.Bool.cond _452) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _452)) t1)) ((Data.Bool.\/ _452) t2))) b)) (\lambda _452. ((= (((Data.Bool.cond _452) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _452)) t1)) ((Data.Bool.\/ _452) t2))) Data.Bool.F))) ((= ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) t1)) ((Data.Bool.\/ Data.Bool.F) t2))))) ;)

(; dict ;)

def thm_43 : b_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) b_1) ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool b_1 t1_3 t2_2) (hol.and (hol.or (hol.not b_1) t1_3) (hol.or b_1 t2_2))) (hol.eq hol.bool (hol.cond hol.bool hol.false t1_3 t2_2) (hol.and (hol.or (hol.not hol.false) t1_3) (hol.or hol.false t2_2))))) :=
  b_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) b_1) ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) hol.false)) (hol.eq hol.bool ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) b_1) (hol.eq hol.bool (hol.cond hol.bool hol.false t1_3 t2_2) (hol.and (hol.or (hol.not hol.false) t1_3) (hol.or hol.false t2_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool b_1 t1_3 t2_2) (hol.and (hol.or (hol.not b_1) t1_3) (hol.or b_1 t2_2))) (hol.eq hol.bool (hol.cond hol.bool hol.false t1_3 t2_2) (hol.and (hol.or (hol.not hol.false) t1_3) (hol.or hol.false t2_2)))) (thm_37 b_1 t2_2 t1_3) (thm_42 b_1 t2_2 t1_3).

(; Theorem: |- ((= \lambda _452. ((= (((Data.Bool.cond _452) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _452)) t1)) ((Data.Bool.\/ _452) t2)))) \lambda _452. ((= (((Data.Bool.cond _452) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _452)) t1)) ((Data.Bool.\/ _452) t2)))) ;)

(; dict ;)

def thm_44 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__452_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_3 t1_2 t2_1) (hol.and (hol.or (hol.not __452_3) t1_2) (hol.or __452_3 t2_1))) (__452_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_3 t1_2 t2_1) (hol.and (hol.or (hol.not __452_3) t1_2) (hol.or __452_3 t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__452_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_3 t1_2 t2_1) (hol.and (hol.or (hol.not __452_3) t1_2) (hol.or __452_3 t2_1))).

(; Theorem: |- ((= b) Data.Bool.F) ;)

(; dict ;)

def thm_45 : b_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) -> hol.proof (hol.eq hol.bool b_1 hol.false) :=
  b_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) => hyp_1.

(; Theorem: |- ((= (\lambda _452. ((= (((Data.Bool.cond _452) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _452)) t1)) ((Data.Bool.\/ _452) t2))) b)) (\lambda _452. ((= (((Data.Bool.cond _452) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _452)) t1)) ((Data.Bool.\/ _452) t2))) Data.Bool.F)) ;)

(; dict ;)

def thm_46 : b_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) -> hol.proof (hol.eq hol.bool ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) b_1) ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) hol.false)) :=
  b_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) => hol.APP_THM hol.bool hol.bool (__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) (__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_3 t2_2) (hol.and (hol.or (hol.not __452_4) t1_3) (hol.or __452_4 t2_2))) b_1 hol.false (thm_44 t2_2 t1_3) (thm_45 b_1 hyp_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) t1)) ((Data.Bool.\/ Data.Bool.F) t2)))) ;)

(; dict ;)

def thm_47 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1))) (hol.eq hol.bool (hol.cond hol.bool hol.false t1_2 t2_1) (hol.and (hol.or (hol.not hol.false) t1_2) (hol.or hol.false t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_2 t2_1) (hol.and (hol.or (hol.not __452_4) t1_2) (hol.or __452_4 t2_1))) b_3) ((__452_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __452_4 t1_2 t2_1) (hol.and (hol.or (hol.not __452_4) t1_2) (hol.or __452_4 t2_1))) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1))) (hol.eq hol.bool (hol.cond hol.bool hol.false t1_2 t2_1) (hol.and (hol.or (hol.not hol.false) t1_2) (hol.or hol.false t2_1)))) (thm_43 b_3 t2_1 t1_2) (thm_46 b_3 t2_1 t1_2 hyp_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) t1)) ((Data.Bool.\/ Data.Bool.F) t2)))) ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))) ;)

(; dict ;)

def thm_48 : b_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool hol.false t1_3 t2_2) (hol.and (hol.or (hol.not hol.false) t1_3) (hol.or hol.false t2_2))) (hol.eq hol.bool (hol.cond hol.bool b_1 t1_3 t2_2) (hol.and (hol.or (hol.not b_1) t1_3) (hol.or b_1 t2_2)))) :=
  b_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) => hol.SYM hol.bool (hol.eq hol.bool (hol.cond hol.bool b_1 t1_3 t2_2) (hol.and (hol.or (hol.not b_1) t1_3) (hol.or b_1 t2_2))) (hol.eq hol.bool (hol.cond hol.bool hol.false t1_3 t2_2) (hol.and (hol.or (hol.not hol.false) t1_3) (hol.or hol.false t2_2))) (thm_47 t2_2 t1_3 b_1 hyp_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ;)

(; dict ;)

def thm_49 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.REFL hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ;)

(; dict ;)

def thm_50 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.TRANS hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (thm_49 A t2_1 t1_2) (thm_49 A t2_1 t1_2).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_51 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) ;)

(; dict ;)

def thm_52 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) ;)

(; dict ;)

def thm_53 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (thm_52 A) (thm_52 A).

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))))) ;)

(; dict ;)

def thm_54 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (thm_51 A) (thm_53 A).

(; Theorem: |- ((= \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_55 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) :=
  A : hol.type => t1_1 : hol.term A => hol.REFL (hol.arr A hol.bool) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)).

(; Theorem: |- ((= \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_56 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) :=
  A : hol.type => t1_1 : hol.term A => hol.TRANS (hol.arr A hol.bool) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (thm_55 A t1_1) (thm_55 A t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) ;)

(; dict ;)

def thm_57 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) :=
  A : hol.type => t1_1 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (thm_51 A) (thm_56 A t1_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ;)

(; dict ;)

def thm_58 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.REFL hol.bool (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ;)

(; dict ;)

def thm_59 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.TRANS hol.bool (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (thm_58 A t2_1 t1_2) (thm_58 A t2_1 t1_2).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ;)

(; dict ;)

def thm_60 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1)) :=
  A : hol.type => t1_1 : hol.term A => thm_0 A t1_1.

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1) ;)

(; dict ;)

def thm_61 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_60 A t1_2 t2_1.

(; Theorem: |- ((= (= ((Data.Bool./\ p) q))) (= ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_62 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_63 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q))) ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_64 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_62 q_1 p_2) (thm_63 q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool./\ p))) (= (Data.Bool./\ p))) ;)

(; dict ;)

def thm_65 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_66 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1.

(; Theorem: |- ((= ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p))) ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_67 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)) (thm_65 p_1) (thm_66 p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_68 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 p_1) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool p_1.

(; Theorem: |- ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) ;)

(; dict ;)

def thm_69 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1 p_1 thm_1 (thm_68 p_1).

(; Theorem: |- ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_70 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) (thm_67 p_1) (thm_69 p_1).

(; Theorem: |- ((= q) q) ;)

(; dict ;)

def thm_71 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_1 q_1) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) ;)

(; dict ;)

def thm_72 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1 q_1 (thm_70 p_2) (thm_71 q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_73 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) (thm_64 q_1 p_2) (thm_72 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_74 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_75 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hol.EQ_MP (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_73 q_1 p_2) (thm_74 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) q))) q) ;)

(; dict ;)

def thm_76 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 q_1)) q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_75 q_1 p_2 hyp_1 q_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_77 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_78 : q_1 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof q_1 :=
  q_1 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_79 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.PROP_EXT p_2 q_1 (hyp_3 : hol.proof q_1 => thm_77 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_78 q_1 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_80 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.EQ_MP p_1 q_2 (thm_79 q_2 p_1 hyp_1 hyp_2) (thm_77 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) q) ;)

(; dict ;)

def thm_81 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 q_2) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_80 p_1 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) q)) ;)

(; dict ;)

def thm_82 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_81 p_2 q_1 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_83 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_76 q_2 p_1 hyp_1 (thm_82 q_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_84 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_73 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) x)) ;)

(; dict ;)

def thm_85 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) -> hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) x) ;)

(; dict ;)

def thm_86 : p_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) -> hol.proof (hol.imp q_3 x_2) :=
  p_1 : hol.term hol.bool => x_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) => thm_85 x_2 q_3 p_1 hyp_2 (thm_77 p_1 hyp_1).

(; Theorem: |- x ;)

(; dict ;)

def thm_87 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) -> hol.proof x_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) => thm_86 p_2 x_3 q_1 hyp_1 hyp_3 (thm_78 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x) ;)

(; dict ;)

def thm_88 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.imp (hol.imp p_3 (hol.imp q_2 x_1)) x_1) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hyp_3 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => thm_87 q_2 p_3 x_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_89 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => x_3 : hol.term hol.bool => thm_88 x_3 q_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_90 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1) (thm_84 q_1 p_2) (thm_89 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= q) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_91 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool q_2 (hol.and p_1 q_2)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hol.PROP_EXT q_2 (hol.and p_1 q_2) (hyp_2 : hol.proof (hol.and p_1 q_2) => thm_83 p_1 q_2 hyp_2) (hyp_2 : hol.proof q_2 => thm_90 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_92 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1))) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hyp_1 : hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_91 p_1 q_2 hyp_1) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) hyp_1.

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_93 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1))) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.PROVE_HYP (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1))) ((A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.EQ_MP (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (thm_59 A t2_1 t1_2) (thm_61 A t2_1 t1_2)) A t2_1 t1_2) (hyp_1 : hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) => thm_92 A t2_1 t1_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ;)

(; dict ;)

def thm_94 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) :=
  A : hol.type => t1_1 : hol.term A => thm_2 A t1_1.

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2) ;)

(; dict ;)

def thm_95 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_94 A t1_2 t2_1.

(; Theorem: |- ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ;)

(; dict ;)

def thm_96 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.EQ_MP (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) (thm_93 A t2_1 t1_2) ((A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.EQ_MP (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (thm_49 A t2_1 t1_2) (thm_95 A t2_1 t1_2)) A t2_1 t1_2).

(; Theorem: |- (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_97 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) :=
  A : hol.type => t1_1 : hol.term A => t2_2 : hol.term A => thm_96 A t2_2 t1_1.

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) ;)

(; dict ;)

def thm_98 : A : hol.type -> hol.proof (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) :=
  A : hol.type => t1_1 : hol.term A => hol.EQ_MP (hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (thm_57 A t1_1) (thm_97 A t1_1).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2) ;)

(; dict ;)

def thm_99 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) -> hol.proof (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_83 p_1 q_2 hyp_1) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) hyp_1.

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2) ;)

(; dict ;)

def thm_100 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.PROVE_HYP (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.EQ_MP (hol.forall A (t1_3 : hol.term A => hol.forall A (t2_4 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_3 t2_4) t1_3) (hol.eq A (hol.cond A hol.false t1_3 t2_4) t2_4)))) (hol.forall A (t1_3 : hol.term A => hol.forall A (t2_4 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_3 t2_4) t1_3) (hol.eq A (hol.cond A hol.false t1_3 t2_4) t2_4)))) (thm_54 A) (thm_98 A) t1_2 t2_1) (hyp_1 : hol.proof (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) => thm_99 A t2_1 t1_2 hyp_1).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2) ;)

(; dict ;)

def thm_101 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.cond hol.bool hol.false t1_2 t2_1) t2_1) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => (A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.EQ_MP (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (thm_50 A t2_1 t1_2) (thm_100 A t2_1 t1_2)) hol.bool t2_1 t1_2.

(; Theorem: |- ((= (= (((Data.Bool.cond Data.Bool.F) t1) t2))) (= t2)) ;)

(; dict ;)

def thm_102 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.cond hol.bool hol.false t1_2 t2_1)) (hol.eq hol.bool t2_1)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.cond hol.bool hol.false t1_2 t2_1) t2_1 thm_38 (thm_101 t2_1 t1_2).

(; Theorem: |- ((= Data.Bool./\) Data.Bool./\) ;)

(; dict ;)

def thm_103 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and hol.and) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and.

(; Theorem: |- ((= Data.Bool.\/) Data.Bool.\/) ;)

(; dict ;)

def thm_104 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.or hol.or) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.or.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_105 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.REFL hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_106 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_105 thm_105.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ;)

(; dict ;)

def thm_107 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false)) :=
  hol.REFL hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ;)

(; dict ;)

def thm_108 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false)) :=
  hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_107 thm_107.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_109 : hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_91 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true) hyp_1.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_110 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hol.PROVE_HYP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) (hol.EQ_MP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_108 thm_3) (hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) => thm_109 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_111 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) thm_110 (hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_105 thm_4).

(; Theorem: |- ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_112 : hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) -> hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true) :=
  hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_83 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true) hyp_1.

(; Theorem: |- ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_113 : hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true) :=
  hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_111 (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) => thm_112 hyp_1).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.~ Data.Bool.F))) (Data.Bool.\/ Data.Bool.T)) ;)

(; dict ;)

def thm_114 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.not hol.false)) (hol.or hol.true)) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.not hol.false) hol.true thm_104 (hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_106 thm_113).

(; Theorem: |- ((= t1) t1) ;)

(; dict ;)

def thm_115 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t1_1 t1_1) :=
  t1_1 : hol.term hol.bool => hol.REFL hol.bool t1_1.

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) t1)) ((Data.Bool.\/ Data.Bool.T) t1)) ;)

(; dict ;)

def thm_116 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.not hol.false) t1_1) (hol.or hol.true t1_1)) :=
  t1_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.or (hol.not hol.false)) (hol.or hol.true) t1_1 t1_1 thm_114 (thm_115 t1_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_117 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or hol.true t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_118 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (thm_117 t_1) (thm_117 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_119 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_120 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) thm_119 thm_119.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))))) ;)

(; dict ;)

def thm_121 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) thm_25 thm_120.

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T) ;)

(; dict ;)

def thm_122 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) :=
  t_1 : hol.term hol.bool => thm_5 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_123 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_91 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_124 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (thm_117 t_1) (thm_122 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) => thm_123 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_125 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or t_1 hol.true) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_126 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (thm_125 t_1) (thm_125 t_1).

(; Theorem: |- ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_127 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => thm_6 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ;)

(; dict ;)

def thm_128 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_91 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ;)

(; dict ;)

def thm_129 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (thm_126 t_1) (thm_127 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) => thm_128 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ;)

(; dict ;)

def thm_130 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or hol.false t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ;)

(; dict ;)

def thm_131 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (thm_130 t_1) (thm_130 t_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) t)) t) ;)

(; dict ;)

def thm_132 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_7 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_133 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_91 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_134 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (thm_131 t_1) (thm_132 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) => thm_133 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ;)

(; dict ;)

def thm_135 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or t_1 hol.false) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ;)

(; dict ;)

def thm_136 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (thm_135 t_1) (thm_135 t_1).

(; Theorem: |- ((= ((Data.Bool.\/ t) Data.Bool.F)) t) ;)

(; dict ;)

def thm_137 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) :=
  t_1 : hol.term hol.bool => thm_8 t_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_138 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_91 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_139 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.EQ_MP (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (thm_136 t_1) (thm_137 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) => thm_138 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) t)) t)) ((= ((Data.Bool.\/ t) t)) t)) ;)

(; dict ;)

def thm_140 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) t)) t)) ((= ((Data.Bool.\/ t) t)) t)) ;)

(; dict ;)

def thm_141 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1) (thm_140 t_1) (thm_140 t_1).

(; Theorem: |- ((= ((Data.Bool.\/ t) t)) t) ;)

(; dict ;)

def thm_142 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_9 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)) ;)

(; dict ;)

def thm_143 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (thm_139 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1) (thm_141 t_1) (thm_142 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_144 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (thm_134 t_1) (thm_143 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_145 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (thm_129 t_1) (thm_144 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ;)

(; dict ;)

def thm_146 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (thm_124 t_1) (thm_145 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_147 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => thm_146 t_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) p))) p) ;)

(; dict ;)

def thm_148 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 p_2)) p_2) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_75 q_1 p_2 hyp_1 p_2.

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_149 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.SYM hol.bool p_1 q_2 (thm_79 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_150 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP q_1 p_2 (thm_149 p_2 q_1 hyp_1 hyp_2) (thm_78 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_151 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_150 q_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_152 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_151 p_2 q_1 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_153 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_148 q_1 p_2 hyp_1 (thm_152 q_1 p_2).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T) ;)

(; dict ;)

def thm_154 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) -> hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_153 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T) ;)

(; dict ;)

def thm_155 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_2) hol.true) (hol.and (hol.eq hol.bool (hol.or t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_2) t_2) (hol.and (hol.eq hol.bool (hol.or t_2 hol.false) t_2) (hol.eq hol.bool (hol.or t_2 t_2) t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_2) hol.true) (hol.and (hol.eq hol.bool (hol.or t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_2) t_2) (hol.and (hol.eq hol.bool (hol.or t_2 hol.false) t_2) (hol.eq hol.bool (hol.or t_2 t_2) t_2)))))) thm_121 thm_147 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) => thm_154 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) t1)) Data.Bool.T) ;)

(; dict ;)

def thm_156 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.true t1_1) hol.true) :=
  t1_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (thm_118 t_1) (thm_155 t_1)) t1_1.

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) t1)) Data.Bool.T) ;)

(; dict ;)

def thm_157 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.not hol.false) t1_1) hol.true) :=
  t1_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.or (hol.not hol.false) t1_1) (hol.or hol.true t1_1) hol.true (thm_116 t1_1) (thm_156 t1_1).

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) t1))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_158 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.or (hol.not hol.false) t1_1)) (hol.and hol.true)) :=
  t1_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.or (hol.not hol.false) t1_1) hol.true thm_103 (thm_157 t1_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) t2)) t2) ;)

(; dict ;)

def thm_159 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false t2_1) t2_1) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_132 t_1) t2_1.

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) t1)) ((Data.Bool.\/ Data.Bool.F) t2))) ((Data.Bool./\ Data.Bool.T) t2)) ;)

(; dict ;)

def thm_160 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.or (hol.not hol.false) t1_2) (hol.or hol.false t2_1)) (hol.and hol.true t2_1)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and (hol.or (hol.not hol.false) t1_2)) (hol.and hol.true) (hol.or hol.false t2_1) t2_1 (thm_158 t1_2) (thm_159 t2_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_161 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_162 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_161 t_1) (thm_161 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_163 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_164 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_163 thm_163.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) ;)

(; dict ;)

def thm_165 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_25 thm_164.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_166 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_10 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_167 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_91 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_168 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_161 t_1) (thm_166 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => thm_167 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_169 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_170 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_169 t_1) (thm_169 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_171 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_11 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_172 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_91 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_173 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_170 t_1) (thm_171 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => thm_172 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_174 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_175 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_174 t_1) (thm_174 t_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_176 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => thm_12 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_177 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_91 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_178 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_175 t_1) (thm_176 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => thm_177 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_179 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_180 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_179 t_1) (thm_179 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_181 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => thm_13 t_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_182 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_91 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_183 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_180 t_1) (thm_181 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => thm_182 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_184 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_185 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_184 t_1) (thm_184 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) t)) t) ;)

(; dict ;)

def thm_186 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_14 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_187 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (thm_183 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_185 t_1) (thm_186 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_188 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (thm_178 t_1) (thm_187 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_189 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (thm_173 t_1) (thm_188 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_190 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (thm_168 t_1) (thm_189 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_191 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => thm_190 t_1.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_192 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_153 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.eq hol.bool (hol.and hol.true t_1) t_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_193 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) thm_165 thm_191 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => thm_192 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t2)) t2) ;)

(; dict ;)

def thm_194 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t2_1) t2_1) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_162 t_1) (thm_193 t_1)) t2_1.

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) t1)) ((Data.Bool.\/ Data.Bool.F) t2))) t2) ;)

(; dict ;)

def thm_195 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.or (hol.not hol.false) t1_2) (hol.or hol.false t2_1)) t2_1) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.and (hol.or (hol.not hol.false) t1_2) (hol.or hol.false t2_1)) (hol.and hol.true t2_1) t2_1 (thm_160 t2_1 t1_2) (thm_194 t2_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) t1)) ((Data.Bool.\/ Data.Bool.F) t2)))) ((= t2) t2)) ;)

(; dict ;)

def thm_196 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool hol.false t1_2 t2_1) (hol.and (hol.or (hol.not hol.false) t1_2) (hol.or hol.false t2_1))) (hol.eq hol.bool t2_1 t2_1)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.cond hol.bool hol.false t1_2 t2_1)) (hol.eq hol.bool t2_1) (hol.and (hol.or (hol.not hol.false) t1_2) (hol.or hol.false t2_1)) t2_1 (thm_102 t2_1 t1_2) (thm_195 t2_1 t1_2).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_197 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_198 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_197 A x_1) (thm_197 A x_1).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_199 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_200 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_199 A) (thm_199 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_201 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_51 A) (thm_200 A).

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_202 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_203 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_202 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_204 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_203 t_1 hyp_1) thm_15.

(; Theorem: |- t ;)

(; dict ;)

def thm_205 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_206 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_205 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_15).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_207 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_204 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_206 t_1 hyp_1).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_208 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_207 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_209 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => thm_16 A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_210 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_208 A x_1) (thm_209 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_211 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_197 A x_1) (thm_210 A x_1)) A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_212 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_1 x_1) hol.true) :=
  x_1 : hol.term hol.bool => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_198 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_201 A) (thm_211 A) x_1)) hol.bool x_1.

(; Theorem: |- ((= ((= t2) t2)) Data.Bool.T) ;)

(; dict ;)

def thm_213 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t2_1 t2_1) hol.true) :=
  t2_1 : hol.term hol.bool => (x_1 : hol.term hol.bool => thm_212 x_1) t2_1.

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) t1)) ((Data.Bool.\/ Data.Bool.F) t2)))) Data.Bool.T) ;)

(; dict ;)

def thm_214 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool hol.false t1_2 t2_1) (hol.and (hol.or (hol.not hol.false) t1_2) (hol.or hol.false t2_1))) hol.true) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.cond hol.bool hol.false t1_2 t2_1) (hol.and (hol.or (hol.not hol.false) t1_2) (hol.or hol.false t2_1))) (hol.eq hol.bool t2_1 t2_1) hol.true (thm_196 t2_1 t1_2) (thm_213 t2_1).

(; Theorem: |- ((= Data.Bool.T) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) t1)) ((Data.Bool.\/ Data.Bool.F) t2)))) ;)

(; dict ;)

def thm_215 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.cond hol.bool hol.false t1_2 t2_1) (hol.and (hol.or (hol.not hol.false) t1_2) (hol.or hol.false t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.cond hol.bool hol.false t1_2 t2_1) (hol.and (hol.or (hol.not hol.false) t1_2) (hol.or hol.false t2_1))) hol.true (thm_214 t2_1 t1_2).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) t1)) ((Data.Bool.\/ Data.Bool.F) t2))) ;)

(; dict ;)

def thm_216 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.cond hol.bool hol.false t1_2 t2_1) (hol.and (hol.or (hol.not hol.false) t1_2) (hol.or hol.false t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.cond hol.bool hol.false t1_2 t2_1) (hol.and (hol.or (hol.not hol.false) t1_2) (hol.or hol.false t2_1))) (thm_215 t2_1 t1_2) thm_15.

(; Theorem: |- ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2))) ;)

(; dict ;)

def thm_217 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.false) -> hol.proof (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.false) => hol.EQ_MP (hol.eq hol.bool (hol.cond hol.bool hol.false t1_2 t2_1) (hol.and (hol.or (hol.not hol.false) t1_2) (hol.or hol.false t2_1))) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1))) (thm_48 b_3 t2_1 t1_2 hyp_1) (thm_216 t2_1 t1_2).

(; Theorem: |- ((Data.Bool.==> ((= b) Data.Bool.F)) ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))) ;)

(; dict ;)

def thm_218 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.false) => thm_217 t2_1 t1_2 b_3 hyp_1.

(; Theorem: |- ((= (= (\lambda _450. ((= (((Data.Bool.cond _450) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _450)) t1)) ((Data.Bool.\/ _450) t2))) b))) (= (\lambda _450. ((= (((Data.Bool.cond _450) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _450)) t1)) ((Data.Bool.\/ _450) t2))) b))) ;)

(; dict ;)

def thm_219 : b_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) b_1)) (hol.eq hol.bool ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) b_1))) :=
  b_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) b_1)).

(; Theorem: |- ((= (\lambda _450. ((= (((Data.Bool.cond _450) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _450)) t1)) ((Data.Bool.\/ _450) t2))) Data.Bool.T)) ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) t1)) ((Data.Bool.\/ Data.Bool.T) t2)))) ;)

(; dict ;)

def thm_220 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__450_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_3 t1_2 t2_1) (hol.and (hol.or (hol.not __450_3) t1_2) (hol.or __450_3 t2_1))) hol.true) (hol.eq hol.bool (hol.cond hol.bool hol.true t1_2 t2_1) (hol.and (hol.or (hol.not hol.true) t1_2) (hol.or hol.true t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__450_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_3 t1_2 t2_1) (hol.and (hol.or (hol.not __450_3) t1_2) (hol.or __450_3 t2_1))) hol.true.

(; Theorem: |- ((= ((= (\lambda _450. ((= (((Data.Bool.cond _450) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _450)) t1)) ((Data.Bool.\/ _450) t2))) b)) (\lambda _450. ((= (((Data.Bool.cond _450) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _450)) t1)) ((Data.Bool.\/ _450) t2))) Data.Bool.T))) ((= (\lambda _450. ((= (((Data.Bool.cond _450) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _450)) t1)) ((Data.Bool.\/ _450) t2))) b)) ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) t1)) ((Data.Bool.\/ Data.Bool.T) t2))))) ;)

(; dict ;)

def thm_221 : b_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) b_1) ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) hol.true)) (hol.eq hol.bool ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) b_1) (hol.eq hol.bool (hol.cond hol.bool hol.true t1_3 t2_2) (hol.and (hol.or (hol.not hol.true) t1_3) (hol.or hol.true t2_2))))) :=
  b_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) b_1)) (hol.eq hol.bool ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) b_1)) ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) hol.true) (hol.eq hol.bool (hol.cond hol.bool hol.true t1_3 t2_2) (hol.and (hol.or (hol.not hol.true) t1_3) (hol.or hol.true t2_2))) (thm_219 b_1 t2_2 t1_3) (thm_220 t2_2 t1_3).

(; Theorem: |- ((= (\lambda _450. ((= (((Data.Bool.cond _450) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _450)) t1)) ((Data.Bool.\/ _450) t2))) b)) ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))) ;)

(; dict ;)

def thm_222 : b_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) b_1) (hol.eq hol.bool (hol.cond hol.bool b_1 t1_3 t2_2) (hol.and (hol.or (hol.not b_1) t1_3) (hol.or b_1 t2_2)))) :=
  b_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) b_1.

(; Theorem: |- ((= (= (\lambda _450. ((= (((Data.Bool.cond _450) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _450)) t1)) ((Data.Bool.\/ _450) t2))) b))) (= ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2))))) ;)

(; dict ;)

def thm_223 : b_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) b_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool b_1 t1_3 t2_2) (hol.and (hol.or (hol.not b_1) t1_3) (hol.or b_1 t2_2))))) :=
  b_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) b_1) (hol.eq hol.bool (hol.cond hol.bool b_1 t1_3 t2_2) (hol.and (hol.or (hol.not b_1) t1_3) (hol.or b_1 t2_2))) thm_38 (thm_222 b_1 t2_2 t1_3).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) t1)) ((Data.Bool.\/ Data.Bool.T) t2)))) ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) t1)) ((Data.Bool.\/ Data.Bool.T) t2)))) ;)

(; dict ;)

def thm_224 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool hol.true t1_2 t2_1) (hol.and (hol.or (hol.not hol.true) t1_2) (hol.or hol.true t2_1))) (hol.eq hol.bool (hol.cond hol.bool hol.true t1_2 t2_1) (hol.and (hol.or (hol.not hol.true) t1_2) (hol.or hol.true t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.cond hol.bool hol.true t1_2 t2_1) (hol.and (hol.or (hol.not hol.true) t1_2) (hol.or hol.true t2_1))).

(; Theorem: |- ((= ((= (\lambda _450. ((= (((Data.Bool.cond _450) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _450)) t1)) ((Data.Bool.\/ _450) t2))) b)) ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) t1)) ((Data.Bool.\/ Data.Bool.T) t2))))) ((= ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))) ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) t1)) ((Data.Bool.\/ Data.Bool.T) t2))))) ;)

(; dict ;)

def thm_225 : b_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) b_1) (hol.eq hol.bool (hol.cond hol.bool hol.true t1_3 t2_2) (hol.and (hol.or (hol.not hol.true) t1_3) (hol.or hol.true t2_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool b_1 t1_3 t2_2) (hol.and (hol.or (hol.not b_1) t1_3) (hol.or b_1 t2_2))) (hol.eq hol.bool (hol.cond hol.bool hol.true t1_3 t2_2) (hol.and (hol.or (hol.not hol.true) t1_3) (hol.or hol.true t2_2))))) :=
  b_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) b_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool b_1 t1_3 t2_2) (hol.and (hol.or (hol.not b_1) t1_3) (hol.or b_1 t2_2)))) (hol.eq hol.bool (hol.cond hol.bool hol.true t1_3 t2_2) (hol.and (hol.or (hol.not hol.true) t1_3) (hol.or hol.true t2_2))) (hol.eq hol.bool (hol.cond hol.bool hol.true t1_3 t2_2) (hol.and (hol.or (hol.not hol.true) t1_3) (hol.or hol.true t2_2))) (thm_223 b_1 t2_2 t1_3) (thm_224 t2_2 t1_3).

(; Theorem: |- ((= ((= (\lambda _450. ((= (((Data.Bool.cond _450) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _450)) t1)) ((Data.Bool.\/ _450) t2))) b)) (\lambda _450. ((= (((Data.Bool.cond _450) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _450)) t1)) ((Data.Bool.\/ _450) t2))) Data.Bool.T))) ((= ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))) ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) t1)) ((Data.Bool.\/ Data.Bool.T) t2))))) ;)

(; dict ;)

def thm_226 : b_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) b_1) ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool b_1 t1_3 t2_2) (hol.and (hol.or (hol.not b_1) t1_3) (hol.or b_1 t2_2))) (hol.eq hol.bool (hol.cond hol.bool hol.true t1_3 t2_2) (hol.and (hol.or (hol.not hol.true) t1_3) (hol.or hol.true t2_2))))) :=
  b_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) b_1) ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) hol.true)) (hol.eq hol.bool ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) b_1) (hol.eq hol.bool (hol.cond hol.bool hol.true t1_3 t2_2) (hol.and (hol.or (hol.not hol.true) t1_3) (hol.or hol.true t2_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool b_1 t1_3 t2_2) (hol.and (hol.or (hol.not b_1) t1_3) (hol.or b_1 t2_2))) (hol.eq hol.bool (hol.cond hol.bool hol.true t1_3 t2_2) (hol.and (hol.or (hol.not hol.true) t1_3) (hol.or hol.true t2_2)))) (thm_221 b_1 t2_2 t1_3) (thm_225 b_1 t2_2 t1_3).

(; Theorem: |- ((= \lambda _450. ((= (((Data.Bool.cond _450) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _450)) t1)) ((Data.Bool.\/ _450) t2)))) \lambda _450. ((= (((Data.Bool.cond _450) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _450)) t1)) ((Data.Bool.\/ _450) t2)))) ;)

(; dict ;)

def thm_227 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__450_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_3 t1_2 t2_1) (hol.and (hol.or (hol.not __450_3) t1_2) (hol.or __450_3 t2_1))) (__450_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_3 t1_2 t2_1) (hol.and (hol.or (hol.not __450_3) t1_2) (hol.or __450_3 t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__450_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_3 t1_2 t2_1) (hol.and (hol.or (hol.not __450_3) t1_2) (hol.or __450_3 t2_1))).

(; Theorem: |- ((= b) Data.Bool.T) ;)

(; dict ;)

def thm_228 : b_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) -> hol.proof (hol.eq hol.bool b_1 hol.true) :=
  b_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) => hyp_1.

(; Theorem: |- ((= (\lambda _450. ((= (((Data.Bool.cond _450) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _450)) t1)) ((Data.Bool.\/ _450) t2))) b)) (\lambda _450. ((= (((Data.Bool.cond _450) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ _450)) t1)) ((Data.Bool.\/ _450) t2))) Data.Bool.T)) ;)

(; dict ;)

def thm_229 : b_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) -> hol.proof (hol.eq hol.bool ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) b_1) ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) hol.true)) :=
  b_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) => hol.APP_THM hol.bool hol.bool (__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) (__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_3 t2_2) (hol.and (hol.or (hol.not __450_4) t1_3) (hol.or __450_4 t2_2))) b_1 hol.true (thm_227 t2_2 t1_3) (thm_228 b_1 hyp_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))) ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) t1)) ((Data.Bool.\/ Data.Bool.T) t2)))) ;)

(; dict ;)

def thm_230 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1))) (hol.eq hol.bool (hol.cond hol.bool hol.true t1_2 t2_1) (hol.and (hol.or (hol.not hol.true) t1_2) (hol.or hol.true t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_2 t2_1) (hol.and (hol.or (hol.not __450_4) t1_2) (hol.or __450_4 t2_1))) b_3) ((__450_4 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool __450_4 t1_2 t2_1) (hol.and (hol.or (hol.not __450_4) t1_2) (hol.or __450_4 t2_1))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1))) (hol.eq hol.bool (hol.cond hol.bool hol.true t1_2 t2_1) (hol.and (hol.or (hol.not hol.true) t1_2) (hol.or hol.true t2_1)))) (thm_226 b_3 t2_1 t1_2) (thm_229 b_3 t2_1 t1_2 hyp_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) t1)) ((Data.Bool.\/ Data.Bool.T) t2)))) ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))) ;)

(; dict ;)

def thm_231 : b_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool hol.true t1_3 t2_2) (hol.and (hol.or (hol.not hol.true) t1_3) (hol.or hol.true t2_2))) (hol.eq hol.bool (hol.cond hol.bool b_1 t1_3 t2_2) (hol.and (hol.or (hol.not b_1) t1_3) (hol.or b_1 t2_2)))) :=
  b_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) => hol.SYM hol.bool (hol.eq hol.bool (hol.cond hol.bool b_1 t1_3 t2_2) (hol.and (hol.or (hol.not b_1) t1_3) (hol.or b_1 t2_2))) (hol.eq hol.bool (hol.cond hol.bool hol.true t1_3 t2_2) (hol.and (hol.or (hol.not hol.true) t1_3) (hol.or hol.true t2_2))) (thm_230 t2_2 t1_3 b_1 hyp_1).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1) ;)

(; dict ;)

def thm_232 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.cond hol.bool hol.true t1_2 t2_1) t1_2) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => (A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_61 A t2_1 t1_2) hol.bool t2_1 t1_2.

(; Theorem: |- ((= (= (((Data.Bool.cond Data.Bool.T) t1) t2))) (= t1)) ;)

(; dict ;)

def thm_233 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.cond hol.bool hol.true t1_2 t2_1)) (hol.eq hol.bool t1_2)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.cond hol.bool hol.true t1_2 t2_1) t1_2 thm_38 (thm_232 t2_1 t1_2).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.~ Data.Bool.T))) (Data.Bool.\/ Data.Bool.F)) ;)

(; dict ;)

def thm_234 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.not hol.true)) (hol.or hol.false)) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.not hol.true) hol.false thm_104 thm_3.

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) t1)) ((Data.Bool.\/ Data.Bool.F) t1)) ;)

(; dict ;)

def thm_235 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.not hol.true) t1_1) (hol.or hol.false t1_1)) :=
  t1_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.or (hol.not hol.true)) (hol.or hol.false) t1_1 t1_1 thm_234 (thm_115 t1_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) t1)) t1) ;)

(; dict ;)

def thm_236 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false t1_1) t1_1) :=
  t1_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_132 t_1) t1_1.

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) t1)) t1) ;)

(; dict ;)

def thm_237 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.not hol.true) t1_1) t1_1) :=
  t1_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.or (hol.not hol.true) t1_1) (hol.or hol.false t1_1) t1_1 (thm_235 t1_1) (thm_236 t1_1).

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) t1))) (Data.Bool./\ t1)) ;)

(; dict ;)

def thm_238 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.or (hol.not hol.true) t1_1)) (hol.and t1_1)) :=
  t1_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.or (hol.not hol.true) t1_1) t1_1 thm_103 (thm_237 t1_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) t2)) Data.Bool.T) ;)

(; dict ;)

def thm_239 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.true t2_1) hol.true) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_122 t_1) t2_1.

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) t1)) ((Data.Bool.\/ Data.Bool.T) t2))) ((Data.Bool./\ t1) Data.Bool.T)) ;)

(; dict ;)

def thm_240 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.or (hol.not hol.true) t1_2) (hol.or hol.true t2_1)) (hol.and t1_2 hol.true)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and (hol.or (hol.not hol.true) t1_2)) (hol.and t1_2) (hol.or hol.true t2_1) hol.true (thm_238 t1_2) (thm_239 t2_1).

(; Theorem: |- ((= ((Data.Bool./\ t1) Data.Bool.T)) t1) ;)

(; dict ;)

def thm_241 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t1_1 hol.true) t1_1) :=
  t1_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_171 t_1) t1_1.

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) t1)) ((Data.Bool.\/ Data.Bool.T) t2))) t1) ;)

(; dict ;)

def thm_242 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.or (hol.not hol.true) t1_2) (hol.or hol.true t2_1)) t1_2) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.and (hol.or (hol.not hol.true) t1_2) (hol.or hol.true t2_1)) (hol.and t1_2 hol.true) t1_2 (thm_240 t2_1 t1_2) (thm_241 t1_2).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) t1)) ((Data.Bool.\/ Data.Bool.T) t2)))) ((= t1) t1)) ;)

(; dict ;)

def thm_243 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool hol.true t1_2 t2_1) (hol.and (hol.or (hol.not hol.true) t1_2) (hol.or hol.true t2_1))) (hol.eq hol.bool t1_2 t1_2)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.cond hol.bool hol.true t1_2 t2_1)) (hol.eq hol.bool t1_2) (hol.and (hol.or (hol.not hol.true) t1_2) (hol.or hol.true t2_1)) t1_2 (thm_233 t2_1 t1_2) (thm_242 t2_1 t1_2).

(; Theorem: |- ((= ((= t1) t1)) Data.Bool.T) ;)

(; dict ;)

def thm_244 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t1_1 t1_1) hol.true) :=
  t1_1 : hol.term hol.bool => (x_1 : hol.term hol.bool => thm_212 x_1) t1_1.

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) t1)) ((Data.Bool.\/ Data.Bool.T) t2)))) Data.Bool.T) ;)

(; dict ;)

def thm_245 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.cond hol.bool hol.true t1_2 t2_1) (hol.and (hol.or (hol.not hol.true) t1_2) (hol.or hol.true t2_1))) hol.true) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.cond hol.bool hol.true t1_2 t2_1) (hol.and (hol.or (hol.not hol.true) t1_2) (hol.or hol.true t2_1))) (hol.eq hol.bool t1_2 t1_2) hol.true (thm_243 t2_1 t1_2) (thm_244 t1_2).

(; Theorem: |- ((= Data.Bool.T) ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) t1)) ((Data.Bool.\/ Data.Bool.T) t2)))) ;)

(; dict ;)

def thm_246 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.cond hol.bool hol.true t1_2 t2_1) (hol.and (hol.or (hol.not hol.true) t1_2) (hol.or hol.true t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.cond hol.bool hol.true t1_2 t2_1) (hol.and (hol.or (hol.not hol.true) t1_2) (hol.or hol.true t2_1))) hol.true (thm_245 t2_1 t1_2).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) t1)) ((Data.Bool.\/ Data.Bool.T) t2))) ;)

(; dict ;)

def thm_247 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.cond hol.bool hol.true t1_2 t2_1) (hol.and (hol.or (hol.not hol.true) t1_2) (hol.or hol.true t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.cond hol.bool hol.true t1_2 t2_1) (hol.and (hol.or (hol.not hol.true) t1_2) (hol.or hol.true t2_1))) (thm_246 t2_1 t1_2) thm_15.

(; Theorem: |- ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2))) ;)

(; dict ;)

def thm_248 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.true) -> hol.proof (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.true) => hol.EQ_MP (hol.eq hol.bool (hol.cond hol.bool hol.true t1_2 t2_1) (hol.and (hol.or (hol.not hol.true) t1_2) (hol.or hol.true t2_1))) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1))) (thm_231 b_3 t2_1 t1_2 hyp_1) (thm_247 t2_1 t1_2).

(; Theorem: |- ((Data.Bool.==> ((= b) Data.Bool.T)) ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))) ;)

(; dict ;)

def thm_249 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool b_3 hol.true) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.true) => thm_248 t2_1 t1_2 b_3 hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((= b) Data.Bool.T)) ((= b) Data.Bool.F)) ;)

(; dict ;)

def thm_250 : b_1 : hol.term hol.bool -> hol.proof (hol.or (hol.eq hol.bool b_1 hol.true) (hol.eq hol.bool b_1 hol.false)) :=
  b_1 : hol.term hol.bool => thm_17 b_1.

(; Theorem: |- ((= (= ((Data.Bool.\/ P) Q))) (= ((Data.Bool.\/ P) Q))) ;)

(; dict ;)

def thm_251 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or P_2 Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or P_2 Q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r)))) ;)

(; dict ;)

def thm_252 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ P) Q)) (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q))) ((= ((Data.Bool.\/ P) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r))))) ;)

(; dict ;)

def thm_253 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or P_2 Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) (thm_251 Q_1 P_2) (thm_252 Q_1 P_2).

(; Theorem: |- ((= (= (Data.Bool.\/ P))) (= (Data.Bool.\/ P))) ;)

(; dict ;)

def thm_254 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1))) :=
  P_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r)))) ;)

(; dict ;)

def thm_255 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) :=
  P_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1.

(; Theorem: |- ((= ((= (Data.Bool.\/ P)) (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P))) ((= (Data.Bool.\/ P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))))) ;)

(; dict ;)

def thm_256 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3))))) :=
  P_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3))) (thm_254 P_1) (thm_255 P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_257 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool P_1 P_1) :=
  P_1 : hol.term hol.bool => hol.REFL hol.bool P_1.

(; Theorem: |- ((= (Data.Bool.\/ P)) (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P)) ;)

(; dict ;)

def thm_258 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1 P_1 thm_18 (thm_257 P_1).

(; Theorem: |- ((= (Data.Bool.\/ P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r)))) ;)

(; dict ;)

def thm_259 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) :=
  P_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) (thm_256 P_1) (thm_258 P_1).

(; Theorem: |- ((= Q) Q) ;)

(; dict ;)

def thm_260 : Q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool Q_1 Q_1) :=
  Q_1 : hol.term hol.bool => hol.REFL hol.bool Q_1.

(; Theorem: |- ((= ((Data.Bool.\/ P) Q)) (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q)) ;)

(; dict ;)

def thm_261 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.or P_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1 Q_1 (thm_259 P_2) (thm_260 Q_1).

(; Theorem: |- ((= ((Data.Bool.\/ P) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r)))) ;)

(; dict ;)

def thm_262 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) (thm_253 Q_1 P_2) (thm_261 Q_1 P_2).

(; Theorem: |- ((Data.Bool.\/ P) Q) ;)

(; dict ;)

def thm_263 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_2 Q_1) -> hol.proof (hol.or P_2 Q_1) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_2 Q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r))) ;)

(; dict ;)

def thm_264 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_2 Q_1) -> hol.proof (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_2 Q_1) => hol.EQ_MP (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) (thm_262 Q_1 P_2) (thm_263 Q_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> P) R)) ((Data.Bool.==> ((Data.Bool.==> Q) R)) R)) ;)

(; dict ;)

def thm_265 : Q_1 : hol.term hol.bool -> R_2 : hol.term hol.bool -> P_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_3 Q_1) -> hol.proof (hol.imp (hol.imp P_3 R_2) (hol.imp (hol.imp Q_1 R_2) R_2)) :=
  Q_1 : hol.term hol.bool => R_2 : hol.term hol.bool => P_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_3 Q_1) => thm_264 Q_1 P_3 hyp_1 R_2.

(; Theorem: |- ((Data.Bool.==> P) R) ;)

(; dict ;)

def thm_266 : R_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_2 R_1) -> hol.proof (hol.imp P_2 R_1) :=
  R_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> Q) R)) R) ;)

(; dict ;)

def thm_267 : P_1 : hol.term hol.bool -> R_2 : hol.term hol.bool -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_1 R_2) -> hyp_2 : hol.proof (hol.or P_1 Q_3) -> hol.proof (hol.imp (hol.imp Q_3 R_2) R_2) :=
  P_1 : hol.term hol.bool => R_2 : hol.term hol.bool => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_1 R_2) => hyp_2 : hol.proof (hol.or P_1 Q_3) => thm_265 Q_3 R_2 P_1 hyp_2 (thm_266 R_2 P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> Q) R) ;)

(; dict ;)

def thm_268 : R_1 : hol.term hol.bool -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp Q_2 R_1) -> hol.proof (hol.imp Q_2 R_1) :=
  R_1 : hol.term hol.bool => Q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp Q_2 R_1) => hyp_1.

(; Theorem: |- R ;)

(; dict ;)

def thm_269 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> R_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_2 R_3) -> hyp_2 : hol.proof (hol.imp Q_1 R_3) -> hyp_3 : hol.proof (hol.or P_2 Q_1) -> hol.proof R_3 :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_267 P_2 R_3 Q_1 hyp_1 hyp_3 (thm_268 R_3 Q_1 hyp_2).

(; Theorem: |- ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2))) ;)

(; dict ;)

def thm_270 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.true) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1)))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_3 hol.true) (hol.eq hol.bool b_3 hol.false)) -> hol.proof (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.true) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1)))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_3 hol.true) (hol.eq hol.bool b_3 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_269 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool b_3 hol.false) (hol.eq hol.bool b_3 hol.true) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1))) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2))) ;)

(; dict ;)

def thm_271 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.true) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1)))) -> hol.proof (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.true) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1)))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool b_3 hol.true) (hol.eq hol.bool b_3 hol.false)) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1))) (thm_250 b_3) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_3 hol.true) (hol.eq hol.bool b_3 hol.false)) => thm_270 t2_1 t1_2 b_3 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2))) ;)

(; dict ;)

def thm_272 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1)))) -> hol.proof (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1)))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool b_3 hol.true) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1)))) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1))) (thm_249 t2_1 t1_2 b_3) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.true) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1)))) => thm_271 t2_1 t1_2 b_3 hyp_1 hyp_2).

(; Theorem: |- ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2))) ;)

(; dict ;)

def thm_273 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> b_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => b_3 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1)))) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1))) (thm_218 t2_1 t1_2 b_3) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq hol.bool (hol.cond hol.bool b_3 t1_2 t2_1) (hol.and (hol.or (hol.not b_3) t1_2) (hol.or b_3 t2_1)))) => thm_272 t2_1 t1_2 b_3 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))) ;)

(; dict ;)

def thm_274 : t1_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_2 t1_1 t2_3) (hol.and (hol.or (hol.not b_2) t1_1) (hol.or b_2 t2_3)))) :=
  t1_1 : hol.term hol.bool => b_2 : hol.term hol.bool => t2_3 : hol.term hol.bool => thm_273 t2_3 t1_1 b_2.

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2))))) ;)

(; dict ;)

def thm_275 : b_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3))))) :=
  b_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3)))) (hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3)))) (thm_34 t1_2 b_1) (thm_274 t1_2 b_1).

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))))) ;)

(; dict ;)

def thm_276 : hol.proof (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3)))))) :=
  b_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3))))) (hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3))))) (thm_31 b_1) (thm_275 b_1).

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond b) t1) t2)) ((Data.Bool./\ ((Data.Bool.\/ (Data.Bool.~ b)) t1)) ((Data.Bool.\/ b) t2)))))) ;)

(; thm ;)

def thm_277 : hol.proof (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3)))))) :=
  hol.EQ_MP (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3)))))) (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall hol.bool (t1_2 : hol.term hol.bool => hol.forall hol.bool (t2_3 : hol.term hol.bool => hol.eq hol.bool (hol.cond hol.bool b_1 t1_2 t2_3) (hol.and (hol.or (hol.not b_1) t1_2) (hol.or b_1 t2_3)))))) thm_28 thm_276.

(; Theorem: |- ((= \lambda b. (Data.Bool.! \lambda t. ((= (((Data.Bool.cond b) t) t)) t))) \lambda b. (Data.Bool.! \lambda t. ((= (((Data.Bool.cond b) t) t)) t))) ;)

(; dict ;)

def thm_278 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2)) (b_1 : hol.term hol.bool => hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2))) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2)).

(; Theorem: |- ((= \lambda b. (Data.Bool.! \lambda t. ((= (((Data.Bool.cond b) t) t)) t))) \lambda b. (Data.Bool.! \lambda t. ((= (((Data.Bool.cond b) t) t)) t))) ;)

(; dict ;)

def thm_279 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2)) (b_1 : hol.term hol.bool => hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2))) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2)) (b_1 : hol.term hol.bool => hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2)) (b_1 : hol.term hol.bool => hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2)) (thm_278 A) (thm_278 A).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (Data.Bool.! \lambda t. ((= (((Data.Bool.cond b) t) t)) t)))) (Data.Bool.! \lambda b. (Data.Bool.! \lambda t. ((= (((Data.Bool.cond b) t) t)) t)))) ;)

(; dict ;)

def thm_280 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2))) (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2)))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (b_1 : hol.term hol.bool => hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2)) (b_1 : hol.term hol.bool => hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2)) thm_25 (thm_279 A).

(; Theorem: |- ((= \lambda t. ((= (((Data.Bool.cond b) t) t)) t)) \lambda t. ((= (((Data.Bool.cond b) t) t)) t)) ;)

(; dict ;)

def thm_281 : A : hol.type -> b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2) (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2)) :=
  A : hol.type => b_1 : hol.term hol.bool => hol.REFL (hol.arr A hol.bool) (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2).

(; Theorem: |- ((= \lambda t. ((= (((Data.Bool.cond b) t) t)) t)) \lambda t. ((= (((Data.Bool.cond b) t) t)) t)) ;)

(; dict ;)

def thm_282 : A : hol.type -> b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2) (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2)) :=
  A : hol.type => b_1 : hol.term hol.bool => hol.TRANS (hol.arr A hol.bool) (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2) (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2) (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2) (thm_281 A b_1) (thm_281 A b_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= (((Data.Bool.cond b) t) t)) t))) (Data.Bool.! \lambda t. ((= (((Data.Bool.cond b) t) t)) t))) ;)

(; dict ;)

def thm_283 : A : hol.type -> b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2)) (hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2))) :=
  A : hol.type => b_1 : hol.term hol.bool => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2) (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2) (thm_51 A) (thm_282 A b_1).

(; Theorem: |- ((= (= (\lambda _456. ((= (((Data.Bool.cond _456) t) t)) t) b))) (= (\lambda _456. ((= (((Data.Bool.cond _456) t) t)) t) b))) ;)

(; dict ;)

def thm_284 : A : hol.type -> b_1 : hol.term hol.bool -> t_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) b_1)) (hol.eq hol.bool ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) b_1))) :=
  A : hol.type => b_1 : hol.term hol.bool => t_2 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) b_1)).

(; Theorem: |- ((= (\lambda _456. ((= (((Data.Bool.cond _456) t) t)) t) Data.Bool.F)) ((= (((Data.Bool.cond Data.Bool.F) t) t)) t)) ;)

(; dict ;)

def thm_285 : A : hol.type -> t_1 : hol.term A -> hol.proof (hol.eq hol.bool ((__456_2 : hol.term hol.bool => hol.eq A (hol.cond A __456_2 t_1 t_1) t_1) hol.false) (hol.eq A (hol.cond A hol.false t_1 t_1) t_1)) :=
  A : hol.type => t_1 : hol.term A => hol.BETA_CONV hol.bool hol.bool (__456_2 : hol.term hol.bool => hol.eq A (hol.cond A __456_2 t_1 t_1) t_1) hol.false.

(; Theorem: |- ((= ((= (\lambda _456. ((= (((Data.Bool.cond _456) t) t)) t) b)) (\lambda _456. ((= (((Data.Bool.cond _456) t) t)) t) Data.Bool.F))) ((= (\lambda _456. ((= (((Data.Bool.cond _456) t) t)) t) b)) ((= (((Data.Bool.cond Data.Bool.F) t) t)) t))) ;)

(; dict ;)

def thm_286 : A : hol.type -> b_1 : hol.term hol.bool -> t_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) b_1) ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) hol.false)) (hol.eq hol.bool ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) b_1) (hol.eq A (hol.cond A hol.false t_2 t_2) t_2))) :=
  A : hol.type => b_1 : hol.term hol.bool => t_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) b_1)) (hol.eq hol.bool ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) b_1)) ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) hol.false) (hol.eq A (hol.cond A hol.false t_2 t_2) t_2) (thm_284 A b_1 t_2) (thm_285 A t_2).

(; Theorem: |- ((= (\lambda _456. ((= (((Data.Bool.cond _456) t) t)) t) b)) ((= (((Data.Bool.cond b) t) t)) t)) ;)

(; dict ;)

def thm_287 : A : hol.type -> b_1 : hol.term hol.bool -> t_2 : hol.term A -> hol.proof (hol.eq hol.bool ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) b_1) (hol.eq A (hol.cond A b_1 t_2 t_2) t_2)) :=
  A : hol.type => b_1 : hol.term hol.bool => t_2 : hol.term A => hol.BETA_CONV hol.bool hol.bool (__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) b_1.

(; Theorem: |- ((= (= (\lambda _456. ((= (((Data.Bool.cond _456) t) t)) t) b))) (= ((= (((Data.Bool.cond b) t) t)) t))) ;)

(; dict ;)

def thm_288 : A : hol.type -> b_1 : hol.term hol.bool -> t_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) b_1)) (hol.eq hol.bool (hol.eq A (hol.cond A b_1 t_2 t_2) t_2))) :=
  A : hol.type => b_1 : hol.term hol.bool => t_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) b_1) (hol.eq A (hol.cond A b_1 t_2 t_2) t_2) thm_38 (thm_287 A b_1 t_2).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t) t)) t)) ((= (((Data.Bool.cond Data.Bool.F) t) t)) t)) ;)

(; dict ;)

def thm_289 : A : hol.type -> t_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t_1 t_1) t_1) (hol.eq A (hol.cond A hol.false t_1 t_1) t_1)) :=
  A : hol.type => t_1 : hol.term A => hol.REFL hol.bool (hol.eq A (hol.cond A hol.false t_1 t_1) t_1).

(; Theorem: |- ((= ((= (\lambda _456. ((= (((Data.Bool.cond _456) t) t)) t) b)) ((= (((Data.Bool.cond Data.Bool.F) t) t)) t))) ((= ((= (((Data.Bool.cond b) t) t)) t)) ((= (((Data.Bool.cond Data.Bool.F) t) t)) t))) ;)

(; dict ;)

def thm_290 : A : hol.type -> b_1 : hol.term hol.bool -> t_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) b_1) (hol.eq A (hol.cond A hol.false t_2 t_2) t_2)) (hol.eq hol.bool (hol.eq A (hol.cond A b_1 t_2 t_2) t_2) (hol.eq A (hol.cond A hol.false t_2 t_2) t_2))) :=
  A : hol.type => b_1 : hol.term hol.bool => t_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) b_1)) (hol.eq hol.bool (hol.eq A (hol.cond A b_1 t_2 t_2) t_2)) (hol.eq A (hol.cond A hol.false t_2 t_2) t_2) (hol.eq A (hol.cond A hol.false t_2 t_2) t_2) (thm_288 A b_1 t_2) (thm_289 A t_2).

(; Theorem: |- ((= ((= (\lambda _456. ((= (((Data.Bool.cond _456) t) t)) t) b)) (\lambda _456. ((= (((Data.Bool.cond _456) t) t)) t) Data.Bool.F))) ((= ((= (((Data.Bool.cond b) t) t)) t)) ((= (((Data.Bool.cond Data.Bool.F) t) t)) t))) ;)

(; dict ;)

def thm_291 : A : hol.type -> b_1 : hol.term hol.bool -> t_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) b_1) ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) hol.false)) (hol.eq hol.bool (hol.eq A (hol.cond A b_1 t_2 t_2) t_2) (hol.eq A (hol.cond A hol.false t_2 t_2) t_2))) :=
  A : hol.type => b_1 : hol.term hol.bool => t_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) b_1) ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) hol.false)) (hol.eq hol.bool ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) b_1) (hol.eq A (hol.cond A hol.false t_2 t_2) t_2)) (hol.eq hol.bool (hol.eq A (hol.cond A b_1 t_2 t_2) t_2) (hol.eq A (hol.cond A hol.false t_2 t_2) t_2)) (thm_286 A b_1 t_2) (thm_290 A b_1 t_2).

(; Theorem: |- ((= \lambda _456. ((= (((Data.Bool.cond _456) t) t)) t)) \lambda _456. ((= (((Data.Bool.cond _456) t) t)) t)) ;)

(; dict ;)

def thm_292 : A : hol.type -> t_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__456_2 : hol.term hol.bool => hol.eq A (hol.cond A __456_2 t_1 t_1) t_1) (__456_2 : hol.term hol.bool => hol.eq A (hol.cond A __456_2 t_1 t_1) t_1)) :=
  A : hol.type => t_1 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (__456_2 : hol.term hol.bool => hol.eq A (hol.cond A __456_2 t_1 t_1) t_1).

(; Theorem: |- ((= (\lambda _456. ((= (((Data.Bool.cond _456) t) t)) t) b)) (\lambda _456. ((= (((Data.Bool.cond _456) t) t)) t) Data.Bool.F)) ;)

(; dict ;)

def thm_293 : A : hol.type -> b_1 : hol.term hol.bool -> t_2 : hol.term A -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) -> hol.proof (hol.eq hol.bool ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) b_1) ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) hol.false)) :=
  A : hol.type => b_1 : hol.term hol.bool => t_2 : hol.term A => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) => hol.APP_THM hol.bool hol.bool (__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) (__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_2 t_2) t_2) b_1 hol.false (thm_292 A t_2) (thm_45 b_1 hyp_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond b) t) t)) t)) ((= (((Data.Bool.cond Data.Bool.F) t) t)) t)) ;)

(; dict ;)

def thm_294 : A : hol.type -> t_1 : hol.term A -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A b_2 t_1 t_1) t_1) (hol.eq A (hol.cond A hol.false t_1 t_1) t_1)) :=
  A : hol.type => t_1 : hol.term A => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_2 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_1 t_1) t_1) b_2) ((__456_3 : hol.term hol.bool => hol.eq A (hol.cond A __456_3 t_1 t_1) t_1) hol.false)) (hol.eq hol.bool (hol.eq A (hol.cond A b_2 t_1 t_1) t_1) (hol.eq A (hol.cond A hol.false t_1 t_1) t_1)) (thm_291 A b_2 t_1) (thm_293 A b_2 t_1 hyp_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t) t)) t)) ((= (((Data.Bool.cond b) t) t)) t)) ;)

(; dict ;)

def thm_295 : A : hol.type -> b_1 : hol.term hol.bool -> t_2 : hol.term A -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t_2 t_2) t_2) (hol.eq A (hol.cond A b_1 t_2 t_2) t_2)) :=
  A : hol.type => b_1 : hol.term hol.bool => t_2 : hol.term A => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) => hol.SYM hol.bool (hol.eq A (hol.cond A b_1 t_2 t_2) t_2) (hol.eq A (hol.cond A hol.false t_2 t_2) t_2) (thm_294 A t_2 b_1 hyp_1).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_296 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A hol.bool)) (hol.eq A) (hol.eq A)) :=
  A : hol.type => hol.REFL (hol.arr A (hol.arr A hol.bool)) (hol.eq A).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) t) t)) t) ;)

(; dict ;)

def thm_297 : A : hol.type -> t_1 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.false t_1 t_1) t_1) :=
  A : hol.type => t_1 : hol.term A => (A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_95 A t2_1 t1_2) A t_1 t_1.

(; Theorem: |- ((= (= (((Data.Bool.cond Data.Bool.F) t) t))) (= t)) ;)

(; dict ;)

def thm_298 : A : hol.type -> t_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A (hol.cond A hol.false t_1 t_1)) (hol.eq A t_1)) :=
  A : hol.type => t_1 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) (hol.cond A hol.false t_1 t_1) t_1 (thm_296 A) (thm_297 A t_1).

(; Theorem: |- ((= t) t) ;)

(; dict ;)

def thm_299 : A : hol.type -> t_1 : hol.term A -> hol.proof (hol.eq A t_1 t_1) :=
  A : hol.type => t_1 : hol.term A => hol.REFL A t_1.

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t) t)) t)) ((= t) t)) ;)

(; dict ;)

def thm_300 : A : hol.type -> t_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t_1 t_1) t_1) (hol.eq A t_1 t_1)) :=
  A : hol.type => t_1 : hol.term A => hol.APP_THM A hol.bool (hol.eq A (hol.cond A hol.false t_1 t_1)) (hol.eq A t_1) t_1 t_1 (thm_298 A t_1) (thm_299 A t_1).

(; Theorem: |- ((= ((= t) t)) Data.Bool.T) ;)

(; dict ;)

def thm_301 : A : hol.type -> t_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A t_1 t_1) hol.true) :=
  A : hol.type => t_1 : hol.term A => (A : hol.type => x_1 : hol.term A => thm_210 A x_1) A t_1.

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t) t)) t)) Data.Bool.T) ;)

(; dict ;)

def thm_302 : A : hol.type -> t_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t_1 t_1) t_1) hol.true) :=
  A : hol.type => t_1 : hol.term A => hol.TRANS hol.bool (hol.eq A (hol.cond A hol.false t_1 t_1) t_1) (hol.eq A t_1 t_1) hol.true (thm_300 A t_1) (thm_301 A t_1).

(; Theorem: |- ((= Data.Bool.T) ((= (((Data.Bool.cond Data.Bool.F) t) t)) t)) ;)

(; dict ;)

def thm_303 : A : hol.type -> t_1 : hol.term A -> hol.proof (hol.eq hol.bool hol.true (hol.eq A (hol.cond A hol.false t_1 t_1) t_1)) :=
  A : hol.type => t_1 : hol.term A => hol.SYM hol.bool (hol.eq A (hol.cond A hol.false t_1 t_1) t_1) hol.true (thm_302 A t_1).

(; Theorem: |- ((= (((Data.Bool.cond b) t) t)) t) ;)

(; dict ;)

def thm_304 : A : hol.type -> t_1 : hol.term A -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_2 hol.false) -> hol.proof (hol.eq A (hol.cond A b_2 t_1 t_1) t_1) :=
  A : hol.type => t_1 : hol.term A => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_2 hol.false) => hol.EQ_MP (hol.eq A (hol.cond A hol.false t_1 t_1) t_1) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1) (thm_295 A b_2 t_1 hyp_1) (hol.EQ_MP hol.true (hol.eq A (hol.cond A hol.false t_1 t_1) t_1) (thm_303 A t_1) thm_15).

(; Theorem: |- ((Data.Bool.==> ((= b) Data.Bool.F)) ((= (((Data.Bool.cond b) t) t)) t)) ;)

(; dict ;)

def thm_305 : A : hol.type -> t_1 : hol.term A -> b_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool b_2 hol.false) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1)) :=
  A : hol.type => t_1 : hol.term A => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_2 hol.false) => thm_304 A t_1 b_2 hyp_1.

(; Theorem: |- ((= (= (\lambda _454. ((= (((Data.Bool.cond _454) t) t)) t) b))) (= (\lambda _454. ((= (((Data.Bool.cond _454) t) t)) t) b))) ;)

(; dict ;)

def thm_306 : A : hol.type -> b_1 : hol.term hol.bool -> t_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) b_1)) (hol.eq hol.bool ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) b_1))) :=
  A : hol.type => b_1 : hol.term hol.bool => t_2 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) b_1)).

(; Theorem: |- ((= (\lambda _454. ((= (((Data.Bool.cond _454) t) t)) t) Data.Bool.T)) ((= (((Data.Bool.cond Data.Bool.T) t) t)) t)) ;)

(; dict ;)

def thm_307 : A : hol.type -> t_1 : hol.term A -> hol.proof (hol.eq hol.bool ((__454_2 : hol.term hol.bool => hol.eq A (hol.cond A __454_2 t_1 t_1) t_1) hol.true) (hol.eq A (hol.cond A hol.true t_1 t_1) t_1)) :=
  A : hol.type => t_1 : hol.term A => hol.BETA_CONV hol.bool hol.bool (__454_2 : hol.term hol.bool => hol.eq A (hol.cond A __454_2 t_1 t_1) t_1) hol.true.

(; Theorem: |- ((= ((= (\lambda _454. ((= (((Data.Bool.cond _454) t) t)) t) b)) (\lambda _454. ((= (((Data.Bool.cond _454) t) t)) t) Data.Bool.T))) ((= (\lambda _454. ((= (((Data.Bool.cond _454) t) t)) t) b)) ((= (((Data.Bool.cond Data.Bool.T) t) t)) t))) ;)

(; dict ;)

def thm_308 : A : hol.type -> b_1 : hol.term hol.bool -> t_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) b_1) ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) hol.true)) (hol.eq hol.bool ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) b_1) (hol.eq A (hol.cond A hol.true t_2 t_2) t_2))) :=
  A : hol.type => b_1 : hol.term hol.bool => t_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) b_1)) (hol.eq hol.bool ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) b_1)) ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) hol.true) (hol.eq A (hol.cond A hol.true t_2 t_2) t_2) (thm_306 A b_1 t_2) (thm_307 A t_2).

(; Theorem: |- ((= (\lambda _454. ((= (((Data.Bool.cond _454) t) t)) t) b)) ((= (((Data.Bool.cond b) t) t)) t)) ;)

(; dict ;)

def thm_309 : A : hol.type -> b_1 : hol.term hol.bool -> t_2 : hol.term A -> hol.proof (hol.eq hol.bool ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) b_1) (hol.eq A (hol.cond A b_1 t_2 t_2) t_2)) :=
  A : hol.type => b_1 : hol.term hol.bool => t_2 : hol.term A => hol.BETA_CONV hol.bool hol.bool (__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) b_1.

(; Theorem: |- ((= (= (\lambda _454. ((= (((Data.Bool.cond _454) t) t)) t) b))) (= ((= (((Data.Bool.cond b) t) t)) t))) ;)

(; dict ;)

def thm_310 : A : hol.type -> b_1 : hol.term hol.bool -> t_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) b_1)) (hol.eq hol.bool (hol.eq A (hol.cond A b_1 t_2 t_2) t_2))) :=
  A : hol.type => b_1 : hol.term hol.bool => t_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) b_1) (hol.eq A (hol.cond A b_1 t_2 t_2) t_2) thm_38 (thm_309 A b_1 t_2).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.T) t) t)) t)) ((= (((Data.Bool.cond Data.Bool.T) t) t)) t)) ;)

(; dict ;)

def thm_311 : A : hol.type -> t_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.true t_1 t_1) t_1) (hol.eq A (hol.cond A hol.true t_1 t_1) t_1)) :=
  A : hol.type => t_1 : hol.term A => hol.REFL hol.bool (hol.eq A (hol.cond A hol.true t_1 t_1) t_1).

(; Theorem: |- ((= ((= (\lambda _454. ((= (((Data.Bool.cond _454) t) t)) t) b)) ((= (((Data.Bool.cond Data.Bool.T) t) t)) t))) ((= ((= (((Data.Bool.cond b) t) t)) t)) ((= (((Data.Bool.cond Data.Bool.T) t) t)) t))) ;)

(; dict ;)

def thm_312 : A : hol.type -> b_1 : hol.term hol.bool -> t_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) b_1) (hol.eq A (hol.cond A hol.true t_2 t_2) t_2)) (hol.eq hol.bool (hol.eq A (hol.cond A b_1 t_2 t_2) t_2) (hol.eq A (hol.cond A hol.true t_2 t_2) t_2))) :=
  A : hol.type => b_1 : hol.term hol.bool => t_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) b_1)) (hol.eq hol.bool (hol.eq A (hol.cond A b_1 t_2 t_2) t_2)) (hol.eq A (hol.cond A hol.true t_2 t_2) t_2) (hol.eq A (hol.cond A hol.true t_2 t_2) t_2) (thm_310 A b_1 t_2) (thm_311 A t_2).

(; Theorem: |- ((= ((= (\lambda _454. ((= (((Data.Bool.cond _454) t) t)) t) b)) (\lambda _454. ((= (((Data.Bool.cond _454) t) t)) t) Data.Bool.T))) ((= ((= (((Data.Bool.cond b) t) t)) t)) ((= (((Data.Bool.cond Data.Bool.T) t) t)) t))) ;)

(; dict ;)

def thm_313 : A : hol.type -> b_1 : hol.term hol.bool -> t_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) b_1) ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) hol.true)) (hol.eq hol.bool (hol.eq A (hol.cond A b_1 t_2 t_2) t_2) (hol.eq A (hol.cond A hol.true t_2 t_2) t_2))) :=
  A : hol.type => b_1 : hol.term hol.bool => t_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) b_1) ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) hol.true)) (hol.eq hol.bool ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) b_1) (hol.eq A (hol.cond A hol.true t_2 t_2) t_2)) (hol.eq hol.bool (hol.eq A (hol.cond A b_1 t_2 t_2) t_2) (hol.eq A (hol.cond A hol.true t_2 t_2) t_2)) (thm_308 A b_1 t_2) (thm_312 A b_1 t_2).

(; Theorem: |- ((= \lambda _454. ((= (((Data.Bool.cond _454) t) t)) t)) \lambda _454. ((= (((Data.Bool.cond _454) t) t)) t)) ;)

(; dict ;)

def thm_314 : A : hol.type -> t_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__454_2 : hol.term hol.bool => hol.eq A (hol.cond A __454_2 t_1 t_1) t_1) (__454_2 : hol.term hol.bool => hol.eq A (hol.cond A __454_2 t_1 t_1) t_1)) :=
  A : hol.type => t_1 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (__454_2 : hol.term hol.bool => hol.eq A (hol.cond A __454_2 t_1 t_1) t_1).

(; Theorem: |- ((= (\lambda _454. ((= (((Data.Bool.cond _454) t) t)) t) b)) (\lambda _454. ((= (((Data.Bool.cond _454) t) t)) t) Data.Bool.T)) ;)

(; dict ;)

def thm_315 : A : hol.type -> b_1 : hol.term hol.bool -> t_2 : hol.term A -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) -> hol.proof (hol.eq hol.bool ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) b_1) ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) hol.true)) :=
  A : hol.type => b_1 : hol.term hol.bool => t_2 : hol.term A => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) => hol.APP_THM hol.bool hol.bool (__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) (__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_2 t_2) t_2) b_1 hol.true (thm_314 A t_2) (thm_228 b_1 hyp_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond b) t) t)) t)) ((= (((Data.Bool.cond Data.Bool.T) t) t)) t)) ;)

(; dict ;)

def thm_316 : A : hol.type -> t_1 : hol.term A -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A b_2 t_1 t_1) t_1) (hol.eq A (hol.cond A hol.true t_1 t_1) t_1)) :=
  A : hol.type => t_1 : hol.term A => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_2 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_1 t_1) t_1) b_2) ((__454_3 : hol.term hol.bool => hol.eq A (hol.cond A __454_3 t_1 t_1) t_1) hol.true)) (hol.eq hol.bool (hol.eq A (hol.cond A b_2 t_1 t_1) t_1) (hol.eq A (hol.cond A hol.true t_1 t_1) t_1)) (thm_313 A b_2 t_1) (thm_315 A b_2 t_1 hyp_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.T) t) t)) t)) ((= (((Data.Bool.cond b) t) t)) t)) ;)

(; dict ;)

def thm_317 : A : hol.type -> b_1 : hol.term hol.bool -> t_2 : hol.term A -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.true t_2 t_2) t_2) (hol.eq A (hol.cond A b_1 t_2 t_2) t_2)) :=
  A : hol.type => b_1 : hol.term hol.bool => t_2 : hol.term A => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) => hol.SYM hol.bool (hol.eq A (hol.cond A b_1 t_2 t_2) t_2) (hol.eq A (hol.cond A hol.true t_2 t_2) t_2) (thm_316 A t_2 b_1 hyp_1).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) t) t)) t) ;)

(; dict ;)

def thm_318 : A : hol.type -> t_1 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.true t_1 t_1) t_1) :=
  A : hol.type => t_1 : hol.term A => (A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_61 A t2_1 t1_2) A t_1 t_1.

(; Theorem: |- ((= (= (((Data.Bool.cond Data.Bool.T) t) t))) (= t)) ;)

(; dict ;)

def thm_319 : A : hol.type -> t_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A (hol.cond A hol.true t_1 t_1)) (hol.eq A t_1)) :=
  A : hol.type => t_1 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) (hol.cond A hol.true t_1 t_1) t_1 (thm_296 A) (thm_318 A t_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.T) t) t)) t)) ((= t) t)) ;)

(; dict ;)

def thm_320 : A : hol.type -> t_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.true t_1 t_1) t_1) (hol.eq A t_1 t_1)) :=
  A : hol.type => t_1 : hol.term A => hol.APP_THM A hol.bool (hol.eq A (hol.cond A hol.true t_1 t_1)) (hol.eq A t_1) t_1 t_1 (thm_319 A t_1) (thm_299 A t_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.T) t) t)) t)) Data.Bool.T) ;)

(; dict ;)

def thm_321 : A : hol.type -> t_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.true t_1 t_1) t_1) hol.true) :=
  A : hol.type => t_1 : hol.term A => hol.TRANS hol.bool (hol.eq A (hol.cond A hol.true t_1 t_1) t_1) (hol.eq A t_1 t_1) hol.true (thm_320 A t_1) (thm_301 A t_1).

(; Theorem: |- ((= Data.Bool.T) ((= (((Data.Bool.cond Data.Bool.T) t) t)) t)) ;)

(; dict ;)

def thm_322 : A : hol.type -> t_1 : hol.term A -> hol.proof (hol.eq hol.bool hol.true (hol.eq A (hol.cond A hol.true t_1 t_1) t_1)) :=
  A : hol.type => t_1 : hol.term A => hol.SYM hol.bool (hol.eq A (hol.cond A hol.true t_1 t_1) t_1) hol.true (thm_321 A t_1).

(; Theorem: |- ((= (((Data.Bool.cond b) t) t)) t) ;)

(; dict ;)

def thm_323 : A : hol.type -> t_1 : hol.term A -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_2 hol.true) -> hol.proof (hol.eq A (hol.cond A b_2 t_1 t_1) t_1) :=
  A : hol.type => t_1 : hol.term A => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_2 hol.true) => hol.EQ_MP (hol.eq A (hol.cond A hol.true t_1 t_1) t_1) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1) (thm_317 A b_2 t_1 hyp_1) (hol.EQ_MP hol.true (hol.eq A (hol.cond A hol.true t_1 t_1) t_1) (thm_322 A t_1) thm_15).

(; Theorem: |- ((Data.Bool.==> ((= b) Data.Bool.T)) ((= (((Data.Bool.cond b) t) t)) t)) ;)

(; dict ;)

def thm_324 : A : hol.type -> t_1 : hol.term A -> b_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool b_2 hol.true) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1)) :=
  A : hol.type => t_1 : hol.term A => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_2 hol.true) => thm_323 A t_1 b_2 hyp_1.

(; Theorem: |- ((= (((Data.Bool.cond b) t) t)) t) ;)

(; dict ;)

def thm_325 : A : hol.type -> t_1 : hol.term A -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_2 hol.false) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1)) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_2 hol.true) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1)) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_2 hol.true) (hol.eq hol.bool b_2 hol.false)) -> hol.proof (hol.eq A (hol.cond A b_2 t_1 t_1) t_1) :=
  A : hol.type => t_1 : hol.term A => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_2 hol.false) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1)) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_2 hol.true) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1)) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_2 hol.true) (hol.eq hol.bool b_2 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_269 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool b_2 hol.false) (hol.eq hol.bool b_2 hol.true) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= (((Data.Bool.cond b) t) t)) t) ;)

(; dict ;)

def thm_326 : A : hol.type -> t_1 : hol.term A -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_2 hol.false) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1)) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_2 hol.true) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1)) -> hol.proof (hol.eq A (hol.cond A b_2 t_1 t_1) t_1) :=
  A : hol.type => t_1 : hol.term A => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_2 hol.false) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1)) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_2 hol.true) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1)) => hol.PROVE_HYP (hol.or (hol.eq hol.bool b_2 hol.true) (hol.eq hol.bool b_2 hol.false)) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1) (thm_250 b_2) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_2 hol.true) (hol.eq hol.bool b_2 hol.false)) => thm_325 A t_1 b_2 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= (((Data.Bool.cond b) t) t)) t) ;)

(; dict ;)

def thm_327 : A : hol.type -> t_1 : hol.term A -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_2 hol.false) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1)) -> hol.proof (hol.eq A (hol.cond A b_2 t_1 t_1) t_1) :=
  A : hol.type => t_1 : hol.term A => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_2 hol.false) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1)) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool b_2 hol.true) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1)) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1) (thm_324 A t_1 b_2) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_2 hol.true) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1)) => thm_326 A t_1 b_2 hyp_1 hyp_2).

(; Theorem: |- ((= (((Data.Bool.cond b) t) t)) t) ;)

(; dict ;)

def thm_328 : A : hol.type -> t_1 : hol.term A -> b_2 : hol.term hol.bool -> hol.proof (hol.eq A (hol.cond A b_2 t_1 t_1) t_1) :=
  A : hol.type => t_1 : hol.term A => b_2 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool b_2 hol.false) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1)) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1) (thm_305 A t_1 b_2) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_2 hol.false) (hol.eq A (hol.cond A b_2 t_1 t_1) t_1)) => thm_327 A t_1 b_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((= (((Data.Bool.cond b) t) t)) t)) ;)

(; dict ;)

def thm_329 : A : hol.type -> b_1 : hol.term hol.bool -> hol.proof (hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2)) :=
  A : hol.type => b_1 : hol.term hol.bool => t_2 : hol.term A => thm_328 A t_2 b_1.

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.! \lambda t. ((= (((Data.Bool.cond b) t) t)) t))) ;)

(; dict ;)

def thm_330 : A : hol.type -> hol.proof (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2))) :=
  A : hol.type => b_1 : hol.term hol.bool => hol.EQ_MP (hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2)) (hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2)) (thm_283 A b_1) (thm_329 A b_1).

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.! \lambda t. ((= (((Data.Bool.cond b) t) t)) t))) ;)

(; thm ;)

def thm_331 : A : hol.type -> hol.proof (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2))) :=
  A : hol.type => hol.EQ_MP (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2))) (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall A (t_2 : hol.term A => hol.eq A (hol.cond A b_1 t_2 t_2) t_2))) (thm_280 A) (thm_330 A).

(; Theorem: |- ((= \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))))))) \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))))))) ;)

(; dict ;)

def thm_332 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))))) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))))).

(; Theorem: |- ((= \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))))))) \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))))))) ;)

(; dict ;)

def thm_333 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))))) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))))) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))))) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))))) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))))) (thm_332 B A) (thm_332 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))))))) (Data.Bool.! \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))))))) ;)

(; dict ;)

def thm_334 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))))) (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))))) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))))) thm_25 (thm_333 B A).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_335 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))))) \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))))) ;)

(; dict ;)

def thm_336 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr A B) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))))) \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))))) ;)

(; dict ;)

def thm_337 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => hol.TRANS (hol.arr (hol.arr A B) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))) (thm_336 B A b_1) (thm_336 B A b_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))))))) ;)

(; dict ;)

def thm_338 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))) (thm_335 B A) (thm_337 B A b_1).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))))) \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))))) ;)

(; dict ;)

def thm_339 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => f_2 : hol.term (hol.arr A B) => hol.REFL (hol.arr A hol.bool) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))))) \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))))) ;)

(; dict ;)

def thm_340 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => f_2 : hol.term (hol.arr A B) => hol.TRANS (hol.arr A hol.bool) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))) (thm_339 B A b_1 f_2) (thm_339 B A b_1 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))))) ;)

(; dict ;)

def thm_341 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => f_2 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))) (thm_51 A) (thm_340 B A b_1 f_2).

(; Theorem: |- ((= \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))) \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))) ;)

(; dict ;)

def thm_342 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> b_2 : hol.term hol.bool -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_4 : hol.term A => hol.eq B (f_3 (hol.cond A b_2 x_1 y_4)) (hol.cond B b_2 (f_3 x_1) (f_3 y_4))) (y_4 : hol.term A => hol.eq B (f_3 (hol.cond A b_2 x_1 y_4)) (hol.cond B b_2 (f_3 x_1) (f_3 y_4)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => b_2 : hol.term hol.bool => f_3 : hol.term (hol.arr A B) => hol.REFL (hol.arr A hol.bool) (y_4 : hol.term A => hol.eq B (f_3 (hol.cond A b_2 x_1 y_4)) (hol.cond B b_2 (f_3 x_1) (f_3 y_4))).

(; Theorem: |- ((= \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))) \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))) ;)

(; dict ;)

def thm_343 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> b_2 : hol.term hol.bool -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_4 : hol.term A => hol.eq B (f_3 (hol.cond A b_2 x_1 y_4)) (hol.cond B b_2 (f_3 x_1) (f_3 y_4))) (y_4 : hol.term A => hol.eq B (f_3 (hol.cond A b_2 x_1 y_4)) (hol.cond B b_2 (f_3 x_1) (f_3 y_4)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => b_2 : hol.term hol.bool => f_3 : hol.term (hol.arr A B) => hol.TRANS (hol.arr A hol.bool) (y_4 : hol.term A => hol.eq B (f_3 (hol.cond A b_2 x_1 y_4)) (hol.cond B b_2 (f_3 x_1) (f_3 y_4))) (y_4 : hol.term A => hol.eq B (f_3 (hol.cond A b_2 x_1 y_4)) (hol.cond B b_2 (f_3 x_1) (f_3 y_4))) (y_4 : hol.term A => hol.eq B (f_3 (hol.cond A b_2 x_1 y_4)) (hol.cond B b_2 (f_3 x_1) (f_3 y_4))) (thm_342 B A x_1 b_2 f_3) (thm_342 B A x_1 b_2 f_3).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))))) (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))))) ;)

(; dict ;)

def thm_344 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> b_2 : hol.term hol.bool -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (y_4 : hol.term A => hol.eq B (f_3 (hol.cond A b_2 x_1 y_4)) (hol.cond B b_2 (f_3 x_1) (f_3 y_4)))) (hol.forall A (y_4 : hol.term A => hol.eq B (f_3 (hol.cond A b_2 x_1 y_4)) (hol.cond B b_2 (f_3 x_1) (f_3 y_4))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => b_2 : hol.term hol.bool => f_3 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_4 : hol.term A => hol.eq B (f_3 (hol.cond A b_2 x_1 y_4)) (hol.cond B b_2 (f_3 x_1) (f_3 y_4))) (y_4 : hol.term A => hol.eq B (f_3 (hol.cond A b_2 x_1 y_4)) (hol.cond B b_2 (f_3 x_1) (f_3 y_4))) (thm_51 A) (thm_343 B A x_1 b_2 f_3).

(; Theorem: |- ((= (= (\lambda _460. ((= (f (((Data.Bool.cond _460) x) y))) (((Data.Bool.cond _460) (f x)) (f y))) b))) (= (\lambda _460. ((= (f (((Data.Bool.cond _460) x) y))) (((Data.Bool.cond _460) (f x)) (f y))) b))) ;)

(; dict ;)

def thm_345 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) b_1)) (hol.eq hol.bool ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) b_1))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A B) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) b_1)).

(; Theorem: |- ((= (\lambda _460. ((= (f (((Data.Bool.cond _460) x) y))) (((Data.Bool.cond _460) (f x)) (f y))) Data.Bool.F)) ((= (f (((Data.Bool.cond Data.Bool.F) x) y))) (((Data.Bool.cond Data.Bool.F) (f x)) (f y)))) ;)

(; dict ;)

def thm_346 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((__460_4 : hol.term hol.bool => hol.eq B (f_3 (hol.cond A __460_4 x_2 y_1)) (hol.cond B __460_4 (f_3 x_2) (f_3 y_1))) hol.false) (hol.eq B (f_3 (hol.cond A hol.false x_2 y_1)) (hol.cond B hol.false (f_3 x_2) (f_3 y_1)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hol.BETA_CONV hol.bool hol.bool (__460_4 : hol.term hol.bool => hol.eq B (f_3 (hol.cond A __460_4 x_2 y_1)) (hol.cond B __460_4 (f_3 x_2) (f_3 y_1))) hol.false.

(; Theorem: |- ((= ((= (\lambda _460. ((= (f (((Data.Bool.cond _460) x) y))) (((Data.Bool.cond _460) (f x)) (f y))) b)) (\lambda _460. ((= (f (((Data.Bool.cond _460) x) y))) (((Data.Bool.cond _460) (f x)) (f y))) Data.Bool.F))) ((= (\lambda _460. ((= (f (((Data.Bool.cond _460) x) y))) (((Data.Bool.cond _460) (f x)) (f y))) b)) ((= (f (((Data.Bool.cond Data.Bool.F) x) y))) (((Data.Bool.cond Data.Bool.F) (f x)) (f y))))) ;)

(; dict ;)

def thm_347 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) b_1) ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) hol.false)) (hol.eq hol.bool ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) b_1) (hol.eq B (f_4 (hol.cond A hol.false x_3 y_2)) (hol.cond B hol.false (f_4 x_3) (f_4 y_2))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) b_1)) (hol.eq hol.bool ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) b_1)) ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) hol.false) (hol.eq B (f_4 (hol.cond A hol.false x_3 y_2)) (hol.cond B hol.false (f_4 x_3) (f_4 y_2))) (thm_345 A B b_1 y_2 x_3 f_4) (thm_346 A B y_2 x_3 f_4).

(; Theorem: |- ((= (\lambda _460. ((= (f (((Data.Bool.cond _460) x) y))) (((Data.Bool.cond _460) (f x)) (f y))) b)) ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))) ;)

(; dict ;)

def thm_348 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) b_1) (hol.eq B (f_4 (hol.cond A b_1 x_3 y_2)) (hol.cond B b_1 (f_4 x_3) (f_4 y_2)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A B) => hol.BETA_CONV hol.bool hol.bool (__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) b_1.

(; Theorem: |- ((= (= (\lambda _460. ((= (f (((Data.Bool.cond _460) x) y))) (((Data.Bool.cond _460) (f x)) (f y))) b))) (= ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))))) ;)

(; dict ;)

def thm_349 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) b_1)) (hol.eq hol.bool (hol.eq B (f_4 (hol.cond A b_1 x_3 y_2)) (hol.cond B b_1 (f_4 x_3) (f_4 y_2))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A B) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) b_1) (hol.eq B (f_4 (hol.cond A b_1 x_3 y_2)) (hol.cond B b_1 (f_4 x_3) (f_4 y_2))) thm_38 (thm_348 A B b_1 y_2 x_3 f_4).

(; Theorem: |- ((= ((= (f (((Data.Bool.cond Data.Bool.F) x) y))) (((Data.Bool.cond Data.Bool.F) (f x)) (f y)))) ((= (f (((Data.Bool.cond Data.Bool.F) x) y))) (((Data.Bool.cond Data.Bool.F) (f x)) (f y)))) ;)

(; dict ;)

def thm_350 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (f_3 (hol.cond A hol.false x_2 y_1)) (hol.cond B hol.false (f_3 x_2) (f_3 y_1))) (hol.eq B (f_3 (hol.cond A hol.false x_2 y_1)) (hol.cond B hol.false (f_3 x_2) (f_3 y_1)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq B (f_3 (hol.cond A hol.false x_2 y_1)) (hol.cond B hol.false (f_3 x_2) (f_3 y_1))).

(; Theorem: |- ((= ((= (\lambda _460. ((= (f (((Data.Bool.cond _460) x) y))) (((Data.Bool.cond _460) (f x)) (f y))) b)) ((= (f (((Data.Bool.cond Data.Bool.F) x) y))) (((Data.Bool.cond Data.Bool.F) (f x)) (f y))))) ((= ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))) ((= (f (((Data.Bool.cond Data.Bool.F) x) y))) (((Data.Bool.cond Data.Bool.F) (f x)) (f y))))) ;)

(; dict ;)

def thm_351 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) b_1) (hol.eq B (f_4 (hol.cond A hol.false x_3 y_2)) (hol.cond B hol.false (f_4 x_3) (f_4 y_2)))) (hol.eq hol.bool (hol.eq B (f_4 (hol.cond A b_1 x_3 y_2)) (hol.cond B b_1 (f_4 x_3) (f_4 y_2))) (hol.eq B (f_4 (hol.cond A hol.false x_3 y_2)) (hol.cond B hol.false (f_4 x_3) (f_4 y_2))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) b_1)) (hol.eq hol.bool (hol.eq B (f_4 (hol.cond A b_1 x_3 y_2)) (hol.cond B b_1 (f_4 x_3) (f_4 y_2)))) (hol.eq B (f_4 (hol.cond A hol.false x_3 y_2)) (hol.cond B hol.false (f_4 x_3) (f_4 y_2))) (hol.eq B (f_4 (hol.cond A hol.false x_3 y_2)) (hol.cond B hol.false (f_4 x_3) (f_4 y_2))) (thm_349 A B b_1 y_2 x_3 f_4) (thm_350 A B y_2 x_3 f_4).

(; Theorem: |- ((= ((= (\lambda _460. ((= (f (((Data.Bool.cond _460) x) y))) (((Data.Bool.cond _460) (f x)) (f y))) b)) (\lambda _460. ((= (f (((Data.Bool.cond _460) x) y))) (((Data.Bool.cond _460) (f x)) (f y))) Data.Bool.F))) ((= ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))) ((= (f (((Data.Bool.cond Data.Bool.F) x) y))) (((Data.Bool.cond Data.Bool.F) (f x)) (f y))))) ;)

(; dict ;)

def thm_352 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) b_1) ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) hol.false)) (hol.eq hol.bool (hol.eq B (f_4 (hol.cond A b_1 x_3 y_2)) (hol.cond B b_1 (f_4 x_3) (f_4 y_2))) (hol.eq B (f_4 (hol.cond A hol.false x_3 y_2)) (hol.cond B hol.false (f_4 x_3) (f_4 y_2))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq hol.bool ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) b_1) ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) hol.false)) (hol.eq hol.bool ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) b_1) (hol.eq B (f_4 (hol.cond A hol.false x_3 y_2)) (hol.cond B hol.false (f_4 x_3) (f_4 y_2)))) (hol.eq hol.bool (hol.eq B (f_4 (hol.cond A b_1 x_3 y_2)) (hol.cond B b_1 (f_4 x_3) (f_4 y_2))) (hol.eq B (f_4 (hol.cond A hol.false x_3 y_2)) (hol.cond B hol.false (f_4 x_3) (f_4 y_2)))) (thm_347 A B b_1 y_2 x_3 f_4) (thm_351 A B b_1 y_2 x_3 f_4).

(; Theorem: |- ((= \lambda _460. ((= (f (((Data.Bool.cond _460) x) y))) (((Data.Bool.cond _460) (f x)) (f y)))) \lambda _460. ((= (f (((Data.Bool.cond _460) x) y))) (((Data.Bool.cond _460) (f x)) (f y)))) ;)

(; dict ;)

def thm_353 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__460_4 : hol.term hol.bool => hol.eq B (f_3 (hol.cond A __460_4 x_2 y_1)) (hol.cond B __460_4 (f_3 x_2) (f_3 y_1))) (__460_4 : hol.term hol.bool => hol.eq B (f_3 (hol.cond A __460_4 x_2 y_1)) (hol.cond B __460_4 (f_3 x_2) (f_3 y_1)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hol.REFL (hol.arr hol.bool hol.bool) (__460_4 : hol.term hol.bool => hol.eq B (f_3 (hol.cond A __460_4 x_2 y_1)) (hol.cond B __460_4 (f_3 x_2) (f_3 y_1))).

(; Theorem: |- ((= (\lambda _460. ((= (f (((Data.Bool.cond _460) x) y))) (((Data.Bool.cond _460) (f x)) (f y))) b)) (\lambda _460. ((= (f (((Data.Bool.cond _460) x) y))) (((Data.Bool.cond _460) (f x)) (f y))) Data.Bool.F)) ;)

(; dict ;)

def thm_354 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) -> hol.proof (hol.eq hol.bool ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) b_1) ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) hol.false)) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) => hol.APP_THM hol.bool hol.bool (__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) (__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_3 y_2)) (hol.cond B __460_5 (f_4 x_3) (f_4 y_2))) b_1 hol.false (thm_353 A B y_2 x_3 f_4) (thm_45 b_1 hyp_1).

(; Theorem: |- ((= ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))) ((= (f (((Data.Bool.cond Data.Bool.F) x) y))) (((Data.Bool.cond Data.Bool.F) (f x)) (f y)))) ;)

(; dict ;)

def thm_355 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> b_3 : hol.term hol.bool -> f_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1))) (hol.eq B (f_4 (hol.cond A hol.false x_2 y_1)) (hol.cond B hol.false (f_4 x_2) (f_4 y_1)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => b_3 : hol.term hol.bool => f_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_2 y_1)) (hol.cond B __460_5 (f_4 x_2) (f_4 y_1))) b_3) ((__460_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __460_5 x_2 y_1)) (hol.cond B __460_5 (f_4 x_2) (f_4 y_1))) hol.false)) (hol.eq hol.bool (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1))) (hol.eq B (f_4 (hol.cond A hol.false x_2 y_1)) (hol.cond B hol.false (f_4 x_2) (f_4 y_1)))) (thm_352 A B b_3 y_1 x_2 f_4) (thm_354 A B b_3 y_1 x_2 f_4 hyp_1).

(; Theorem: |- ((= ((= (f (((Data.Bool.cond Data.Bool.F) x) y))) (((Data.Bool.cond Data.Bool.F) (f x)) (f y)))) ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))) ;)

(; dict ;)

def thm_356 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq B (f_4 (hol.cond A hol.false x_3 y_2)) (hol.cond B hol.false (f_4 x_3) (f_4 y_2))) (hol.eq B (f_4 (hol.cond A b_1 x_3 y_2)) (hol.cond B b_1 (f_4 x_3) (f_4 y_2)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) => hol.SYM hol.bool (hol.eq B (f_4 (hol.cond A b_1 x_3 y_2)) (hol.cond B b_1 (f_4 x_3) (f_4 y_2))) (hol.eq B (f_4 (hol.cond A hol.false x_3 y_2)) (hol.cond B hol.false (f_4 x_3) (f_4 y_2))) (thm_355 A B y_2 x_3 b_1 f_4 hyp_1).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_357 : B : hol.type -> hol.proof (hol.eq (hol.arr B (hol.arr B hol.bool)) (hol.eq B) (hol.eq B)) :=
  B : hol.type => hol.REFL (hol.arr B (hol.arr B hol.bool)) (hol.eq B).

(; Theorem: |- ((= f) f) ;)

(; dict ;)

def thm_358 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) f_1 f_1) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.REFL (hol.arr A B) f_1.

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) x) y)) y) ;)

(; dict ;)

def thm_359 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.false x_2 y_1) y_1) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => (A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_95 A t2_1 t1_2) A y_1 x_2.

(; Theorem: |- ((= (f (((Data.Bool.cond Data.Bool.F) x) y))) (f y)) ;)

(; dict ;)

def thm_360 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (f_3 (hol.cond A hol.false x_2 y_1)) (f_3 y_1)) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hol.APP_THM A B f_3 f_3 (hol.cond A hol.false x_2 y_1) y_1 (thm_358 B A f_3) (thm_359 A y_1 x_2).

(; Theorem: |- ((= (= (f (((Data.Bool.cond Data.Bool.F) x) y)))) (= (f y))) ;)

(; dict ;)

def thm_361 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr B hol.bool) (hol.eq B (f_3 (hol.cond A hol.false x_2 y_1))) (hol.eq B (f_3 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hol.APP_THM B (hol.arr B hol.bool) (hol.eq B) (hol.eq B) (f_3 (hol.cond A hol.false x_2 y_1)) (f_3 y_1) (thm_357 B) (thm_360 A B y_1 x_2 f_3).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2) ;)

(; dict ;)

def thm_362 : B : hol.type -> t2_1 : hol.term B -> t1_2 : hol.term B -> hol.proof (hol.eq B (hol.cond B hol.false t1_2 t2_1) t2_1) :=
  B : hol.type => t2_1 : hol.term B => t1_2 : hol.term B => (A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_95 A t2_1 t1_2) B t2_1 t1_2.

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) (f x)) (f y))) (f y)) ;)

(; dict ;)

def thm_363 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (hol.cond B hol.false (f_3 x_2) (f_3 y_1)) (f_3 y_1)) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => (B : hol.type => t2_1 : hol.term B => t1_2 : hol.term B => thm_362 B t2_1 t1_2) B (f_3 y_1) (f_3 x_2).

(; Theorem: |- ((= ((= (f (((Data.Bool.cond Data.Bool.F) x) y))) (((Data.Bool.cond Data.Bool.F) (f x)) (f y)))) ((= (f y)) (f y))) ;)

(; dict ;)

def thm_364 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (f_3 (hol.cond A hol.false x_2 y_1)) (hol.cond B hol.false (f_3 x_2) (f_3 y_1))) (hol.eq B (f_3 y_1) (f_3 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hol.APP_THM B hol.bool (hol.eq B (f_3 (hol.cond A hol.false x_2 y_1))) (hol.eq B (f_3 y_1)) (hol.cond B hol.false (f_3 x_2) (f_3 y_1)) (f_3 y_1) (thm_361 A B y_1 x_2 f_3) (thm_363 A B y_1 x_2 f_3).

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_365 : B : hol.type -> x_1 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq B x_1 x_1) hol.true) :=
  B : hol.type => x_1 : hol.term B => (A : hol.type => x_1 : hol.term A => thm_210 A x_1) B x_1.

(; Theorem: |- ((= ((= (f y)) (f y))) Data.Bool.T) ;)

(; dict ;)

def thm_366 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (f_2 y_1) (f_2 y_1)) hol.true) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A B) => (B : hol.type => x_1 : hol.term B => thm_365 B x_1) B (f_2 y_1).

(; Theorem: |- ((= ((= (f (((Data.Bool.cond Data.Bool.F) x) y))) (((Data.Bool.cond Data.Bool.F) (f x)) (f y)))) Data.Bool.T) ;)

(; dict ;)

def thm_367 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (f_3 (hol.cond A hol.false x_2 y_1)) (hol.cond B hol.false (f_3 x_2) (f_3 y_1))) hol.true) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq B (f_3 (hol.cond A hol.false x_2 y_1)) (hol.cond B hol.false (f_3 x_2) (f_3 y_1))) (hol.eq B (f_3 y_1) (f_3 y_1)) hol.true (thm_364 A B y_1 x_2 f_3) (thm_366 A B y_1 f_3).

(; Theorem: |- ((= Data.Bool.T) ((= (f (((Data.Bool.cond Data.Bool.F) x) y))) (((Data.Bool.cond Data.Bool.F) (f x)) (f y)))) ;)

(; dict ;)

def thm_368 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool hol.true (hol.eq B (f_3 (hol.cond A hol.false x_2 y_1)) (hol.cond B hol.false (f_3 x_2) (f_3 y_1)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hol.SYM hol.bool (hol.eq B (f_3 (hol.cond A hol.false x_2 y_1)) (hol.cond B hol.false (f_3 x_2) (f_3 y_1))) hol.true (thm_367 A B y_1 x_2 f_3).

(; Theorem: |- ((= (f (((Data.Bool.cond Data.Bool.F) x) y))) (((Data.Bool.cond Data.Bool.F) (f x)) (f y))) ;)

(; dict ;)

def thm_369 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (f_3 (hol.cond A hol.false x_2 y_1)) (hol.cond B hol.false (f_3 x_2) (f_3 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hol.EQ_MP hol.true (hol.eq B (f_3 (hol.cond A hol.false x_2 y_1)) (hol.cond B hol.false (f_3 x_2) (f_3 y_1))) (thm_368 A B y_1 x_2 f_3) thm_15.

(; Theorem: |- ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))) ;)

(; dict ;)

def thm_370 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> b_3 : hol.term hol.bool -> f_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.false) -> hol.proof (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => b_3 : hol.term hol.bool => f_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.false) => hol.EQ_MP (hol.eq B (f_4 (hol.cond A hol.false x_2 y_1)) (hol.cond B hol.false (f_4 x_2) (f_4 y_1))) (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1))) (thm_356 A B b_3 y_1 x_2 f_4 hyp_1) (thm_369 A B y_1 x_2 f_4).

(; Theorem: |- ((Data.Bool.==> ((= b) Data.Bool.F)) ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))) ;)

(; dict ;)

def thm_371 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> b_4 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool b_4 hol.false) (hol.eq B (f_3 (hol.cond A b_4 x_2 y_1)) (hol.cond B b_4 (f_3 x_2) (f_3 y_1)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => b_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_4 hol.false) => thm_370 A B y_1 x_2 b_4 f_3 hyp_1.

(; Theorem: |- ((= (= (\lambda _458. ((= (f (((Data.Bool.cond _458) x) y))) (((Data.Bool.cond _458) (f x)) (f y))) b))) (= (\lambda _458. ((= (f (((Data.Bool.cond _458) x) y))) (((Data.Bool.cond _458) (f x)) (f y))) b))) ;)

(; dict ;)

def thm_372 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) b_1)) (hol.eq hol.bool ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) b_1))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A B) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) b_1)).

(; Theorem: |- ((= (\lambda _458. ((= (f (((Data.Bool.cond _458) x) y))) (((Data.Bool.cond _458) (f x)) (f y))) Data.Bool.T)) ((= (f (((Data.Bool.cond Data.Bool.T) x) y))) (((Data.Bool.cond Data.Bool.T) (f x)) (f y)))) ;)

(; dict ;)

def thm_373 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((__458_4 : hol.term hol.bool => hol.eq B (f_3 (hol.cond A __458_4 x_2 y_1)) (hol.cond B __458_4 (f_3 x_2) (f_3 y_1))) hol.true) (hol.eq B (f_3 (hol.cond A hol.true x_2 y_1)) (hol.cond B hol.true (f_3 x_2) (f_3 y_1)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hol.BETA_CONV hol.bool hol.bool (__458_4 : hol.term hol.bool => hol.eq B (f_3 (hol.cond A __458_4 x_2 y_1)) (hol.cond B __458_4 (f_3 x_2) (f_3 y_1))) hol.true.

(; Theorem: |- ((= ((= (\lambda _458. ((= (f (((Data.Bool.cond _458) x) y))) (((Data.Bool.cond _458) (f x)) (f y))) b)) (\lambda _458. ((= (f (((Data.Bool.cond _458) x) y))) (((Data.Bool.cond _458) (f x)) (f y))) Data.Bool.T))) ((= (\lambda _458. ((= (f (((Data.Bool.cond _458) x) y))) (((Data.Bool.cond _458) (f x)) (f y))) b)) ((= (f (((Data.Bool.cond Data.Bool.T) x) y))) (((Data.Bool.cond Data.Bool.T) (f x)) (f y))))) ;)

(; dict ;)

def thm_374 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) b_1) ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) hol.true)) (hol.eq hol.bool ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) b_1) (hol.eq B (f_4 (hol.cond A hol.true x_3 y_2)) (hol.cond B hol.true (f_4 x_3) (f_4 y_2))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) b_1)) (hol.eq hol.bool ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) b_1)) ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) hol.true) (hol.eq B (f_4 (hol.cond A hol.true x_3 y_2)) (hol.cond B hol.true (f_4 x_3) (f_4 y_2))) (thm_372 A B b_1 y_2 x_3 f_4) (thm_373 A B y_2 x_3 f_4).

(; Theorem: |- ((= (\lambda _458. ((= (f (((Data.Bool.cond _458) x) y))) (((Data.Bool.cond _458) (f x)) (f y))) b)) ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))) ;)

(; dict ;)

def thm_375 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) b_1) (hol.eq B (f_4 (hol.cond A b_1 x_3 y_2)) (hol.cond B b_1 (f_4 x_3) (f_4 y_2)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A B) => hol.BETA_CONV hol.bool hol.bool (__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) b_1.

(; Theorem: |- ((= (= (\lambda _458. ((= (f (((Data.Bool.cond _458) x) y))) (((Data.Bool.cond _458) (f x)) (f y))) b))) (= ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))))) ;)

(; dict ;)

def thm_376 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) b_1)) (hol.eq hol.bool (hol.eq B (f_4 (hol.cond A b_1 x_3 y_2)) (hol.cond B b_1 (f_4 x_3) (f_4 y_2))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A B) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) b_1) (hol.eq B (f_4 (hol.cond A b_1 x_3 y_2)) (hol.cond B b_1 (f_4 x_3) (f_4 y_2))) thm_38 (thm_375 A B b_1 y_2 x_3 f_4).

(; Theorem: |- ((= ((= (f (((Data.Bool.cond Data.Bool.T) x) y))) (((Data.Bool.cond Data.Bool.T) (f x)) (f y)))) ((= (f (((Data.Bool.cond Data.Bool.T) x) y))) (((Data.Bool.cond Data.Bool.T) (f x)) (f y)))) ;)

(; dict ;)

def thm_377 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (f_3 (hol.cond A hol.true x_2 y_1)) (hol.cond B hol.true (f_3 x_2) (f_3 y_1))) (hol.eq B (f_3 (hol.cond A hol.true x_2 y_1)) (hol.cond B hol.true (f_3 x_2) (f_3 y_1)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq B (f_3 (hol.cond A hol.true x_2 y_1)) (hol.cond B hol.true (f_3 x_2) (f_3 y_1))).

(; Theorem: |- ((= ((= (\lambda _458. ((= (f (((Data.Bool.cond _458) x) y))) (((Data.Bool.cond _458) (f x)) (f y))) b)) ((= (f (((Data.Bool.cond Data.Bool.T) x) y))) (((Data.Bool.cond Data.Bool.T) (f x)) (f y))))) ((= ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))) ((= (f (((Data.Bool.cond Data.Bool.T) x) y))) (((Data.Bool.cond Data.Bool.T) (f x)) (f y))))) ;)

(; dict ;)

def thm_378 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) b_1) (hol.eq B (f_4 (hol.cond A hol.true x_3 y_2)) (hol.cond B hol.true (f_4 x_3) (f_4 y_2)))) (hol.eq hol.bool (hol.eq B (f_4 (hol.cond A b_1 x_3 y_2)) (hol.cond B b_1 (f_4 x_3) (f_4 y_2))) (hol.eq B (f_4 (hol.cond A hol.true x_3 y_2)) (hol.cond B hol.true (f_4 x_3) (f_4 y_2))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) b_1)) (hol.eq hol.bool (hol.eq B (f_4 (hol.cond A b_1 x_3 y_2)) (hol.cond B b_1 (f_4 x_3) (f_4 y_2)))) (hol.eq B (f_4 (hol.cond A hol.true x_3 y_2)) (hol.cond B hol.true (f_4 x_3) (f_4 y_2))) (hol.eq B (f_4 (hol.cond A hol.true x_3 y_2)) (hol.cond B hol.true (f_4 x_3) (f_4 y_2))) (thm_376 A B b_1 y_2 x_3 f_4) (thm_377 A B y_2 x_3 f_4).

(; Theorem: |- ((= ((= (\lambda _458. ((= (f (((Data.Bool.cond _458) x) y))) (((Data.Bool.cond _458) (f x)) (f y))) b)) (\lambda _458. ((= (f (((Data.Bool.cond _458) x) y))) (((Data.Bool.cond _458) (f x)) (f y))) Data.Bool.T))) ((= ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))) ((= (f (((Data.Bool.cond Data.Bool.T) x) y))) (((Data.Bool.cond Data.Bool.T) (f x)) (f y))))) ;)

(; dict ;)

def thm_379 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) b_1) ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) hol.true)) (hol.eq hol.bool (hol.eq B (f_4 (hol.cond A b_1 x_3 y_2)) (hol.cond B b_1 (f_4 x_3) (f_4 y_2))) (hol.eq B (f_4 (hol.cond A hol.true x_3 y_2)) (hol.cond B hol.true (f_4 x_3) (f_4 y_2))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq hol.bool ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) b_1) ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) hol.true)) (hol.eq hol.bool ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) b_1) (hol.eq B (f_4 (hol.cond A hol.true x_3 y_2)) (hol.cond B hol.true (f_4 x_3) (f_4 y_2)))) (hol.eq hol.bool (hol.eq B (f_4 (hol.cond A b_1 x_3 y_2)) (hol.cond B b_1 (f_4 x_3) (f_4 y_2))) (hol.eq B (f_4 (hol.cond A hol.true x_3 y_2)) (hol.cond B hol.true (f_4 x_3) (f_4 y_2)))) (thm_374 A B b_1 y_2 x_3 f_4) (thm_378 A B b_1 y_2 x_3 f_4).

(; Theorem: |- ((= \lambda _458. ((= (f (((Data.Bool.cond _458) x) y))) (((Data.Bool.cond _458) (f x)) (f y)))) \lambda _458. ((= (f (((Data.Bool.cond _458) x) y))) (((Data.Bool.cond _458) (f x)) (f y)))) ;)

(; dict ;)

def thm_380 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__458_4 : hol.term hol.bool => hol.eq B (f_3 (hol.cond A __458_4 x_2 y_1)) (hol.cond B __458_4 (f_3 x_2) (f_3 y_1))) (__458_4 : hol.term hol.bool => hol.eq B (f_3 (hol.cond A __458_4 x_2 y_1)) (hol.cond B __458_4 (f_3 x_2) (f_3 y_1)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hol.REFL (hol.arr hol.bool hol.bool) (__458_4 : hol.term hol.bool => hol.eq B (f_3 (hol.cond A __458_4 x_2 y_1)) (hol.cond B __458_4 (f_3 x_2) (f_3 y_1))).

(; Theorem: |- ((= (\lambda _458. ((= (f (((Data.Bool.cond _458) x) y))) (((Data.Bool.cond _458) (f x)) (f y))) b)) (\lambda _458. ((= (f (((Data.Bool.cond _458) x) y))) (((Data.Bool.cond _458) (f x)) (f y))) Data.Bool.T)) ;)

(; dict ;)

def thm_381 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) -> hol.proof (hol.eq hol.bool ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) b_1) ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) hol.true)) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) => hol.APP_THM hol.bool hol.bool (__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) (__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_3 y_2)) (hol.cond B __458_5 (f_4 x_3) (f_4 y_2))) b_1 hol.true (thm_380 A B y_2 x_3 f_4) (thm_228 b_1 hyp_1).

(; Theorem: |- ((= ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))) ((= (f (((Data.Bool.cond Data.Bool.T) x) y))) (((Data.Bool.cond Data.Bool.T) (f x)) (f y)))) ;)

(; dict ;)

def thm_382 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> b_3 : hol.term hol.bool -> f_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1))) (hol.eq B (f_4 (hol.cond A hol.true x_2 y_1)) (hol.cond B hol.true (f_4 x_2) (f_4 y_1)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => b_3 : hol.term hol.bool => f_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_2 y_1)) (hol.cond B __458_5 (f_4 x_2) (f_4 y_1))) b_3) ((__458_5 : hol.term hol.bool => hol.eq B (f_4 (hol.cond A __458_5 x_2 y_1)) (hol.cond B __458_5 (f_4 x_2) (f_4 y_1))) hol.true)) (hol.eq hol.bool (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1))) (hol.eq B (f_4 (hol.cond A hol.true x_2 y_1)) (hol.cond B hol.true (f_4 x_2) (f_4 y_1)))) (thm_379 A B b_3 y_1 x_2 f_4) (thm_381 A B b_3 y_1 x_2 f_4 hyp_1).

(; Theorem: |- ((= ((= (f (((Data.Bool.cond Data.Bool.T) x) y))) (((Data.Bool.cond Data.Bool.T) (f x)) (f y)))) ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))) ;)

(; dict ;)

def thm_383 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq B (f_4 (hol.cond A hol.true x_3 y_2)) (hol.cond B hol.true (f_4 x_3) (f_4 y_2))) (hol.eq B (f_4 (hol.cond A b_1 x_3 y_2)) (hol.cond B b_1 (f_4 x_3) (f_4 y_2)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) => hol.SYM hol.bool (hol.eq B (f_4 (hol.cond A b_1 x_3 y_2)) (hol.cond B b_1 (f_4 x_3) (f_4 y_2))) (hol.eq B (f_4 (hol.cond A hol.true x_3 y_2)) (hol.cond B hol.true (f_4 x_3) (f_4 y_2))) (thm_382 A B y_2 x_3 b_1 f_4 hyp_1).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) x) y)) x) ;)

(; dict ;)

def thm_384 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.true x_2 y_1) x_2) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => (A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_61 A t2_1 t1_2) A y_1 x_2.

(; Theorem: |- ((= (f (((Data.Bool.cond Data.Bool.T) x) y))) (f x)) ;)

(; dict ;)

def thm_385 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (f_3 (hol.cond A hol.true x_2 y_1)) (f_3 x_2)) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hol.APP_THM A B f_3 f_3 (hol.cond A hol.true x_2 y_1) x_2 (thm_358 B A f_3) (thm_384 A y_1 x_2).

(; Theorem: |- ((= (= (f (((Data.Bool.cond Data.Bool.T) x) y)))) (= (f x))) ;)

(; dict ;)

def thm_386 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr B hol.bool) (hol.eq B (f_3 (hol.cond A hol.true x_2 y_1))) (hol.eq B (f_3 x_2))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hol.APP_THM B (hol.arr B hol.bool) (hol.eq B) (hol.eq B) (f_3 (hol.cond A hol.true x_2 y_1)) (f_3 x_2) (thm_357 B) (thm_385 A B y_1 x_2 f_3).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1) ;)

(; dict ;)

def thm_387 : B : hol.type -> t2_1 : hol.term B -> t1_2 : hol.term B -> hol.proof (hol.eq B (hol.cond B hol.true t1_2 t2_1) t1_2) :=
  B : hol.type => t2_1 : hol.term B => t1_2 : hol.term B => (A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_61 A t2_1 t1_2) B t2_1 t1_2.

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) (f x)) (f y))) (f x)) ;)

(; dict ;)

def thm_388 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (hol.cond B hol.true (f_3 x_2) (f_3 y_1)) (f_3 x_2)) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => (B : hol.type => t2_1 : hol.term B => t1_2 : hol.term B => thm_387 B t2_1 t1_2) B (f_3 y_1) (f_3 x_2).

(; Theorem: |- ((= ((= (f (((Data.Bool.cond Data.Bool.T) x) y))) (((Data.Bool.cond Data.Bool.T) (f x)) (f y)))) ((= (f x)) (f x))) ;)

(; dict ;)

def thm_389 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (f_3 (hol.cond A hol.true x_2 y_1)) (hol.cond B hol.true (f_3 x_2) (f_3 y_1))) (hol.eq B (f_3 x_2) (f_3 x_2))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hol.APP_THM B hol.bool (hol.eq B (f_3 (hol.cond A hol.true x_2 y_1))) (hol.eq B (f_3 x_2)) (hol.cond B hol.true (f_3 x_2) (f_3 y_1)) (f_3 x_2) (thm_386 A B y_1 x_2 f_3) (thm_388 A B y_1 x_2 f_3).

(; Theorem: |- ((= ((= (f x)) (f x))) Data.Bool.T) ;)

(; dict ;)

def thm_390 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (f_2 x_1) (f_2 x_1)) hol.true) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => (B : hol.type => x_1 : hol.term B => thm_365 B x_1) B (f_2 x_1).

(; Theorem: |- ((= ((= (f (((Data.Bool.cond Data.Bool.T) x) y))) (((Data.Bool.cond Data.Bool.T) (f x)) (f y)))) Data.Bool.T) ;)

(; dict ;)

def thm_391 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (f_3 (hol.cond A hol.true x_2 y_1)) (hol.cond B hol.true (f_3 x_2) (f_3 y_1))) hol.true) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq B (f_3 (hol.cond A hol.true x_2 y_1)) (hol.cond B hol.true (f_3 x_2) (f_3 y_1))) (hol.eq B (f_3 x_2) (f_3 x_2)) hol.true (thm_389 A B y_1 x_2 f_3) (thm_390 A B x_2 f_3).

(; Theorem: |- ((= Data.Bool.T) ((= (f (((Data.Bool.cond Data.Bool.T) x) y))) (((Data.Bool.cond Data.Bool.T) (f x)) (f y)))) ;)

(; dict ;)

def thm_392 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool hol.true (hol.eq B (f_3 (hol.cond A hol.true x_2 y_1)) (hol.cond B hol.true (f_3 x_2) (f_3 y_1)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hol.SYM hol.bool (hol.eq B (f_3 (hol.cond A hol.true x_2 y_1)) (hol.cond B hol.true (f_3 x_2) (f_3 y_1))) hol.true (thm_391 A B y_1 x_2 f_3).

(; Theorem: |- ((= (f (((Data.Bool.cond Data.Bool.T) x) y))) (((Data.Bool.cond Data.Bool.T) (f x)) (f y))) ;)

(; dict ;)

def thm_393 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (f_3 (hol.cond A hol.true x_2 y_1)) (hol.cond B hol.true (f_3 x_2) (f_3 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hol.EQ_MP hol.true (hol.eq B (f_3 (hol.cond A hol.true x_2 y_1)) (hol.cond B hol.true (f_3 x_2) (f_3 y_1))) (thm_392 A B y_1 x_2 f_3) thm_15.

(; Theorem: |- ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))) ;)

(; dict ;)

def thm_394 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> b_3 : hol.term hol.bool -> f_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.true) -> hol.proof (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => b_3 : hol.term hol.bool => f_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.true) => hol.EQ_MP (hol.eq B (f_4 (hol.cond A hol.true x_2 y_1)) (hol.cond B hol.true (f_4 x_2) (f_4 y_1))) (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1))) (thm_383 A B b_3 y_1 x_2 f_4 hyp_1) (thm_393 A B y_1 x_2 f_4).

(; Theorem: |- ((Data.Bool.==> ((= b) Data.Bool.T)) ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))) ;)

(; dict ;)

def thm_395 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> b_4 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool b_4 hol.true) (hol.eq B (f_3 (hol.cond A b_4 x_2 y_1)) (hol.cond B b_4 (f_3 x_2) (f_3 y_1)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => b_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_4 hol.true) => thm_394 A B y_1 x_2 b_4 f_3 hyp_1.

(; Theorem: |- ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))) ;)

(; dict ;)

def thm_396 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> b_3 : hol.term hol.bool -> f_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.true) (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1)))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_3 hol.true) (hol.eq hol.bool b_3 hol.false)) -> hol.proof (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => b_3 : hol.term hol.bool => f_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.true) (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1)))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_3 hol.true) (hol.eq hol.bool b_3 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_269 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool b_3 hol.false) (hol.eq hol.bool b_3 hol.true) (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1))) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))) ;)

(; dict ;)

def thm_397 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> b_3 : hol.term hol.bool -> f_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.true) (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1)))) -> hol.proof (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => b_3 : hol.term hol.bool => f_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.true) (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1)))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool b_3 hol.true) (hol.eq hol.bool b_3 hol.false)) (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1))) (thm_250 b_3) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_3 hol.true) (hol.eq hol.bool b_3 hol.false)) => thm_396 A B y_1 x_2 b_3 f_4 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))) ;)

(; dict ;)

def thm_398 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> b_3 : hol.term hol.bool -> f_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1)))) -> hol.proof (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => b_3 : hol.term hol.bool => f_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1)))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool b_3 hol.true) (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1)))) (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1))) (thm_395 A B y_1 x_2 f_4 b_3) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.true) (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1)))) => thm_397 A B y_1 x_2 b_3 f_4 hyp_1 hyp_2).

(; Theorem: |- ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))) ;)

(; dict ;)

def thm_399 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> b_3 : hol.term hol.bool -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => b_3 : hol.term hol.bool => f_4 : hol.term (hol.arr A B) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1)))) (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1))) (thm_371 A B y_1 x_2 f_4 b_3) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq B (f_4 (hol.cond A b_3 x_2 y_1)) (hol.cond B b_3 (f_4 x_2) (f_4 y_1)))) => thm_398 A B y_1 x_2 b_3 f_4 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))) ;)

(; dict ;)

def thm_400 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> b_2 : hol.term hol.bool -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.forall A (y_4 : hol.term A => hol.eq B (f_3 (hol.cond A b_2 x_1 y_4)) (hol.cond B b_2 (f_3 x_1) (f_3 y_4)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => b_2 : hol.term hol.bool => f_3 : hol.term (hol.arr A B) => y_4 : hol.term A => thm_399 A B y_4 x_1 b_2 f_3.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))))) ;)

(; dict ;)

def thm_401 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => f_2 : hol.term (hol.arr A B) => x_3 : hol.term A => hol.EQ_MP (hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))) (hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))) (thm_344 B A x_3 b_1 f_2) (thm_400 B A x_3 b_1 f_2).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y)))))) ;)

(; dict ;)

def thm_402 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => f_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))) (thm_341 B A b_1 f_2) (thm_401 B A b_1 f_2).

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))))))) ;)

(; dict ;)

def thm_403 : B : hol.type -> A : hol.type -> hol.proof (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => hol.EQ_MP (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4)))))) (thm_338 B A b_1) (thm_402 B A b_1).

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (f (((Data.Bool.cond b) x) y))) (((Data.Bool.cond b) (f x)) (f y))))))) ;)

(; thm ;)

def thm_404 : B : hol.type -> A : hol.type -> hol.proof (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))))) (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq B (f_2 (hol.cond A b_1 x_3 y_4)) (hol.cond B b_1 (f_2 x_3) (f_2 y_4))))))) (thm_334 B A) (thm_403 B A).

(; Theorem: |- ((= \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))))))) \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))))))) ;)

(; dict ;)

def thm_405 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4)))))) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4))))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4)))))).

(; Theorem: |- ((= \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))))))) \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))))))) ;)

(; dict ;)

def thm_406 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4)))))) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4))))))) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4)))))) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4)))))) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4)))))) (thm_405 B A) (thm_405 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))))))) (Data.Bool.! \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))))))) ;)

(; dict ;)

def thm_407 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4))))))) (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4)))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4)))))) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4)))))) thm_25 (thm_406 B A).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))))) \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))))) ;)

(; dict ;)

def thm_408 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4))))) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4)))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr A B) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4))))).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))))) \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))))) ;)

(; dict ;)

def thm_409 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4))))) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4)))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => hol.TRANS (hol.arr (hol.arr A B) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4))))) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4))))) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4))))) (thm_408 B A b_1) (thm_408 B A b_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))))))) ;)

(; dict ;)

def thm_410 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4)))))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4))))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4))))) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4))))) (thm_335 B A) (thm_409 B A b_1).

(; Theorem: |- ((= \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))))) \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))))) ;)

(; dict ;)

def thm_411 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_2 f_1 g_3 x_4) (hol.cond B b_2 (f_1 x_4) (g_3 x_4)))) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_2 f_1 g_3 x_4) (hol.cond B b_2 (f_1 x_4) (g_3 x_4))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => b_2 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr A B) hol.bool) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_2 f_1 g_3 x_4) (hol.cond B b_2 (f_1 x_4) (g_3 x_4)))).

(; Theorem: |- ((= \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))))) \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))))) ;)

(; dict ;)

def thm_412 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_2 f_1 g_3 x_4) (hol.cond B b_2 (f_1 x_4) (g_3 x_4)))) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_2 f_1 g_3 x_4) (hol.cond B b_2 (f_1 x_4) (g_3 x_4))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => b_2 : hol.term hol.bool => hol.TRANS (hol.arr (hol.arr A B) hol.bool) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_2 f_1 g_3 x_4) (hol.cond B b_2 (f_1 x_4) (g_3 x_4)))) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_2 f_1 g_3 x_4) (hol.cond B b_2 (f_1 x_4) (g_3 x_4)))) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_2 f_1 g_3 x_4) (hol.cond B b_2 (f_1 x_4) (g_3 x_4)))) (thm_411 B A f_1 b_2) (thm_411 B A f_1 b_2).

(; Theorem: |- ((= (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))))) (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))))) ;)

(; dict ;)

def thm_413 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_2 f_1 g_3 x_4) (hol.cond B b_2 (f_1 x_4) (g_3 x_4))))) (hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_2 f_1 g_3 x_4) (hol.cond B b_2 (f_1 x_4) (g_3 x_4)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => b_2 : hol.term hol.bool => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_2 f_1 g_3 x_4) (hol.cond B b_2 (f_1 x_4) (g_3 x_4)))) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_2 f_1 g_3 x_4) (hol.cond B b_2 (f_1 x_4) (g_3 x_4)))) (thm_335 B A) (thm_412 B A f_1 b_2).

(; Theorem: |- ((= \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))) \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))) ;)

(; dict ;)

def thm_414 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> b_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_3 f_2 g_1 x_4) (hol.cond B b_3 (f_2 x_4) (g_1 x_4))) (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_3 f_2 g_1 x_4) (hol.cond B b_3 (f_2 x_4) (g_1 x_4)))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => b_3 : hol.term hol.bool => hol.REFL (hol.arr A hol.bool) (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_3 f_2 g_1 x_4) (hol.cond B b_3 (f_2 x_4) (g_1 x_4))).

(; Theorem: |- ((= \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))) \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))) ;)

(; dict ;)

def thm_415 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> b_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_3 f_2 g_1 x_4) (hol.cond B b_3 (f_2 x_4) (g_1 x_4))) (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_3 f_2 g_1 x_4) (hol.cond B b_3 (f_2 x_4) (g_1 x_4)))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => b_3 : hol.term hol.bool => hol.TRANS (hol.arr A hol.bool) (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_3 f_2 g_1 x_4) (hol.cond B b_3 (f_2 x_4) (g_1 x_4))) (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_3 f_2 g_1 x_4) (hol.cond B b_3 (f_2 x_4) (g_1 x_4))) (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_3 f_2 g_1 x_4) (hol.cond B b_3 (f_2 x_4) (g_1 x_4))) (thm_414 B A g_1 f_2 b_3) (thm_414 B A g_1 f_2 b_3).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))))) (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))))) ;)

(; dict ;)

def thm_416 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> b_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_3 f_2 g_1 x_4) (hol.cond B b_3 (f_2 x_4) (g_1 x_4)))) (hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_3 f_2 g_1 x_4) (hol.cond B b_3 (f_2 x_4) (g_1 x_4))))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => b_3 : hol.term hol.bool => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_3 f_2 g_1 x_4) (hol.cond B b_3 (f_2 x_4) (g_1 x_4))) (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_3 f_2 g_1 x_4) (hol.cond B b_3 (f_2 x_4) (g_1 x_4))) (thm_51 A) (thm_415 B A g_1 f_2 b_3).

(; Theorem: |- ((= (= (\lambda _464. ((= ((((Data.Bool.cond _464) f) g) x)) (((Data.Bool.cond _464) (f x)) (g x))) b))) (= (\lambda _464. ((= ((((Data.Bool.cond _464) f) g) x)) (((Data.Bool.cond _464) (f x)) (g x))) b))) ;)

(; dict ;)

def thm_417 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) b_1)) (hol.eq hol.bool ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) b_1))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr A B) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) b_1)).

(; Theorem: |- ((= (\lambda _464. ((= ((((Data.Bool.cond _464) f) g) x)) (((Data.Bool.cond _464) (f x)) (g x))) Data.Bool.F)) ((= ((((Data.Bool.cond Data.Bool.F) f) g) x)) (((Data.Bool.cond Data.Bool.F) (f x)) (g x)))) ;)

(; dict ;)

def thm_418 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((__464_4 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_4 f_3 g_2 x_1) (hol.cond B __464_4 (f_3 x_1) (g_2 x_1))) hol.false) (hol.eq B (hol.cond (hol.arr A B) hol.false f_3 g_2 x_1) (hol.cond B hol.false (f_3 x_1) (g_2 x_1)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.BETA_CONV hol.bool hol.bool (__464_4 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_4 f_3 g_2 x_1) (hol.cond B __464_4 (f_3 x_1) (g_2 x_1))) hol.false.

(; Theorem: |- ((= ((= (\lambda _464. ((= ((((Data.Bool.cond _464) f) g) x)) (((Data.Bool.cond _464) (f x)) (g x))) b)) (\lambda _464. ((= ((((Data.Bool.cond _464) f) g) x)) (((Data.Bool.cond _464) (f x)) (g x))) Data.Bool.F))) ((= (\lambda _464. ((= ((((Data.Bool.cond _464) f) g) x)) (((Data.Bool.cond _464) (f x)) (g x))) b)) ((= ((((Data.Bool.cond Data.Bool.F) f) g) x)) (((Data.Bool.cond Data.Bool.F) (f x)) (g x))))) ;)

(; dict ;)

def thm_419 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) b_1) ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) hol.false)) (hol.eq hol.bool ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) b_1) (hol.eq B (hol.cond (hol.arr A B) hol.false f_4 g_3 x_2) (hol.cond B hol.false (f_4 x_2) (g_3 x_2))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) b_1)) (hol.eq hol.bool ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) b_1)) ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) hol.false) (hol.eq B (hol.cond (hol.arr A B) hol.false f_4 g_3 x_2) (hol.cond B hol.false (f_4 x_2) (g_3 x_2))) (thm_417 A B b_1 x_2 g_3 f_4) (thm_418 A B x_2 g_3 f_4).

(; Theorem: |- ((= (\lambda _464. ((= ((((Data.Bool.cond _464) f) g) x)) (((Data.Bool.cond _464) (f x)) (g x))) b)) ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))) ;)

(; dict ;)

def thm_420 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) b_1) (hol.eq B (hol.cond (hol.arr A B) b_1 f_4 g_3 x_2) (hol.cond B b_1 (f_4 x_2) (g_3 x_2)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr A B) => hol.BETA_CONV hol.bool hol.bool (__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) b_1.

(; Theorem: |- ((= (= (\lambda _464. ((= ((((Data.Bool.cond _464) f) g) x)) (((Data.Bool.cond _464) (f x)) (g x))) b))) (= ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))))) ;)

(; dict ;)

def thm_421 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) b_1)) (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) b_1 f_4 g_3 x_2) (hol.cond B b_1 (f_4 x_2) (g_3 x_2))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr A B) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) b_1) (hol.eq B (hol.cond (hol.arr A B) b_1 f_4 g_3 x_2) (hol.cond B b_1 (f_4 x_2) (g_3 x_2))) thm_38 (thm_420 A B b_1 x_2 g_3 f_4).

(; Theorem: |- ((= ((= ((((Data.Bool.cond Data.Bool.F) f) g) x)) (((Data.Bool.cond Data.Bool.F) (f x)) (g x)))) ((= ((((Data.Bool.cond Data.Bool.F) f) g) x)) (((Data.Bool.cond Data.Bool.F) (f x)) (g x)))) ;)

(; dict ;)

def thm_422 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) hol.false f_3 g_2 x_1) (hol.cond B hol.false (f_3 x_1) (g_2 x_1))) (hol.eq B (hol.cond (hol.arr A B) hol.false f_3 g_2 x_1) (hol.cond B hol.false (f_3 x_1) (g_2 x_1)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq B (hol.cond (hol.arr A B) hol.false f_3 g_2 x_1) (hol.cond B hol.false (f_3 x_1) (g_2 x_1))).

(; Theorem: |- ((= ((= (\lambda _464. ((= ((((Data.Bool.cond _464) f) g) x)) (((Data.Bool.cond _464) (f x)) (g x))) b)) ((= ((((Data.Bool.cond Data.Bool.F) f) g) x)) (((Data.Bool.cond Data.Bool.F) (f x)) (g x))))) ((= ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))) ((= ((((Data.Bool.cond Data.Bool.F) f) g) x)) (((Data.Bool.cond Data.Bool.F) (f x)) (g x))))) ;)

(; dict ;)

def thm_423 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) b_1) (hol.eq B (hol.cond (hol.arr A B) hol.false f_4 g_3 x_2) (hol.cond B hol.false (f_4 x_2) (g_3 x_2)))) (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) b_1 f_4 g_3 x_2) (hol.cond B b_1 (f_4 x_2) (g_3 x_2))) (hol.eq B (hol.cond (hol.arr A B) hol.false f_4 g_3 x_2) (hol.cond B hol.false (f_4 x_2) (g_3 x_2))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) b_1)) (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) b_1 f_4 g_3 x_2) (hol.cond B b_1 (f_4 x_2) (g_3 x_2)))) (hol.eq B (hol.cond (hol.arr A B) hol.false f_4 g_3 x_2) (hol.cond B hol.false (f_4 x_2) (g_3 x_2))) (hol.eq B (hol.cond (hol.arr A B) hol.false f_4 g_3 x_2) (hol.cond B hol.false (f_4 x_2) (g_3 x_2))) (thm_421 A B b_1 x_2 g_3 f_4) (thm_422 A B x_2 g_3 f_4).

(; Theorem: |- ((= ((= (\lambda _464. ((= ((((Data.Bool.cond _464) f) g) x)) (((Data.Bool.cond _464) (f x)) (g x))) b)) (\lambda _464. ((= ((((Data.Bool.cond _464) f) g) x)) (((Data.Bool.cond _464) (f x)) (g x))) Data.Bool.F))) ((= ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))) ((= ((((Data.Bool.cond Data.Bool.F) f) g) x)) (((Data.Bool.cond Data.Bool.F) (f x)) (g x))))) ;)

(; dict ;)

def thm_424 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) b_1) ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) hol.false)) (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) b_1 f_4 g_3 x_2) (hol.cond B b_1 (f_4 x_2) (g_3 x_2))) (hol.eq B (hol.cond (hol.arr A B) hol.false f_4 g_3 x_2) (hol.cond B hol.false (f_4 x_2) (g_3 x_2))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq hol.bool ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) b_1) ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) hol.false)) (hol.eq hol.bool ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) b_1) (hol.eq B (hol.cond (hol.arr A B) hol.false f_4 g_3 x_2) (hol.cond B hol.false (f_4 x_2) (g_3 x_2)))) (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) b_1 f_4 g_3 x_2) (hol.cond B b_1 (f_4 x_2) (g_3 x_2))) (hol.eq B (hol.cond (hol.arr A B) hol.false f_4 g_3 x_2) (hol.cond B hol.false (f_4 x_2) (g_3 x_2)))) (thm_419 A B b_1 x_2 g_3 f_4) (thm_423 A B b_1 x_2 g_3 f_4).

(; Theorem: |- ((= \lambda _464. ((= ((((Data.Bool.cond _464) f) g) x)) (((Data.Bool.cond _464) (f x)) (g x)))) \lambda _464. ((= ((((Data.Bool.cond _464) f) g) x)) (((Data.Bool.cond _464) (f x)) (g x)))) ;)

(; dict ;)

def thm_425 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__464_4 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_4 f_3 g_2 x_1) (hol.cond B __464_4 (f_3 x_1) (g_2 x_1))) (__464_4 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_4 f_3 g_2 x_1) (hol.cond B __464_4 (f_3 x_1) (g_2 x_1)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.REFL (hol.arr hol.bool hol.bool) (__464_4 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_4 f_3 g_2 x_1) (hol.cond B __464_4 (f_3 x_1) (g_2 x_1))).

(; Theorem: |- ((= (\lambda _464. ((= ((((Data.Bool.cond _464) f) g) x)) (((Data.Bool.cond _464) (f x)) (g x))) b)) (\lambda _464. ((= ((((Data.Bool.cond _464) f) g) x)) (((Data.Bool.cond _464) (f x)) (g x))) Data.Bool.F)) ;)

(; dict ;)

def thm_426 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) -> hol.proof (hol.eq hol.bool ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) b_1) ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) hol.false)) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) => hol.APP_THM hol.bool hol.bool (__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) (__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_4 g_3 x_2) (hol.cond B __464_5 (f_4 x_2) (g_3 x_2))) b_1 hol.false (thm_425 A B x_2 g_3 f_4) (thm_45 b_1 hyp_1).

(; Theorem: |- ((= ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))) ((= ((((Data.Bool.cond Data.Bool.F) f) g) x)) (((Data.Bool.cond Data.Bool.F) (f x)) (g x)))) ;)

(; dict ;)

def thm_427 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> b_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_4 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1))) (hol.eq B (hol.cond (hol.arr A B) hol.false f_3 g_2 x_1) (hol.cond B hol.false (f_3 x_1) (g_2 x_1)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => b_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_4 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_3 g_2 x_1) (hol.cond B __464_5 (f_3 x_1) (g_2 x_1))) b_4) ((__464_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __464_5 f_3 g_2 x_1) (hol.cond B __464_5 (f_3 x_1) (g_2 x_1))) hol.false)) (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1))) (hol.eq B (hol.cond (hol.arr A B) hol.false f_3 g_2 x_1) (hol.cond B hol.false (f_3 x_1) (g_2 x_1)))) (thm_424 A B b_4 x_1 g_2 f_3) (thm_426 A B b_4 x_1 g_2 f_3 hyp_1).

(; Theorem: |- ((= ((= ((((Data.Bool.cond Data.Bool.F) f) g) x)) (((Data.Bool.cond Data.Bool.F) (f x)) (g x)))) ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))) ;)

(; dict ;)

def thm_428 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) hol.false f_4 g_3 x_2) (hol.cond B hol.false (f_4 x_2) (g_3 x_2))) (hol.eq B (hol.cond (hol.arr A B) b_1 f_4 g_3 x_2) (hol.cond B b_1 (f_4 x_2) (g_3 x_2)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) => hol.SYM hol.bool (hol.eq B (hol.cond (hol.arr A B) b_1 f_4 g_3 x_2) (hol.cond B b_1 (f_4 x_2) (g_3 x_2))) (hol.eq B (hol.cond (hol.arr A B) hol.false f_4 g_3 x_2) (hol.cond B hol.false (f_4 x_2) (g_3 x_2))) (thm_427 A B x_2 g_3 f_4 b_1 hyp_1).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2) ;)

(; dict ;)

def thm_429 : B : hol.type -> A : hol.type -> t2_1 : hol.term (hol.arr A B) -> t1_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (hol.cond (hol.arr A B) hol.false t1_2 t2_1) t2_1) :=
  B : hol.type => A : hol.type => t2_1 : hol.term (hol.arr A B) => t1_2 : hol.term (hol.arr A B) => (A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_95 A t2_1 t1_2) (hol.arr A B) t2_1 t1_2.

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) f) g)) g) ;)

(; dict ;)

def thm_430 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (hol.cond (hol.arr A B) hol.false f_2 g_1) g_1) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => (B : hol.type => A : hol.type => t2_1 : hol.term (hol.arr A B) => t1_2 : hol.term (hol.arr A B) => thm_429 B A t2_1 t1_2) B A g_1 f_2.

(; Theorem: |- ((= ((((Data.Bool.cond Data.Bool.F) f) g) x)) (g x)) ;)

(; dict ;)

def thm_431 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (hol.cond (hol.arr A B) hol.false f_3 g_2 x_1) (g_2 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.APP_THM A B (hol.cond (hol.arr A B) hol.false f_3 g_2) g_2 x_1 x_1 (thm_430 B A g_2 f_3) (thm_209 A x_1).

(; Theorem: |- ((= (= ((((Data.Bool.cond Data.Bool.F) f) g) x))) (= (g x))) ;)

(; dict ;)

def thm_432 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr B hol.bool) (hol.eq B (hol.cond (hol.arr A B) hol.false f_3 g_2 x_1)) (hol.eq B (g_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.APP_THM B (hol.arr B hol.bool) (hol.eq B) (hol.eq B) (hol.cond (hol.arr A B) hol.false f_3 g_2 x_1) (g_2 x_1) (thm_357 B) (thm_431 A B x_1 g_2 f_3).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) (f x)) (g x))) (g x)) ;)

(; dict ;)

def thm_433 : A : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (hol.cond B hol.false (f_3 x_2) (g_1 x_2)) (g_1 x_2)) :=
  A : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => (B : hol.type => t2_1 : hol.term B => t1_2 : hol.term B => thm_362 B t2_1 t1_2) B (g_1 x_2) (f_3 x_2).

(; Theorem: |- ((= ((= ((((Data.Bool.cond Data.Bool.F) f) g) x)) (((Data.Bool.cond Data.Bool.F) (f x)) (g x)))) ((= (g x)) (g x))) ;)

(; dict ;)

def thm_434 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) hol.false f_3 g_2 x_1) (hol.cond B hol.false (f_3 x_1) (g_2 x_1))) (hol.eq B (g_2 x_1) (g_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.APP_THM B hol.bool (hol.eq B (hol.cond (hol.arr A B) hol.false f_3 g_2 x_1)) (hol.eq B (g_2 x_1)) (hol.cond B hol.false (f_3 x_1) (g_2 x_1)) (g_2 x_1) (thm_432 A B x_1 g_2 f_3) (thm_433 A B g_2 x_1 f_3).

(; Theorem: |- ((= ((= (g x)) (g x))) Data.Bool.T) ;)

(; dict ;)

def thm_435 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (g_2 x_1) (g_2 x_1)) hol.true) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => (B : hol.type => x_1 : hol.term B => thm_365 B x_1) B (g_2 x_1).

(; Theorem: |- ((= ((= ((((Data.Bool.cond Data.Bool.F) f) g) x)) (((Data.Bool.cond Data.Bool.F) (f x)) (g x)))) Data.Bool.T) ;)

(; dict ;)

def thm_436 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) hol.false f_3 g_2 x_1) (hol.cond B hol.false (f_3 x_1) (g_2 x_1))) hol.true) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq B (hol.cond (hol.arr A B) hol.false f_3 g_2 x_1) (hol.cond B hol.false (f_3 x_1) (g_2 x_1))) (hol.eq B (g_2 x_1) (g_2 x_1)) hol.true (thm_434 A B x_1 g_2 f_3) (thm_435 A B x_1 g_2).

(; Theorem: |- ((= Data.Bool.T) ((= ((((Data.Bool.cond Data.Bool.F) f) g) x)) (((Data.Bool.cond Data.Bool.F) (f x)) (g x)))) ;)

(; dict ;)

def thm_437 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool hol.true (hol.eq B (hol.cond (hol.arr A B) hol.false f_3 g_2 x_1) (hol.cond B hol.false (f_3 x_1) (g_2 x_1)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.SYM hol.bool (hol.eq B (hol.cond (hol.arr A B) hol.false f_3 g_2 x_1) (hol.cond B hol.false (f_3 x_1) (g_2 x_1))) hol.true (thm_436 A B x_1 g_2 f_3).

(; Theorem: |- ((= ((((Data.Bool.cond Data.Bool.F) f) g) x)) (((Data.Bool.cond Data.Bool.F) (f x)) (g x))) ;)

(; dict ;)

def thm_438 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (hol.cond (hol.arr A B) hol.false f_3 g_2 x_1) (hol.cond B hol.false (f_3 x_1) (g_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.EQ_MP hol.true (hol.eq B (hol.cond (hol.arr A B) hol.false f_3 g_2 x_1) (hol.cond B hol.false (f_3 x_1) (g_2 x_1))) (thm_437 A B x_1 g_2 f_3) thm_15.

(; Theorem: |- ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))) ;)

(; dict ;)

def thm_439 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> b_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_4 hol.false) -> hol.proof (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => b_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_4 hol.false) => hol.EQ_MP (hol.eq B (hol.cond (hol.arr A B) hol.false f_3 g_2 x_1) (hol.cond B hol.false (f_3 x_1) (g_2 x_1))) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1))) (thm_428 A B b_4 x_1 g_2 f_3 hyp_1) (thm_438 A B x_1 g_2 f_3).

(; Theorem: |- ((Data.Bool.==> ((= b) Data.Bool.F)) ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))) ;)

(; dict ;)

def thm_440 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> b_4 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool b_4 hol.false) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => b_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_4 hol.false) => thm_439 A B x_1 g_2 f_3 b_4 hyp_1.

(; Theorem: |- ((= (= (\lambda _462. ((= ((((Data.Bool.cond _462) f) g) x)) (((Data.Bool.cond _462) (f x)) (g x))) b))) (= (\lambda _462. ((= ((((Data.Bool.cond _462) f) g) x)) (((Data.Bool.cond _462) (f x)) (g x))) b))) ;)

(; dict ;)

def thm_441 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) b_1)) (hol.eq hol.bool ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) b_1))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr A B) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) b_1)).

(; Theorem: |- ((= (\lambda _462. ((= ((((Data.Bool.cond _462) f) g) x)) (((Data.Bool.cond _462) (f x)) (g x))) Data.Bool.T)) ((= ((((Data.Bool.cond Data.Bool.T) f) g) x)) (((Data.Bool.cond Data.Bool.T) (f x)) (g x)))) ;)

(; dict ;)

def thm_442 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((__462_4 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_4 f_3 g_2 x_1) (hol.cond B __462_4 (f_3 x_1) (g_2 x_1))) hol.true) (hol.eq B (hol.cond (hol.arr A B) hol.true f_3 g_2 x_1) (hol.cond B hol.true (f_3 x_1) (g_2 x_1)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.BETA_CONV hol.bool hol.bool (__462_4 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_4 f_3 g_2 x_1) (hol.cond B __462_4 (f_3 x_1) (g_2 x_1))) hol.true.

(; Theorem: |- ((= ((= (\lambda _462. ((= ((((Data.Bool.cond _462) f) g) x)) (((Data.Bool.cond _462) (f x)) (g x))) b)) (\lambda _462. ((= ((((Data.Bool.cond _462) f) g) x)) (((Data.Bool.cond _462) (f x)) (g x))) Data.Bool.T))) ((= (\lambda _462. ((= ((((Data.Bool.cond _462) f) g) x)) (((Data.Bool.cond _462) (f x)) (g x))) b)) ((= ((((Data.Bool.cond Data.Bool.T) f) g) x)) (((Data.Bool.cond Data.Bool.T) (f x)) (g x))))) ;)

(; dict ;)

def thm_443 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) b_1) ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) hol.true)) (hol.eq hol.bool ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) b_1) (hol.eq B (hol.cond (hol.arr A B) hol.true f_4 g_3 x_2) (hol.cond B hol.true (f_4 x_2) (g_3 x_2))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) b_1)) (hol.eq hol.bool ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) b_1)) ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) hol.true) (hol.eq B (hol.cond (hol.arr A B) hol.true f_4 g_3 x_2) (hol.cond B hol.true (f_4 x_2) (g_3 x_2))) (thm_441 A B b_1 x_2 g_3 f_4) (thm_442 A B x_2 g_3 f_4).

(; Theorem: |- ((= (\lambda _462. ((= ((((Data.Bool.cond _462) f) g) x)) (((Data.Bool.cond _462) (f x)) (g x))) b)) ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))) ;)

(; dict ;)

def thm_444 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) b_1) (hol.eq B (hol.cond (hol.arr A B) b_1 f_4 g_3 x_2) (hol.cond B b_1 (f_4 x_2) (g_3 x_2)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr A B) => hol.BETA_CONV hol.bool hol.bool (__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) b_1.

(; Theorem: |- ((= (= (\lambda _462. ((= ((((Data.Bool.cond _462) f) g) x)) (((Data.Bool.cond _462) (f x)) (g x))) b))) (= ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))))) ;)

(; dict ;)

def thm_445 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) b_1)) (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) b_1 f_4 g_3 x_2) (hol.cond B b_1 (f_4 x_2) (g_3 x_2))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr A B) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) b_1) (hol.eq B (hol.cond (hol.arr A B) b_1 f_4 g_3 x_2) (hol.cond B b_1 (f_4 x_2) (g_3 x_2))) thm_38 (thm_444 A B b_1 x_2 g_3 f_4).

(; Theorem: |- ((= ((= ((((Data.Bool.cond Data.Bool.T) f) g) x)) (((Data.Bool.cond Data.Bool.T) (f x)) (g x)))) ((= ((((Data.Bool.cond Data.Bool.T) f) g) x)) (((Data.Bool.cond Data.Bool.T) (f x)) (g x)))) ;)

(; dict ;)

def thm_446 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) hol.true f_3 g_2 x_1) (hol.cond B hol.true (f_3 x_1) (g_2 x_1))) (hol.eq B (hol.cond (hol.arr A B) hol.true f_3 g_2 x_1) (hol.cond B hol.true (f_3 x_1) (g_2 x_1)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq B (hol.cond (hol.arr A B) hol.true f_3 g_2 x_1) (hol.cond B hol.true (f_3 x_1) (g_2 x_1))).

(; Theorem: |- ((= ((= (\lambda _462. ((= ((((Data.Bool.cond _462) f) g) x)) (((Data.Bool.cond _462) (f x)) (g x))) b)) ((= ((((Data.Bool.cond Data.Bool.T) f) g) x)) (((Data.Bool.cond Data.Bool.T) (f x)) (g x))))) ((= ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))) ((= ((((Data.Bool.cond Data.Bool.T) f) g) x)) (((Data.Bool.cond Data.Bool.T) (f x)) (g x))))) ;)

(; dict ;)

def thm_447 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) b_1) (hol.eq B (hol.cond (hol.arr A B) hol.true f_4 g_3 x_2) (hol.cond B hol.true (f_4 x_2) (g_3 x_2)))) (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) b_1 f_4 g_3 x_2) (hol.cond B b_1 (f_4 x_2) (g_3 x_2))) (hol.eq B (hol.cond (hol.arr A B) hol.true f_4 g_3 x_2) (hol.cond B hol.true (f_4 x_2) (g_3 x_2))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) b_1)) (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) b_1 f_4 g_3 x_2) (hol.cond B b_1 (f_4 x_2) (g_3 x_2)))) (hol.eq B (hol.cond (hol.arr A B) hol.true f_4 g_3 x_2) (hol.cond B hol.true (f_4 x_2) (g_3 x_2))) (hol.eq B (hol.cond (hol.arr A B) hol.true f_4 g_3 x_2) (hol.cond B hol.true (f_4 x_2) (g_3 x_2))) (thm_445 A B b_1 x_2 g_3 f_4) (thm_446 A B x_2 g_3 f_4).

(; Theorem: |- ((= ((= (\lambda _462. ((= ((((Data.Bool.cond _462) f) g) x)) (((Data.Bool.cond _462) (f x)) (g x))) b)) (\lambda _462. ((= ((((Data.Bool.cond _462) f) g) x)) (((Data.Bool.cond _462) (f x)) (g x))) Data.Bool.T))) ((= ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))) ((= ((((Data.Bool.cond Data.Bool.T) f) g) x)) (((Data.Bool.cond Data.Bool.T) (f x)) (g x))))) ;)

(; dict ;)

def thm_448 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) b_1) ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) hol.true)) (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) b_1 f_4 g_3 x_2) (hol.cond B b_1 (f_4 x_2) (g_3 x_2))) (hol.eq B (hol.cond (hol.arr A B) hol.true f_4 g_3 x_2) (hol.cond B hol.true (f_4 x_2) (g_3 x_2))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq hol.bool ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) b_1) ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) hol.true)) (hol.eq hol.bool ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) b_1) (hol.eq B (hol.cond (hol.arr A B) hol.true f_4 g_3 x_2) (hol.cond B hol.true (f_4 x_2) (g_3 x_2)))) (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) b_1 f_4 g_3 x_2) (hol.cond B b_1 (f_4 x_2) (g_3 x_2))) (hol.eq B (hol.cond (hol.arr A B) hol.true f_4 g_3 x_2) (hol.cond B hol.true (f_4 x_2) (g_3 x_2)))) (thm_443 A B b_1 x_2 g_3 f_4) (thm_447 A B b_1 x_2 g_3 f_4).

(; Theorem: |- ((= \lambda _462. ((= ((((Data.Bool.cond _462) f) g) x)) (((Data.Bool.cond _462) (f x)) (g x)))) \lambda _462. ((= ((((Data.Bool.cond _462) f) g) x)) (((Data.Bool.cond _462) (f x)) (g x)))) ;)

(; dict ;)

def thm_449 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__462_4 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_4 f_3 g_2 x_1) (hol.cond B __462_4 (f_3 x_1) (g_2 x_1))) (__462_4 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_4 f_3 g_2 x_1) (hol.cond B __462_4 (f_3 x_1) (g_2 x_1)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.REFL (hol.arr hol.bool hol.bool) (__462_4 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_4 f_3 g_2 x_1) (hol.cond B __462_4 (f_3 x_1) (g_2 x_1))).

(; Theorem: |- ((= (\lambda _462. ((= ((((Data.Bool.cond _462) f) g) x)) (((Data.Bool.cond _462) (f x)) (g x))) b)) (\lambda _462. ((= ((((Data.Bool.cond _462) f) g) x)) (((Data.Bool.cond _462) (f x)) (g x))) Data.Bool.T)) ;)

(; dict ;)

def thm_450 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) -> hol.proof (hol.eq hol.bool ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) b_1) ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) hol.true)) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) => hol.APP_THM hol.bool hol.bool (__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) (__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_4 g_3 x_2) (hol.cond B __462_5 (f_4 x_2) (g_3 x_2))) b_1 hol.true (thm_449 A B x_2 g_3 f_4) (thm_228 b_1 hyp_1).

(; Theorem: |- ((= ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))) ((= ((((Data.Bool.cond Data.Bool.T) f) g) x)) (((Data.Bool.cond Data.Bool.T) (f x)) (g x)))) ;)

(; dict ;)

def thm_451 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> b_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_4 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1))) (hol.eq B (hol.cond (hol.arr A B) hol.true f_3 g_2 x_1) (hol.cond B hol.true (f_3 x_1) (g_2 x_1)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => b_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_4 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_3 g_2 x_1) (hol.cond B __462_5 (f_3 x_1) (g_2 x_1))) b_4) ((__462_5 : hol.term hol.bool => hol.eq B (hol.cond (hol.arr A B) __462_5 f_3 g_2 x_1) (hol.cond B __462_5 (f_3 x_1) (g_2 x_1))) hol.true)) (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1))) (hol.eq B (hol.cond (hol.arr A B) hol.true f_3 g_2 x_1) (hol.cond B hol.true (f_3 x_1) (g_2 x_1)))) (thm_448 A B b_4 x_1 g_2 f_3) (thm_450 A B b_4 x_1 g_2 f_3 hyp_1).

(; Theorem: |- ((= ((= ((((Data.Bool.cond Data.Bool.T) f) g) x)) (((Data.Bool.cond Data.Bool.T) (f x)) (g x)))) ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))) ;)

(; dict ;)

def thm_452 : A : hol.type -> B : hol.type -> b_1 : hol.term hol.bool -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) hol.true f_4 g_3 x_2) (hol.cond B hol.true (f_4 x_2) (g_3 x_2))) (hol.eq B (hol.cond (hol.arr A B) b_1 f_4 g_3 x_2) (hol.cond B b_1 (f_4 x_2) (g_3 x_2)))) :=
  A : hol.type => B : hol.type => b_1 : hol.term hol.bool => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) => hol.SYM hol.bool (hol.eq B (hol.cond (hol.arr A B) b_1 f_4 g_3 x_2) (hol.cond B b_1 (f_4 x_2) (g_3 x_2))) (hol.eq B (hol.cond (hol.arr A B) hol.true f_4 g_3 x_2) (hol.cond B hol.true (f_4 x_2) (g_3 x_2))) (thm_451 A B x_2 g_3 f_4 b_1 hyp_1).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1) ;)

(; dict ;)

def thm_453 : B : hol.type -> A : hol.type -> t2_1 : hol.term (hol.arr A B) -> t1_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (hol.cond (hol.arr A B) hol.true t1_2 t2_1) t1_2) :=
  B : hol.type => A : hol.type => t2_1 : hol.term (hol.arr A B) => t1_2 : hol.term (hol.arr A B) => (A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_61 A t2_1 t1_2) (hol.arr A B) t2_1 t1_2.

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) f) g)) f) ;)

(; dict ;)

def thm_454 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (hol.cond (hol.arr A B) hol.true f_2 g_1) f_2) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => (B : hol.type => A : hol.type => t2_1 : hol.term (hol.arr A B) => t1_2 : hol.term (hol.arr A B) => thm_453 B A t2_1 t1_2) B A g_1 f_2.

(; Theorem: |- ((= ((((Data.Bool.cond Data.Bool.T) f) g) x)) (f x)) ;)

(; dict ;)

def thm_455 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (hol.cond (hol.arr A B) hol.true f_3 g_2 x_1) (f_3 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.APP_THM A B (hol.cond (hol.arr A B) hol.true f_3 g_2) f_3 x_1 x_1 (thm_454 B A g_2 f_3) (thm_209 A x_1).

(; Theorem: |- ((= (= ((((Data.Bool.cond Data.Bool.T) f) g) x))) (= (f x))) ;)

(; dict ;)

def thm_456 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr B hol.bool) (hol.eq B (hol.cond (hol.arr A B) hol.true f_3 g_2 x_1)) (hol.eq B (f_3 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.APP_THM B (hol.arr B hol.bool) (hol.eq B) (hol.eq B) (hol.cond (hol.arr A B) hol.true f_3 g_2 x_1) (f_3 x_1) (thm_357 B) (thm_455 A B x_1 g_2 f_3).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) (f x)) (g x))) (f x)) ;)

(; dict ;)

def thm_457 : A : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (hol.cond B hol.true (f_3 x_2) (g_1 x_2)) (f_3 x_2)) :=
  A : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => (B : hol.type => t2_1 : hol.term B => t1_2 : hol.term B => thm_387 B t2_1 t1_2) B (g_1 x_2) (f_3 x_2).

(; Theorem: |- ((= ((= ((((Data.Bool.cond Data.Bool.T) f) g) x)) (((Data.Bool.cond Data.Bool.T) (f x)) (g x)))) ((= (f x)) (f x))) ;)

(; dict ;)

def thm_458 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) hol.true f_3 g_2 x_1) (hol.cond B hol.true (f_3 x_1) (g_2 x_1))) (hol.eq B (f_3 x_1) (f_3 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.APP_THM B hol.bool (hol.eq B (hol.cond (hol.arr A B) hol.true f_3 g_2 x_1)) (hol.eq B (f_3 x_1)) (hol.cond B hol.true (f_3 x_1) (g_2 x_1)) (f_3 x_1) (thm_456 A B x_1 g_2 f_3) (thm_457 A B g_2 x_1 f_3).

(; Theorem: |- ((= ((= ((((Data.Bool.cond Data.Bool.T) f) g) x)) (((Data.Bool.cond Data.Bool.T) (f x)) (g x)))) Data.Bool.T) ;)

(; dict ;)

def thm_459 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (hol.cond (hol.arr A B) hol.true f_3 g_2 x_1) (hol.cond B hol.true (f_3 x_1) (g_2 x_1))) hol.true) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq B (hol.cond (hol.arr A B) hol.true f_3 g_2 x_1) (hol.cond B hol.true (f_3 x_1) (g_2 x_1))) (hol.eq B (f_3 x_1) (f_3 x_1)) hol.true (thm_458 A B x_1 g_2 f_3) (thm_390 A B x_1 f_3).

(; Theorem: |- ((= Data.Bool.T) ((= ((((Data.Bool.cond Data.Bool.T) f) g) x)) (((Data.Bool.cond Data.Bool.T) (f x)) (g x)))) ;)

(; dict ;)

def thm_460 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool hol.true (hol.eq B (hol.cond (hol.arr A B) hol.true f_3 g_2 x_1) (hol.cond B hol.true (f_3 x_1) (g_2 x_1)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.SYM hol.bool (hol.eq B (hol.cond (hol.arr A B) hol.true f_3 g_2 x_1) (hol.cond B hol.true (f_3 x_1) (g_2 x_1))) hol.true (thm_459 A B x_1 g_2 f_3).

(; Theorem: |- ((= ((((Data.Bool.cond Data.Bool.T) f) g) x)) (((Data.Bool.cond Data.Bool.T) (f x)) (g x))) ;)

(; dict ;)

def thm_461 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (hol.cond (hol.arr A B) hol.true f_3 g_2 x_1) (hol.cond B hol.true (f_3 x_1) (g_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.EQ_MP hol.true (hol.eq B (hol.cond (hol.arr A B) hol.true f_3 g_2 x_1) (hol.cond B hol.true (f_3 x_1) (g_2 x_1))) (thm_460 A B x_1 g_2 f_3) thm_15.

(; Theorem: |- ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))) ;)

(; dict ;)

def thm_462 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> b_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_4 hol.true) -> hol.proof (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => b_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_4 hol.true) => hol.EQ_MP (hol.eq B (hol.cond (hol.arr A B) hol.true f_3 g_2 x_1) (hol.cond B hol.true (f_3 x_1) (g_2 x_1))) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1))) (thm_452 A B b_4 x_1 g_2 f_3 hyp_1) (thm_461 A B x_1 g_2 f_3).

(; Theorem: |- ((Data.Bool.==> ((= b) Data.Bool.T)) ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))) ;)

(; dict ;)

def thm_463 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> b_4 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool b_4 hol.true) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => b_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_4 hol.true) => thm_462 A B x_1 g_2 f_3 b_4 hyp_1.

(; Theorem: |- ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))) ;)

(; dict ;)

def thm_464 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> b_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_4 hol.false) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_4 hol.true) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1)))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_4 hol.true) (hol.eq hol.bool b_4 hol.false)) -> hol.proof (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => b_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_4 hol.false) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_4 hol.true) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1)))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_4 hol.true) (hol.eq hol.bool b_4 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_269 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool b_4 hol.false) (hol.eq hol.bool b_4 hol.true) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1))) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))) ;)

(; dict ;)

def thm_465 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> b_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_4 hol.false) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_4 hol.true) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1)))) -> hol.proof (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => b_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_4 hol.false) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_4 hol.true) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1)))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool b_4 hol.true) (hol.eq hol.bool b_4 hol.false)) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1))) (thm_250 b_4) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_4 hol.true) (hol.eq hol.bool b_4 hol.false)) => thm_464 A B x_1 g_2 f_3 b_4 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))) ;)

(; dict ;)

def thm_466 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> b_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_4 hol.false) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1)))) -> hol.proof (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => b_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_4 hol.false) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1)))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool b_4 hol.true) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1)))) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1))) (thm_463 A B x_1 g_2 f_3 b_4) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_4 hol.true) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1)))) => thm_465 A B x_1 g_2 f_3 b_4 hyp_1 hyp_2).

(; Theorem: |- ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))) ;)

(; dict ;)

def thm_467 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> b_4 : hol.term hol.bool -> hol.proof (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => b_4 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool b_4 hol.false) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1)))) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1))) (thm_440 A B x_1 g_2 f_3 b_4) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_4 hol.false) (hol.eq B (hol.cond (hol.arr A B) b_4 f_3 g_2 x_1) (hol.cond B b_4 (f_3 x_1) (g_2 x_1)))) => thm_466 A B x_1 g_2 f_3 b_4 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))) ;)

(; dict ;)

def thm_468 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> b_3 : hol.term hol.bool -> hol.proof (hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_3 f_2 g_1 x_4) (hol.cond B b_3 (f_2 x_4) (g_1 x_4)))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => b_3 : hol.term hol.bool => x_4 : hol.term A => thm_467 A B x_4 g_1 f_2 b_3.

(; Theorem: |- (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))))) ;)

(; dict ;)

def thm_469 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> b_2 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_2 f_1 g_3 x_4) (hol.cond B b_2 (f_1 x_4) (g_3 x_4))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => b_2 : hol.term hol.bool => g_3 : hol.term (hol.arr A B) => hol.EQ_MP (hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_2 f_1 g_3 x_4) (hol.cond B b_2 (f_1 x_4) (g_3 x_4)))) (hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_2 f_1 g_3 x_4) (hol.cond B b_2 (f_1 x_4) (g_3 x_4)))) (thm_416 B A g_3 f_1 b_2) (thm_468 B A g_3 f_1 b_2).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x)))))) ;)

(; dict ;)

def thm_470 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4)))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => f_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4))))) (hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4))))) (thm_413 B A f_2 b_1) (thm_469 B A f_2 b_1).

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))))))) ;)

(; dict ;)

def thm_471 : B : hol.type -> A : hol.type -> hol.proof (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4))))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => hol.EQ_MP (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4)))))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4)))))) (thm_410 B A b_1) (thm_470 B A b_1).

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((((Data.Bool.cond b) f) g) x)) (((Data.Bool.cond b) (f x)) (g x))))))) ;)

(; thm ;)

def thm_472 : B : hol.type -> A : hol.type -> hol.proof (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4))))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4))))))) (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq B (hol.cond (hol.arr A B) b_1 f_2 g_3 x_4) (hol.cond B b_1 (f_2 x_4) (g_3 x_4))))))) (thm_407 B A) (thm_471 B A).

(; Theorem: |- ((= \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))))) \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))))) ;)

(; dict ;)

def thm_473 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3)))) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3)))).

(; Theorem: |- ((= \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))))) \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))))) ;)

(; dict ;)

def thm_474 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3)))) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3))))) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3)))) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3)))) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3)))) (thm_473 B A) (thm_473 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g)))))) (Data.Bool.! \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g)))))) ;)

(; dict ;)

def thm_475 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3))))) (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3)))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3)))) (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3)))) thm_25 (thm_474 B A).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g)))) \lambda f. (Data.Bool.! \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g)))) ;)

(; dict ;)

def thm_476 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3))) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr A B) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3))).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g)))) \lambda f. (Data.Bool.! \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g)))) ;)

(; dict ;)

def thm_477 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3))) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => hol.TRANS (hol.arr (hol.arr A B) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3))) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3))) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3))) (thm_476 B A b_1) (thm_476 B A b_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))))) ;)

(; dict ;)

def thm_478 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3))) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3))) (thm_335 B A) (thm_477 B A b_1).

(; Theorem: |- ((= \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))) \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))) ;)

(; dict ;)

def thm_479 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_2 (f_1 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_2 f_1 g_3)) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_2 (f_1 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_2 f_1 g_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => b_2 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr A B) hol.bool) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_2 (f_1 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_2 f_1 g_3)).

(; Theorem: |- ((= \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))) \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))) ;)

(; dict ;)

def thm_480 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> b_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_2 (f_1 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_2 f_1 g_3)) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_2 (f_1 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_2 f_1 g_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => b_2 : hol.term hol.bool => hol.TRANS (hol.arr (hol.arr A B) hol.bool) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_2 (f_1 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_2 f_1 g_3)) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_2 (f_1 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_2 f_1 g_3)) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_2 (f_1 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_2 f_1 g_3)) (thm_479 B A f_1 b_2) (thm_479 B A f_1 b_2).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g)))) (Data.Bool.! \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g)))) ;)

(; dict ;)

def thm_481 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> b_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_2 (f_1 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_2 f_1 g_3))) (hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_2 (f_1 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_2 f_1 g_3)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => b_2 : hol.term hol.bool => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_2 (f_1 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_2 f_1 g_3)) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_2 (f_1 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_2 f_1 g_3)) (thm_335 B A) (thm_480 B A f_1 b_2).

(; Theorem: |- ((= (= (\lambda _468. ((= \lambda x. (((Data.Bool.cond _468) (f x)) (g x))) (((Data.Bool.cond _468) f) g)) b))) (= (\lambda _468. ((= \lambda x. (((Data.Bool.cond _468) (f x)) (g x))) (((Data.Bool.cond _468) f) g)) b))) ;)

(; dict ;)

def thm_482 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) b_1)) (hol.eq hol.bool ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) b_1)).

(; Theorem: |- ((= (\lambda _468. ((= \lambda x. (((Data.Bool.cond _468) (f x)) (g x))) (((Data.Bool.cond _468) f) g)) Data.Bool.F)) ((= \lambda x. (((Data.Bool.cond Data.Bool.F) (f x)) (g x))) (((Data.Bool.cond Data.Bool.F) f) g))) ;)

(; dict ;)

def thm_483 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((__468_3 : hol.term hol.bool => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B __468_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) __468_3 f_2 g_1)) hol.false) (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.false (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.false f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.BETA_CONV hol.bool hol.bool (__468_3 : hol.term hol.bool => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B __468_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) __468_3 f_2 g_1)) hol.false.

(; Theorem: |- ((= ((= (\lambda _468. ((= \lambda x. (((Data.Bool.cond _468) (f x)) (g x))) (((Data.Bool.cond _468) f) g)) b)) (\lambda _468. ((= \lambda x. (((Data.Bool.cond _468) (f x)) (g x))) (((Data.Bool.cond _468) f) g)) Data.Bool.F))) ((= (\lambda _468. ((= \lambda x. (((Data.Bool.cond _468) (f x)) (g x))) (((Data.Bool.cond _468) f) g)) b)) ((= \lambda x. (((Data.Bool.cond Data.Bool.F) (f x)) (g x))) (((Data.Bool.cond Data.Bool.F) f) g)))) ;)

(; dict ;)

def thm_484 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) b_1) ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) hol.false)) (hol.eq hol.bool ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) b_1) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.false (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.false f_3 g_2)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) b_1)) (hol.eq hol.bool ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) b_1)) ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) hol.false) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.false (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.false f_3 g_2)) (thm_482 B A b_1 g_2 f_3) (thm_483 B A g_2 f_3).

(; Theorem: |- ((= (\lambda _468. ((= \lambda x. (((Data.Bool.cond _468) (f x)) (g x))) (((Data.Bool.cond _468) f) g)) b)) ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))) ;)

(; dict ;)

def thm_485 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) b_1) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) b_1 f_3 g_2))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.BETA_CONV hol.bool hol.bool (__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) b_1.

(; Theorem: |- ((= (= (\lambda _468. ((= \lambda x. (((Data.Bool.cond _468) (f x)) (g x))) (((Data.Bool.cond _468) f) g)) b))) (= ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g)))) ;)

(; dict ;)

def thm_486 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) b_1)) (hol.eq hol.bool (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) b_1 f_3 g_2)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) b_1) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) b_1 f_3 g_2)) thm_38 (thm_485 B A b_1 g_2 f_3).

(; Theorem: |- ((= ((= \lambda x. (((Data.Bool.cond Data.Bool.F) (f x)) (g x))) (((Data.Bool.cond Data.Bool.F) f) g))) ((= \lambda x. (((Data.Bool.cond Data.Bool.F) (f x)) (g x))) (((Data.Bool.cond Data.Bool.F) f) g))) ;)

(; dict ;)

def thm_487 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.false (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.false f_2 g_1)) (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.false (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.false f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.false (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.false f_2 g_1)).

(; Theorem: |- ((= ((= (\lambda _468. ((= \lambda x. (((Data.Bool.cond _468) (f x)) (g x))) (((Data.Bool.cond _468) f) g)) b)) ((= \lambda x. (((Data.Bool.cond Data.Bool.F) (f x)) (g x))) (((Data.Bool.cond Data.Bool.F) f) g)))) ((= ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))) ((= \lambda x. (((Data.Bool.cond Data.Bool.F) (f x)) (g x))) (((Data.Bool.cond Data.Bool.F) f) g)))) ;)

(; dict ;)

def thm_488 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) b_1) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.false (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.false f_3 g_2))) (hol.eq hol.bool (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) b_1 f_3 g_2)) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.false (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.false f_3 g_2)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) b_1)) (hol.eq hol.bool (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) b_1 f_3 g_2))) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.false (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.false f_3 g_2)) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.false (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.false f_3 g_2)) (thm_486 B A b_1 g_2 f_3) (thm_487 B A g_2 f_3).

(; Theorem: |- ((= ((= (\lambda _468. ((= \lambda x. (((Data.Bool.cond _468) (f x)) (g x))) (((Data.Bool.cond _468) f) g)) b)) (\lambda _468. ((= \lambda x. (((Data.Bool.cond _468) (f x)) (g x))) (((Data.Bool.cond _468) f) g)) Data.Bool.F))) ((= ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))) ((= \lambda x. (((Data.Bool.cond Data.Bool.F) (f x)) (g x))) (((Data.Bool.cond Data.Bool.F) f) g)))) ;)

(; dict ;)

def thm_489 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) b_1) ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) hol.false)) (hol.eq hol.bool (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) b_1 f_3 g_2)) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.false (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.false f_3 g_2)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq hol.bool ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) b_1) ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) hol.false)) (hol.eq hol.bool ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) b_1) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.false (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.false f_3 g_2))) (hol.eq hol.bool (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) b_1 f_3 g_2)) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.false (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.false f_3 g_2))) (thm_484 B A b_1 g_2 f_3) (thm_488 B A b_1 g_2 f_3).

(; Theorem: |- ((= \lambda _468. ((= \lambda x. (((Data.Bool.cond _468) (f x)) (g x))) (((Data.Bool.cond _468) f) g))) \lambda _468. ((= \lambda x. (((Data.Bool.cond _468) (f x)) (g x))) (((Data.Bool.cond _468) f) g))) ;)

(; dict ;)

def thm_490 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__468_3 : hol.term hol.bool => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B __468_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) __468_3 f_2 g_1)) (__468_3 : hol.term hol.bool => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B __468_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) __468_3 f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.REFL (hol.arr hol.bool hol.bool) (__468_3 : hol.term hol.bool => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B __468_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) __468_3 f_2 g_1)).

(; Theorem: |- ((= (\lambda _468. ((= \lambda x. (((Data.Bool.cond _468) (f x)) (g x))) (((Data.Bool.cond _468) f) g)) b)) (\lambda _468. ((= \lambda x. (((Data.Bool.cond _468) (f x)) (g x))) (((Data.Bool.cond _468) f) g)) Data.Bool.F)) ;)

(; dict ;)

def thm_491 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) -> hol.proof (hol.eq hol.bool ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) b_1) ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) hol.false)) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) => hol.APP_THM hol.bool hol.bool (__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) (__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __468_4 f_3 g_2)) b_1 hol.false (thm_490 B A g_2 f_3) (thm_45 b_1 hyp_1).

(; Theorem: |- ((= ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))) ((= \lambda x. (((Data.Bool.cond Data.Bool.F) (f x)) (g x))) (((Data.Bool.cond Data.Bool.F) f) g))) ;)

(; dict ;)

def thm_492 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> b_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1)) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.false (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) hol.false f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_2 x_5) (g_1 x_5)) (hol.cond (hol.arr A B) __468_4 f_2 g_1)) b_3) ((__468_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __468_4 (f_2 x_5) (g_1 x_5)) (hol.cond (hol.arr A B) __468_4 f_2 g_1)) hol.false)) (hol.eq hol.bool (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1)) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.false (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) hol.false f_2 g_1))) (thm_489 B A b_3 g_1 f_2) (thm_491 B A b_3 g_1 f_2 hyp_1).

(; Theorem: |- ((= ((= \lambda x. (((Data.Bool.cond Data.Bool.F) (f x)) (g x))) (((Data.Bool.cond Data.Bool.F) f) g))) ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))) ;)

(; dict ;)

def thm_493 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.false (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.false f_3 g_2)) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) b_1 f_3 g_2))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) => hol.SYM hol.bool (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) b_1 f_3 g_2)) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.false (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.false f_3 g_2)) (thm_492 B A g_2 f_3 b_1 hyp_1).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_494 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr (hol.arr A B) hol.bool)) (hol.eq (hol.arr A B)) (hol.eq (hol.arr A B))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A B) (hol.arr (hol.arr A B) hol.bool)) (hol.eq (hol.arr A B)).

(; Theorem: |- ((= \lambda x. (((Data.Bool.cond Data.Bool.F) (f x)) (g x))) \lambda x. (g x)) ;)

(; dict ;)

def thm_495 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.false (f_2 x_3) (g_1 x_3)) (x_3 : hol.term A => g_1 x_3)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.ABS_THM A B (x_3 : hol.term A => hol.cond B hol.false (f_2 x_3) (g_1 x_3)) (x_3 : hol.term A => g_1 x_3) (x_3 : hol.term A => thm_433 A B g_1 x_3 f_2).

(; Theorem: |- ((= \lambda x. (t x)) t) ;)

(; dict ;)

def thm_496 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => thm_19 B A t_1.

(; Theorem: |- ((= \lambda x. (g x)) g) ;)

(; dict ;)

def thm_497 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => g_1 x_2) g_1) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => (B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => (B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => thm_496 B A t_1) B A t_1) B A g_1.

(; Theorem: |- ((= \lambda x. (((Data.Bool.cond Data.Bool.F) (f x)) (g x))) g) ;)

(; dict ;)

def thm_498 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.false (f_2 x_3) (g_1 x_3)) g_1) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.TRANS (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.false (f_2 x_3) (g_1 x_3)) (x_3 : hol.term A => g_1 x_3) g_1 (thm_495 B A g_1 f_2) (thm_497 B A g_1).

(; Theorem: |- ((= (= \lambda x. (((Data.Bool.cond Data.Bool.F) (f x)) (g x)))) (= g)) ;)

(; dict ;)

def thm_499 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.false (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) g_1)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A B) (hol.arr (hol.arr A B) hol.bool) (hol.eq (hol.arr A B)) (hol.eq (hol.arr A B)) (x_3 : hol.term A => hol.cond B hol.false (f_2 x_3) (g_1 x_3)) g_1 (thm_494 B A) (thm_498 B A g_1 f_2).

(; Theorem: |- ((= ((= \lambda x. (((Data.Bool.cond Data.Bool.F) (f x)) (g x))) (((Data.Bool.cond Data.Bool.F) f) g))) ((= g) g)) ;)

(; dict ;)

def thm_500 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.false (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.false f_2 g_1)) (hol.eq (hol.arr A B) g_1 g_1)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A B) hol.bool (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.false (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) g_1) (hol.cond (hol.arr A B) hol.false f_2 g_1) g_1 (thm_499 B A g_1 f_2) (thm_430 B A g_1 f_2).

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_501 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) x_1 x_1) hol.true) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A B) => (A : hol.type => x_1 : hol.term A => thm_210 A x_1) (hol.arr A B) x_1.

(; Theorem: |- ((= ((= g) g)) Data.Bool.T) ;)

(; dict ;)

def thm_502 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) g_1 g_1) hol.true) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => (B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A B) => thm_501 B A x_1) B A g_1.

(; Theorem: |- ((= ((= \lambda x. (((Data.Bool.cond Data.Bool.F) (f x)) (g x))) (((Data.Bool.cond Data.Bool.F) f) g))) Data.Bool.T) ;)

(; dict ;)

def thm_503 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.false (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.false f_2 g_1)) hol.true) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.false (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.false f_2 g_1)) (hol.eq (hol.arr A B) g_1 g_1) hol.true (thm_500 B A g_1 f_2) (thm_502 B A g_1).

(; Theorem: |- ((= Data.Bool.T) ((= \lambda x. (((Data.Bool.cond Data.Bool.F) (f x)) (g x))) (((Data.Bool.cond Data.Bool.F) f) g))) ;)

(; dict ;)

def thm_504 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool hol.true (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.false (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.false f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.SYM hol.bool (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.false (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.false f_2 g_1)) hol.true (thm_503 B A g_1 f_2).

(; Theorem: |- ((= \lambda x. (((Data.Bool.cond Data.Bool.F) (f x)) (g x))) (((Data.Bool.cond Data.Bool.F) f) g)) ;)

(; dict ;)

def thm_505 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.false (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.false f_2 g_1)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.EQ_MP hol.true (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.false (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.false f_2 g_1)) (thm_504 B A g_1 f_2) thm_15.

(; Theorem: |- ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g)) ;)

(; dict ;)

def thm_506 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> b_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.false) -> hol.proof (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.false) => hol.EQ_MP (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.false (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) hol.false f_2 g_1)) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1)) (thm_493 B A b_3 g_1 f_2 hyp_1) (thm_505 B A g_1 f_2).

(; Theorem: |- ((Data.Bool.==> ((= b) Data.Bool.F)) ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))) ;)

(; dict ;)

def thm_507 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> b_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.false) => thm_506 B A g_1 f_2 b_3 hyp_1.

(; Theorem: |- ((= (= (\lambda _466. ((= \lambda x. (((Data.Bool.cond _466) (f x)) (g x))) (((Data.Bool.cond _466) f) g)) b))) (= (\lambda _466. ((= \lambda x. (((Data.Bool.cond _466) (f x)) (g x))) (((Data.Bool.cond _466) f) g)) b))) ;)

(; dict ;)

def thm_508 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) b_1)) (hol.eq hol.bool ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) b_1)).

(; Theorem: |- ((= (\lambda _466. ((= \lambda x. (((Data.Bool.cond _466) (f x)) (g x))) (((Data.Bool.cond _466) f) g)) Data.Bool.T)) ((= \lambda x. (((Data.Bool.cond Data.Bool.T) (f x)) (g x))) (((Data.Bool.cond Data.Bool.T) f) g))) ;)

(; dict ;)

def thm_509 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((__466_3 : hol.term hol.bool => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B __466_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) __466_3 f_2 g_1)) hol.true) (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.true (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.true f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.BETA_CONV hol.bool hol.bool (__466_3 : hol.term hol.bool => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B __466_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) __466_3 f_2 g_1)) hol.true.

(; Theorem: |- ((= ((= (\lambda _466. ((= \lambda x. (((Data.Bool.cond _466) (f x)) (g x))) (((Data.Bool.cond _466) f) g)) b)) (\lambda _466. ((= \lambda x. (((Data.Bool.cond _466) (f x)) (g x))) (((Data.Bool.cond _466) f) g)) Data.Bool.T))) ((= (\lambda _466. ((= \lambda x. (((Data.Bool.cond _466) (f x)) (g x))) (((Data.Bool.cond _466) f) g)) b)) ((= \lambda x. (((Data.Bool.cond Data.Bool.T) (f x)) (g x))) (((Data.Bool.cond Data.Bool.T) f) g)))) ;)

(; dict ;)

def thm_510 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) b_1) ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) hol.true)) (hol.eq hol.bool ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) b_1) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.true (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.true f_3 g_2)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) b_1)) (hol.eq hol.bool ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) b_1)) ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) hol.true) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.true (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.true f_3 g_2)) (thm_508 B A b_1 g_2 f_3) (thm_509 B A g_2 f_3).

(; Theorem: |- ((= (\lambda _466. ((= \lambda x. (((Data.Bool.cond _466) (f x)) (g x))) (((Data.Bool.cond _466) f) g)) b)) ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))) ;)

(; dict ;)

def thm_511 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) b_1) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) b_1 f_3 g_2))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.BETA_CONV hol.bool hol.bool (__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) b_1.

(; Theorem: |- ((= (= (\lambda _466. ((= \lambda x. (((Data.Bool.cond _466) (f x)) (g x))) (((Data.Bool.cond _466) f) g)) b))) (= ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g)))) ;)

(; dict ;)

def thm_512 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) b_1)) (hol.eq hol.bool (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) b_1 f_3 g_2)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) b_1) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) b_1 f_3 g_2)) thm_38 (thm_511 B A b_1 g_2 f_3).

(; Theorem: |- ((= ((= \lambda x. (((Data.Bool.cond Data.Bool.T) (f x)) (g x))) (((Data.Bool.cond Data.Bool.T) f) g))) ((= \lambda x. (((Data.Bool.cond Data.Bool.T) (f x)) (g x))) (((Data.Bool.cond Data.Bool.T) f) g))) ;)

(; dict ;)

def thm_513 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.true (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.true f_2 g_1)) (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.true (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.true f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.true (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.true f_2 g_1)).

(; Theorem: |- ((= ((= (\lambda _466. ((= \lambda x. (((Data.Bool.cond _466) (f x)) (g x))) (((Data.Bool.cond _466) f) g)) b)) ((= \lambda x. (((Data.Bool.cond Data.Bool.T) (f x)) (g x))) (((Data.Bool.cond Data.Bool.T) f) g)))) ((= ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))) ((= \lambda x. (((Data.Bool.cond Data.Bool.T) (f x)) (g x))) (((Data.Bool.cond Data.Bool.T) f) g)))) ;)

(; dict ;)

def thm_514 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) b_1) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.true (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.true f_3 g_2))) (hol.eq hol.bool (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) b_1 f_3 g_2)) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.true (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.true f_3 g_2)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) b_1)) (hol.eq hol.bool (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) b_1 f_3 g_2))) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.true (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.true f_3 g_2)) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.true (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.true f_3 g_2)) (thm_512 B A b_1 g_2 f_3) (thm_513 B A g_2 f_3).

(; Theorem: |- ((= ((= (\lambda _466. ((= \lambda x. (((Data.Bool.cond _466) (f x)) (g x))) (((Data.Bool.cond _466) f) g)) b)) (\lambda _466. ((= \lambda x. (((Data.Bool.cond _466) (f x)) (g x))) (((Data.Bool.cond _466) f) g)) Data.Bool.T))) ((= ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))) ((= \lambda x. (((Data.Bool.cond Data.Bool.T) (f x)) (g x))) (((Data.Bool.cond Data.Bool.T) f) g)))) ;)

(; dict ;)

def thm_515 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) b_1) ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) hol.true)) (hol.eq hol.bool (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) b_1 f_3 g_2)) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.true (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.true f_3 g_2)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq hol.bool ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) b_1) ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) hol.true)) (hol.eq hol.bool ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) b_1) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.true (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.true f_3 g_2))) (hol.eq hol.bool (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) b_1 f_3 g_2)) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.true (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.true f_3 g_2))) (thm_510 B A b_1 g_2 f_3) (thm_514 B A b_1 g_2 f_3).

(; Theorem: |- ((= \lambda _466. ((= \lambda x. (((Data.Bool.cond _466) (f x)) (g x))) (((Data.Bool.cond _466) f) g))) \lambda _466. ((= \lambda x. (((Data.Bool.cond _466) (f x)) (g x))) (((Data.Bool.cond _466) f) g))) ;)

(; dict ;)

def thm_516 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__466_3 : hol.term hol.bool => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B __466_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) __466_3 f_2 g_1)) (__466_3 : hol.term hol.bool => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B __466_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) __466_3 f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.REFL (hol.arr hol.bool hol.bool) (__466_3 : hol.term hol.bool => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B __466_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) __466_3 f_2 g_1)).

(; Theorem: |- ((= (\lambda _466. ((= \lambda x. (((Data.Bool.cond _466) (f x)) (g x))) (((Data.Bool.cond _466) f) g)) b)) (\lambda _466. ((= \lambda x. (((Data.Bool.cond _466) (f x)) (g x))) (((Data.Bool.cond _466) f) g)) Data.Bool.T)) ;)

(; dict ;)

def thm_517 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) -> hol.proof (hol.eq hol.bool ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) b_1) ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) hol.true)) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) => hol.APP_THM hol.bool hol.bool (__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) (__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_3 x_5) (g_2 x_5)) (hol.cond (hol.arr A B) __466_4 f_3 g_2)) b_1 hol.true (thm_516 B A g_2 f_3) (thm_228 b_1 hyp_1).

(; Theorem: |- ((= ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))) ((= \lambda x. (((Data.Bool.cond Data.Bool.T) (f x)) (g x))) (((Data.Bool.cond Data.Bool.T) f) g))) ;)

(; dict ;)

def thm_518 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> b_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1)) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.true (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) hol.true f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_2 x_5) (g_1 x_5)) (hol.cond (hol.arr A B) __466_4 f_2 g_1)) b_3) ((__466_4 : hol.term hol.bool => hol.eq (hol.arr A B) (x_5 : hol.term A => hol.cond B __466_4 (f_2 x_5) (g_1 x_5)) (hol.cond (hol.arr A B) __466_4 f_2 g_1)) hol.true)) (hol.eq hol.bool (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1)) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.true (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) hol.true f_2 g_1))) (thm_515 B A b_3 g_1 f_2) (thm_517 B A b_3 g_1 f_2 hyp_1).

(; Theorem: |- ((= ((= \lambda x. (((Data.Bool.cond Data.Bool.T) (f x)) (g x))) (((Data.Bool.cond Data.Bool.T) f) g))) ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))) ;)

(; dict ;)

def thm_519 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.true (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.true f_3 g_2)) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) b_1 f_3 g_2))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) => hol.SYM hol.bool (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) b_1 f_3 g_2)) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.true (f_3 x_4) (g_2 x_4)) (hol.cond (hol.arr A B) hol.true f_3 g_2)) (thm_518 B A g_2 f_3 b_1 hyp_1).

(; Theorem: |- ((= \lambda x. (((Data.Bool.cond Data.Bool.T) (f x)) (g x))) \lambda x. (f x)) ;)

(; dict ;)

def thm_520 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.true (f_2 x_3) (g_1 x_3)) (x_3 : hol.term A => f_2 x_3)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.ABS_THM A B (x_3 : hol.term A => hol.cond B hol.true (f_2 x_3) (g_1 x_3)) (x_3 : hol.term A => f_2 x_3) (x_3 : hol.term A => thm_457 A B g_1 x_3 f_2).

(; Theorem: |- ((= \lambda x. (f x)) f) ;)

(; dict ;)

def thm_521 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => f_1 x_2) f_1) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => (B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => thm_496 B A t_1) B A f_1.

(; Theorem: |- ((= \lambda x. (((Data.Bool.cond Data.Bool.T) (f x)) (g x))) f) ;)

(; dict ;)

def thm_522 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.true (f_2 x_3) (g_1 x_3)) f_2) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.TRANS (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.true (f_2 x_3) (g_1 x_3)) (x_3 : hol.term A => f_2 x_3) f_2 (thm_520 B A g_1 f_2) (thm_521 B A f_2).

(; Theorem: |- ((= (= \lambda x. (((Data.Bool.cond Data.Bool.T) (f x)) (g x)))) (= f)) ;)

(; dict ;)

def thm_523 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.true (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A B) (hol.arr (hol.arr A B) hol.bool) (hol.eq (hol.arr A B)) (hol.eq (hol.arr A B)) (x_3 : hol.term A => hol.cond B hol.true (f_2 x_3) (g_1 x_3)) f_2 (thm_494 B A) (thm_522 B A g_1 f_2).

(; Theorem: |- ((= ((= \lambda x. (((Data.Bool.cond Data.Bool.T) (f x)) (g x))) (((Data.Bool.cond Data.Bool.T) f) g))) ((= f) f)) ;)

(; dict ;)

def thm_524 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.true (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.true f_2 g_1)) (hol.eq (hol.arr A B) f_2 f_2)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A B) hol.bool (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.true (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2) (hol.cond (hol.arr A B) hol.true f_2 g_1) f_2 (thm_523 B A g_1 f_2) (thm_454 B A g_1 f_2).

(; Theorem: |- ((= ((= f) f)) Data.Bool.T) ;)

(; dict ;)

def thm_525 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) f_1 f_1) hol.true) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => (B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A B) => thm_501 B A x_1) B A f_1.

(; Theorem: |- ((= ((= \lambda x. (((Data.Bool.cond Data.Bool.T) (f x)) (g x))) (((Data.Bool.cond Data.Bool.T) f) g))) Data.Bool.T) ;)

(; dict ;)

def thm_526 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.true (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.true f_2 g_1)) hol.true) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.true (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.true f_2 g_1)) (hol.eq (hol.arr A B) f_2 f_2) hol.true (thm_524 B A g_1 f_2) (thm_525 B A f_2).

(; Theorem: |- ((= Data.Bool.T) ((= \lambda x. (((Data.Bool.cond Data.Bool.T) (f x)) (g x))) (((Data.Bool.cond Data.Bool.T) f) g))) ;)

(; dict ;)

def thm_527 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool hol.true (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.true (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.true f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.SYM hol.bool (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.true (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.true f_2 g_1)) hol.true (thm_526 B A g_1 f_2).

(; Theorem: |- ((= \lambda x. (((Data.Bool.cond Data.Bool.T) (f x)) (g x))) (((Data.Bool.cond Data.Bool.T) f) g)) ;)

(; dict ;)

def thm_528 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.true (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.true f_2 g_1)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.EQ_MP hol.true (hol.eq (hol.arr A B) (x_3 : hol.term A => hol.cond B hol.true (f_2 x_3) (g_1 x_3)) (hol.cond (hol.arr A B) hol.true f_2 g_1)) (thm_527 B A g_1 f_2) thm_15.

(; Theorem: |- ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g)) ;)

(; dict ;)

def thm_529 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> b_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.true) -> hol.proof (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.true) => hol.EQ_MP (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B hol.true (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) hol.true f_2 g_1)) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1)) (thm_519 B A b_3 g_1 f_2 hyp_1) (thm_528 B A g_1 f_2).

(; Theorem: |- ((Data.Bool.==> ((= b) Data.Bool.T)) ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))) ;)

(; dict ;)

def thm_530 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> b_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool b_3 hol.true) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_3 hol.true) => thm_529 B A g_1 f_2 b_3 hyp_1.

(; Theorem: |- ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g)) ;)

(; dict ;)

def thm_531 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> b_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.true) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_3 hol.true) (hol.eq hol.bool b_3 hol.false)) -> hol.proof (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.true) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_3 hol.true) (hol.eq hol.bool b_3 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_269 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool b_3 hol.false) (hol.eq hol.bool b_3 hol.true) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1)) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g)) ;)

(; dict ;)

def thm_532 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> b_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.true) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1))) -> hol.proof (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.true) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool b_3 hol.true) (hol.eq hol.bool b_3 hol.false)) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1)) (thm_250 b_3) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_3 hol.true) (hol.eq hol.bool b_3 hol.false)) => thm_531 B A g_1 f_2 b_3 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g)) ;)

(; dict ;)

def thm_533 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> b_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1))) -> hol.proof (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => b_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool b_3 hol.true) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1))) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1)) (thm_530 B A g_1 f_2 b_3) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.true) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1))) => thm_532 B A g_1 f_2 b_3 hyp_1 hyp_2).

(; Theorem: |- ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g)) ;)

(; dict ;)

def thm_534 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> b_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => b_3 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1))) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1)) (thm_507 B A g_1 f_2 b_3) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_3 hol.false) (hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_3 (f_2 x_4) (g_1 x_4)) (hol.cond (hol.arr A B) b_3 f_2 g_1))) => thm_533 B A g_1 f_2 b_3 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))) ;)

(; dict ;)

def thm_535 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> b_2 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_2 (f_1 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_2 f_1 g_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => b_2 : hol.term hol.bool => g_3 : hol.term (hol.arr A B) => thm_534 B A g_3 f_1 b_2.

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g)))) ;)

(; dict ;)

def thm_536 : B : hol.type -> A : hol.type -> b_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => f_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3))) (hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3))) (thm_481 B A f_2 b_1) (thm_535 B A f_2 b_1).

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))))) ;)

(; dict ;)

def thm_537 : B : hol.type -> A : hol.type -> hol.proof (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term hol.bool => hol.EQ_MP (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3)))) (thm_478 B A b_1) (thm_536 B A b_1).

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= \lambda x. (((Data.Bool.cond b) (f x)) (g x))) (((Data.Bool.cond b) f) g))))) ;)

(; thm ;)

def thm_538 : B : hol.type -> A : hol.type -> hol.proof (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3))))) (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_4 : hol.term A => hol.cond B b_1 (f_2 x_4) (g_3 x_4)) (hol.cond (hol.arr A B) b_1 f_2 g_3))))) (thm_475 B A) (thm_537 B A).

(; Theorem: |- ((= \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))))) \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))))) ;)

(; dict ;)

def thm_539 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (c_1 : hol.term hol.bool => hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2)))) (c_1 : hol.term hol.bool => hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2))))) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (c_1 : hol.term hol.bool => hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2)))).

(; Theorem: |- ((= \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))))) \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))))) ;)

(; dict ;)

def thm_540 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (c_1 : hol.term hol.bool => hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2)))) (c_1 : hol.term hol.bool => hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2))))) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (c_1 : hol.term hol.bool => hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2)))) (c_1 : hol.term hol.bool => hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2)))) (c_1 : hol.term hol.bool => hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2)))) (thm_539 A) (thm_539 A).

(; Theorem: |- ((= (Data.Bool.! \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x)))))) (Data.Bool.! \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x)))))) ;)

(; dict ;)

def thm_541 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (c_1 : hol.term hol.bool => hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2))))) (hol.forall hol.bool (c_1 : hol.term hol.bool => hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (c_1 : hol.term hol.bool => hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2)))) (c_1 : hol.term hol.bool => hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2)))) thm_25 (thm_540 A).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x)))) \lambda x. (Data.Bool.! \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x)))) ;)

(; dict ;)

def thm_542 : A : hol.type -> c_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2))) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2)))) :=
  A : hol.type => c_1 : hol.term hol.bool => hol.REFL (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2))).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x)))) \lambda x. (Data.Bool.! \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x)))) ;)

(; dict ;)

def thm_543 : A : hol.type -> c_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2))) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2)))) :=
  A : hol.type => c_1 : hol.term hol.bool => hol.TRANS (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2))) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2))) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2))) (thm_542 A c_1) (thm_542 A c_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))))) ;)

(; dict ;)

def thm_544 : A : hol.type -> c_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2)))) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2))))) :=
  A : hol.type => c_1 : hol.term hol.bool => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2))) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2))) (thm_51 A) (thm_543 A c_1).

(; Theorem: |- ((= \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))) \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))) ;)

(; dict ;)

def thm_545 : A : hol.type -> x_1 : hol.term A -> c_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_2) x_1 y_3) (hol.cond A c_2 y_3 x_1)) (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_2) x_1 y_3) (hol.cond A c_2 y_3 x_1))) :=
  A : hol.type => x_1 : hol.term A => c_2 : hol.term hol.bool => hol.REFL (hol.arr A hol.bool) (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_2) x_1 y_3) (hol.cond A c_2 y_3 x_1)).

(; Theorem: |- ((= \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))) \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))) ;)

(; dict ;)

def thm_546 : A : hol.type -> x_1 : hol.term A -> c_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_2) x_1 y_3) (hol.cond A c_2 y_3 x_1)) (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_2) x_1 y_3) (hol.cond A c_2 y_3 x_1))) :=
  A : hol.type => x_1 : hol.term A => c_2 : hol.term hol.bool => hol.TRANS (hol.arr A hol.bool) (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_2) x_1 y_3) (hol.cond A c_2 y_3 x_1)) (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_2) x_1 y_3) (hol.cond A c_2 y_3 x_1)) (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_2) x_1 y_3) (hol.cond A c_2 y_3 x_1)) (thm_545 A x_1 c_2) (thm_545 A x_1 c_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x)))) (Data.Bool.! \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x)))) ;)

(; dict ;)

def thm_547 : A : hol.type -> x_1 : hol.term A -> c_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_2) x_1 y_3) (hol.cond A c_2 y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_2) x_1 y_3) (hol.cond A c_2 y_3 x_1)))) :=
  A : hol.type => x_1 : hol.term A => c_2 : hol.term hol.bool => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_2) x_1 y_3) (hol.cond A c_2 y_3 x_1)) (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_2) x_1 y_3) (hol.cond A c_2 y_3 x_1)) (thm_51 A) (thm_546 A x_1 c_2).

(; Theorem: |- ((= (= (\lambda _472. ((= (((Data.Bool.cond (Data.Bool.~ _472)) x) y)) (((Data.Bool.cond _472) y) x)) c))) (= (\lambda _472. ((= (((Data.Bool.cond (Data.Bool.~ _472)) x) y)) (((Data.Bool.cond _472) y) x)) c))) ;)

(; dict ;)

def thm_548 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) c_1)) (hol.eq hol.bool ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) c_1))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) c_1)).

(; Theorem: |- ((= (\lambda _472. ((= (((Data.Bool.cond (Data.Bool.~ _472)) x) y)) (((Data.Bool.cond _472) y) x)) Data.Bool.F)) ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.F)) x) y)) (((Data.Bool.cond Data.Bool.F) y) x))) ;)

(; dict ;)

def thm_549 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool ((__472_3 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_3) x_2 y_1) (hol.cond A __472_3 y_1 x_2)) hol.false) (hol.eq A (hol.cond A (hol.not hol.false) x_2 y_1) (hol.cond A hol.false y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.BETA_CONV hol.bool hol.bool (__472_3 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_3) x_2 y_1) (hol.cond A __472_3 y_1 x_2)) hol.false.

(; Theorem: |- ((= ((= (\lambda _472. ((= (((Data.Bool.cond (Data.Bool.~ _472)) x) y)) (((Data.Bool.cond _472) y) x)) c)) (\lambda _472. ((= (((Data.Bool.cond (Data.Bool.~ _472)) x) y)) (((Data.Bool.cond _472) y) x)) Data.Bool.F))) ((= (\lambda _472. ((= (((Data.Bool.cond (Data.Bool.~ _472)) x) y)) (((Data.Bool.cond _472) y) x)) c)) ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.F)) x) y)) (((Data.Bool.cond Data.Bool.F) y) x)))) ;)

(; dict ;)

def thm_550 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) c_1) ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) hol.false)) (hol.eq hol.bool ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) c_1) (hol.eq A (hol.cond A (hol.not hol.false) x_3 y_2) (hol.cond A hol.false y_2 x_3)))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) c_1)) (hol.eq hol.bool ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) c_1)) ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) hol.false) (hol.eq A (hol.cond A (hol.not hol.false) x_3 y_2) (hol.cond A hol.false y_2 x_3)) (thm_548 A c_1 y_2 x_3) (thm_549 A y_2 x_3).

(; Theorem: |- ((= (\lambda _472. ((= (((Data.Bool.cond (Data.Bool.~ _472)) x) y)) (((Data.Bool.cond _472) y) x)) c)) ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))) ;)

(; dict ;)

def thm_551 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) c_1) (hol.eq A (hol.cond A (hol.not c_1) x_3 y_2) (hol.cond A c_1 y_2 x_3))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => hol.BETA_CONV hol.bool hol.bool (__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) c_1.

(; Theorem: |- ((= (= (\lambda _472. ((= (((Data.Bool.cond (Data.Bool.~ _472)) x) y)) (((Data.Bool.cond _472) y) x)) c))) (= ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x)))) ;)

(; dict ;)

def thm_552 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) c_1)) (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not c_1) x_3 y_2) (hol.cond A c_1 y_2 x_3)))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) c_1) (hol.eq A (hol.cond A (hol.not c_1) x_3 y_2) (hol.cond A c_1 y_2 x_3)) thm_38 (thm_551 A c_1 y_2 x_3).

(; Theorem: |- ((= ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.F)) x) y)) (((Data.Bool.cond Data.Bool.F) y) x))) ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.F)) x) y)) (((Data.Bool.cond Data.Bool.F) y) x))) ;)

(; dict ;)

def thm_553 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not hol.false) x_2 y_1) (hol.cond A hol.false y_1 x_2)) (hol.eq A (hol.cond A (hol.not hol.false) x_2 y_1) (hol.cond A hol.false y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.eq A (hol.cond A (hol.not hol.false) x_2 y_1) (hol.cond A hol.false y_1 x_2)).

(; Theorem: |- ((= ((= (\lambda _472. ((= (((Data.Bool.cond (Data.Bool.~ _472)) x) y)) (((Data.Bool.cond _472) y) x)) c)) ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.F)) x) y)) (((Data.Bool.cond Data.Bool.F) y) x)))) ((= ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))) ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.F)) x) y)) (((Data.Bool.cond Data.Bool.F) y) x)))) ;)

(; dict ;)

def thm_554 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) c_1) (hol.eq A (hol.cond A (hol.not hol.false) x_3 y_2) (hol.cond A hol.false y_2 x_3))) (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not c_1) x_3 y_2) (hol.cond A c_1 y_2 x_3)) (hol.eq A (hol.cond A (hol.not hol.false) x_3 y_2) (hol.cond A hol.false y_2 x_3)))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) c_1)) (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not c_1) x_3 y_2) (hol.cond A c_1 y_2 x_3))) (hol.eq A (hol.cond A (hol.not hol.false) x_3 y_2) (hol.cond A hol.false y_2 x_3)) (hol.eq A (hol.cond A (hol.not hol.false) x_3 y_2) (hol.cond A hol.false y_2 x_3)) (thm_552 A c_1 y_2 x_3) (thm_553 A y_2 x_3).

(; Theorem: |- ((= ((= (\lambda _472. ((= (((Data.Bool.cond (Data.Bool.~ _472)) x) y)) (((Data.Bool.cond _472) y) x)) c)) (\lambda _472. ((= (((Data.Bool.cond (Data.Bool.~ _472)) x) y)) (((Data.Bool.cond _472) y) x)) Data.Bool.F))) ((= ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))) ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.F)) x) y)) (((Data.Bool.cond Data.Bool.F) y) x)))) ;)

(; dict ;)

def thm_555 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) c_1) ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) hol.false)) (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not c_1) x_3 y_2) (hol.cond A c_1 y_2 x_3)) (hol.eq A (hol.cond A (hol.not hol.false) x_3 y_2) (hol.cond A hol.false y_2 x_3)))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) c_1) ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) hol.false)) (hol.eq hol.bool ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) c_1) (hol.eq A (hol.cond A (hol.not hol.false) x_3 y_2) (hol.cond A hol.false y_2 x_3))) (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not c_1) x_3 y_2) (hol.cond A c_1 y_2 x_3)) (hol.eq A (hol.cond A (hol.not hol.false) x_3 y_2) (hol.cond A hol.false y_2 x_3))) (thm_550 A c_1 y_2 x_3) (thm_554 A c_1 y_2 x_3).

(; Theorem: |- ((= \lambda _472. ((= (((Data.Bool.cond (Data.Bool.~ _472)) x) y)) (((Data.Bool.cond _472) y) x))) \lambda _472. ((= (((Data.Bool.cond (Data.Bool.~ _472)) x) y)) (((Data.Bool.cond _472) y) x))) ;)

(; dict ;)

def thm_556 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__472_3 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_3) x_2 y_1) (hol.cond A __472_3 y_1 x_2)) (__472_3 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_3) x_2 y_1) (hol.cond A __472_3 y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (__472_3 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_3) x_2 y_1) (hol.cond A __472_3 y_1 x_2)).

(; Theorem: |- ((= c) Data.Bool.F) ;)

(; dict ;)

def thm_557 : c_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool c_1 hol.false) -> hol.proof (hol.eq hol.bool c_1 hol.false) :=
  c_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool c_1 hol.false) => hyp_1.

(; Theorem: |- ((= (\lambda _472. ((= (((Data.Bool.cond (Data.Bool.~ _472)) x) y)) (((Data.Bool.cond _472) y) x)) c)) (\lambda _472. ((= (((Data.Bool.cond (Data.Bool.~ _472)) x) y)) (((Data.Bool.cond _472) y) x)) Data.Bool.F)) ;)

(; dict ;)

def thm_558 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.eq hol.bool c_1 hol.false) -> hol.proof (hol.eq hol.bool ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) c_1) ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) hol.false)) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.eq hol.bool c_1 hol.false) => hol.APP_THM hol.bool hol.bool (__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) (__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_3 y_2) (hol.cond A __472_4 y_2 x_3)) c_1 hol.false (thm_556 A y_2 x_3) (thm_557 c_1 hyp_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))) ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.F)) x) y)) (((Data.Bool.cond Data.Bool.F) y) x))) ;)

(; dict ;)

def thm_559 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> c_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool c_3 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2)) (hol.eq A (hol.cond A (hol.not hol.false) x_2 y_1) (hol.cond A hol.false y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => c_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool c_3 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_2 y_1) (hol.cond A __472_4 y_1 x_2)) c_3) ((__472_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __472_4) x_2 y_1) (hol.cond A __472_4 y_1 x_2)) hol.false)) (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2)) (hol.eq A (hol.cond A (hol.not hol.false) x_2 y_1) (hol.cond A hol.false y_1 x_2))) (thm_555 A c_3 y_1 x_2) (thm_558 A c_3 y_1 x_2 hyp_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.F)) x) y)) (((Data.Bool.cond Data.Bool.F) y) x))) ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))) ;)

(; dict ;)

def thm_560 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.eq hol.bool c_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not hol.false) x_3 y_2) (hol.cond A hol.false y_2 x_3)) (hol.eq A (hol.cond A (hol.not c_1) x_3 y_2) (hol.cond A c_1 y_2 x_3))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.eq hol.bool c_1 hol.false) => hol.SYM hol.bool (hol.eq A (hol.cond A (hol.not c_1) x_3 y_2) (hol.cond A c_1 y_2 x_3)) (hol.eq A (hol.cond A (hol.not hol.false) x_3 y_2) (hol.cond A hol.false y_2 x_3)) (thm_559 A y_2 x_3 c_1 hyp_1).

(; Theorem: |- ((= Data.Bool.cond) Data.Bool.cond) ;)

(; dict ;)

def thm_561 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool (hol.arr A (hol.arr A A))) (hol.cond A) (hol.cond A)) :=
  A : hol.type => hol.REFL (hol.arr hol.bool (hol.arr A (hol.arr A A))) (hol.cond A).

(; Theorem: |- ((= (Data.Bool.cond (Data.Bool.~ Data.Bool.F))) (Data.Bool.cond Data.Bool.T)) ;)

(; dict ;)

def thm_562 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A A)) (hol.cond A (hol.not hol.false)) (hol.cond A hol.true)) :=
  A : hol.type => hol.APP_THM hol.bool (hol.arr A (hol.arr A A)) (hol.cond A) (hol.cond A) (hol.not hol.false) hol.true (thm_561 A) thm_4.

(; Theorem: |- ((= ((Data.Bool.cond (Data.Bool.~ Data.Bool.F)) x)) ((Data.Bool.cond Data.Bool.T) x)) ;)

(; dict ;)

def thm_563 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr A A) (hol.cond A (hol.not hol.false) x_1) (hol.cond A hol.true x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM A (hol.arr A A) (hol.cond A (hol.not hol.false)) (hol.cond A hol.true) x_1 x_1 (thm_562 A) (thm_209 A x_1).

(; Theorem: |- ((= y) y) ;)

(; dict ;)

def thm_564 : A : hol.type -> y_1 : hol.term A -> hol.proof (hol.eq A y_1 y_1) :=
  A : hol.type => y_1 : hol.term A => hol.REFL A y_1.

(; Theorem: |- ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.F)) x) y)) (((Data.Bool.cond Data.Bool.T) x) y)) ;)

(; dict ;)

def thm_565 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A (hol.not hol.false) x_2 y_1) (hol.cond A hol.true x_2 y_1)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.APP_THM A A (hol.cond A (hol.not hol.false) x_2) (hol.cond A hol.true x_2) y_1 y_1 (thm_563 A x_2) (thm_564 A y_1).

(; Theorem: |- ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.F)) x) y)) x) ;)

(; dict ;)

def thm_566 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A (hol.not hol.false) x_2 y_1) x_2) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.TRANS A (hol.cond A (hol.not hol.false) x_2 y_1) (hol.cond A hol.true x_2 y_1) x_2 (thm_565 A y_1 x_2) (thm_384 A y_1 x_2).

(; Theorem: |- ((= (= (((Data.Bool.cond (Data.Bool.~ Data.Bool.F)) x) y))) (= x)) ;)

(; dict ;)

def thm_567 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A (hol.cond A (hol.not hol.false) x_2 y_1)) (hol.eq A x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) (hol.cond A (hol.not hol.false) x_2 y_1) x_2 (thm_296 A) (thm_566 A y_1 x_2).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) y) x)) x) ;)

(; dict ;)

def thm_568 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.false y_2 x_1) x_1) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => (A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_95 A t2_1 t1_2) A x_1 y_2.

(; Theorem: |- ((= ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.F)) x) y)) (((Data.Bool.cond Data.Bool.F) y) x))) ((= x) x)) ;)

(; dict ;)

def thm_569 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not hol.false) x_2 y_1) (hol.cond A hol.false y_1 x_2)) (hol.eq A x_2 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.APP_THM A hol.bool (hol.eq A (hol.cond A (hol.not hol.false) x_2 y_1)) (hol.eq A x_2) (hol.cond A hol.false y_1 x_2) x_2 (thm_567 A y_1 x_2) (thm_568 A x_2 y_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.F)) x) y)) (((Data.Bool.cond Data.Bool.F) y) x))) Data.Bool.T) ;)

(; dict ;)

def thm_570 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not hol.false) x_2 y_1) (hol.cond A hol.false y_1 x_2)) hol.true) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq A (hol.cond A (hol.not hol.false) x_2 y_1) (hol.cond A hol.false y_1 x_2)) (hol.eq A x_2 x_2) hol.true (thm_569 A y_1 x_2) (thm_210 A x_2).

(; Theorem: |- ((= Data.Bool.T) ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.F)) x) y)) (((Data.Bool.cond Data.Bool.F) y) x))) ;)

(; dict ;)

def thm_571 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool hol.true (hol.eq A (hol.cond A (hol.not hol.false) x_2 y_1) (hol.cond A hol.false y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.SYM hol.bool (hol.eq A (hol.cond A (hol.not hol.false) x_2 y_1) (hol.cond A hol.false y_1 x_2)) hol.true (thm_570 A y_1 x_2).

(; Theorem: |- ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.F)) x) y)) (((Data.Bool.cond Data.Bool.F) y) x)) ;)

(; dict ;)

def thm_572 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A (hol.not hol.false) x_2 y_1) (hol.cond A hol.false y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.EQ_MP hol.true (hol.eq A (hol.cond A (hol.not hol.false) x_2 y_1) (hol.cond A hol.false y_1 x_2)) (thm_571 A y_1 x_2) thm_15.

(; Theorem: |- ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x)) ;)

(; dict ;)

def thm_573 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> c_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool c_3 hol.false) -> hol.proof (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => c_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool c_3 hol.false) => hol.EQ_MP (hol.eq A (hol.cond A (hol.not hol.false) x_2 y_1) (hol.cond A hol.false y_1 x_2)) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2)) (thm_560 A c_3 y_1 x_2 hyp_1) (thm_572 A y_1 x_2).

(; Theorem: |- ((Data.Bool.==> ((= c) Data.Bool.F)) ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))) ;)

(; dict ;)

def thm_574 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> c_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool c_3 hol.false) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => c_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool c_3 hol.false) => thm_573 A y_1 x_2 c_3 hyp_1.

(; Theorem: |- ((= (= (\lambda _470. ((= (((Data.Bool.cond (Data.Bool.~ _470)) x) y)) (((Data.Bool.cond _470) y) x)) c))) (= (\lambda _470. ((= (((Data.Bool.cond (Data.Bool.~ _470)) x) y)) (((Data.Bool.cond _470) y) x)) c))) ;)

(; dict ;)

def thm_575 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) c_1)) (hol.eq hol.bool ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) c_1))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) c_1)).

(; Theorem: |- ((= (\lambda _470. ((= (((Data.Bool.cond (Data.Bool.~ _470)) x) y)) (((Data.Bool.cond _470) y) x)) Data.Bool.T)) ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.T)) x) y)) (((Data.Bool.cond Data.Bool.T) y) x))) ;)

(; dict ;)

def thm_576 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool ((__470_3 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_3) x_2 y_1) (hol.cond A __470_3 y_1 x_2)) hol.true) (hol.eq A (hol.cond A (hol.not hol.true) x_2 y_1) (hol.cond A hol.true y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.BETA_CONV hol.bool hol.bool (__470_3 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_3) x_2 y_1) (hol.cond A __470_3 y_1 x_2)) hol.true.

(; Theorem: |- ((= ((= (\lambda _470. ((= (((Data.Bool.cond (Data.Bool.~ _470)) x) y)) (((Data.Bool.cond _470) y) x)) c)) (\lambda _470. ((= (((Data.Bool.cond (Data.Bool.~ _470)) x) y)) (((Data.Bool.cond _470) y) x)) Data.Bool.T))) ((= (\lambda _470. ((= (((Data.Bool.cond (Data.Bool.~ _470)) x) y)) (((Data.Bool.cond _470) y) x)) c)) ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.T)) x) y)) (((Data.Bool.cond Data.Bool.T) y) x)))) ;)

(; dict ;)

def thm_577 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) c_1) ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) hol.true)) (hol.eq hol.bool ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) c_1) (hol.eq A (hol.cond A (hol.not hol.true) x_3 y_2) (hol.cond A hol.true y_2 x_3)))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) c_1)) (hol.eq hol.bool ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) c_1)) ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) hol.true) (hol.eq A (hol.cond A (hol.not hol.true) x_3 y_2) (hol.cond A hol.true y_2 x_3)) (thm_575 A c_1 y_2 x_3) (thm_576 A y_2 x_3).

(; Theorem: |- ((= (\lambda _470. ((= (((Data.Bool.cond (Data.Bool.~ _470)) x) y)) (((Data.Bool.cond _470) y) x)) c)) ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))) ;)

(; dict ;)

def thm_578 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) c_1) (hol.eq A (hol.cond A (hol.not c_1) x_3 y_2) (hol.cond A c_1 y_2 x_3))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => hol.BETA_CONV hol.bool hol.bool (__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) c_1.

(; Theorem: |- ((= (= (\lambda _470. ((= (((Data.Bool.cond (Data.Bool.~ _470)) x) y)) (((Data.Bool.cond _470) y) x)) c))) (= ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x)))) ;)

(; dict ;)

def thm_579 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) c_1)) (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not c_1) x_3 y_2) (hol.cond A c_1 y_2 x_3)))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) c_1) (hol.eq A (hol.cond A (hol.not c_1) x_3 y_2) (hol.cond A c_1 y_2 x_3)) thm_38 (thm_578 A c_1 y_2 x_3).

(; Theorem: |- ((= ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.T)) x) y)) (((Data.Bool.cond Data.Bool.T) y) x))) ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.T)) x) y)) (((Data.Bool.cond Data.Bool.T) y) x))) ;)

(; dict ;)

def thm_580 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not hol.true) x_2 y_1) (hol.cond A hol.true y_1 x_2)) (hol.eq A (hol.cond A (hol.not hol.true) x_2 y_1) (hol.cond A hol.true y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.eq A (hol.cond A (hol.not hol.true) x_2 y_1) (hol.cond A hol.true y_1 x_2)).

(; Theorem: |- ((= ((= (\lambda _470. ((= (((Data.Bool.cond (Data.Bool.~ _470)) x) y)) (((Data.Bool.cond _470) y) x)) c)) ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.T)) x) y)) (((Data.Bool.cond Data.Bool.T) y) x)))) ((= ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))) ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.T)) x) y)) (((Data.Bool.cond Data.Bool.T) y) x)))) ;)

(; dict ;)

def thm_581 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) c_1) (hol.eq A (hol.cond A (hol.not hol.true) x_3 y_2) (hol.cond A hol.true y_2 x_3))) (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not c_1) x_3 y_2) (hol.cond A c_1 y_2 x_3)) (hol.eq A (hol.cond A (hol.not hol.true) x_3 y_2) (hol.cond A hol.true y_2 x_3)))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) c_1)) (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not c_1) x_3 y_2) (hol.cond A c_1 y_2 x_3))) (hol.eq A (hol.cond A (hol.not hol.true) x_3 y_2) (hol.cond A hol.true y_2 x_3)) (hol.eq A (hol.cond A (hol.not hol.true) x_3 y_2) (hol.cond A hol.true y_2 x_3)) (thm_579 A c_1 y_2 x_3) (thm_580 A y_2 x_3).

(; Theorem: |- ((= ((= (\lambda _470. ((= (((Data.Bool.cond (Data.Bool.~ _470)) x) y)) (((Data.Bool.cond _470) y) x)) c)) (\lambda _470. ((= (((Data.Bool.cond (Data.Bool.~ _470)) x) y)) (((Data.Bool.cond _470) y) x)) Data.Bool.T))) ((= ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))) ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.T)) x) y)) (((Data.Bool.cond Data.Bool.T) y) x)))) ;)

(; dict ;)

def thm_582 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) c_1) ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) hol.true)) (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not c_1) x_3 y_2) (hol.cond A c_1 y_2 x_3)) (hol.eq A (hol.cond A (hol.not hol.true) x_3 y_2) (hol.cond A hol.true y_2 x_3)))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) c_1) ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) hol.true)) (hol.eq hol.bool ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) c_1) (hol.eq A (hol.cond A (hol.not hol.true) x_3 y_2) (hol.cond A hol.true y_2 x_3))) (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not c_1) x_3 y_2) (hol.cond A c_1 y_2 x_3)) (hol.eq A (hol.cond A (hol.not hol.true) x_3 y_2) (hol.cond A hol.true y_2 x_3))) (thm_577 A c_1 y_2 x_3) (thm_581 A c_1 y_2 x_3).

(; Theorem: |- ((= \lambda _470. ((= (((Data.Bool.cond (Data.Bool.~ _470)) x) y)) (((Data.Bool.cond _470) y) x))) \lambda _470. ((= (((Data.Bool.cond (Data.Bool.~ _470)) x) y)) (((Data.Bool.cond _470) y) x))) ;)

(; dict ;)

def thm_583 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__470_3 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_3) x_2 y_1) (hol.cond A __470_3 y_1 x_2)) (__470_3 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_3) x_2 y_1) (hol.cond A __470_3 y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (__470_3 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_3) x_2 y_1) (hol.cond A __470_3 y_1 x_2)).

(; Theorem: |- ((= c) Data.Bool.T) ;)

(; dict ;)

def thm_584 : c_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool c_1 hol.true) -> hol.proof (hol.eq hol.bool c_1 hol.true) :=
  c_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool c_1 hol.true) => hyp_1.

(; Theorem: |- ((= (\lambda _470. ((= (((Data.Bool.cond (Data.Bool.~ _470)) x) y)) (((Data.Bool.cond _470) y) x)) c)) (\lambda _470. ((= (((Data.Bool.cond (Data.Bool.~ _470)) x) y)) (((Data.Bool.cond _470) y) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_585 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.eq hol.bool c_1 hol.true) -> hol.proof (hol.eq hol.bool ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) c_1) ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) hol.true)) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.eq hol.bool c_1 hol.true) => hol.APP_THM hol.bool hol.bool (__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) (__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_3 y_2) (hol.cond A __470_4 y_2 x_3)) c_1 hol.true (thm_583 A y_2 x_3) (thm_584 c_1 hyp_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))) ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.T)) x) y)) (((Data.Bool.cond Data.Bool.T) y) x))) ;)

(; dict ;)

def thm_586 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> c_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool c_3 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2)) (hol.eq A (hol.cond A (hol.not hol.true) x_2 y_1) (hol.cond A hol.true y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => c_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool c_3 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_2 y_1) (hol.cond A __470_4 y_1 x_2)) c_3) ((__470_4 : hol.term hol.bool => hol.eq A (hol.cond A (hol.not __470_4) x_2 y_1) (hol.cond A __470_4 y_1 x_2)) hol.true)) (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2)) (hol.eq A (hol.cond A (hol.not hol.true) x_2 y_1) (hol.cond A hol.true y_1 x_2))) (thm_582 A c_3 y_1 x_2) (thm_585 A c_3 y_1 x_2 hyp_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.T)) x) y)) (((Data.Bool.cond Data.Bool.T) y) x))) ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))) ;)

(; dict ;)

def thm_587 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.eq hol.bool c_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not hol.true) x_3 y_2) (hol.cond A hol.true y_2 x_3)) (hol.eq A (hol.cond A (hol.not c_1) x_3 y_2) (hol.cond A c_1 y_2 x_3))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.eq hol.bool c_1 hol.true) => hol.SYM hol.bool (hol.eq A (hol.cond A (hol.not c_1) x_3 y_2) (hol.cond A c_1 y_2 x_3)) (hol.eq A (hol.cond A (hol.not hol.true) x_3 y_2) (hol.cond A hol.true y_2 x_3)) (thm_586 A y_2 x_3 c_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.cond (Data.Bool.~ Data.Bool.T))) (Data.Bool.cond Data.Bool.F)) ;)

(; dict ;)

def thm_588 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A A)) (hol.cond A (hol.not hol.true)) (hol.cond A hol.false)) :=
  A : hol.type => hol.APP_THM hol.bool (hol.arr A (hol.arr A A)) (hol.cond A) (hol.cond A) (hol.not hol.true) hol.false (thm_561 A) thm_3.

(; Theorem: |- ((= ((Data.Bool.cond (Data.Bool.~ Data.Bool.T)) x)) ((Data.Bool.cond Data.Bool.F) x)) ;)

(; dict ;)

def thm_589 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr A A) (hol.cond A (hol.not hol.true) x_1) (hol.cond A hol.false x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM A (hol.arr A A) (hol.cond A (hol.not hol.true)) (hol.cond A hol.false) x_1 x_1 (thm_588 A) (thm_209 A x_1).

(; Theorem: |- ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.T)) x) y)) (((Data.Bool.cond Data.Bool.F) x) y)) ;)

(; dict ;)

def thm_590 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A (hol.not hol.true) x_2 y_1) (hol.cond A hol.false x_2 y_1)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.APP_THM A A (hol.cond A (hol.not hol.true) x_2) (hol.cond A hol.false x_2) y_1 y_1 (thm_589 A x_2) (thm_564 A y_1).

(; Theorem: |- ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.T)) x) y)) y) ;)

(; dict ;)

def thm_591 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A (hol.not hol.true) x_2 y_1) y_1) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.TRANS A (hol.cond A (hol.not hol.true) x_2 y_1) (hol.cond A hol.false x_2 y_1) y_1 (thm_590 A y_1 x_2) (thm_359 A y_1 x_2).

(; Theorem: |- ((= (= (((Data.Bool.cond (Data.Bool.~ Data.Bool.T)) x) y))) (= y)) ;)

(; dict ;)

def thm_592 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A (hol.cond A (hol.not hol.true) x_2 y_1)) (hol.eq A y_1)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) (hol.cond A (hol.not hol.true) x_2 y_1) y_1 (thm_296 A) (thm_591 A y_1 x_2).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) y) x)) y) ;)

(; dict ;)

def thm_593 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.true y_2 x_1) y_2) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => (A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_61 A t2_1 t1_2) A x_1 y_2.

(; Theorem: |- ((= ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.T)) x) y)) (((Data.Bool.cond Data.Bool.T) y) x))) ((= y) y)) ;)

(; dict ;)

def thm_594 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not hol.true) x_2 y_1) (hol.cond A hol.true y_1 x_2)) (hol.eq A y_1 y_1)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.APP_THM A hol.bool (hol.eq A (hol.cond A (hol.not hol.true) x_2 y_1)) (hol.eq A y_1) (hol.cond A hol.true y_1 x_2) y_1 (thm_592 A y_1 x_2) (thm_593 A x_2 y_1).

(; Theorem: |- ((= ((= y) y)) Data.Bool.T) ;)

(; dict ;)

def thm_595 : A : hol.type -> y_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A y_1 y_1) hol.true) :=
  A : hol.type => y_1 : hol.term A => (A : hol.type => x_1 : hol.term A => thm_210 A x_1) A y_1.

(; Theorem: |- ((= ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.T)) x) y)) (((Data.Bool.cond Data.Bool.T) y) x))) Data.Bool.T) ;)

(; dict ;)

def thm_596 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A (hol.not hol.true) x_2 y_1) (hol.cond A hol.true y_1 x_2)) hol.true) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq A (hol.cond A (hol.not hol.true) x_2 y_1) (hol.cond A hol.true y_1 x_2)) (hol.eq A y_1 y_1) hol.true (thm_594 A y_1 x_2) (thm_595 A y_1).

(; Theorem: |- ((= Data.Bool.T) ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.T)) x) y)) (((Data.Bool.cond Data.Bool.T) y) x))) ;)

(; dict ;)

def thm_597 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool hol.true (hol.eq A (hol.cond A (hol.not hol.true) x_2 y_1) (hol.cond A hol.true y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.SYM hol.bool (hol.eq A (hol.cond A (hol.not hol.true) x_2 y_1) (hol.cond A hol.true y_1 x_2)) hol.true (thm_596 A y_1 x_2).

(; Theorem: |- ((= (((Data.Bool.cond (Data.Bool.~ Data.Bool.T)) x) y)) (((Data.Bool.cond Data.Bool.T) y) x)) ;)

(; dict ;)

def thm_598 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A (hol.not hol.true) x_2 y_1) (hol.cond A hol.true y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.EQ_MP hol.true (hol.eq A (hol.cond A (hol.not hol.true) x_2 y_1) (hol.cond A hol.true y_1 x_2)) (thm_597 A y_1 x_2) thm_15.

(; Theorem: |- ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x)) ;)

(; dict ;)

def thm_599 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> c_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool c_3 hol.true) -> hol.proof (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => c_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool c_3 hol.true) => hol.EQ_MP (hol.eq A (hol.cond A (hol.not hol.true) x_2 y_1) (hol.cond A hol.true y_1 x_2)) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2)) (thm_587 A c_3 y_1 x_2 hyp_1) (thm_598 A y_1 x_2).

(; Theorem: |- ((Data.Bool.==> ((= c) Data.Bool.T)) ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))) ;)

(; dict ;)

def thm_600 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> c_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool c_3 hol.true) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => c_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool c_3 hol.true) => thm_599 A y_1 x_2 c_3 hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((= c) Data.Bool.T)) ((= c) Data.Bool.F)) ;)

(; dict ;)

def thm_601 : c_1 : hol.term hol.bool -> hol.proof (hol.or (hol.eq hol.bool c_1 hol.true) (hol.eq hol.bool c_1 hol.false)) :=
  c_1 : hol.term hol.bool => thm_17 c_1.

(; Theorem: |- ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x)) ;)

(; dict ;)

def thm_602 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> c_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.false) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.true) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool c_3 hol.true) (hol.eq hol.bool c_3 hol.false)) -> hol.proof (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => c_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.false) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.true) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool c_3 hol.true) (hol.eq hol.bool c_3 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_269 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool c_3 hol.false) (hol.eq hol.bool c_3 hol.true) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2)) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x)) ;)

(; dict ;)

def thm_603 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> c_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.false) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.true) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2))) -> hol.proof (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => c_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.false) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.true) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool c_3 hol.true) (hol.eq hol.bool c_3 hol.false)) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2)) (thm_601 c_3) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool c_3 hol.true) (hol.eq hol.bool c_3 hol.false)) => thm_602 A y_1 x_2 c_3 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x)) ;)

(; dict ;)

def thm_604 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> c_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.false) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2))) -> hol.proof (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => c_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.false) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool c_3 hol.true) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2))) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2)) (thm_600 A y_1 x_2 c_3) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.true) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2))) => thm_603 A y_1 x_2 c_3 hyp_1 hyp_2).

(; Theorem: |- ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x)) ;)

(; dict ;)

def thm_605 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> c_3 : hol.term hol.bool -> hol.proof (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => c_3 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool c_3 hol.false) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2))) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2)) (thm_574 A y_1 x_2 c_3) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.false) (hol.eq A (hol.cond A (hol.not c_3) x_2 y_1) (hol.cond A c_3 y_1 x_2))) => thm_604 A y_1 x_2 c_3 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))) ;)

(; dict ;)

def thm_606 : A : hol.type -> x_1 : hol.term A -> c_2 : hol.term hol.bool -> hol.proof (hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_2) x_1 y_3) (hol.cond A c_2 y_3 x_1))) :=
  A : hol.type => x_1 : hol.term A => c_2 : hol.term hol.bool => y_3 : hol.term A => thm_605 A y_3 x_1 c_2.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x)))) ;)

(; dict ;)

def thm_607 : A : hol.type -> c_1 : hol.term hol.bool -> hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2)))) :=
  A : hol.type => c_1 : hol.term hol.bool => x_2 : hol.term A => hol.EQ_MP (hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2))) (hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2))) (thm_547 A x_2 c_1) (thm_606 A x_2 c_1).

(; Theorem: |- (Data.Bool.! \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))))) ;)

(; dict ;)

def thm_608 : A : hol.type -> hol.proof (hol.forall hol.bool (c_1 : hol.term hol.bool => hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2))))) :=
  A : hol.type => c_1 : hol.term hol.bool => hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2)))) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2)))) (thm_544 A c_1) (thm_607 A c_1).

(; Theorem: |- (Data.Bool.! \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Data.Bool.cond (Data.Bool.~ c)) x) y)) (((Data.Bool.cond c) y) x))))) ;)

(; thm ;)

def thm_609 : A : hol.type -> hol.proof (hol.forall hol.bool (c_1 : hol.term hol.bool => hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2))))) :=
  A : hol.type => hol.EQ_MP (hol.forall hol.bool (c_1 : hol.term hol.bool => hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2))))) (hol.forall hol.bool (c_1 : hol.term hol.bool => hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq A (hol.cond A (hol.not c_1) x_2 y_3) (hol.cond A c_1 y_3 x_2))))) (thm_541 A) (thm_608 A).

(; Theorem: |- ((= \lambda b. (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))))))) \lambda b. (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))))))) ;)

(; dict ;)

def thm_610 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))))) (b_1 : hol.term hol.bool => hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))))).

(; Theorem: |- ((= \lambda b. (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))))))) \lambda b. (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))))))) ;)

(; dict ;)

def thm_611 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))))) (b_1 : hol.term hol.bool => hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (b_1 : hol.term hol.bool => hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))))) (b_1 : hol.term hol.bool => hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))))) (b_1 : hol.term hol.bool => hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))))) thm_610 thm_610.

(; Theorem: |- ((= (Data.Bool.! \lambda b. (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))))))))) (Data.Bool.! \lambda b. (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))))))))) ;)

(; dict ;)

def thm_612 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))))) (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (b_1 : hol.term hol.bool => hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))))) (b_1 : hol.term hol.bool => hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))))) thm_25 thm_611.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))))))) ;)

(; dict ;)

def thm_613 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))) (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))))) :=
  b_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))))))) ;)

(; dict ;)

def thm_614 : b_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))) (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))))) :=
  b_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))) (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))) (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))) (thm_613 b_1) (thm_613 b_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))))))) ;)

(; dict ;)

def thm_615 : b_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))))) (hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))))) :=
  b_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))) (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))) thm_25 (thm_614 b_1).

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))))) \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))))) ;)

(; dict ;)

def thm_616 : b_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))) (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))) :=
  b_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))).

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))))) \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))))) ;)

(; dict ;)

def thm_617 : b_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))) (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))) :=
  b_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))) (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))) (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))) (thm_616 b_1 p_2) (thm_616 b_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))))))) (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))))))) ;)

(; dict ;)

def thm_618 : b_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))) (hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))))) :=
  b_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))) (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))) thm_25 (thm_617 b_1 p_2).

(; Theorem: |- ((= \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))))) \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))))) ;)

(; dict ;)

def thm_619 : b_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_3 q_2) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_3 r_4) (hol.cond hol.bool b_1 q_2 s_5)))) (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_3 q_2) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_3 r_4) (hol.cond hol.bool b_1 q_2 s_5))))) :=
  b_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_3 q_2) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_3 r_4) (hol.cond hol.bool b_1 q_2 s_5)))).

(; Theorem: |- ((= \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))))) \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))))) ;)

(; dict ;)

def thm_620 : b_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_3 q_2) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_3 r_4) (hol.cond hol.bool b_1 q_2 s_5)))) (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_3 q_2) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_3 r_4) (hol.cond hol.bool b_1 q_2 s_5))))) :=
  b_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_3 q_2) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_3 r_4) (hol.cond hol.bool b_1 q_2 s_5)))) (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_3 q_2) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_3 r_4) (hol.cond hol.bool b_1 q_2 s_5)))) (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_3 q_2) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_3 r_4) (hol.cond hol.bool b_1 q_2 s_5)))) (thm_619 b_1 q_2 p_3) (thm_619 b_1 q_2 p_3).

(; Theorem: |- ((= (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))))) (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))))) ;)

(; dict ;)

def thm_621 : b_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_3 q_2) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_3 r_4) (hol.cond hol.bool b_1 q_2 s_5))))) (hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_3 q_2) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_3 r_4) (hol.cond hol.bool b_1 q_2 s_5)))))) :=
  b_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_3 q_2) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_3 r_4) (hol.cond hol.bool b_1 q_2 s_5)))) (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_3 q_2) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_3 r_4) (hol.cond hol.bool b_1 q_2 s_5)))) thm_25 (thm_620 b_1 q_2 p_3).

(; Theorem: |- ((= \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))) \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))) ;)

(; dict ;)

def thm_622 : b_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_5)) (hol.imp (hol.cond hol.bool b_1 p_4 r_2) (hol.cond hol.bool b_1 q_3 s_5))) (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_5)) (hol.imp (hol.cond hol.bool b_1 p_4 r_2) (hol.cond hol.bool b_1 q_3 s_5)))) :=
  b_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_5)) (hol.imp (hol.cond hol.bool b_1 p_4 r_2) (hol.cond hol.bool b_1 q_3 s_5))).

(; Theorem: |- ((= \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))) \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))) ;)

(; dict ;)

def thm_623 : b_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_5)) (hol.imp (hol.cond hol.bool b_1 p_4 r_2) (hol.cond hol.bool b_1 q_3 s_5))) (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_5)) (hol.imp (hol.cond hol.bool b_1 p_4 r_2) (hol.cond hol.bool b_1 q_3 s_5)))) :=
  b_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_5)) (hol.imp (hol.cond hol.bool b_1 p_4 r_2) (hol.cond hol.bool b_1 q_3 s_5))) (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_5)) (hol.imp (hol.cond hol.bool b_1 p_4 r_2) (hol.cond hol.bool b_1 q_3 s_5))) (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_5)) (hol.imp (hol.cond hol.bool b_1 p_4 r_2) (hol.cond hol.bool b_1 q_3 s_5))) (thm_622 b_1 r_2 q_3 p_4) (thm_622 b_1 r_2 q_3 p_4).

(; Theorem: |- ((= (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))))) (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))))) ;)

(; dict ;)

def thm_624 : b_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_5)) (hol.imp (hol.cond hol.bool b_1 p_4 r_2) (hol.cond hol.bool b_1 q_3 s_5)))) (hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_5)) (hol.imp (hol.cond hol.bool b_1 p_4 r_2) (hol.cond hol.bool b_1 q_3 s_5))))) :=
  b_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_5)) (hol.imp (hol.cond hol.bool b_1 p_4 r_2) (hol.cond hol.bool b_1 q_3 s_5))) (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_5)) (hol.imp (hol.cond hol.bool b_1 p_4 r_2) (hol.cond hol.bool b_1 q_3 s_5))) thm_25 (thm_623 b_1 r_2 q_3 p_4).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s)) ;)

(; dict ;)

def thm_625 : s_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_1)) -> hol.proof (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_1)) :=
  s_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_626 : s_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_1)) -> hol.proof (hol.imp p_4 q_3) :=
  s_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_1)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_153 q_1 p_2 hyp_1) (hol.imp r_2 s_1) (hol.imp p_4 q_3) hyp_1.

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_627 : s_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_1)) -> hol.proof (hol.imp p_4 q_3) :=
  s_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_1)) => hol.PROVE_HYP (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_1)) (hol.imp p_4 q_3) (thm_625 s_1 r_2 q_3 p_4 hyp_1) (hyp_2 : hol.proof (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_1)) => thm_626 s_1 r_2 q_3 p_4 hyp_2).

(; Theorem: |- ((Data.Bool.==> r) s) ;)

(; dict ;)

def thm_628 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> s_3 : hol.term hol.bool -> r_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_2 q_1) (hol.imp r_4 s_3)) -> hol.proof (hol.imp r_4 s_3) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => s_3 : hol.term hol.bool => r_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_2 q_1) (hol.imp r_4 s_3)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_83 p_1 q_2 hyp_1) (hol.imp p_2 q_1) (hol.imp r_4 s_3) hyp_1.

(; Theorem: |- ((Data.Bool.==> r) s) ;)

(; dict ;)

def thm_629 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> s_3 : hol.term hol.bool -> r_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_2 q_1) (hol.imp r_4 s_3)) -> hol.proof (hol.imp r_4 s_3) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => s_3 : hol.term hol.bool => r_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_2 q_1) (hol.imp r_4 s_3)) => hol.PROVE_HYP (hol.and (hol.imp p_2 q_1) (hol.imp r_4 s_3)) (hol.imp r_4 s_3) (thm_625 s_3 r_4 q_1 p_2 hyp_1) (hyp_2 : hol.proof (hol.and (hol.imp p_2 q_1) (hol.imp r_4 s_3)) => thm_628 q_1 p_2 s_3 r_4 hyp_2).

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_630 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_2 q_1) -> hol.proof (hol.imp p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_2 q_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> r) s) ;)

(; dict ;)

def thm_631 : s_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp r_2 s_1) -> hol.proof (hol.imp r_2 s_1) :=
  s_1 : hol.term hol.bool => r_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp r_2 s_1) => hyp_1.

(; Theorem: |- ((= (= (\lambda _476. ((Data.Bool.==> (((Data.Bool.cond _476) p) r)) (((Data.Bool.cond _476) q) s)) b))) (= (\lambda _476. ((Data.Bool.==> (((Data.Bool.cond _476) p) r)) (((Data.Bool.cond _476) q) s)) b))) ;)

(; dict ;)

def thm_632 : b_1 : hol.term hol.bool -> s_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> r_4 : hol.term hol.bool -> p_5 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) b_1)) (hol.eq hol.bool ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) b_1))) :=
  b_1 : hol.term hol.bool => s_2 : hol.term hol.bool => q_3 : hol.term hol.bool => r_4 : hol.term hol.bool => p_5 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) b_1)).

(; Theorem: |- ((= (\lambda _476. ((Data.Bool.==> (((Data.Bool.cond _476) p) r)) (((Data.Bool.cond _476) q) s)) Data.Bool.F)) ((Data.Bool.==> (((Data.Bool.cond Data.Bool.F) p) r)) (((Data.Bool.cond Data.Bool.F) q) s))) ;)

(; dict ;)

def thm_633 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__476_5 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_5 p_4 r_3) (hol.cond hol.bool __476_5 q_2 s_1)) hol.false) (hol.imp (hol.cond hol.bool hol.false p_4 r_3) (hol.cond hol.bool hol.false q_2 s_1))) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__476_5 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_5 p_4 r_3) (hol.cond hol.bool __476_5 q_2 s_1)) hol.false.

(; Theorem: |- ((= ((= (\lambda _476. ((Data.Bool.==> (((Data.Bool.cond _476) p) r)) (((Data.Bool.cond _476) q) s)) b)) (\lambda _476. ((Data.Bool.==> (((Data.Bool.cond _476) p) r)) (((Data.Bool.cond _476) q) s)) Data.Bool.F))) ((= (\lambda _476. ((Data.Bool.==> (((Data.Bool.cond _476) p) r)) (((Data.Bool.cond _476) q) s)) b)) ((Data.Bool.==> (((Data.Bool.cond Data.Bool.F) p) r)) (((Data.Bool.cond Data.Bool.F) q) s)))) ;)

(; dict ;)

def thm_634 : b_1 : hol.term hol.bool -> s_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> r_4 : hol.term hol.bool -> p_5 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) b_1) ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) hol.false)) (hol.eq hol.bool ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) b_1) (hol.imp (hol.cond hol.bool hol.false p_5 r_4) (hol.cond hol.bool hol.false q_3 s_2)))) :=
  b_1 : hol.term hol.bool => s_2 : hol.term hol.bool => q_3 : hol.term hol.bool => r_4 : hol.term hol.bool => p_5 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) b_1)) (hol.eq hol.bool ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) b_1)) ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) hol.false) (hol.imp (hol.cond hol.bool hol.false p_5 r_4) (hol.cond hol.bool hol.false q_3 s_2)) (thm_632 b_1 s_2 q_3 r_4 p_5) (thm_633 s_2 q_3 r_4 p_5).

(; Theorem: |- ((= (\lambda _476. ((Data.Bool.==> (((Data.Bool.cond _476) p) r)) (((Data.Bool.cond _476) q) s)) b)) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))) ;)

(; dict ;)

def thm_635 : b_1 : hol.term hol.bool -> s_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> r_4 : hol.term hol.bool -> p_5 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) b_1) (hol.imp (hol.cond hol.bool b_1 p_5 r_4) (hol.cond hol.bool b_1 q_3 s_2))) :=
  b_1 : hol.term hol.bool => s_2 : hol.term hol.bool => q_3 : hol.term hol.bool => r_4 : hol.term hol.bool => p_5 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) b_1.

(; Theorem: |- ((= (= (\lambda _476. ((Data.Bool.==> (((Data.Bool.cond _476) p) r)) (((Data.Bool.cond _476) q) s)) b))) (= ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))) ;)

(; dict ;)

def thm_636 : b_1 : hol.term hol.bool -> s_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> r_4 : hol.term hol.bool -> p_5 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) b_1)) (hol.eq hol.bool (hol.imp (hol.cond hol.bool b_1 p_5 r_4) (hol.cond hol.bool b_1 q_3 s_2)))) :=
  b_1 : hol.term hol.bool => s_2 : hol.term hol.bool => q_3 : hol.term hol.bool => r_4 : hol.term hol.bool => p_5 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) b_1) (hol.imp (hol.cond hol.bool b_1 p_5 r_4) (hol.cond hol.bool b_1 q_3 s_2)) thm_38 (thm_635 b_1 s_2 q_3 r_4 p_5).

(; Theorem: |- ((= ((Data.Bool.==> (((Data.Bool.cond Data.Bool.F) p) r)) (((Data.Bool.cond Data.Bool.F) q) s))) ((Data.Bool.==> (((Data.Bool.cond Data.Bool.F) p) r)) (((Data.Bool.cond Data.Bool.F) q) s))) ;)

(; dict ;)

def thm_637 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.cond hol.bool hol.false p_4 r_3) (hol.cond hol.bool hol.false q_2 s_1)) (hol.imp (hol.cond hol.bool hol.false p_4 r_3) (hol.cond hol.bool hol.false q_2 s_1))) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hol.REFL hol.bool (hol.imp (hol.cond hol.bool hol.false p_4 r_3) (hol.cond hol.bool hol.false q_2 s_1)).

(; Theorem: |- ((= ((= (\lambda _476. ((Data.Bool.==> (((Data.Bool.cond _476) p) r)) (((Data.Bool.cond _476) q) s)) b)) ((Data.Bool.==> (((Data.Bool.cond Data.Bool.F) p) r)) (((Data.Bool.cond Data.Bool.F) q) s)))) ((= ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))) ((Data.Bool.==> (((Data.Bool.cond Data.Bool.F) p) r)) (((Data.Bool.cond Data.Bool.F) q) s)))) ;)

(; dict ;)

def thm_638 : b_1 : hol.term hol.bool -> s_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> r_4 : hol.term hol.bool -> p_5 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) b_1) (hol.imp (hol.cond hol.bool hol.false p_5 r_4) (hol.cond hol.bool hol.false q_3 s_2))) (hol.eq hol.bool (hol.imp (hol.cond hol.bool b_1 p_5 r_4) (hol.cond hol.bool b_1 q_3 s_2)) (hol.imp (hol.cond hol.bool hol.false p_5 r_4) (hol.cond hol.bool hol.false q_3 s_2)))) :=
  b_1 : hol.term hol.bool => s_2 : hol.term hol.bool => q_3 : hol.term hol.bool => r_4 : hol.term hol.bool => p_5 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) b_1)) (hol.eq hol.bool (hol.imp (hol.cond hol.bool b_1 p_5 r_4) (hol.cond hol.bool b_1 q_3 s_2))) (hol.imp (hol.cond hol.bool hol.false p_5 r_4) (hol.cond hol.bool hol.false q_3 s_2)) (hol.imp (hol.cond hol.bool hol.false p_5 r_4) (hol.cond hol.bool hol.false q_3 s_2)) (thm_636 b_1 s_2 q_3 r_4 p_5) (thm_637 s_2 q_3 r_4 p_5).

(; Theorem: |- ((= ((= (\lambda _476. ((Data.Bool.==> (((Data.Bool.cond _476) p) r)) (((Data.Bool.cond _476) q) s)) b)) (\lambda _476. ((Data.Bool.==> (((Data.Bool.cond _476) p) r)) (((Data.Bool.cond _476) q) s)) Data.Bool.F))) ((= ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))) ((Data.Bool.==> (((Data.Bool.cond Data.Bool.F) p) r)) (((Data.Bool.cond Data.Bool.F) q) s)))) ;)

(; dict ;)

def thm_639 : b_1 : hol.term hol.bool -> s_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> r_4 : hol.term hol.bool -> p_5 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) b_1) ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) hol.false)) (hol.eq hol.bool (hol.imp (hol.cond hol.bool b_1 p_5 r_4) (hol.cond hol.bool b_1 q_3 s_2)) (hol.imp (hol.cond hol.bool hol.false p_5 r_4) (hol.cond hol.bool hol.false q_3 s_2)))) :=
  b_1 : hol.term hol.bool => s_2 : hol.term hol.bool => q_3 : hol.term hol.bool => r_4 : hol.term hol.bool => p_5 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) b_1) ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) hol.false)) (hol.eq hol.bool ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) b_1) (hol.imp (hol.cond hol.bool hol.false p_5 r_4) (hol.cond hol.bool hol.false q_3 s_2))) (hol.eq hol.bool (hol.imp (hol.cond hol.bool b_1 p_5 r_4) (hol.cond hol.bool b_1 q_3 s_2)) (hol.imp (hol.cond hol.bool hol.false p_5 r_4) (hol.cond hol.bool hol.false q_3 s_2))) (thm_634 b_1 s_2 q_3 r_4 p_5) (thm_638 b_1 s_2 q_3 r_4 p_5).

(; Theorem: |- ((= \lambda _476. ((Data.Bool.==> (((Data.Bool.cond _476) p) r)) (((Data.Bool.cond _476) q) s))) \lambda _476. ((Data.Bool.==> (((Data.Bool.cond _476) p) r)) (((Data.Bool.cond _476) q) s))) ;)

(; dict ;)

def thm_640 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__476_5 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_5 p_4 r_3) (hol.cond hol.bool __476_5 q_2 s_1)) (__476_5 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_5 p_4 r_3) (hol.cond hol.bool __476_5 q_2 s_1))) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__476_5 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_5 p_4 r_3) (hol.cond hol.bool __476_5 q_2 s_1)).

(; Theorem: |- ((= (\lambda _476. ((Data.Bool.==> (((Data.Bool.cond _476) p) r)) (((Data.Bool.cond _476) q) s)) b)) (\lambda _476. ((Data.Bool.==> (((Data.Bool.cond _476) p) r)) (((Data.Bool.cond _476) q) s)) Data.Bool.F)) ;)

(; dict ;)

def thm_641 : b_1 : hol.term hol.bool -> s_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> r_4 : hol.term hol.bool -> p_5 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) -> hol.proof (hol.eq hol.bool ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) b_1) ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) hol.false)) :=
  b_1 : hol.term hol.bool => s_2 : hol.term hol.bool => q_3 : hol.term hol.bool => r_4 : hol.term hol.bool => p_5 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) => hol.APP_THM hol.bool hol.bool (__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) (__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_5 r_4) (hol.cond hol.bool __476_6 q_3 s_2)) b_1 hol.false (thm_640 s_2 q_3 r_4 p_5) (thm_45 b_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))) ((Data.Bool.==> (((Data.Bool.cond Data.Bool.F) p) r)) (((Data.Bool.cond Data.Bool.F) q) s))) ;)

(; dict ;)

def thm_642 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> b_5 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_5 hol.false) -> hol.proof (hol.eq hol.bool (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) (hol.imp (hol.cond hol.bool hol.false p_4 r_3) (hol.cond hol.bool hol.false q_2 s_1))) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => b_5 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_5 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_4 r_3) (hol.cond hol.bool __476_6 q_2 s_1)) b_5) ((__476_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __476_6 p_4 r_3) (hol.cond hol.bool __476_6 q_2 s_1)) hol.false)) (hol.eq hol.bool (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) (hol.imp (hol.cond hol.bool hol.false p_4 r_3) (hol.cond hol.bool hol.false q_2 s_1))) (thm_639 b_5 s_1 q_2 r_3 p_4) (thm_641 b_5 s_1 q_2 r_3 p_4 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (((Data.Bool.cond Data.Bool.F) p) r)) (((Data.Bool.cond Data.Bool.F) q) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))) ;)

(; dict ;)

def thm_643 : b_1 : hol.term hol.bool -> s_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> r_4 : hol.term hol.bool -> p_5 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.imp (hol.cond hol.bool hol.false p_5 r_4) (hol.cond hol.bool hol.false q_3 s_2)) (hol.imp (hol.cond hol.bool b_1 p_5 r_4) (hol.cond hol.bool b_1 q_3 s_2))) :=
  b_1 : hol.term hol.bool => s_2 : hol.term hol.bool => q_3 : hol.term hol.bool => r_4 : hol.term hol.bool => p_5 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.false) => hol.SYM hol.bool (hol.imp (hol.cond hol.bool b_1 p_5 r_4) (hol.cond hol.bool b_1 q_3 s_2)) (hol.imp (hol.cond hol.bool hol.false p_5 r_4) (hol.cond hol.bool hol.false q_3 s_2)) (thm_642 s_2 q_3 r_4 p_5 b_1 hyp_1).

(; Theorem: |- ((= Data.Bool.==>) Data.Bool.==>) ;)

(; dict ;)

def thm_644 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp hol.imp) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp.

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) p) r)) r) ;)

(; dict ;)

def thm_645 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.cond hol.bool hol.false p_2 r_1) r_1) :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_101 t2_1 t1_2) r_1 p_2.

(; Theorem: |- ((= (Data.Bool.==> (((Data.Bool.cond Data.Bool.F) p) r))) (Data.Bool.==> r)) ;)

(; dict ;)

def thm_646 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.cond hol.bool hol.false p_2 r_1)) (hol.imp r_1)) :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.cond hol.bool hol.false p_2 r_1) r_1 thm_644 (thm_645 r_1 p_2).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) q) s)) s) ;)

(; dict ;)

def thm_647 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.cond hol.bool hol.false q_2 s_1) s_1) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_101 t2_1 t1_2) s_1 q_2.

(; Theorem: |- ((= ((Data.Bool.==> (((Data.Bool.cond Data.Bool.F) p) r)) (((Data.Bool.cond Data.Bool.F) q) s))) ((Data.Bool.==> r) s)) ;)

(; dict ;)

def thm_648 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.cond hol.bool hol.false p_4 r_3) (hol.cond hol.bool hol.false q_2 s_1)) (hol.imp r_3 s_1)) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.imp (hol.cond hol.bool hol.false p_4 r_3)) (hol.imp r_3) (hol.cond hol.bool hol.false q_2 s_1) s_1 (thm_646 r_3 p_4) (thm_647 s_1 q_2).

(; Theorem: |- ((= ((= ((Data.Bool.==> r) s)) Data.Bool.T)) ((= ((Data.Bool.==> r) s)) Data.Bool.T)) ;)

(; dict ;)

def thm_649 : s_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp r_2 s_1) hol.true) (hol.eq hol.bool (hol.imp r_2 s_1) hol.true)) :=
  s_1 : hol.term hol.bool => r_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp r_2 s_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> r) s)) Data.Bool.T)) ((= ((Data.Bool.==> r) s)) Data.Bool.T)) ;)

(; dict ;)

def thm_650 : s_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp r_2 s_1) hol.true) (hol.eq hol.bool (hol.imp r_2 s_1) hol.true)) :=
  s_1 : hol.term hol.bool => r_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp r_2 s_1) hol.true) (hol.eq hol.bool (hol.imp r_2 s_1) hol.true) (hol.eq hol.bool (hol.imp r_2 s_1) hol.true) (thm_649 s_1 r_2) (thm_649 s_1 r_2).

(; Theorem: |- ((= ((Data.Bool.==> r) s)) ((= ((Data.Bool.==> r) s)) Data.Bool.T)) ;)

(; dict ;)

def thm_651 : s_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp r_2 s_1) (hol.eq hol.bool (hol.imp r_2 s_1) hol.true)) :=
  s_1 : hol.term hol.bool => r_2 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_207 t_1) (hol.imp r_2 s_1).

(; Theorem: |- ((= ((Data.Bool.==> r) s)) Data.Bool.T) ;)

(; dict ;)

def thm_652 : s_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp r_2 s_1) -> hol.proof (hol.eq hol.bool (hol.imp r_2 s_1) hol.true) :=
  s_1 : hol.term hol.bool => r_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp r_2 s_1) => hol.EQ_MP (hol.imp r_2 s_1) (hol.eq hol.bool (hol.imp r_2 s_1) hol.true) (thm_651 s_1 r_2) (thm_631 s_1 r_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (((Data.Bool.cond Data.Bool.F) p) r)) (((Data.Bool.cond Data.Bool.F) q) s))) Data.Bool.T) ;)

(; dict ;)

def thm_653 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp r_3 s_1) -> hol.proof (hol.eq hol.bool (hol.imp (hol.cond hol.bool hol.false p_4 r_3) (hol.cond hol.bool hol.false q_2 s_1)) hol.true) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp r_3 s_1) => hol.TRANS hol.bool (hol.imp (hol.cond hol.bool hol.false p_4 r_3) (hol.cond hol.bool hol.false q_2 s_1)) (hol.imp r_3 s_1) hol.true (thm_648 s_1 q_2 r_3 p_4) (hol.EQ_MP (hol.eq hol.bool (hol.imp r_3 s_1) hol.true) (hol.eq hol.bool (hol.imp r_3 s_1) hol.true) (thm_650 s_1 r_3) (thm_652 s_1 r_3 hyp_1)).

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool.==> (((Data.Bool.cond Data.Bool.F) p) r)) (((Data.Bool.cond Data.Bool.F) q) s))) ;)

(; dict ;)

def thm_654 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp r_3 s_1) -> hol.proof (hol.eq hol.bool hol.true (hol.imp (hol.cond hol.bool hol.false p_4 r_3) (hol.cond hol.bool hol.false q_2 s_1))) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp r_3 s_1) => hol.SYM hol.bool (hol.imp (hol.cond hol.bool hol.false p_4 r_3) (hol.cond hol.bool hol.false q_2 s_1)) hol.true (thm_653 s_1 q_2 r_3 p_4 hyp_1).

(; Theorem: |- ((Data.Bool.==> (((Data.Bool.cond Data.Bool.F) p) r)) (((Data.Bool.cond Data.Bool.F) q) s)) ;)

(; dict ;)

def thm_655 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp r_3 s_1) -> hol.proof (hol.imp (hol.cond hol.bool hol.false p_4 r_3) (hol.cond hol.bool hol.false q_2 s_1)) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp r_3 s_1) => hol.EQ_MP hol.true (hol.imp (hol.cond hol.bool hol.false p_4 r_3) (hol.cond hol.bool hol.false q_2 s_1)) (thm_654 s_1 q_2 r_3 p_4 hyp_1) thm_15.

(; Theorem: |- ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)) ;)

(; dict ;)

def thm_656 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> b_5 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_5 hol.false) -> hyp_2 : hol.proof (hol.imp r_3 s_1) -> hol.proof (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => b_5 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_5 hol.false) => hyp_2 : hol.proof (hol.imp r_3 s_1) => hol.EQ_MP (hol.imp (hol.cond hol.bool hol.false p_4 r_3) (hol.cond hol.bool hol.false q_2 s_1)) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) (thm_643 b_5 s_1 q_2 r_3 p_4 hyp_1) (thm_655 s_1 q_2 r_3 p_4 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((= b) Data.Bool.F)) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))) ;)

(; dict ;)

def thm_657 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> b_5 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp r_3 s_1) -> hol.proof (hol.imp (hol.eq hol.bool b_5 hol.false) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1))) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => b_5 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp r_3 s_1) => hyp_2 : hol.proof (hol.eq hol.bool b_5 hol.false) => thm_656 s_1 q_2 r_3 p_4 b_5 hyp_2 hyp_1.

(; Theorem: |- ((= (= (\lambda _474. ((Data.Bool.==> (((Data.Bool.cond _474) p) r)) (((Data.Bool.cond _474) q) s)) b))) (= (\lambda _474. ((Data.Bool.==> (((Data.Bool.cond _474) p) r)) (((Data.Bool.cond _474) q) s)) b))) ;)

(; dict ;)

def thm_658 : b_1 : hol.term hol.bool -> s_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> r_4 : hol.term hol.bool -> p_5 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) b_1)) (hol.eq hol.bool ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) b_1))) :=
  b_1 : hol.term hol.bool => s_2 : hol.term hol.bool => q_3 : hol.term hol.bool => r_4 : hol.term hol.bool => p_5 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) b_1)).

(; Theorem: |- ((= (\lambda _474. ((Data.Bool.==> (((Data.Bool.cond _474) p) r)) (((Data.Bool.cond _474) q) s)) Data.Bool.T)) ((Data.Bool.==> (((Data.Bool.cond Data.Bool.T) p) r)) (((Data.Bool.cond Data.Bool.T) q) s))) ;)

(; dict ;)

def thm_659 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__474_5 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_5 p_4 r_3) (hol.cond hol.bool __474_5 q_2 s_1)) hol.true) (hol.imp (hol.cond hol.bool hol.true p_4 r_3) (hol.cond hol.bool hol.true q_2 s_1))) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__474_5 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_5 p_4 r_3) (hol.cond hol.bool __474_5 q_2 s_1)) hol.true.

(; Theorem: |- ((= ((= (\lambda _474. ((Data.Bool.==> (((Data.Bool.cond _474) p) r)) (((Data.Bool.cond _474) q) s)) b)) (\lambda _474. ((Data.Bool.==> (((Data.Bool.cond _474) p) r)) (((Data.Bool.cond _474) q) s)) Data.Bool.T))) ((= (\lambda _474. ((Data.Bool.==> (((Data.Bool.cond _474) p) r)) (((Data.Bool.cond _474) q) s)) b)) ((Data.Bool.==> (((Data.Bool.cond Data.Bool.T) p) r)) (((Data.Bool.cond Data.Bool.T) q) s)))) ;)

(; dict ;)

def thm_660 : b_1 : hol.term hol.bool -> s_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> r_4 : hol.term hol.bool -> p_5 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) b_1) ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) hol.true)) (hol.eq hol.bool ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) b_1) (hol.imp (hol.cond hol.bool hol.true p_5 r_4) (hol.cond hol.bool hol.true q_3 s_2)))) :=
  b_1 : hol.term hol.bool => s_2 : hol.term hol.bool => q_3 : hol.term hol.bool => r_4 : hol.term hol.bool => p_5 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) b_1)) (hol.eq hol.bool ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) b_1)) ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) hol.true) (hol.imp (hol.cond hol.bool hol.true p_5 r_4) (hol.cond hol.bool hol.true q_3 s_2)) (thm_658 b_1 s_2 q_3 r_4 p_5) (thm_659 s_2 q_3 r_4 p_5).

(; Theorem: |- ((= (\lambda _474. ((Data.Bool.==> (((Data.Bool.cond _474) p) r)) (((Data.Bool.cond _474) q) s)) b)) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))) ;)

(; dict ;)

def thm_661 : b_1 : hol.term hol.bool -> s_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> r_4 : hol.term hol.bool -> p_5 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) b_1) (hol.imp (hol.cond hol.bool b_1 p_5 r_4) (hol.cond hol.bool b_1 q_3 s_2))) :=
  b_1 : hol.term hol.bool => s_2 : hol.term hol.bool => q_3 : hol.term hol.bool => r_4 : hol.term hol.bool => p_5 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) b_1.

(; Theorem: |- ((= (= (\lambda _474. ((Data.Bool.==> (((Data.Bool.cond _474) p) r)) (((Data.Bool.cond _474) q) s)) b))) (= ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))) ;)

(; dict ;)

def thm_662 : b_1 : hol.term hol.bool -> s_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> r_4 : hol.term hol.bool -> p_5 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) b_1)) (hol.eq hol.bool (hol.imp (hol.cond hol.bool b_1 p_5 r_4) (hol.cond hol.bool b_1 q_3 s_2)))) :=
  b_1 : hol.term hol.bool => s_2 : hol.term hol.bool => q_3 : hol.term hol.bool => r_4 : hol.term hol.bool => p_5 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) b_1) (hol.imp (hol.cond hol.bool b_1 p_5 r_4) (hol.cond hol.bool b_1 q_3 s_2)) thm_38 (thm_661 b_1 s_2 q_3 r_4 p_5).

(; Theorem: |- ((= ((Data.Bool.==> (((Data.Bool.cond Data.Bool.T) p) r)) (((Data.Bool.cond Data.Bool.T) q) s))) ((Data.Bool.==> (((Data.Bool.cond Data.Bool.T) p) r)) (((Data.Bool.cond Data.Bool.T) q) s))) ;)

(; dict ;)

def thm_663 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.cond hol.bool hol.true p_4 r_3) (hol.cond hol.bool hol.true q_2 s_1)) (hol.imp (hol.cond hol.bool hol.true p_4 r_3) (hol.cond hol.bool hol.true q_2 s_1))) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hol.REFL hol.bool (hol.imp (hol.cond hol.bool hol.true p_4 r_3) (hol.cond hol.bool hol.true q_2 s_1)).

(; Theorem: |- ((= ((= (\lambda _474. ((Data.Bool.==> (((Data.Bool.cond _474) p) r)) (((Data.Bool.cond _474) q) s)) b)) ((Data.Bool.==> (((Data.Bool.cond Data.Bool.T) p) r)) (((Data.Bool.cond Data.Bool.T) q) s)))) ((= ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))) ((Data.Bool.==> (((Data.Bool.cond Data.Bool.T) p) r)) (((Data.Bool.cond Data.Bool.T) q) s)))) ;)

(; dict ;)

def thm_664 : b_1 : hol.term hol.bool -> s_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> r_4 : hol.term hol.bool -> p_5 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) b_1) (hol.imp (hol.cond hol.bool hol.true p_5 r_4) (hol.cond hol.bool hol.true q_3 s_2))) (hol.eq hol.bool (hol.imp (hol.cond hol.bool b_1 p_5 r_4) (hol.cond hol.bool b_1 q_3 s_2)) (hol.imp (hol.cond hol.bool hol.true p_5 r_4) (hol.cond hol.bool hol.true q_3 s_2)))) :=
  b_1 : hol.term hol.bool => s_2 : hol.term hol.bool => q_3 : hol.term hol.bool => r_4 : hol.term hol.bool => p_5 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) b_1)) (hol.eq hol.bool (hol.imp (hol.cond hol.bool b_1 p_5 r_4) (hol.cond hol.bool b_1 q_3 s_2))) (hol.imp (hol.cond hol.bool hol.true p_5 r_4) (hol.cond hol.bool hol.true q_3 s_2)) (hol.imp (hol.cond hol.bool hol.true p_5 r_4) (hol.cond hol.bool hol.true q_3 s_2)) (thm_662 b_1 s_2 q_3 r_4 p_5) (thm_663 s_2 q_3 r_4 p_5).

(; Theorem: |- ((= ((= (\lambda _474. ((Data.Bool.==> (((Data.Bool.cond _474) p) r)) (((Data.Bool.cond _474) q) s)) b)) (\lambda _474. ((Data.Bool.==> (((Data.Bool.cond _474) p) r)) (((Data.Bool.cond _474) q) s)) Data.Bool.T))) ((= ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))) ((Data.Bool.==> (((Data.Bool.cond Data.Bool.T) p) r)) (((Data.Bool.cond Data.Bool.T) q) s)))) ;)

(; dict ;)

def thm_665 : b_1 : hol.term hol.bool -> s_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> r_4 : hol.term hol.bool -> p_5 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) b_1) ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) hol.true)) (hol.eq hol.bool (hol.imp (hol.cond hol.bool b_1 p_5 r_4) (hol.cond hol.bool b_1 q_3 s_2)) (hol.imp (hol.cond hol.bool hol.true p_5 r_4) (hol.cond hol.bool hol.true q_3 s_2)))) :=
  b_1 : hol.term hol.bool => s_2 : hol.term hol.bool => q_3 : hol.term hol.bool => r_4 : hol.term hol.bool => p_5 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) b_1) ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) hol.true)) (hol.eq hol.bool ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) b_1) (hol.imp (hol.cond hol.bool hol.true p_5 r_4) (hol.cond hol.bool hol.true q_3 s_2))) (hol.eq hol.bool (hol.imp (hol.cond hol.bool b_1 p_5 r_4) (hol.cond hol.bool b_1 q_3 s_2)) (hol.imp (hol.cond hol.bool hol.true p_5 r_4) (hol.cond hol.bool hol.true q_3 s_2))) (thm_660 b_1 s_2 q_3 r_4 p_5) (thm_664 b_1 s_2 q_3 r_4 p_5).

(; Theorem: |- ((= \lambda _474. ((Data.Bool.==> (((Data.Bool.cond _474) p) r)) (((Data.Bool.cond _474) q) s))) \lambda _474. ((Data.Bool.==> (((Data.Bool.cond _474) p) r)) (((Data.Bool.cond _474) q) s))) ;)

(; dict ;)

def thm_666 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__474_5 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_5 p_4 r_3) (hol.cond hol.bool __474_5 q_2 s_1)) (__474_5 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_5 p_4 r_3) (hol.cond hol.bool __474_5 q_2 s_1))) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__474_5 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_5 p_4 r_3) (hol.cond hol.bool __474_5 q_2 s_1)).

(; Theorem: |- ((= (\lambda _474. ((Data.Bool.==> (((Data.Bool.cond _474) p) r)) (((Data.Bool.cond _474) q) s)) b)) (\lambda _474. ((Data.Bool.==> (((Data.Bool.cond _474) p) r)) (((Data.Bool.cond _474) q) s)) Data.Bool.T)) ;)

(; dict ;)

def thm_667 : b_1 : hol.term hol.bool -> s_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> r_4 : hol.term hol.bool -> p_5 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) -> hol.proof (hol.eq hol.bool ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) b_1) ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) hol.true)) :=
  b_1 : hol.term hol.bool => s_2 : hol.term hol.bool => q_3 : hol.term hol.bool => r_4 : hol.term hol.bool => p_5 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) => hol.APP_THM hol.bool hol.bool (__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) (__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_5 r_4) (hol.cond hol.bool __474_6 q_3 s_2)) b_1 hol.true (thm_666 s_2 q_3 r_4 p_5) (thm_228 b_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))) ((Data.Bool.==> (((Data.Bool.cond Data.Bool.T) p) r)) (((Data.Bool.cond Data.Bool.T) q) s))) ;)

(; dict ;)

def thm_668 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> b_5 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_5 hol.true) -> hol.proof (hol.eq hol.bool (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) (hol.imp (hol.cond hol.bool hol.true p_4 r_3) (hol.cond hol.bool hol.true q_2 s_1))) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => b_5 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_5 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_4 r_3) (hol.cond hol.bool __474_6 q_2 s_1)) b_5) ((__474_6 : hol.term hol.bool => hol.imp (hol.cond hol.bool __474_6 p_4 r_3) (hol.cond hol.bool __474_6 q_2 s_1)) hol.true)) (hol.eq hol.bool (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) (hol.imp (hol.cond hol.bool hol.true p_4 r_3) (hol.cond hol.bool hol.true q_2 s_1))) (thm_665 b_5 s_1 q_2 r_3 p_4) (thm_667 b_5 s_1 q_2 r_3 p_4 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (((Data.Bool.cond Data.Bool.T) p) r)) (((Data.Bool.cond Data.Bool.T) q) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))) ;)

(; dict ;)

def thm_669 : b_1 : hol.term hol.bool -> s_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> r_4 : hol.term hol.bool -> p_5 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.imp (hol.cond hol.bool hol.true p_5 r_4) (hol.cond hol.bool hol.true q_3 s_2)) (hol.imp (hol.cond hol.bool b_1 p_5 r_4) (hol.cond hol.bool b_1 q_3 s_2))) :=
  b_1 : hol.term hol.bool => s_2 : hol.term hol.bool => q_3 : hol.term hol.bool => r_4 : hol.term hol.bool => p_5 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_1 hol.true) => hol.SYM hol.bool (hol.imp (hol.cond hol.bool b_1 p_5 r_4) (hol.cond hol.bool b_1 q_3 s_2)) (hol.imp (hol.cond hol.bool hol.true p_5 r_4) (hol.cond hol.bool hol.true q_3 s_2)) (thm_668 s_2 q_3 r_4 p_5 b_1 hyp_1).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) p) r)) p) ;)

(; dict ;)

def thm_670 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.cond hol.bool hol.true p_2 r_1) p_2) :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_232 t2_1 t1_2) r_1 p_2.

(; Theorem: |- ((= (Data.Bool.==> (((Data.Bool.cond Data.Bool.T) p) r))) (Data.Bool.==> p)) ;)

(; dict ;)

def thm_671 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.cond hol.bool hol.true p_2 r_1)) (hol.imp p_2)) :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.cond hol.bool hol.true p_2 r_1) p_2 thm_644 (thm_670 r_1 p_2).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) q) s)) q) ;)

(; dict ;)

def thm_672 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.cond hol.bool hol.true q_2 s_1) q_2) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_232 t2_1 t1_2) s_1 q_2.

(; Theorem: |- ((= ((Data.Bool.==> (((Data.Bool.cond Data.Bool.T) p) r)) (((Data.Bool.cond Data.Bool.T) q) s))) ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_673 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.cond hol.bool hol.true p_4 r_3) (hol.cond hol.bool hol.true q_2 s_1)) (hol.imp p_4 q_2)) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.imp (hol.cond hol.bool hol.true p_4 r_3)) (hol.imp p_4) (hol.cond hol.bool hol.true q_2 s_1) q_2 (thm_671 r_3 p_4) (thm_672 s_1 q_2).

(; Theorem: |- ((= ((= ((Data.Bool.==> p) q)) Data.Bool.T)) ((= ((Data.Bool.==> p) q)) Data.Bool.T)) ;)

(; dict ;)

def thm_674 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp p_2 q_1) hol.true) (hol.eq hol.bool (hol.imp p_2 q_1) hol.true)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp p_2 q_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> p) q)) Data.Bool.T)) ((= ((Data.Bool.==> p) q)) Data.Bool.T)) ;)

(; dict ;)

def thm_675 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp p_2 q_1) hol.true) (hol.eq hol.bool (hol.imp p_2 q_1) hol.true)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp p_2 q_1) hol.true) (hol.eq hol.bool (hol.imp p_2 q_1) hol.true) (hol.eq hol.bool (hol.imp p_2 q_1) hol.true) (thm_674 q_1 p_2) (thm_674 q_1 p_2).

(; Theorem: |- ((= ((Data.Bool.==> p) q)) ((= ((Data.Bool.==> p) q)) Data.Bool.T)) ;)

(; dict ;)

def thm_676 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp p_2 q_1) (hol.eq hol.bool (hol.imp p_2 q_1) hol.true)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_207 t_1) (hol.imp p_2 q_1).

(; Theorem: |- ((= ((Data.Bool.==> p) q)) Data.Bool.T) ;)

(; dict ;)

def thm_677 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_2 q_1) -> hol.proof (hol.eq hol.bool (hol.imp p_2 q_1) hol.true) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_2 q_1) => hol.EQ_MP (hol.imp p_2 q_1) (hol.eq hol.bool (hol.imp p_2 q_1) hol.true) (thm_676 q_1 p_2) (thm_630 q_1 p_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (((Data.Bool.cond Data.Bool.T) p) r)) (((Data.Bool.cond Data.Bool.T) q) s))) Data.Bool.T) ;)

(; dict ;)

def thm_678 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_4 q_2) -> hol.proof (hol.eq hol.bool (hol.imp (hol.cond hol.bool hol.true p_4 r_3) (hol.cond hol.bool hol.true q_2 s_1)) hol.true) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_4 q_2) => hol.TRANS hol.bool (hol.imp (hol.cond hol.bool hol.true p_4 r_3) (hol.cond hol.bool hol.true q_2 s_1)) (hol.imp p_4 q_2) hol.true (thm_673 s_1 q_2 r_3 p_4) (hol.EQ_MP (hol.eq hol.bool (hol.imp p_4 q_2) hol.true) (hol.eq hol.bool (hol.imp p_4 q_2) hol.true) (thm_675 q_2 p_4) (thm_677 q_2 p_4 hyp_1)).

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool.==> (((Data.Bool.cond Data.Bool.T) p) r)) (((Data.Bool.cond Data.Bool.T) q) s))) ;)

(; dict ;)

def thm_679 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_4 q_2) -> hol.proof (hol.eq hol.bool hol.true (hol.imp (hol.cond hol.bool hol.true p_4 r_3) (hol.cond hol.bool hol.true q_2 s_1))) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_4 q_2) => hol.SYM hol.bool (hol.imp (hol.cond hol.bool hol.true p_4 r_3) (hol.cond hol.bool hol.true q_2 s_1)) hol.true (thm_678 s_1 q_2 r_3 p_4 hyp_1).

(; Theorem: |- ((Data.Bool.==> (((Data.Bool.cond Data.Bool.T) p) r)) (((Data.Bool.cond Data.Bool.T) q) s)) ;)

(; dict ;)

def thm_680 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_4 q_2) -> hol.proof (hol.imp (hol.cond hol.bool hol.true p_4 r_3) (hol.cond hol.bool hol.true q_2 s_1)) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_4 q_2) => hol.EQ_MP hol.true (hol.imp (hol.cond hol.bool hol.true p_4 r_3) (hol.cond hol.bool hol.true q_2 s_1)) (thm_679 s_1 q_2 r_3 p_4 hyp_1) thm_15.

(; Theorem: |- ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)) ;)

(; dict ;)

def thm_681 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> b_5 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool b_5 hol.true) -> hyp_2 : hol.proof (hol.imp p_4 q_2) -> hol.proof (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => b_5 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool b_5 hol.true) => hyp_2 : hol.proof (hol.imp p_4 q_2) => hol.EQ_MP (hol.imp (hol.cond hol.bool hol.true p_4 r_3) (hol.cond hol.bool hol.true q_2 s_1)) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) (thm_669 b_5 s_1 q_2 r_3 p_4 hyp_1) (thm_680 s_1 q_2 r_3 p_4 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((= b) Data.Bool.T)) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))) ;)

(; dict ;)

def thm_682 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> b_5 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_4 q_2) -> hol.proof (hol.imp (hol.eq hol.bool b_5 hol.true) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1))) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => b_5 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_4 q_2) => hyp_2 : hol.proof (hol.eq hol.bool b_5 hol.true) => thm_681 s_1 q_2 r_3 p_4 b_5 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)) ;)

(; dict ;)

def thm_683 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> b_5 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_5 hol.false) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_5 hol.true) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_5 hol.true) (hol.eq hol.bool b_5 hol.false)) -> hol.proof (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => b_5 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_5 hol.false) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_5 hol.true) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_5 hol.true) (hol.eq hol.bool b_5 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_269 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool b_5 hol.false) (hol.eq hol.bool b_5 hol.true) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)) ;)

(; dict ;)

def thm_684 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> b_5 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_5 hol.false) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_5 hol.true) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1))) -> hol.proof (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => b_5 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool b_5 hol.false) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_5 hol.true) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool b_5 hol.true) (hol.eq hol.bool b_5 hol.false)) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) (thm_250 b_5) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool b_5 hol.true) (hol.eq hol.bool b_5 hol.false)) => thm_683 s_1 q_2 r_3 p_4 b_5 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)) ;)

(; dict ;)

def thm_685 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> b_5 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_4 q_2) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_5 hol.false) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1))) -> hol.proof (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => b_5 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_4 q_2) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool b_5 hol.false) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool b_5 hol.true) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1))) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) (thm_682 s_1 q_2 r_3 p_4 b_5 hyp_1) (hyp_3 : hol.proof (hol.imp (hol.eq hol.bool b_5 hol.true) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1))) => thm_684 s_1 q_2 r_3 p_4 b_5 hyp_2 hyp_3).

(; Theorem: |- ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)) ;)

(; dict ;)

def thm_686 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> b_5 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_4 q_2) -> hyp_2 : hol.proof (hol.imp r_3 s_1) -> hol.proof (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => b_5 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_4 q_2) => hyp_2 : hol.proof (hol.imp r_3 s_1) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool b_5 hol.false) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1))) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) (thm_657 s_1 q_2 r_3 p_4 b_5 hyp_2) (hyp_3 : hol.proof (hol.imp (hol.eq hol.bool b_5 hol.false) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1))) => thm_685 s_1 q_2 r_3 p_4 b_5 hyp_1 hyp_3).

(; Theorem: |- ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)) ;)

(; dict ;)

def thm_687 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> b_5 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_4 q_2) -> hyp_2 : hol.proof (hol.imp r_3 s_1) -> hol.proof (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => b_5 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_4 q_2) => hyp_2 : hol.proof (hol.imp r_3 s_1) => hol.PROVE_HYP (hol.imp r_3 s_1) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) (thm_631 s_1 r_3 hyp_2) (hyp_3 : hol.proof (hol.imp r_3 s_1) => thm_686 s_1 q_2 r_3 p_4 b_5 hyp_1 hyp_3).

(; Theorem: |- ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)) ;)

(; dict ;)

def thm_688 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> b_5 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_4 q_2) -> hyp_2 : hol.proof (hol.imp r_3 s_1) -> hol.proof (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => b_5 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_4 q_2) => hyp_2 : hol.proof (hol.imp r_3 s_1) => hol.PROVE_HYP (hol.imp p_4 q_2) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) (thm_630 q_2 p_4 hyp_1) (hyp_3 : hol.proof (hol.imp p_4 q_2) => thm_687 s_1 q_2 r_3 p_4 b_5 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)) ;)

(; dict ;)

def thm_689 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> b_5 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_4 q_2) (hol.imp r_3 s_1)) -> hyp_2 : hol.proof (hol.imp p_4 q_2) -> hol.proof (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => b_5 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_4 q_2) (hol.imp r_3 s_1)) => hyp_2 : hol.proof (hol.imp p_4 q_2) => hol.PROVE_HYP (hol.imp r_3 s_1) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) (thm_629 q_2 p_4 s_1 r_3 hyp_1) (hyp_3 : hol.proof (hol.imp r_3 s_1) => thm_688 s_1 q_2 r_3 p_4 b_5 hyp_2 hyp_3).

(; Theorem: |- ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)) ;)

(; dict ;)

def thm_690 : s_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> b_5 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_4 q_2) (hol.imp r_3 s_1)) -> hol.proof (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) :=
  s_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => p_4 : hol.term hol.bool => b_5 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_4 q_2) (hol.imp r_3 s_1)) => hol.PROVE_HYP (hol.imp p_4 q_2) (hol.imp (hol.cond hol.bool b_5 p_4 r_3) (hol.cond hol.bool b_5 q_2 s_1)) (thm_627 s_1 r_3 q_2 p_4 hyp_1) (hyp_2 : hol.proof (hol.imp p_4 q_2) => thm_689 s_1 q_2 r_3 p_4 b_5 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))) ;)

(; dict ;)

def thm_691 : b_1 : hol.term hol.bool -> s_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> q_4 : hol.term hol.bool -> p_5 : hol.term hol.bool -> hol.proof (hol.imp (hol.and (hol.imp p_5 q_4) (hol.imp r_3 s_2)) (hol.imp (hol.cond hol.bool b_1 p_5 r_3) (hol.cond hol.bool b_1 q_4 s_2))) :=
  b_1 : hol.term hol.bool => s_2 : hol.term hol.bool => r_3 : hol.term hol.bool => q_4 : hol.term hol.bool => p_5 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_5 q_4) (hol.imp r_3 s_2)) => thm_690 s_2 q_4 r_3 p_5 b_1 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))) ;)

(; dict ;)

def thm_692 : b_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_4 q_3) (hol.imp r_2 s_5)) (hol.imp (hol.cond hol.bool b_1 p_4 r_2) (hol.cond hol.bool b_1 q_3 s_5)))) :=
  b_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => p_4 : hol.term hol.bool => s_5 : hol.term hol.bool => thm_691 b_1 s_5 r_2 q_3 p_4.

(; Theorem: |- (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))))) ;)

(; dict ;)

def thm_693 : b_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_3 q_2) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_3 r_4) (hol.cond hol.bool b_1 q_2 s_5))))) :=
  b_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => r_4 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_3 q_2) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_3 r_4) (hol.cond hol.bool b_1 q_2 s_5)))) (hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_3 q_2) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_3 r_4) (hol.cond hol.bool b_1 q_2 s_5)))) (thm_624 b_1 r_4 q_2 p_3) (thm_692 b_1 r_4 q_2 p_3).

(; Theorem: |- (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))))) ;)

(; dict ;)

def thm_694 : b_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))) :=
  b_1 : hol.term hol.bool => p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))) (hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))) (thm_621 b_1 q_3 p_2) (thm_693 b_1 q_3 p_2).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s))))))) ;)

(; dict ;)

def thm_695 : b_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))))) :=
  b_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))) (hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))) (thm_618 b_1 p_2) (thm_694 b_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))))))) ;)

(; dict ;)

def thm_696 : hol.proof (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))))) :=
  b_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))))) (hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5))))))) (thm_615 b_1) (thm_695 b_1).

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> r) s))) ((Data.Bool.==> (((Data.Bool.cond b) p) r)) (((Data.Bool.cond b) q) s)))))))) ;)

(; thm ;)

def thm_697 : hol.proof (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))))) :=
  hol.EQ_MP (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))))) (hol.forall hol.bool (b_1 : hol.term hol.bool => hol.forall hol.bool (p_2 : hol.term hol.bool => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.forall hol.bool (s_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp p_2 q_3) (hol.imp r_4 s_5)) (hol.imp (hol.cond hol.bool b_1 p_2 r_4) (hol.cond hol.bool b_1 q_3 s_5)))))))) thm_612 thm_696.

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_698 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr A hol.bool)).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))))))) \lambda p. (Data.Bool.! \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))))))) ;)

(; dict ;)

def thm_699 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4)))))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4))))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))))))) \lambda p. (Data.Bool.! \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))))))) ;)

(; dict ;)

def thm_700 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4)))))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4))))))) (thm_699 A) (thm_699 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))))))) ;)

(; dict ;)

def thm_701 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4)))))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4))))))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4))))))) (thm_698 A) (thm_700 A).

(; Theorem: |- ((= \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))))) \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))))) ;)

(; dict ;)

def thm_702 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4)))))) (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4)))))).

(; Theorem: |- ((= \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))))) \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))))) ;)

(; dict ;)

def thm_703 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4)))))) (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr hol.bool hol.bool) (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4)))))) (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4)))))) (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4)))))) (thm_702 A p_1) (thm_702 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))))))) (Data.Bool.! \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))))))) ;)

(; dict ;)

def thm_704 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4))))))) (hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4)))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4)))))) (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4)))))) thm_25 (thm_703 A p_1).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))))) \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))))) ;)

(; dict ;)

def thm_705 : A : hol.type -> c_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 (hol.cond A c_1 x_3 y_4)) (hol.and (hol.imp c_1 (p_2 x_3)) (hol.imp (hol.not c_1) (p_2 y_4))))) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 (hol.cond A c_1 x_3 y_4)) (hol.and (hol.imp c_1 (p_2 x_3)) (hol.imp (hol.not c_1) (p_2 y_4)))))) :=
  A : hol.type => c_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 (hol.cond A c_1 x_3 y_4)) (hol.and (hol.imp c_1 (p_2 x_3)) (hol.imp (hol.not c_1) (p_2 y_4))))).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))))) \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))))) ;)

(; dict ;)

def thm_706 : A : hol.type -> c_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 (hol.cond A c_1 x_3 y_4)) (hol.and (hol.imp c_1 (p_2 x_3)) (hol.imp (hol.not c_1) (p_2 y_4))))) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 (hol.cond A c_1 x_3 y_4)) (hol.and (hol.imp c_1 (p_2 x_3)) (hol.imp (hol.not c_1) (p_2 y_4)))))) :=
  A : hol.type => c_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr A hol.bool) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 (hol.cond A c_1 x_3 y_4)) (hol.and (hol.imp c_1 (p_2 x_3)) (hol.imp (hol.not c_1) (p_2 y_4))))) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 (hol.cond A c_1 x_3 y_4)) (hol.and (hol.imp c_1 (p_2 x_3)) (hol.imp (hol.not c_1) (p_2 y_4))))) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 (hol.cond A c_1 x_3 y_4)) (hol.and (hol.imp c_1 (p_2 x_3)) (hol.imp (hol.not c_1) (p_2 y_4))))) (thm_705 A c_1 p_2) (thm_705 A c_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))))) ;)

(; dict ;)

def thm_707 : A : hol.type -> c_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 (hol.cond A c_1 x_3 y_4)) (hol.and (hol.imp c_1 (p_2 x_3)) (hol.imp (hol.not c_1) (p_2 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 (hol.cond A c_1 x_3 y_4)) (hol.and (hol.imp c_1 (p_2 x_3)) (hol.imp (hol.not c_1) (p_2 y_4))))))) :=
  A : hol.type => c_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 (hol.cond A c_1 x_3 y_4)) (hol.and (hol.imp c_1 (p_2 x_3)) (hol.imp (hol.not c_1) (p_2 y_4))))) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 (hol.cond A c_1 x_3 y_4)) (hol.and (hol.imp c_1 (p_2 x_3)) (hol.imp (hol.not c_1) (p_2 y_4))))) (thm_51 A) (thm_706 A c_1 p_2).

(; Theorem: |- ((= \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))) \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))) ;)

(; dict ;)

def thm_708 : A : hol.type -> x_1 : hol.term A -> c_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_4 : hol.term A => hol.eq hol.bool (p_3 (hol.cond A c_2 x_1 y_4)) (hol.and (hol.imp c_2 (p_3 x_1)) (hol.imp (hol.not c_2) (p_3 y_4)))) (y_4 : hol.term A => hol.eq hol.bool (p_3 (hol.cond A c_2 x_1 y_4)) (hol.and (hol.imp c_2 (p_3 x_1)) (hol.imp (hol.not c_2) (p_3 y_4))))) :=
  A : hol.type => x_1 : hol.term A => c_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (y_4 : hol.term A => hol.eq hol.bool (p_3 (hol.cond A c_2 x_1 y_4)) (hol.and (hol.imp c_2 (p_3 x_1)) (hol.imp (hol.not c_2) (p_3 y_4)))).

(; Theorem: |- ((= \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))) \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))) ;)

(; dict ;)

def thm_709 : A : hol.type -> x_1 : hol.term A -> c_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_4 : hol.term A => hol.eq hol.bool (p_3 (hol.cond A c_2 x_1 y_4)) (hol.and (hol.imp c_2 (p_3 x_1)) (hol.imp (hol.not c_2) (p_3 y_4)))) (y_4 : hol.term A => hol.eq hol.bool (p_3 (hol.cond A c_2 x_1 y_4)) (hol.and (hol.imp c_2 (p_3 x_1)) (hol.imp (hol.not c_2) (p_3 y_4))))) :=
  A : hol.type => x_1 : hol.term A => c_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr A hol.bool) (y_4 : hol.term A => hol.eq hol.bool (p_3 (hol.cond A c_2 x_1 y_4)) (hol.and (hol.imp c_2 (p_3 x_1)) (hol.imp (hol.not c_2) (p_3 y_4)))) (y_4 : hol.term A => hol.eq hol.bool (p_3 (hol.cond A c_2 x_1 y_4)) (hol.and (hol.imp c_2 (p_3 x_1)) (hol.imp (hol.not c_2) (p_3 y_4)))) (y_4 : hol.term A => hol.eq hol.bool (p_3 (hol.cond A c_2 x_1 y_4)) (hol.and (hol.imp c_2 (p_3 x_1)) (hol.imp (hol.not c_2) (p_3 y_4)))) (thm_708 A x_1 c_2 p_3) (thm_708 A x_1 c_2 p_3).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))))) (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))))) ;)

(; dict ;)

def thm_710 : A : hol.type -> x_1 : hol.term A -> c_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 (hol.cond A c_2 x_1 y_4)) (hol.and (hol.imp c_2 (p_3 x_1)) (hol.imp (hol.not c_2) (p_3 y_4))))) (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 (hol.cond A c_2 x_1 y_4)) (hol.and (hol.imp c_2 (p_3 x_1)) (hol.imp (hol.not c_2) (p_3 y_4)))))) :=
  A : hol.type => x_1 : hol.term A => c_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_4 : hol.term A => hol.eq hol.bool (p_3 (hol.cond A c_2 x_1 y_4)) (hol.and (hol.imp c_2 (p_3 x_1)) (hol.imp (hol.not c_2) (p_3 y_4)))) (y_4 : hol.term A => hol.eq hol.bool (p_3 (hol.cond A c_2 x_1 y_4)) (hol.and (hol.imp c_2 (p_3 x_1)) (hol.imp (hol.not c_2) (p_3 y_4)))) (thm_51 A) (thm_709 A x_1 c_2 p_3).

(; Theorem: |- ((= (= (\lambda _480. ((= (p (((Data.Bool.cond _480) x) y))) ((Data.Bool./\ ((Data.Bool.==> _480) (p x))) ((Data.Bool.==> (Data.Bool.~ _480)) (p y)))) c))) (= (\lambda _480. ((= (p (((Data.Bool.cond _480) x) y))) ((Data.Bool./\ ((Data.Bool.==> _480) (p x))) ((Data.Bool.==> (Data.Bool.~ _480)) (p y)))) c))) ;)

(; dict ;)

def thm_711 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) c_1)) (hol.eq hol.bool ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) c_1))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) c_1)).

(; Theorem: |- ((= (\lambda _480. ((= (p (((Data.Bool.cond _480) x) y))) ((Data.Bool./\ ((Data.Bool.==> _480) (p x))) ((Data.Bool.==> (Data.Bool.~ _480)) (p y)))) Data.Bool.F)) ((= (p (((Data.Bool.cond Data.Bool.F) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (p y))))) ;)

(; dict ;)

def thm_712 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((__480_4 : hol.term hol.bool => hol.eq hol.bool (p_3 (hol.cond A __480_4 x_2 y_1)) (hol.and (hol.imp __480_4 (p_3 x_2)) (hol.imp (hol.not __480_4) (p_3 y_1)))) hol.false) (hol.eq hol.bool (p_3 (hol.cond A hol.false x_2 y_1)) (hol.and (hol.imp hol.false (p_3 x_2)) (hol.imp (hol.not hol.false) (p_3 y_1))))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV hol.bool hol.bool (__480_4 : hol.term hol.bool => hol.eq hol.bool (p_3 (hol.cond A __480_4 x_2 y_1)) (hol.and (hol.imp __480_4 (p_3 x_2)) (hol.imp (hol.not __480_4) (p_3 y_1)))) hol.false.

(; Theorem: |- ((= ((= (\lambda _480. ((= (p (((Data.Bool.cond _480) x) y))) ((Data.Bool./\ ((Data.Bool.==> _480) (p x))) ((Data.Bool.==> (Data.Bool.~ _480)) (p y)))) c)) (\lambda _480. ((= (p (((Data.Bool.cond _480) x) y))) ((Data.Bool./\ ((Data.Bool.==> _480) (p x))) ((Data.Bool.==> (Data.Bool.~ _480)) (p y)))) Data.Bool.F))) ((= (\lambda _480. ((= (p (((Data.Bool.cond _480) x) y))) ((Data.Bool./\ ((Data.Bool.==> _480) (p x))) ((Data.Bool.==> (Data.Bool.~ _480)) (p y)))) c)) ((= (p (((Data.Bool.cond Data.Bool.F) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (p y)))))) ;)

(; dict ;)

def thm_713 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) c_1) ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) hol.false)) (hol.eq hol.bool ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) c_1) (hol.eq hol.bool (p_4 (hol.cond A hol.false x_3 y_2)) (hol.and (hol.imp hol.false (p_4 x_3)) (hol.imp (hol.not hol.false) (p_4 y_2)))))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) c_1)) (hol.eq hol.bool ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) c_1)) ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) hol.false) (hol.eq hol.bool (p_4 (hol.cond A hol.false x_3 y_2)) (hol.and (hol.imp hol.false (p_4 x_3)) (hol.imp (hol.not hol.false) (p_4 y_2)))) (thm_711 A c_1 y_2 x_3 p_4) (thm_712 A y_2 x_3 p_4).

(; Theorem: |- ((= (\lambda _480. ((= (p (((Data.Bool.cond _480) x) y))) ((Data.Bool./\ ((Data.Bool.==> _480) (p x))) ((Data.Bool.==> (Data.Bool.~ _480)) (p y)))) c)) ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))) ;)

(; dict ;)

def thm_714 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) c_1) (hol.eq hol.bool (p_4 (hol.cond A c_1 x_3 y_2)) (hol.and (hol.imp c_1 (p_4 x_3)) (hol.imp (hol.not c_1) (p_4 y_2))))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV hol.bool hol.bool (__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) c_1.

(; Theorem: |- ((= (= (\lambda _480. ((= (p (((Data.Bool.cond _480) x) y))) ((Data.Bool./\ ((Data.Bool.==> _480) (p x))) ((Data.Bool.==> (Data.Bool.~ _480)) (p y)))) c))) (= ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))))) ;)

(; dict ;)

def thm_715 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) c_1)) (hol.eq hol.bool (hol.eq hol.bool (p_4 (hol.cond A c_1 x_3 y_2)) (hol.and (hol.imp c_1 (p_4 x_3)) (hol.imp (hol.not c_1) (p_4 y_2)))))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) c_1) (hol.eq hol.bool (p_4 (hol.cond A c_1 x_3 y_2)) (hol.and (hol.imp c_1 (p_4 x_3)) (hol.imp (hol.not c_1) (p_4 y_2)))) thm_38 (thm_714 A c_1 y_2 x_3 p_4).

(; Theorem: |- ((= ((= (p (((Data.Bool.cond Data.Bool.F) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (p y))))) ((= (p (((Data.Bool.cond Data.Bool.F) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (p y))))) ;)

(; dict ;)

def thm_716 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_3 (hol.cond A hol.false x_2 y_1)) (hol.and (hol.imp hol.false (p_3 x_2)) (hol.imp (hol.not hol.false) (p_3 y_1)))) (hol.eq hol.bool (p_3 (hol.cond A hol.false x_2 y_1)) (hol.and (hol.imp hol.false (p_3 x_2)) (hol.imp (hol.not hol.false) (p_3 y_1))))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (p_3 (hol.cond A hol.false x_2 y_1)) (hol.and (hol.imp hol.false (p_3 x_2)) (hol.imp (hol.not hol.false) (p_3 y_1)))).

(; Theorem: |- ((= ((= (\lambda _480. ((= (p (((Data.Bool.cond _480) x) y))) ((Data.Bool./\ ((Data.Bool.==> _480) (p x))) ((Data.Bool.==> (Data.Bool.~ _480)) (p y)))) c)) ((= (p (((Data.Bool.cond Data.Bool.F) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (p y)))))) ((= ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))) ((= (p (((Data.Bool.cond Data.Bool.F) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (p y)))))) ;)

(; dict ;)

def thm_717 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) c_1) (hol.eq hol.bool (p_4 (hol.cond A hol.false x_3 y_2)) (hol.and (hol.imp hol.false (p_4 x_3)) (hol.imp (hol.not hol.false) (p_4 y_2))))) (hol.eq hol.bool (hol.eq hol.bool (p_4 (hol.cond A c_1 x_3 y_2)) (hol.and (hol.imp c_1 (p_4 x_3)) (hol.imp (hol.not c_1) (p_4 y_2)))) (hol.eq hol.bool (p_4 (hol.cond A hol.false x_3 y_2)) (hol.and (hol.imp hol.false (p_4 x_3)) (hol.imp (hol.not hol.false) (p_4 y_2)))))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) c_1)) (hol.eq hol.bool (hol.eq hol.bool (p_4 (hol.cond A c_1 x_3 y_2)) (hol.and (hol.imp c_1 (p_4 x_3)) (hol.imp (hol.not c_1) (p_4 y_2))))) (hol.eq hol.bool (p_4 (hol.cond A hol.false x_3 y_2)) (hol.and (hol.imp hol.false (p_4 x_3)) (hol.imp (hol.not hol.false) (p_4 y_2)))) (hol.eq hol.bool (p_4 (hol.cond A hol.false x_3 y_2)) (hol.and (hol.imp hol.false (p_4 x_3)) (hol.imp (hol.not hol.false) (p_4 y_2)))) (thm_715 A c_1 y_2 x_3 p_4) (thm_716 A y_2 x_3 p_4).

(; Theorem: |- ((= ((= (\lambda _480. ((= (p (((Data.Bool.cond _480) x) y))) ((Data.Bool./\ ((Data.Bool.==> _480) (p x))) ((Data.Bool.==> (Data.Bool.~ _480)) (p y)))) c)) (\lambda _480. ((= (p (((Data.Bool.cond _480) x) y))) ((Data.Bool./\ ((Data.Bool.==> _480) (p x))) ((Data.Bool.==> (Data.Bool.~ _480)) (p y)))) Data.Bool.F))) ((= ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))) ((= (p (((Data.Bool.cond Data.Bool.F) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (p y)))))) ;)

(; dict ;)

def thm_718 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) c_1) ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (p_4 (hol.cond A c_1 x_3 y_2)) (hol.and (hol.imp c_1 (p_4 x_3)) (hol.imp (hol.not c_1) (p_4 y_2)))) (hol.eq hol.bool (p_4 (hol.cond A hol.false x_3 y_2)) (hol.and (hol.imp hol.false (p_4 x_3)) (hol.imp (hol.not hol.false) (p_4 y_2)))))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) c_1) ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) hol.false)) (hol.eq hol.bool ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) c_1) (hol.eq hol.bool (p_4 (hol.cond A hol.false x_3 y_2)) (hol.and (hol.imp hol.false (p_4 x_3)) (hol.imp (hol.not hol.false) (p_4 y_2))))) (hol.eq hol.bool (hol.eq hol.bool (p_4 (hol.cond A c_1 x_3 y_2)) (hol.and (hol.imp c_1 (p_4 x_3)) (hol.imp (hol.not c_1) (p_4 y_2)))) (hol.eq hol.bool (p_4 (hol.cond A hol.false x_3 y_2)) (hol.and (hol.imp hol.false (p_4 x_3)) (hol.imp (hol.not hol.false) (p_4 y_2))))) (thm_713 A c_1 y_2 x_3 p_4) (thm_717 A c_1 y_2 x_3 p_4).

(; Theorem: |- ((= \lambda _480. ((= (p (((Data.Bool.cond _480) x) y))) ((Data.Bool./\ ((Data.Bool.==> _480) (p x))) ((Data.Bool.==> (Data.Bool.~ _480)) (p y))))) \lambda _480. ((= (p (((Data.Bool.cond _480) x) y))) ((Data.Bool./\ ((Data.Bool.==> _480) (p x))) ((Data.Bool.==> (Data.Bool.~ _480)) (p y))))) ;)

(; dict ;)

def thm_719 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__480_4 : hol.term hol.bool => hol.eq hol.bool (p_3 (hol.cond A __480_4 x_2 y_1)) (hol.and (hol.imp __480_4 (p_3 x_2)) (hol.imp (hol.not __480_4) (p_3 y_1)))) (__480_4 : hol.term hol.bool => hol.eq hol.bool (p_3 (hol.cond A __480_4 x_2 y_1)) (hol.and (hol.imp __480_4 (p_3 x_2)) (hol.imp (hol.not __480_4) (p_3 y_1))))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (__480_4 : hol.term hol.bool => hol.eq hol.bool (p_3 (hol.cond A __480_4 x_2 y_1)) (hol.and (hol.imp __480_4 (p_3 x_2)) (hol.imp (hol.not __480_4) (p_3 y_1)))).

(; Theorem: |- ((= (\lambda _480. ((= (p (((Data.Bool.cond _480) x) y))) ((Data.Bool./\ ((Data.Bool.==> _480) (p x))) ((Data.Bool.==> (Data.Bool.~ _480)) (p y)))) c)) (\lambda _480. ((= (p (((Data.Bool.cond _480) x) y))) ((Data.Bool./\ ((Data.Bool.==> _480) (p x))) ((Data.Bool.==> (Data.Bool.~ _480)) (p y)))) Data.Bool.F)) ;)

(; dict ;)

def thm_720 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool c_1 hol.false) -> hol.proof (hol.eq hol.bool ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) c_1) ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) hol.false)) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool c_1 hol.false) => hol.APP_THM hol.bool hol.bool (__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) (__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_3 y_2)) (hol.and (hol.imp __480_5 (p_4 x_3)) (hol.imp (hol.not __480_5) (p_4 y_2)))) c_1 hol.false (thm_719 A y_2 x_3 p_4) (thm_557 c_1 hyp_1).

(; Theorem: |- ((= ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))) ((= (p (((Data.Bool.cond Data.Bool.F) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (p y))))) ;)

(; dict ;)

def thm_721 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> c_3 : hol.term hol.bool -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool c_3 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1)))) (hol.eq hol.bool (p_4 (hol.cond A hol.false x_2 y_1)) (hol.and (hol.imp hol.false (p_4 x_2)) (hol.imp (hol.not hol.false) (p_4 y_1))))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => c_3 : hol.term hol.bool => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool c_3 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_2 y_1)) (hol.and (hol.imp __480_5 (p_4 x_2)) (hol.imp (hol.not __480_5) (p_4 y_1)))) c_3) ((__480_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __480_5 x_2 y_1)) (hol.and (hol.imp __480_5 (p_4 x_2)) (hol.imp (hol.not __480_5) (p_4 y_1)))) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1)))) (hol.eq hol.bool (p_4 (hol.cond A hol.false x_2 y_1)) (hol.and (hol.imp hol.false (p_4 x_2)) (hol.imp (hol.not hol.false) (p_4 y_1))))) (thm_718 A c_3 y_1 x_2 p_4) (thm_720 A c_3 y_1 x_2 p_4 hyp_1).

(; Theorem: |- ((= ((= (p (((Data.Bool.cond Data.Bool.F) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (p y))))) ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))) ;)

(; dict ;)

def thm_722 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool c_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_4 (hol.cond A hol.false x_3 y_2)) (hol.and (hol.imp hol.false (p_4 x_3)) (hol.imp (hol.not hol.false) (p_4 y_2)))) (hol.eq hol.bool (p_4 (hol.cond A c_1 x_3 y_2)) (hol.and (hol.imp c_1 (p_4 x_3)) (hol.imp (hol.not c_1) (p_4 y_2))))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool c_1 hol.false) => hol.SYM hol.bool (hol.eq hol.bool (p_4 (hol.cond A c_1 x_3 y_2)) (hol.and (hol.imp c_1 (p_4 x_3)) (hol.imp (hol.not c_1) (p_4 y_2)))) (hol.eq hol.bool (p_4 (hol.cond A hol.false x_3 y_2)) (hol.and (hol.imp hol.false (p_4 x_3)) (hol.imp (hol.not hol.false) (p_4 y_2)))) (thm_721 A y_2 x_3 c_1 p_4 hyp_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_723 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) p_1 p_1) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) p_1.

(; Theorem: |- ((= (p (((Data.Bool.cond Data.Bool.F) x) y))) (p y)) ;)

(; dict ;)

def thm_724 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_3 (hol.cond A hol.false x_2 y_1)) (p_3 y_1)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM A hol.bool p_3 p_3 (hol.cond A hol.false x_2 y_1) y_1 (thm_723 A p_3) (thm_359 A y_1 x_2).

(; Theorem: |- ((= (= (p (((Data.Bool.cond Data.Bool.F) x) y)))) (= (p y))) ;)

(; dict ;)

def thm_725 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (p_3 (hol.cond A hol.false x_2 y_1))) (hol.eq hol.bool (p_3 y_1))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (p_3 (hol.cond A hol.false x_2 y_1)) (p_3 y_1) thm_38 (thm_724 A y_1 x_2 p_3).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_726 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_727 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_726 t_1) (thm_726 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_728 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_729 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_728 thm_728.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) ;)

(; dict ;)

def thm_730 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_25 thm_729.

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_731 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_732 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_731 t_1) (thm_731 t_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_733 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_20 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_734 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_91 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_735 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_732 t_1) (thm_733 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => thm_734 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_736 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_737 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_736 t_1) (thm_736 t_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_738 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => thm_21 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_739 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_91 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_740 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_737 t_1) (thm_738 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => thm_739 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_741 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => thm_22 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_742 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_91 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_743 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_726 t_1) (thm_741 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => thm_742 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_744 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_745 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_744 t_1) (thm_744 t_1).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_746 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_747 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_746 thm_746.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) ;)

(; dict ;)

def thm_748 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_25 thm_747.

(; Theorem: |- ((= ((Data.Bool.==> t) t)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_749 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_207 t_1) (hol.imp t_1 t_1).

(; Theorem: |- ((Data.Bool.==> t) t) ;)

(; dict ;)

def thm_750 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 t_1) :=
  t_1 : hol.term hol.bool => thm_23 t_1.

(; Theorem: |- ((= ((Data.Bool.==> t) t)) Data.Bool.T) ;)

(; dict ;)

def thm_751 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_749 t_1) (thm_750 t_1).

(; Theorem: |- ((= (= ((Data.Bool.==> t) t))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_752 : t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp t_1 t_1) hol.true thm_38 (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_744 t_1) (thm_751 t_1)).

(; Theorem: |- ((= Data.Bool.T) Data.Bool.T) ;)

(; dict ;)

def thm_753 : hol.proof (hol.eq hol.bool hol.true hol.true) :=
  hol.REFL hol.bool hol.true.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_754 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true) hol.true hol.true (thm_752 t_1) thm_753.

(; Theorem: |- ((= ((= Data.Bool.T) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_755 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true) (thm_754 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_756 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_755 t_1) thm_753.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_757 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_91 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_758 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_745 t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) thm_748 thm_756 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => thm_757 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_759 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_760 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_759 t_1) (thm_759 t_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_761 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_24 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_762 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (thm_758 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_760 t_1) (thm_761 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_763 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_743 t_1) (thm_762 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_764 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (thm_740 t_1) (thm_763 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_765 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (thm_735 t_1) (thm_764 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_766 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => thm_765 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_767 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_83 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_768 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) thm_730 thm_766 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => thm_767 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_769 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_83 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_770 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_768 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) => thm_769 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_771 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_153 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_772 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_770 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) => thm_771 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) (p x))) Data.Bool.T) ;)

(; dict ;)

def thm_773 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp hol.false (p_2 x_1)) hol.true) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_727 t_1) (thm_772 t_1)) (p_2 x_1).

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool.==> Data.Bool.F) (p x)))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_774 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.imp hol.false (p_2 x_1))) (hol.and hol.true)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.imp hol.false (p_2 x_1)) hol.true thm_103 (thm_773 A x_1 p_2).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.~ Data.Bool.F))) (Data.Bool.==> Data.Bool.T)) ;)

(; dict ;)

def thm_775 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.not hol.false)) (hol.imp hol.true)) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.not hol.false) hol.true thm_644 thm_4.

(; Theorem: |- ((= (p y)) (p y)) ;)

(; dict ;)

def thm_776 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_2 y_1) (p_2 y_1)) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (p_2 y_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (p y))) ((Data.Bool.==> Data.Bool.T) (p y))) ;)

(; dict ;)

def thm_777 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not hol.false) (p_2 y_1)) (hol.imp hol.true (p_2 y_1))) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.not hol.false)) (hol.imp hol.true) (p_2 y_1) (p_2 y_1) thm_775 (thm_776 A y_1 p_2).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) (p y))) (p y)) ;)

(; dict ;)

def thm_778 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp hol.true (p_2 y_1)) (p_2 y_1)) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_733 t_1) (p_2 y_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (p y))) (p y)) ;)

(; dict ;)

def thm_779 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not hol.false) (p_2 y_1)) (p_2 y_1)) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.imp (hol.not hol.false) (p_2 y_1)) (hol.imp hol.true (p_2 y_1)) (p_2 y_1) (thm_777 A y_1 p_2) (thm_778 A y_1 p_2).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (p y)))) ((Data.Bool./\ Data.Bool.T) (p y))) ;)

(; dict ;)

def thm_780 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (hol.imp hol.false (p_3 x_2)) (hol.imp (hol.not hol.false) (p_3 y_1))) (hol.and hol.true (p_3 y_1))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.and (hol.imp hol.false (p_3 x_2))) (hol.and hol.true) (hol.imp (hol.not hol.false) (p_3 y_1)) (p_3 y_1) (thm_774 A x_2 p_3) (thm_779 A y_1 p_3).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) (p y))) (p y)) ;)

(; dict ;)

def thm_781 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and hol.true (p_2 y_1)) (p_2 y_1)) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_166 t_1) (p_2 y_1).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (p y)))) (p y)) ;)

(; dict ;)

def thm_782 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (hol.imp hol.false (p_3 x_2)) (hol.imp (hol.not hol.false) (p_3 y_1))) (p_3 y_1)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.and (hol.imp hol.false (p_3 x_2)) (hol.imp (hol.not hol.false) (p_3 y_1))) (hol.and hol.true (p_3 y_1)) (p_3 y_1) (thm_780 A y_1 x_2 p_3) (thm_781 A y_1 p_3).

(; Theorem: |- ((= ((= (p (((Data.Bool.cond Data.Bool.F) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (p y))))) ((= (p y)) (p y))) ;)

(; dict ;)

def thm_783 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_3 (hol.cond A hol.false x_2 y_1)) (hol.and (hol.imp hol.false (p_3 x_2)) (hol.imp (hol.not hol.false) (p_3 y_1)))) (hol.eq hol.bool (p_3 y_1) (p_3 y_1))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (p_3 (hol.cond A hol.false x_2 y_1))) (hol.eq hol.bool (p_3 y_1)) (hol.and (hol.imp hol.false (p_3 x_2)) (hol.imp (hol.not hol.false) (p_3 y_1))) (p_3 y_1) (thm_725 A y_1 x_2 p_3) (thm_782 A y_1 x_2 p_3).

(; Theorem: |- ((= ((= (p y)) (p y))) Data.Bool.T) ;)

(; dict ;)

def thm_784 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_2 y_1) (p_2 y_1)) hol.true) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (x_1 : hol.term hol.bool => thm_212 x_1) (p_2 y_1).

(; Theorem: |- ((= ((= (p (((Data.Bool.cond Data.Bool.F) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (p y))))) Data.Bool.T) ;)

(; dict ;)

def thm_785 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_3 (hol.cond A hol.false x_2 y_1)) (hol.and (hol.imp hol.false (p_3 x_2)) (hol.imp (hol.not hol.false) (p_3 y_1)))) hol.true) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (p_3 (hol.cond A hol.false x_2 y_1)) (hol.and (hol.imp hol.false (p_3 x_2)) (hol.imp (hol.not hol.false) (p_3 y_1)))) (hol.eq hol.bool (p_3 y_1) (p_3 y_1)) hol.true (thm_783 A y_1 x_2 p_3) (thm_784 A y_1 p_3).

(; Theorem: |- ((= Data.Bool.T) ((= (p (((Data.Bool.cond Data.Bool.F) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (p y))))) ;)

(; dict ;)

def thm_786 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (p_3 (hol.cond A hol.false x_2 y_1)) (hol.and (hol.imp hol.false (p_3 x_2)) (hol.imp (hol.not hol.false) (p_3 y_1))))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (p_3 (hol.cond A hol.false x_2 y_1)) (hol.and (hol.imp hol.false (p_3 x_2)) (hol.imp (hol.not hol.false) (p_3 y_1)))) hol.true (thm_785 A y_1 x_2 p_3).

(; Theorem: |- ((= (p (((Data.Bool.cond Data.Bool.F) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (p y)))) ;)

(; dict ;)

def thm_787 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_3 (hol.cond A hol.false x_2 y_1)) (hol.and (hol.imp hol.false (p_3 x_2)) (hol.imp (hol.not hol.false) (p_3 y_1)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.EQ_MP hol.true (hol.eq hol.bool (p_3 (hol.cond A hol.false x_2 y_1)) (hol.and (hol.imp hol.false (p_3 x_2)) (hol.imp (hol.not hol.false) (p_3 y_1)))) (thm_786 A y_1 x_2 p_3) thm_15.

(; Theorem: |- ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))) ;)

(; dict ;)

def thm_788 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> c_3 : hol.term hol.bool -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool c_3 hol.false) -> hol.proof (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => c_3 : hol.term hol.bool => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool c_3 hol.false) => hol.EQ_MP (hol.eq hol.bool (p_4 (hol.cond A hol.false x_2 y_1)) (hol.and (hol.imp hol.false (p_4 x_2)) (hol.imp (hol.not hol.false) (p_4 y_1)))) (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1)))) (thm_722 A c_3 y_1 x_2 p_4 hyp_1) (thm_787 A y_1 x_2 p_4).

(; Theorem: |- ((Data.Bool.==> ((= c) Data.Bool.F)) ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))) ;)

(; dict ;)

def thm_789 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> c_4 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool c_4 hol.false) (hol.eq hol.bool (p_3 (hol.cond A c_4 x_2 y_1)) (hol.and (hol.imp c_4 (p_3 x_2)) (hol.imp (hol.not c_4) (p_3 y_1))))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => c_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool c_4 hol.false) => thm_788 A y_1 x_2 c_4 p_3 hyp_1.

(; Theorem: |- ((= (= (\lambda _478. ((= (p (((Data.Bool.cond _478) x) y))) ((Data.Bool./\ ((Data.Bool.==> _478) (p x))) ((Data.Bool.==> (Data.Bool.~ _478)) (p y)))) c))) (= (\lambda _478. ((= (p (((Data.Bool.cond _478) x) y))) ((Data.Bool./\ ((Data.Bool.==> _478) (p x))) ((Data.Bool.==> (Data.Bool.~ _478)) (p y)))) c))) ;)

(; dict ;)

def thm_790 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) c_1)) (hol.eq hol.bool ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) c_1))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) c_1)).

(; Theorem: |- ((= (\lambda _478. ((= (p (((Data.Bool.cond _478) x) y))) ((Data.Bool./\ ((Data.Bool.==> _478) (p x))) ((Data.Bool.==> (Data.Bool.~ _478)) (p y)))) Data.Bool.T)) ((= (p (((Data.Bool.cond Data.Bool.T) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (p y))))) ;)

(; dict ;)

def thm_791 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((__478_4 : hol.term hol.bool => hol.eq hol.bool (p_3 (hol.cond A __478_4 x_2 y_1)) (hol.and (hol.imp __478_4 (p_3 x_2)) (hol.imp (hol.not __478_4) (p_3 y_1)))) hol.true) (hol.eq hol.bool (p_3 (hol.cond A hol.true x_2 y_1)) (hol.and (hol.imp hol.true (p_3 x_2)) (hol.imp (hol.not hol.true) (p_3 y_1))))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV hol.bool hol.bool (__478_4 : hol.term hol.bool => hol.eq hol.bool (p_3 (hol.cond A __478_4 x_2 y_1)) (hol.and (hol.imp __478_4 (p_3 x_2)) (hol.imp (hol.not __478_4) (p_3 y_1)))) hol.true.

(; Theorem: |- ((= ((= (\lambda _478. ((= (p (((Data.Bool.cond _478) x) y))) ((Data.Bool./\ ((Data.Bool.==> _478) (p x))) ((Data.Bool.==> (Data.Bool.~ _478)) (p y)))) c)) (\lambda _478. ((= (p (((Data.Bool.cond _478) x) y))) ((Data.Bool./\ ((Data.Bool.==> _478) (p x))) ((Data.Bool.==> (Data.Bool.~ _478)) (p y)))) Data.Bool.T))) ((= (\lambda _478. ((= (p (((Data.Bool.cond _478) x) y))) ((Data.Bool./\ ((Data.Bool.==> _478) (p x))) ((Data.Bool.==> (Data.Bool.~ _478)) (p y)))) c)) ((= (p (((Data.Bool.cond Data.Bool.T) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (p y)))))) ;)

(; dict ;)

def thm_792 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) c_1) ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) hol.true)) (hol.eq hol.bool ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) c_1) (hol.eq hol.bool (p_4 (hol.cond A hol.true x_3 y_2)) (hol.and (hol.imp hol.true (p_4 x_3)) (hol.imp (hol.not hol.true) (p_4 y_2)))))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) c_1)) (hol.eq hol.bool ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) c_1)) ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) hol.true) (hol.eq hol.bool (p_4 (hol.cond A hol.true x_3 y_2)) (hol.and (hol.imp hol.true (p_4 x_3)) (hol.imp (hol.not hol.true) (p_4 y_2)))) (thm_790 A c_1 y_2 x_3 p_4) (thm_791 A y_2 x_3 p_4).

(; Theorem: |- ((= (\lambda _478. ((= (p (((Data.Bool.cond _478) x) y))) ((Data.Bool./\ ((Data.Bool.==> _478) (p x))) ((Data.Bool.==> (Data.Bool.~ _478)) (p y)))) c)) ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))) ;)

(; dict ;)

def thm_793 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) c_1) (hol.eq hol.bool (p_4 (hol.cond A c_1 x_3 y_2)) (hol.and (hol.imp c_1 (p_4 x_3)) (hol.imp (hol.not c_1) (p_4 y_2))))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV hol.bool hol.bool (__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) c_1.

(; Theorem: |- ((= (= (\lambda _478. ((= (p (((Data.Bool.cond _478) x) y))) ((Data.Bool./\ ((Data.Bool.==> _478) (p x))) ((Data.Bool.==> (Data.Bool.~ _478)) (p y)))) c))) (= ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))))) ;)

(; dict ;)

def thm_794 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) c_1)) (hol.eq hol.bool (hol.eq hol.bool (p_4 (hol.cond A c_1 x_3 y_2)) (hol.and (hol.imp c_1 (p_4 x_3)) (hol.imp (hol.not c_1) (p_4 y_2)))))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) c_1) (hol.eq hol.bool (p_4 (hol.cond A c_1 x_3 y_2)) (hol.and (hol.imp c_1 (p_4 x_3)) (hol.imp (hol.not c_1) (p_4 y_2)))) thm_38 (thm_793 A c_1 y_2 x_3 p_4).

(; Theorem: |- ((= ((= (p (((Data.Bool.cond Data.Bool.T) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (p y))))) ((= (p (((Data.Bool.cond Data.Bool.T) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (p y))))) ;)

(; dict ;)

def thm_795 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_3 (hol.cond A hol.true x_2 y_1)) (hol.and (hol.imp hol.true (p_3 x_2)) (hol.imp (hol.not hol.true) (p_3 y_1)))) (hol.eq hol.bool (p_3 (hol.cond A hol.true x_2 y_1)) (hol.and (hol.imp hol.true (p_3 x_2)) (hol.imp (hol.not hol.true) (p_3 y_1))))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (p_3 (hol.cond A hol.true x_2 y_1)) (hol.and (hol.imp hol.true (p_3 x_2)) (hol.imp (hol.not hol.true) (p_3 y_1)))).

(; Theorem: |- ((= ((= (\lambda _478. ((= (p (((Data.Bool.cond _478) x) y))) ((Data.Bool./\ ((Data.Bool.==> _478) (p x))) ((Data.Bool.==> (Data.Bool.~ _478)) (p y)))) c)) ((= (p (((Data.Bool.cond Data.Bool.T) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (p y)))))) ((= ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))) ((= (p (((Data.Bool.cond Data.Bool.T) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (p y)))))) ;)

(; dict ;)

def thm_796 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) c_1) (hol.eq hol.bool (p_4 (hol.cond A hol.true x_3 y_2)) (hol.and (hol.imp hol.true (p_4 x_3)) (hol.imp (hol.not hol.true) (p_4 y_2))))) (hol.eq hol.bool (hol.eq hol.bool (p_4 (hol.cond A c_1 x_3 y_2)) (hol.and (hol.imp c_1 (p_4 x_3)) (hol.imp (hol.not c_1) (p_4 y_2)))) (hol.eq hol.bool (p_4 (hol.cond A hol.true x_3 y_2)) (hol.and (hol.imp hol.true (p_4 x_3)) (hol.imp (hol.not hol.true) (p_4 y_2)))))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) c_1)) (hol.eq hol.bool (hol.eq hol.bool (p_4 (hol.cond A c_1 x_3 y_2)) (hol.and (hol.imp c_1 (p_4 x_3)) (hol.imp (hol.not c_1) (p_4 y_2))))) (hol.eq hol.bool (p_4 (hol.cond A hol.true x_3 y_2)) (hol.and (hol.imp hol.true (p_4 x_3)) (hol.imp (hol.not hol.true) (p_4 y_2)))) (hol.eq hol.bool (p_4 (hol.cond A hol.true x_3 y_2)) (hol.and (hol.imp hol.true (p_4 x_3)) (hol.imp (hol.not hol.true) (p_4 y_2)))) (thm_794 A c_1 y_2 x_3 p_4) (thm_795 A y_2 x_3 p_4).

(; Theorem: |- ((= ((= (\lambda _478. ((= (p (((Data.Bool.cond _478) x) y))) ((Data.Bool./\ ((Data.Bool.==> _478) (p x))) ((Data.Bool.==> (Data.Bool.~ _478)) (p y)))) c)) (\lambda _478. ((= (p (((Data.Bool.cond _478) x) y))) ((Data.Bool./\ ((Data.Bool.==> _478) (p x))) ((Data.Bool.==> (Data.Bool.~ _478)) (p y)))) Data.Bool.T))) ((= ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))) ((= (p (((Data.Bool.cond Data.Bool.T) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (p y)))))) ;)

(; dict ;)

def thm_797 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) c_1) ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (p_4 (hol.cond A c_1 x_3 y_2)) (hol.and (hol.imp c_1 (p_4 x_3)) (hol.imp (hol.not c_1) (p_4 y_2)))) (hol.eq hol.bool (p_4 (hol.cond A hol.true x_3 y_2)) (hol.and (hol.imp hol.true (p_4 x_3)) (hol.imp (hol.not hol.true) (p_4 y_2)))))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) c_1) ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) hol.true)) (hol.eq hol.bool ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) c_1) (hol.eq hol.bool (p_4 (hol.cond A hol.true x_3 y_2)) (hol.and (hol.imp hol.true (p_4 x_3)) (hol.imp (hol.not hol.true) (p_4 y_2))))) (hol.eq hol.bool (hol.eq hol.bool (p_4 (hol.cond A c_1 x_3 y_2)) (hol.and (hol.imp c_1 (p_4 x_3)) (hol.imp (hol.not c_1) (p_4 y_2)))) (hol.eq hol.bool (p_4 (hol.cond A hol.true x_3 y_2)) (hol.and (hol.imp hol.true (p_4 x_3)) (hol.imp (hol.not hol.true) (p_4 y_2))))) (thm_792 A c_1 y_2 x_3 p_4) (thm_796 A c_1 y_2 x_3 p_4).

(; Theorem: |- ((= \lambda _478. ((= (p (((Data.Bool.cond _478) x) y))) ((Data.Bool./\ ((Data.Bool.==> _478) (p x))) ((Data.Bool.==> (Data.Bool.~ _478)) (p y))))) \lambda _478. ((= (p (((Data.Bool.cond _478) x) y))) ((Data.Bool./\ ((Data.Bool.==> _478) (p x))) ((Data.Bool.==> (Data.Bool.~ _478)) (p y))))) ;)

(; dict ;)

def thm_798 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__478_4 : hol.term hol.bool => hol.eq hol.bool (p_3 (hol.cond A __478_4 x_2 y_1)) (hol.and (hol.imp __478_4 (p_3 x_2)) (hol.imp (hol.not __478_4) (p_3 y_1)))) (__478_4 : hol.term hol.bool => hol.eq hol.bool (p_3 (hol.cond A __478_4 x_2 y_1)) (hol.and (hol.imp __478_4 (p_3 x_2)) (hol.imp (hol.not __478_4) (p_3 y_1))))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (__478_4 : hol.term hol.bool => hol.eq hol.bool (p_3 (hol.cond A __478_4 x_2 y_1)) (hol.and (hol.imp __478_4 (p_3 x_2)) (hol.imp (hol.not __478_4) (p_3 y_1)))).

(; Theorem: |- ((= (\lambda _478. ((= (p (((Data.Bool.cond _478) x) y))) ((Data.Bool./\ ((Data.Bool.==> _478) (p x))) ((Data.Bool.==> (Data.Bool.~ _478)) (p y)))) c)) (\lambda _478. ((= (p (((Data.Bool.cond _478) x) y))) ((Data.Bool./\ ((Data.Bool.==> _478) (p x))) ((Data.Bool.==> (Data.Bool.~ _478)) (p y)))) Data.Bool.T)) ;)

(; dict ;)

def thm_799 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool c_1 hol.true) -> hol.proof (hol.eq hol.bool ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) c_1) ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) hol.true)) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool c_1 hol.true) => hol.APP_THM hol.bool hol.bool (__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) (__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_3 y_2)) (hol.and (hol.imp __478_5 (p_4 x_3)) (hol.imp (hol.not __478_5) (p_4 y_2)))) c_1 hol.true (thm_798 A y_2 x_3 p_4) (thm_584 c_1 hyp_1).

(; Theorem: |- ((= ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))) ((= (p (((Data.Bool.cond Data.Bool.T) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (p y))))) ;)

(; dict ;)

def thm_800 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> c_3 : hol.term hol.bool -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool c_3 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1)))) (hol.eq hol.bool (p_4 (hol.cond A hol.true x_2 y_1)) (hol.and (hol.imp hol.true (p_4 x_2)) (hol.imp (hol.not hol.true) (p_4 y_1))))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => c_3 : hol.term hol.bool => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool c_3 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_2 y_1)) (hol.and (hol.imp __478_5 (p_4 x_2)) (hol.imp (hol.not __478_5) (p_4 y_1)))) c_3) ((__478_5 : hol.term hol.bool => hol.eq hol.bool (p_4 (hol.cond A __478_5 x_2 y_1)) (hol.and (hol.imp __478_5 (p_4 x_2)) (hol.imp (hol.not __478_5) (p_4 y_1)))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1)))) (hol.eq hol.bool (p_4 (hol.cond A hol.true x_2 y_1)) (hol.and (hol.imp hol.true (p_4 x_2)) (hol.imp (hol.not hol.true) (p_4 y_1))))) (thm_797 A c_3 y_1 x_2 p_4) (thm_799 A c_3 y_1 x_2 p_4 hyp_1).

(; Theorem: |- ((= ((= (p (((Data.Bool.cond Data.Bool.T) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (p y))))) ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))) ;)

(; dict ;)

def thm_801 : A : hol.type -> c_1 : hol.term hol.bool -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool c_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_4 (hol.cond A hol.true x_3 y_2)) (hol.and (hol.imp hol.true (p_4 x_3)) (hol.imp (hol.not hol.true) (p_4 y_2)))) (hol.eq hol.bool (p_4 (hol.cond A c_1 x_3 y_2)) (hol.and (hol.imp c_1 (p_4 x_3)) (hol.imp (hol.not c_1) (p_4 y_2))))) :=
  A : hol.type => c_1 : hol.term hol.bool => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool c_1 hol.true) => hol.SYM hol.bool (hol.eq hol.bool (p_4 (hol.cond A c_1 x_3 y_2)) (hol.and (hol.imp c_1 (p_4 x_3)) (hol.imp (hol.not c_1) (p_4 y_2)))) (hol.eq hol.bool (p_4 (hol.cond A hol.true x_3 y_2)) (hol.and (hol.imp hol.true (p_4 x_3)) (hol.imp (hol.not hol.true) (p_4 y_2)))) (thm_800 A y_2 x_3 c_1 p_4 hyp_1).

(; Theorem: |- ((= (p (((Data.Bool.cond Data.Bool.T) x) y))) (p x)) ;)

(; dict ;)

def thm_802 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_3 (hol.cond A hol.true x_2 y_1)) (p_3 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM A hol.bool p_3 p_3 (hol.cond A hol.true x_2 y_1) x_2 (thm_723 A p_3) (thm_384 A y_1 x_2).

(; Theorem: |- ((= (= (p (((Data.Bool.cond Data.Bool.T) x) y)))) (= (p x))) ;)

(; dict ;)

def thm_803 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (p_3 (hol.cond A hol.true x_2 y_1))) (hol.eq hol.bool (p_3 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (p_3 (hol.cond A hol.true x_2 y_1)) (p_3 x_2) thm_38 (thm_802 A y_1 x_2 p_3).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) (p x))) (p x)) ;)

(; dict ;)

def thm_804 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp hol.true (p_2 x_1)) (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_733 t_1) (p_2 x_1).

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool.==> Data.Bool.T) (p x)))) (Data.Bool./\ (p x))) ;)

(; dict ;)

def thm_805 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.imp hol.true (p_2 x_1))) (hol.and (p_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.imp hol.true (p_2 x_1)) (p_2 x_1) thm_103 (thm_804 A x_1 p_2).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.~ Data.Bool.T))) (Data.Bool.==> Data.Bool.F)) ;)

(; dict ;)

def thm_806 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.not hol.true)) (hol.imp hol.false)) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.not hol.true) hol.false thm_644 thm_3.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (p y))) ((Data.Bool.==> Data.Bool.F) (p y))) ;)

(; dict ;)

def thm_807 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not hol.true) (p_2 y_1)) (hol.imp hol.false (p_2 y_1))) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.not hol.true)) (hol.imp hol.false) (p_2 y_1) (p_2 y_1) thm_806 (thm_776 A y_1 p_2).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) (p y))) Data.Bool.T) ;)

(; dict ;)

def thm_808 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp hol.false (p_2 y_1)) hol.true) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_741 t_1) (p_2 y_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (p y))) Data.Bool.T) ;)

(; dict ;)

def thm_809 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not hol.true) (p_2 y_1)) hol.true) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.imp (hol.not hol.true) (p_2 y_1)) (hol.imp hol.false (p_2 y_1)) hol.true (thm_807 A y_1 p_2) (thm_808 A y_1 p_2).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (p y)))) ((Data.Bool./\ (p x)) Data.Bool.T)) ;)

(; dict ;)

def thm_810 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (hol.imp hol.true (p_3 x_2)) (hol.imp (hol.not hol.true) (p_3 y_1))) (hol.and (p_3 x_2) hol.true)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.and (hol.imp hol.true (p_3 x_2))) (hol.and (p_3 x_2)) (hol.imp (hol.not hol.true) (p_3 y_1)) hol.true (thm_805 A x_2 p_3) (thm_809 A y_1 p_3).

(; Theorem: |- ((= ((Data.Bool./\ (p x)) Data.Bool.T)) (p x)) ;)

(; dict ;)

def thm_811 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (p_2 x_1) hol.true) (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_171 t_1) (p_2 x_1).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (p y)))) (p x)) ;)

(; dict ;)

def thm_812 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (hol.imp hol.true (p_3 x_2)) (hol.imp (hol.not hol.true) (p_3 y_1))) (p_3 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.and (hol.imp hol.true (p_3 x_2)) (hol.imp (hol.not hol.true) (p_3 y_1))) (hol.and (p_3 x_2) hol.true) (p_3 x_2) (thm_810 A y_1 x_2 p_3) (thm_811 A x_2 p_3).

(; Theorem: |- ((= ((= (p (((Data.Bool.cond Data.Bool.T) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (p y))))) ((= (p x)) (p x))) ;)

(; dict ;)

def thm_813 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_3 (hol.cond A hol.true x_2 y_1)) (hol.and (hol.imp hol.true (p_3 x_2)) (hol.imp (hol.not hol.true) (p_3 y_1)))) (hol.eq hol.bool (p_3 x_2) (p_3 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (p_3 (hol.cond A hol.true x_2 y_1))) (hol.eq hol.bool (p_3 x_2)) (hol.and (hol.imp hol.true (p_3 x_2)) (hol.imp (hol.not hol.true) (p_3 y_1))) (p_3 x_2) (thm_803 A y_1 x_2 p_3) (thm_812 A y_1 x_2 p_3).

(; Theorem: |- ((= ((= (p x)) (p x))) Data.Bool.T) ;)

(; dict ;)

def thm_814 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_2 x_1) (p_2 x_1)) hol.true) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (x_1 : hol.term hol.bool => thm_212 x_1) (p_2 x_1).

(; Theorem: |- ((= ((= (p (((Data.Bool.cond Data.Bool.T) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (p y))))) Data.Bool.T) ;)

(; dict ;)

def thm_815 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_3 (hol.cond A hol.true x_2 y_1)) (hol.and (hol.imp hol.true (p_3 x_2)) (hol.imp (hol.not hol.true) (p_3 y_1)))) hol.true) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (p_3 (hol.cond A hol.true x_2 y_1)) (hol.and (hol.imp hol.true (p_3 x_2)) (hol.imp (hol.not hol.true) (p_3 y_1)))) (hol.eq hol.bool (p_3 x_2) (p_3 x_2)) hol.true (thm_813 A y_1 x_2 p_3) (thm_814 A x_2 p_3).

(; Theorem: |- ((= Data.Bool.T) ((= (p (((Data.Bool.cond Data.Bool.T) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (p y))))) ;)

(; dict ;)

def thm_816 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (p_3 (hol.cond A hol.true x_2 y_1)) (hol.and (hol.imp hol.true (p_3 x_2)) (hol.imp (hol.not hol.true) (p_3 y_1))))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (p_3 (hol.cond A hol.true x_2 y_1)) (hol.and (hol.imp hol.true (p_3 x_2)) (hol.imp (hol.not hol.true) (p_3 y_1)))) hol.true (thm_815 A y_1 x_2 p_3).

(; Theorem: |- ((= (p (((Data.Bool.cond Data.Bool.T) x) y))) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) (p x))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (p y)))) ;)

(; dict ;)

def thm_817 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_3 (hol.cond A hol.true x_2 y_1)) (hol.and (hol.imp hol.true (p_3 x_2)) (hol.imp (hol.not hol.true) (p_3 y_1)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.EQ_MP hol.true (hol.eq hol.bool (p_3 (hol.cond A hol.true x_2 y_1)) (hol.and (hol.imp hol.true (p_3 x_2)) (hol.imp (hol.not hol.true) (p_3 y_1)))) (thm_816 A y_1 x_2 p_3) thm_15.

(; Theorem: |- ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))) ;)

(; dict ;)

def thm_818 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> c_3 : hol.term hol.bool -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool c_3 hol.true) -> hol.proof (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => c_3 : hol.term hol.bool => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool c_3 hol.true) => hol.EQ_MP (hol.eq hol.bool (p_4 (hol.cond A hol.true x_2 y_1)) (hol.and (hol.imp hol.true (p_4 x_2)) (hol.imp (hol.not hol.true) (p_4 y_1)))) (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1)))) (thm_801 A c_3 y_1 x_2 p_4 hyp_1) (thm_817 A y_1 x_2 p_4).

(; Theorem: |- ((Data.Bool.==> ((= c) Data.Bool.T)) ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))) ;)

(; dict ;)

def thm_819 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> c_4 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool c_4 hol.true) (hol.eq hol.bool (p_3 (hol.cond A c_4 x_2 y_1)) (hol.and (hol.imp c_4 (p_3 x_2)) (hol.imp (hol.not c_4) (p_3 y_1))))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => c_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool c_4 hol.true) => thm_818 A y_1 x_2 c_4 p_3 hyp_1.

(; Theorem: |- ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))) ;)

(; dict ;)

def thm_820 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> c_3 : hol.term hol.bool -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.false) (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1))))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.true) (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1))))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool c_3 hol.true) (hol.eq hol.bool c_3 hol.false)) -> hol.proof (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => c_3 : hol.term hol.bool => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.false) (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1))))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.true) (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1))))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool c_3 hol.true) (hol.eq hol.bool c_3 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_269 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool c_3 hol.false) (hol.eq hol.bool c_3 hol.true) (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1)))) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))) ;)

(; dict ;)

def thm_821 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> c_3 : hol.term hol.bool -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.false) (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1))))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.true) (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1))))) -> hol.proof (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => c_3 : hol.term hol.bool => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.false) (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1))))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.true) (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1))))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool c_3 hol.true) (hol.eq hol.bool c_3 hol.false)) (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1)))) (thm_601 c_3) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool c_3 hol.true) (hol.eq hol.bool c_3 hol.false)) => thm_820 A y_1 x_2 c_3 p_4 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))) ;)

(; dict ;)

def thm_822 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> c_3 : hol.term hol.bool -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.false) (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1))))) -> hol.proof (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => c_3 : hol.term hol.bool => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.false) (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1))))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool c_3 hol.true) (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1))))) (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1)))) (thm_819 A y_1 x_2 p_4 c_3) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.true) (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1))))) => thm_821 A y_1 x_2 c_3 p_4 hyp_1 hyp_2).

(; Theorem: |- ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))) ;)

(; dict ;)

def thm_823 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> c_3 : hol.term hol.bool -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => c_3 : hol.term hol.bool => p_4 : hol.term (hol.arr A hol.bool) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool c_3 hol.false) (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1))))) (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1)))) (thm_789 A y_1 x_2 p_4 c_3) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool c_3 hol.false) (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1))))) => thm_822 A y_1 x_2 c_3 p_4 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))) ;)

(; dict ;)

def thm_824 : A : hol.type -> x_1 : hol.term A -> c_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 (hol.cond A c_2 x_1 y_4)) (hol.and (hol.imp c_2 (p_3 x_1)) (hol.imp (hol.not c_2) (p_3 y_4))))) :=
  A : hol.type => x_1 : hol.term A => c_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => y_4 : hol.term A => thm_823 A y_4 x_1 c_2 p_3.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))))) ;)

(; dict ;)

def thm_825 : A : hol.type -> c_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 (hol.cond A c_1 x_3 y_4)) (hol.and (hol.imp c_1 (p_2 x_3)) (hol.imp (hol.not c_1) (p_2 y_4)))))) :=
  A : hol.type => c_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => hol.EQ_MP (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 (hol.cond A c_1 x_3 y_4)) (hol.and (hol.imp c_1 (p_2 x_3)) (hol.imp (hol.not c_1) (p_2 y_4))))) (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 (hol.cond A c_1 x_3 y_4)) (hol.and (hol.imp c_1 (p_2 x_3)) (hol.imp (hol.not c_1) (p_2 y_4))))) (thm_710 A x_3 c_1 p_2) (thm_824 A x_3 c_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))))) ;)

(; dict ;)

def thm_826 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => c_2 : hol.term hol.bool => hol.EQ_MP (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4)))))) (thm_707 A c_2 p_1) (thm_825 A c_2 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))))))) ;)

(; dict ;)

def thm_827 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4)))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4))))))) (hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4))))))) (thm_704 A p_1) (thm_826 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))))))) ;)

(; thm ;)

def thm_828 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4)))))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4)))))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4)))))))) (thm_701 A) (thm_827 A).
