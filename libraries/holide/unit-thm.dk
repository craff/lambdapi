
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME unit_2Dthm.

Data_2EUnit_2Eunit : hol.type.

Data_2EUnit_2E_28_29 : A : hol.type -> hol.term A.

Data_2EBool_2E_3F : A : hol.type -> hol.term A.

Data_2EBool_2E_3F_21 : A : hol.type -> hol.term A.

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))).

(; axiom ;)

thm_1 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))).

(; axiom ;)

thm_2 : hol.proof (hol.forall Data_2EUnit_2Eunit (v_1 : hol.term Data_2EUnit_2Eunit => hol.eq Data_2EUnit_2Eunit v_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))).

(; axiom ;)

thm_3 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)).

(; axiom ;)

thm_4 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1)).

(; axiom ;)

thm_5 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))).

(; axiom ;)

thm_6 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)).

(; axiom ;)

thm_7 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true)).

(; axiom ;)

thm_8 : hol.proof hol.true.

(; axiom ;)

thm_9 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.imp t_1 t_1)).

(; axiom ;)

thm_10 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))).

(; axiom ;)

thm_11 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) q_2))).

(; axiom ;)

thm_12 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))))).

(; axiom ;)

thm_13 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)).

(; axiom ;)

thm_14 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)).

(; axiom ;)

thm_15 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)).

(; axiom ;)

thm_16 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)).

(; axiom ;)

thm_17 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)).

(; axiom ;)

thm_18 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_19 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A Data_2EUnit_2Eunit) hol.bool) hol.bool) (hol.forall (hol.arr A Data_2EUnit_2Eunit)) (hol.forall (hol.arr A Data_2EUnit_2Eunit))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A Data_2EUnit_2Eunit) hol.bool) hol.bool) (hol.forall (hol.arr A Data_2EUnit_2Eunit)).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= f) g))) \lambda f. (Data.Bool.! \lambda g. ((= f) g))) ;)

(; dict ;)

def thm_20 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A Data_2EUnit_2Eunit) hol.bool) (f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2)) (f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A Data_2EUnit_2Eunit) hol.bool) (f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2)).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= f) g))) \lambda f. (Data.Bool.! \lambda g. ((= f) g))) ;)

(; dict ;)

def thm_21 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A Data_2EUnit_2Eunit) hol.bool) (f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2)) (f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A Data_2EUnit_2Eunit) hol.bool) (f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2)) (f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2)) (f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2)) (thm_20 A) (thm_20 A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= f) g)))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= f) g)))) ;)

(; dict ;)

def thm_22 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A Data_2EUnit_2Eunit) (f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2))) (hol.forall (hol.arr A Data_2EUnit_2Eunit) (f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2)))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A Data_2EUnit_2Eunit) hol.bool) hol.bool (hol.forall (hol.arr A Data_2EUnit_2Eunit)) (hol.forall (hol.arr A Data_2EUnit_2Eunit)) (f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2)) (f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2)) (thm_19 A) (thm_21 A).

(; Theorem: |- ((= \lambda g. ((= f) g)) \lambda g. ((= f) g)) ;)

(; dict ;)

def thm_23 : A : hol.type -> f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> hol.proof (hol.eq (hol.arr (hol.arr A Data_2EUnit_2Eunit) hol.bool) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2)) :=
  A : hol.type => f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.REFL (hol.arr (hol.arr A Data_2EUnit_2Eunit) hol.bool) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2).

(; Theorem: |- ((= \lambda g. ((= f) g)) \lambda g. ((= f) g)) ;)

(; dict ;)

def thm_24 : A : hol.type -> f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> hol.proof (hol.eq (hol.arr (hol.arr A Data_2EUnit_2Eunit) hol.bool) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2)) :=
  A : hol.type => f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.TRANS (hol.arr (hol.arr A Data_2EUnit_2Eunit) hol.bool) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2) (thm_23 A f_1) (thm_23 A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= f) g))) (Data.Bool.! \lambda g. ((= f) g))) ;)

(; dict ;)

def thm_25 : A : hol.type -> f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2)) (hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2))) :=
  A : hol.type => f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.APP_THM (hol.arr (hol.arr A Data_2EUnit_2Eunit) hol.bool) hol.bool (hol.forall (hol.arr A Data_2EUnit_2Eunit)) (hol.forall (hol.arr A Data_2EUnit_2Eunit)) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2) (thm_19 A) (thm_24 A f_1).

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_26 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))).

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_27 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (thm_26 B A g_1 f_2) (thm_26 B A g_1 f_2).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_28 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)).

(; Theorem: |- ((= ((= ((= x) y)) ((= y) x))) ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_29 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)).

(; Theorem: |- ((= ((= ((= x) y)) ((= y) x))) ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_30 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_29 A y_1 x_2) (thm_29 A y_1 x_2).

(; Theorem: |- (Data.Bool.! \lambda y. ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_31 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => thm_0 A x_1.

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_32 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => thm_31 A x_2 y_1.

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_33 : y_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_2 y_1) (hol.eq hol.bool y_1 x_2)) :=
  y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => (A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_30 A y_1 x_2) (thm_32 A y_1 x_2)) hol.bool y_1 x_2.

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_34 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => (y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => thm_33 y_1 x_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1).

(; Theorem: |- ((= \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_35 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM (hol.arr A B) hol.bool (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)) (g_2 : hol.term (hol.arr A B) => thm_34 B A g_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)))) ;)

(; dict ;)

def thm_36 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)) (thm_28 B A) (thm_35 B A f_1).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)))) ;)

(; dict ;)

def thm_37 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A B) hol.bool (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) (f_1 : hol.term (hol.arr A B) => thm_36 B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) ;)

(; dict ;)

def thm_38 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) (thm_28 B A) (thm_37 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))))) ;)

(; dict ;)

def thm_39 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (thm_38 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) ;)

(; dict ;)

def thm_40 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (thm_39 B A) (thm_1 B A).

(; Theorem: |- (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_41 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => thm_40 B A f_1.

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_42 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => thm_41 B A f_2 g_1.

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_43 : A : hol.type -> g_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> f_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A Data_2EUnit_2Eunit) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq Data_2EUnit_2Eunit (f_2 x_3) (g_1 x_3)))) :=
  A : hol.type => g_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => f_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (thm_27 B A g_1 f_2) (thm_42 B A g_1 f_2)) Data_2EUnit_2Eunit A g_1 f_2.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)) ;)

(; dict ;)

def thm_44 : A : hol.type -> g_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> f_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq Data_2EUnit_2Eunit (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A Data_2EUnit_2Eunit) f_2 g_1)) :=
  A : hol.type => g_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => f_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.SYM hol.bool (hol.eq (hol.arr A Data_2EUnit_2Eunit) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq Data_2EUnit_2Eunit (f_2 x_3) (g_1 x_3))) (thm_43 A g_1 f_2).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_45 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= \lambda x. ((= (f x)) (g x))) \lambda x. ((= (f x)) (g x))) ;)

(; dict ;)

def thm_46 : A : hol.type -> g_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> f_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.eq Data_2EUnit_2Eunit (f_2 x_3) (g_1 x_3)) (x_3 : hol.term A => hol.eq Data_2EUnit_2Eunit (f_2 x_3) (g_1 x_3))) :=
  A : hol.type => g_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => f_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.REFL (hol.arr A hol.bool) (x_3 : hol.term A => hol.eq Data_2EUnit_2Eunit (f_2 x_3) (g_1 x_3)).

(; Theorem: |- ((= \lambda x. ((= (f x)) (g x))) \lambda x. ((= (f x)) (g x))) ;)

(; dict ;)

def thm_47 : A : hol.type -> g_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> f_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.eq Data_2EUnit_2Eunit (f_2 x_3) (g_1 x_3)) (x_3 : hol.term A => hol.eq Data_2EUnit_2Eunit (f_2 x_3) (g_1 x_3))) :=
  A : hol.type => g_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => f_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.TRANS (hol.arr A hol.bool) (x_3 : hol.term A => hol.eq Data_2EUnit_2Eunit (f_2 x_3) (g_1 x_3)) (x_3 : hol.term A => hol.eq Data_2EUnit_2Eunit (f_2 x_3) (g_1 x_3)) (x_3 : hol.term A => hol.eq Data_2EUnit_2Eunit (f_2 x_3) (g_1 x_3)) (thm_46 A g_1 f_2) (thm_46 A g_1 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_48 : A : hol.type -> g_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> f_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq Data_2EUnit_2Eunit (f_2 x_3) (g_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.eq Data_2EUnit_2Eunit (f_2 x_3) (g_1 x_3)))) :=
  A : hol.type => g_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => f_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.eq Data_2EUnit_2Eunit (f_2 x_3) (g_1 x_3)) (x_3 : hol.term A => hol.eq Data_2EUnit_2Eunit (f_2 x_3) (g_1 x_3)) (thm_45 A) (thm_47 A g_1 f_2).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_49 : hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit (hol.arr Data_2EUnit_2Eunit hol.bool)) (hol.eq Data_2EUnit_2Eunit) (hol.eq Data_2EUnit_2Eunit)) :=
  hol.REFL (hol.arr Data_2EUnit_2Eunit (hol.arr Data_2EUnit_2Eunit hol.bool)) (hol.eq Data_2EUnit_2Eunit).

(; Theorem: |- ((= ((= v) Data.Unit.())) ((= v) Data.Unit.())) ;)

(; dict ;)

def thm_50 : v_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq hol.bool (hol.eq Data_2EUnit_2Eunit v_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.eq Data_2EUnit_2Eunit v_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) :=
  v_1 : hol.term Data_2EUnit_2Eunit => hol.REFL hol.bool (hol.eq Data_2EUnit_2Eunit v_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)).

(; Theorem: |- ((= ((= v) Data.Unit.())) ((= v) Data.Unit.())) ;)

(; dict ;)

def thm_51 : v_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq hol.bool (hol.eq Data_2EUnit_2Eunit v_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.eq Data_2EUnit_2Eunit v_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) :=
  v_1 : hol.term Data_2EUnit_2Eunit => hol.TRANS hol.bool (hol.eq Data_2EUnit_2Eunit v_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.eq Data_2EUnit_2Eunit v_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.eq Data_2EUnit_2Eunit v_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (thm_50 v_1) (thm_50 v_1).

(; Theorem: |- ((= v) Data.Unit.()) ;)

(; dict ;)

def thm_52 : v_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq Data_2EUnit_2Eunit v_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) :=
  v_1 : hol.term Data_2EUnit_2Eunit => thm_2 v_1.

(; Theorem: |- ((= (f x)) Data.Unit.()) ;)

(; dict ;)

def thm_53 : A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> hol.proof (hol.eq Data_2EUnit_2Eunit (f_2 x_1) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) :=
  A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => (v_1 : hol.term Data_2EUnit_2Eunit => hol.EQ_MP (hol.eq Data_2EUnit_2Eunit v_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.eq Data_2EUnit_2Eunit v_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (thm_51 v_1) (thm_52 v_1)) (f_2 x_1).

(; Theorem: |- ((= (= (f x))) (= Data.Unit.())) ;)

(; dict ;)

def thm_54 : A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit hol.bool) (hol.eq Data_2EUnit_2Eunit (f_2 x_1)) (hol.eq Data_2EUnit_2Eunit (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) :=
  A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.APP_THM Data_2EUnit_2Eunit (hol.arr Data_2EUnit_2Eunit hol.bool) (hol.eq Data_2EUnit_2Eunit) (hol.eq Data_2EUnit_2Eunit) (f_2 x_1) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit) thm_49 (thm_53 A x_1 f_2).

(; Theorem: |- ((= (g x)) Data.Unit.()) ;)

(; dict ;)

def thm_55 : A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> hol.proof (hol.eq Data_2EUnit_2Eunit (g_2 x_1) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) :=
  A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => (v_1 : hol.term Data_2EUnit_2Eunit => thm_52 v_1) (g_2 x_1).

(; Theorem: |- ((= ((= (f x)) (g x))) ((= Data.Unit.()) Data.Unit.())) ;)

(; dict ;)

def thm_56 : A : hol.type -> g_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> hol.proof (hol.eq hol.bool (hol.eq Data_2EUnit_2Eunit (f_3 x_2) (g_1 x_2)) (hol.eq Data_2EUnit_2Eunit (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) :=
  A : hol.type => g_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => x_2 : hol.term A => f_3 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.APP_THM Data_2EUnit_2Eunit hol.bool (hol.eq Data_2EUnit_2Eunit (f_3 x_2)) (hol.eq Data_2EUnit_2Eunit (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (g_1 x_2) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit) (thm_54 A x_2 f_3) (thm_55 A x_2 g_1).

(; Theorem: |- ((= ((= Data.Unit.()) Data.Unit.())) ((= (f x)) (g x))) ;)

(; dict ;)

def thm_57 : A : hol.type -> g_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> hol.proof (hol.eq hol.bool (hol.eq Data_2EUnit_2Eunit (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.eq Data_2EUnit_2Eunit (f_3 x_2) (g_1 x_2))) :=
  A : hol.type => g_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => x_2 : hol.term A => f_3 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.SYM hol.bool (hol.eq Data_2EUnit_2Eunit (f_3 x_2) (g_1 x_2)) (hol.eq Data_2EUnit_2Eunit (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (thm_56 A g_1 x_2 f_3).

(; Theorem: |- ((= Data.Unit.()) Data.Unit.()) ;)

(; dict ;)

def thm_58 : hol.proof (hol.eq Data_2EUnit_2Eunit (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) :=
  hol.REFL Data_2EUnit_2Eunit (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit).

(; Theorem: |- ((= (f x)) (g x)) ;)

(; dict ;)

def thm_59 : A : hol.type -> g_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> hol.proof (hol.eq Data_2EUnit_2Eunit (f_3 x_2) (g_1 x_2)) :=
  A : hol.type => g_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => x_2 : hol.term A => f_3 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.EQ_MP (hol.eq Data_2EUnit_2Eunit (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.eq Data_2EUnit_2Eunit (f_3 x_2) (g_1 x_2)) (thm_57 A g_1 x_2 f_3) thm_58.

(; Theorem: |- (Data.Bool.! \lambda x. ((= (f x)) (g x))) ;)

(; dict ;)

def thm_60 : A : hol.type -> g_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> f_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.eq Data_2EUnit_2Eunit (f_2 x_3) (g_1 x_3))) :=
  A : hol.type => g_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => f_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => x_3 : hol.term A => thm_59 A g_1 x_3 f_2.

(; Theorem: |- ((= f) g) ;)

(; dict ;)

def thm_61 : A : hol.type -> g_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> f_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> hol.proof (hol.eq (hol.arr A Data_2EUnit_2Eunit) f_2 g_1) :=
  A : hol.type => g_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => f_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.EQ_MP (hol.forall A (x_3 : hol.term A => hol.eq Data_2EUnit_2Eunit (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A Data_2EUnit_2Eunit) f_2 g_1) (thm_44 A g_1 f_2) (hol.EQ_MP (hol.forall A (x_3 : hol.term A => hol.eq Data_2EUnit_2Eunit (f_2 x_3) (g_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.eq Data_2EUnit_2Eunit (f_2 x_3) (g_1 x_3))) (thm_48 A g_1 f_2) (thm_60 A g_1 f_2)).

(; Theorem: |- (Data.Bool.! \lambda g. ((= f) g)) ;)

(; dict ;)

def thm_62 : A : hol.type -> f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) -> hol.proof (hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2)) :=
  A : hol.type => f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => thm_61 A g_2 f_1.

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= f) g))) ;)

(; dict ;)

def thm_63 : A : hol.type -> hol.proof (hol.forall (hol.arr A Data_2EUnit_2Eunit) (f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2))) :=
  A : hol.type => f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.EQ_MP (hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2)) (hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2)) (thm_25 A f_1) (thm_62 A f_1).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= f) g))) ;)

(; thm ;)

def thm_64 : A : hol.type -> hol.proof (hol.forall (hol.arr A Data_2EUnit_2Eunit) (f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A Data_2EUnit_2Eunit) (f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2))) (hol.forall (hol.arr A Data_2EUnit_2Eunit) (f_1 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.forall (hol.arr A Data_2EUnit_2Eunit) (g_2 : hol.term (hol.arr A Data_2EUnit_2Eunit) => hol.eq (hol.arr A Data_2EUnit_2Eunit) f_1 g_2))) (thm_22 A) (thm_63 A).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_65 : hol.proof (hol.eq (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool)) (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool))) :=
  hol.REFL (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool)).

(; Theorem: |- ((= Data.Bool.==>) Data.Bool.==>) ;)

(; dict ;)

def thm_66 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp hol.imp) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp.

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_67 : p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) -> hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit hol.bool) p_1 p_1) :=
  p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.REFL (hol.arr Data_2EUnit_2Eunit hol.bool) p_1.

(; Theorem: |- ((= (p Data.Unit.())) (p Data.Unit.())) ;)

(; dict ;)

def thm_68 : p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) -> hol.proof (hol.eq hol.bool (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) :=
  p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.APP_THM Data_2EUnit_2Eunit hol.bool p_1 p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit) (thm_67 p_1) thm_58.

(; Theorem: |- ((= (Data.Bool.==> (p Data.Unit.()))) (Data.Bool.==> (p Data.Unit.()))) ;)

(; dict ;)

def thm_69 : p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) (hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) :=
  p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) thm_66 (thm_68 p_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_70 : hol.proof (hol.eq (hol.arr (hol.arr Data_2EUnit_2Eunit hol.bool) hol.bool) (hol.forall Data_2EUnit_2Eunit) (hol.forall Data_2EUnit_2Eunit)) :=
  hol.REFL (hol.arr (hol.arr Data_2EUnit_2Eunit hol.bool) hol.bool) (hol.forall Data_2EUnit_2Eunit).

(; Theorem: |- ((= x) Data.Unit.()) ;)

(; dict ;)

def thm_71 : x_1 : hol.term Data_2EUnit_2Eunit -> hol.proof (hol.eq Data_2EUnit_2Eunit x_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) :=
  x_1 : hol.term Data_2EUnit_2Eunit => (v_1 : hol.term Data_2EUnit_2Eunit => thm_52 v_1) x_1.

(; Theorem: |- ((= (p x)) (p Data.Unit.())) ;)

(; dict ;)

def thm_72 : x_1 : hol.term Data_2EUnit_2Eunit -> p_2 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) -> hol.proof (hol.eq hol.bool (p_2 x_1) (p_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) :=
  x_1 : hol.term Data_2EUnit_2Eunit => p_2 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.APP_THM Data_2EUnit_2Eunit hol.bool p_2 p_2 x_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit) (thm_67 p_2) (thm_71 x_1).

(; Theorem: |- ((= \lambda x. (p x)) \lambda x. (p Data.Unit.())) ;)

(; dict ;)

def thm_73 : p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) -> hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit hol.bool) (x_2 : hol.term Data_2EUnit_2Eunit => p_1 x_2) (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) :=
  p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.ABS_THM Data_2EUnit_2Eunit hol.bool (x_2 : hol.term Data_2EUnit_2Eunit => p_1 x_2) (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_2 : hol.term Data_2EUnit_2Eunit => thm_72 x_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (p Data.Unit.()))) ;)

(; dict ;)

def thm_74 : p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 x_2)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) :=
  p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.APP_THM (hol.arr Data_2EUnit_2Eunit hol.bool) hol.bool (hol.forall Data_2EUnit_2Eunit) (hol.forall Data_2EUnit_2Eunit) (x_2 : hol.term Data_2EUnit_2Eunit => p_1 x_2) (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) thm_70 (thm_73 p_1).

(; Theorem: |- ((= ((Data.Bool.==> (p Data.Unit.())) (Data.Bool.! \lambda x. (p x)))) ((Data.Bool.==> (p Data.Unit.())) (Data.Bool.! \lambda x. (p Data.Unit.())))) ;)

(; dict ;)

def thm_75 : p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 x_2))) (hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))))) :=
  p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.APP_THM hol.bool hol.bool (hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) (hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 x_2)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) (thm_69 p_1) (thm_74 p_1).

(; Theorem: |- ((= \lambda p. ((Data.Bool.==> (p Data.Unit.())) (Data.Bool.! \lambda x. (p x)))) \lambda p. ((Data.Bool.==> (p Data.Unit.())) (Data.Bool.! \lambda x. (p Data.Unit.())))) ;)

(; dict ;)

def thm_76 : hol.proof (hol.eq (hol.arr (hol.arr Data_2EUnit_2Eunit hol.bool) hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 x_2))) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))))) :=
  hol.ABS_THM (hol.arr Data_2EUnit_2Eunit hol.bool) hol.bool (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 x_2))) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => thm_75 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((Data.Bool.==> (p Data.Unit.())) (Data.Bool.! \lambda x. (p x))))) (Data.Bool.! \lambda p. ((Data.Bool.==> (p Data.Unit.())) (Data.Bool.! \lambda x. (p Data.Unit.()))))) ;)

(; dict ;)

def thm_77 : hol.proof (hol.eq hol.bool (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 x_2)))) (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))))) :=
  hol.APP_THM (hol.arr (hol.arr Data_2EUnit_2Eunit hol.bool) hol.bool) hol.bool (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool)) (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool)) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 x_2))) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) thm_65 thm_76.

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((Data.Bool.==> (p Data.Unit.())) (Data.Bool.! \lambda x. (p Data.Unit.()))))) (Data.Bool.! \lambda p. ((Data.Bool.==> (p Data.Unit.())) (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_78 : hol.proof (hol.eq hol.bool (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))))) (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 x_2))))) :=
  hol.SYM hol.bool (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 x_2)))) (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))))) thm_77.

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_79 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_80 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (thm_79 A t_1) (thm_79 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_81 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_3 A t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_82 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => t_1)) t_1) :=
  t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (thm_80 A t_1) (thm_81 A t_1)) Data_2EUnit_2Eunit t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (p Data.Unit.()))) (p Data.Unit.())) ;)

(; dict ;)

def thm_83 : p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) :=
  p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => (t_1 : hol.term hol.bool => thm_82 t_1) (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)).

(; Theorem: |- ((= ((Data.Bool.==> (p Data.Unit.())) (Data.Bool.! \lambda x. (p Data.Unit.())))) ((Data.Bool.==> (p Data.Unit.())) (p Data.Unit.()))) ;)

(; dict ;)

def thm_84 : p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) (hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) :=
  p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.APP_THM hol.bool hol.bool (hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) (hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (thm_69 p_1) (thm_83 p_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_85 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_86 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_85 t_1) (thm_85 t_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_87 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool) (hol.forall hol.bool)) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_88 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_89 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_88 thm_88.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) ;)

(; dict ;)

def thm_90 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_87 thm_89.

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_91 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_92 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_91 t_1) (thm_91 t_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_93 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_4 t_1.

(; Theorem: |- ((= (= ((Data.Bool./\ p) q))) (= ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_94 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_95 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q))) ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_96 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_94 q_1 p_2) (thm_95 q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool./\ p))) (= (Data.Bool./\ p))) ;)

(; dict ;)

def thm_97 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_98 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1.

(; Theorem: |- ((= ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p))) ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_99 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)) (thm_97 p_1) (thm_98 p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_100 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 p_1) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool p_1.

(; Theorem: |- ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) ;)

(; dict ;)

def thm_101 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1 p_1 thm_5 (thm_100 p_1).

(; Theorem: |- ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_102 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) (thm_99 p_1) (thm_101 p_1).

(; Theorem: |- ((= q) q) ;)

(; dict ;)

def thm_103 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_1 q_1) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) ;)

(; dict ;)

def thm_104 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1 q_1 (thm_102 p_2) (thm_103 q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_105 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) (thm_96 q_1 p_2) (thm_104 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_106 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_107 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hol.EQ_MP (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_105 q_1 p_2) (thm_106 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) q))) q) ;)

(; dict ;)

def thm_108 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 q_1)) q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_107 q_1 p_2 hyp_1 q_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_109 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_110 : q_1 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof q_1 :=
  q_1 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_111 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.PROP_EXT p_2 q_1 (hyp_3 : hol.proof q_1 => thm_109 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_110 q_1 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_112 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.EQ_MP p_1 q_2 (thm_111 q_2 p_1 hyp_1 hyp_2) (thm_109 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) q) ;)

(; dict ;)

def thm_113 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 q_2) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_112 p_1 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) q)) ;)

(; dict ;)

def thm_114 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_113 p_2 q_1 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_115 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_108 q_2 p_1 hyp_1 (thm_114 q_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_116 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_105 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) x)) ;)

(; dict ;)

def thm_117 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) -> hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) x) ;)

(; dict ;)

def thm_118 : p_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) -> hol.proof (hol.imp q_3 x_2) :=
  p_1 : hol.term hol.bool => x_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) => thm_117 x_2 q_3 p_1 hyp_2 (thm_109 p_1 hyp_1).

(; Theorem: |- x ;)

(; dict ;)

def thm_119 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) -> hol.proof x_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) => thm_118 p_2 x_3 q_1 hyp_1 hyp_3 (thm_110 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x) ;)

(; dict ;)

def thm_120 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.imp (hol.imp p_3 (hol.imp q_2 x_1)) x_1) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hyp_3 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => thm_119 q_2 p_3 x_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_121 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => x_3 : hol.term hol.bool => thm_120 x_3 q_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_122 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1) (thm_116 q_1 p_2) (thm_121 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= q) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_123 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool q_2 (hol.and p_1 q_2)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hol.PROP_EXT q_2 (hol.and p_1 q_2) (hyp_2 : hol.proof (hol.and p_1 q_2) => thm_115 p_1 q_2 hyp_2) (hyp_2 : hol.proof q_2 => thm_122 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_124 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_123 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_125 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_92 t_1) (thm_93 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => thm_124 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_126 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_127 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_126 t_1) (thm_126 t_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_128 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => thm_6 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_129 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_123 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_130 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_127 t_1) (thm_128 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => thm_129 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_131 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_132 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_131 t_1) (thm_131 t_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_133 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => thm_7 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_134 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_123 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_135 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_132 t_1) (thm_133 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => thm_134 t_1 hyp_1).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_136 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_137 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_136 thm_136.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) ;)

(; dict ;)

def thm_138 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_87 thm_137.

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_139 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool) (hol.eq hol.bool)) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool).

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_140 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_141 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_140 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_142 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_141 t_1 hyp_1) thm_8.

(; Theorem: |- t ;)

(; dict ;)

def thm_143 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_144 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_143 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_8).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_145 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_142 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_144 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> t) t)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_146 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_145 t_1) (hol.imp t_1 t_1).

(; Theorem: |- ((Data.Bool.==> t) t) ;)

(; dict ;)

def thm_147 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 t_1) :=
  t_1 : hol.term hol.bool => thm_9 t_1.

(; Theorem: |- ((= ((Data.Bool.==> t) t)) Data.Bool.T) ;)

(; dict ;)

def thm_148 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_146 t_1) (thm_147 t_1).

(; Theorem: |- ((= (= ((Data.Bool.==> t) t))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_149 : t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp t_1 t_1) hol.true thm_139 (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_85 t_1) (thm_148 t_1)).

(; Theorem: |- ((= Data.Bool.T) Data.Bool.T) ;)

(; dict ;)

def thm_150 : hol.proof (hol.eq hol.bool hol.true hol.true) :=
  hol.REFL hol.bool hol.true.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_151 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true) hol.true hol.true (thm_149 t_1) thm_150.

(; Theorem: |- ((= ((= Data.Bool.T) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_152 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true) (thm_151 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_153 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_152 t_1) thm_150.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_154 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_123 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_155 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_85 t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) thm_138 thm_153 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => thm_154 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_156 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_157 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_156 t_1) (thm_156 t_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_158 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_10 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_159 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (thm_155 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_157 t_1) (thm_158 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_160 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_135 t_1) (thm_159 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_161 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (thm_130 t_1) (thm_160 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_162 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (thm_125 t_1) (thm_161 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_163 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => thm_162 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_164 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_115 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_165 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) thm_90 thm_163 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => thm_164 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_166 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_115 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_167 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_165 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) => thm_166 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_168 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_115 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_169 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (thm_167 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) => thm_168 t_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) p))) p) ;)

(; dict ;)

def thm_170 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 p_2)) p_2) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_107 q_1 p_2 hyp_1 p_2.

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_171 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.SYM hol.bool p_1 q_2 (thm_111 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_172 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP q_1 p_2 (thm_171 p_2 q_1 hyp_1 hyp_2) (thm_110 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_173 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_172 q_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_174 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_173 p_2 q_1 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_175 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_170 q_1 p_2 hyp_1 (thm_174 q_1 p_2).

(; Theorem: |- ((= ((Data.Bool.==> t) t)) Data.Bool.T) ;)

(; dict ;)

def thm_176 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_175 q_1 p_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> t) t)) Data.Bool.T) ;)

(; dict ;)

def thm_177 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_169 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) => thm_176 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (p Data.Unit.())) (p Data.Unit.()))) Data.Bool.T) ;)

(; dict ;)

def thm_178 : p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) hol.true) :=
  p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_86 t_1) (thm_177 t_1)) (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)).

(; Theorem: |- ((= ((Data.Bool.==> (p Data.Unit.())) (Data.Bool.! \lambda x. (p Data.Unit.())))) Data.Bool.T) ;)

(; dict ;)

def thm_179 : p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) hol.true) :=
  p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.TRANS hol.bool (hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) (hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) hol.true (thm_84 p_1) (thm_178 p_1).

(; Theorem: |- ((= \lambda p. ((Data.Bool.==> (p Data.Unit.())) (Data.Bool.! \lambda x. (p Data.Unit.())))) \lambda p. Data.Bool.T) ;)

(; dict ;)

def thm_180 : hol.proof (hol.eq (hol.arr (hol.arr Data_2EUnit_2Eunit hol.bool) hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.true)) :=
  hol.ABS_THM (hol.arr Data_2EUnit_2Eunit hol.bool) hol.bool (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.true) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => thm_179 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((Data.Bool.==> (p Data.Unit.())) (Data.Bool.! \lambda x. (p Data.Unit.()))))) (Data.Bool.! \lambda p. Data.Bool.T)) ;)

(; dict ;)

def thm_181 : hol.proof (hol.eq hol.bool (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))))) (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.true))) :=
  hol.APP_THM (hol.arr (hol.arr Data_2EUnit_2Eunit hol.bool) hol.bool) hol.bool (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool)) (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool)) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.true) thm_65 thm_180.

(; Theorem: |- ((= ((= (Data.Bool.! \lambda p. t)) t)) ((= (Data.Bool.! \lambda p. t)) t)) ;)

(; dict ;)

def thm_182 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda p. t)) t)) ;)

(; dict ;)

def thm_183 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) (thm_79 A t_1) (thm_182 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. t)) t) ;)

(; dict ;)

def thm_184 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) (thm_183 A t_1) (thm_81 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. t)) t) ;)

(; dict ;)

def thm_185 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool) (p_2 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => t_1)) t_1) :=
  t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_184 A t_1) (hol.arr Data_2EUnit_2Eunit hol.bool) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda p. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_186 : hol.proof (hol.eq hol.bool (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.true)) hol.true) :=
  (t_1 : hol.term hol.bool => thm_185 t_1) hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((Data.Bool.==> (p Data.Unit.())) (Data.Bool.! \lambda x. (p Data.Unit.()))))) Data.Bool.T) ;)

(; dict ;)

def thm_187 : hol.proof (hol.eq hol.bool (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))))) hol.true) :=
  hol.TRANS hol.bool (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))))) (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.true)) hol.true thm_181 thm_186.

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda p. ((Data.Bool.==> (p Data.Unit.())) (Data.Bool.! \lambda x. (p Data.Unit.()))))) ;)

(; dict ;)

def thm_188 : hol.proof (hol.eq hol.bool hol.true (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))))) :=
  hol.SYM hol.bool (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))))) hol.true thm_187.

(; Theorem: |- (Data.Bool.! \lambda p. ((Data.Bool.==> (p Data.Unit.())) (Data.Bool.! \lambda x. (p Data.Unit.())))) ;)

(; dict ;)

def thm_189 : hol.proof (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))))) :=
  hol.EQ_MP hol.true (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))))) thm_188 thm_8.

(; Theorem: |- (Data.Bool.! \lambda p. ((Data.Bool.==> (p Data.Unit.())) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_190 : hol.proof (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 x_2)))) :=
  hol.EQ_MP (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))))) (hol.forall (hol.arr Data_2EUnit_2Eunit hol.bool) (p_1 : hol.term (hol.arr Data_2EUnit_2Eunit hol.bool) => hol.imp (p_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (hol.forall Data_2EUnit_2Eunit (x_2 : hol.term Data_2EUnit_2Eunit => p_1 x_2)))) thm_78 thm_189.

(; Theorem: |- ((= \lambda e. (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e))) \lambda e. (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e))) ;)

(; dict ;)

def thm_191 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (e_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (e_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (e_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)).

(; Theorem: |- ((= \lambda e. (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e))) \lambda e. (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e))) ;)

(; dict ;)

def thm_192 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (e_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (e_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (e_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (e_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (e_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (thm_191 A) (thm_191 A).

(; Theorem: |- ((= (Data.Bool.! \lambda e. (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e)))) (Data.Bool.! \lambda e. (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e)))) ;)

(; dict ;)

def thm_193 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (e_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) (hol.forall A (e_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (e_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (e_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (thm_45 A) (thm_192 A).

(; Theorem: |- ((= (\lambda fn. ((= (fn Data.Unit.())) e) \lambda x. e)) ((= (\lambda x. e Data.Unit.())) e)) ;)

(; dict ;)

def thm_194 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool ((fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (x_2 : hol.term Data_2EUnit_2Eunit => e_1)) (hol.eq A ((x_2 : hol.term Data_2EUnit_2Eunit => e_1) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) :=
  A : hol.type => e_1 : hol.term A => hol.BETA_CONV (hol.arr Data_2EUnit_2Eunit A) hol.bool (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (x_2 : hol.term Data_2EUnit_2Eunit => e_1).

(; Theorem: |- ((= ((= (\lambda x. e Data.Unit.())) e)) (\lambda fn. ((= (fn Data.Unit.())) e) \lambda x. e)) ;)

(; dict ;)

def thm_195 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A ((x_2 : hol.term Data_2EUnit_2Eunit => e_1) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) ((fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (x_2 : hol.term Data_2EUnit_2Eunit => e_1))) :=
  A : hol.type => e_1 : hol.term A => hol.SYM hol.bool ((fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (x_2 : hol.term Data_2EUnit_2Eunit => e_1)) (hol.eq A ((x_2 : hol.term Data_2EUnit_2Eunit => e_1) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (thm_194 A e_1).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_196 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A hol.bool)) (hol.eq A) (hol.eq A)) :=
  A : hol.type => hol.REFL (hol.arr A (hol.arr A hol.bool)) (hol.eq A).

(; Theorem: |- ((= (\lambda x. e Data.Unit.())) e) ;)

(; dict ;)

def thm_197 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq A ((x_2 : hol.term Data_2EUnit_2Eunit => e_1) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) :=
  A : hol.type => e_1 : hol.term A => hol.BETA_CONV Data_2EUnit_2Eunit A (x_2 : hol.term Data_2EUnit_2Eunit => e_1) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit).

(; Theorem: |- ((= (= (\lambda x. e Data.Unit.()))) (= e)) ;)

(; dict ;)

def thm_198 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A ((x_2 : hol.term Data_2EUnit_2Eunit => e_1) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) (hol.eq A e_1)) :=
  A : hol.type => e_1 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) ((x_2 : hol.term Data_2EUnit_2Eunit => e_1) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1 (thm_196 A) (thm_197 A e_1).

(; Theorem: |- ((= e) e) ;)

(; dict ;)

def thm_199 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq A e_1 e_1) :=
  A : hol.type => e_1 : hol.term A => hol.REFL A e_1.

(; Theorem: |- ((= ((= (\lambda x. e Data.Unit.())) e)) ((= e) e)) ;)

(; dict ;)

def thm_200 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A ((x_2 : hol.term Data_2EUnit_2Eunit => e_1) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A e_1 e_1)) :=
  A : hol.type => e_1 : hol.term A => hol.APP_THM A hol.bool (hol.eq A ((x_2 : hol.term Data_2EUnit_2Eunit => e_1) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) (hol.eq A e_1) e_1 e_1 (thm_198 A e_1) (thm_199 A e_1).

(; Theorem: |- ((= ((= e) e)) ((= (\lambda x. e Data.Unit.())) e)) ;)

(; dict ;)

def thm_201 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A e_1 e_1) (hol.eq A ((x_2 : hol.term Data_2EUnit_2Eunit => e_1) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) :=
  A : hol.type => e_1 : hol.term A => hol.SYM hol.bool (hol.eq A ((x_2 : hol.term Data_2EUnit_2Eunit => e_1) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A e_1 e_1) (thm_200 A e_1).

(; Theorem: |- (\lambda fn. ((= (fn Data.Unit.())) e) \lambda x. e) ;)

(; dict ;)

def thm_202 : A : hol.type -> e_1 : hol.term A -> hol.proof ((fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (x_2 : hol.term Data_2EUnit_2Eunit => e_1)) :=
  A : hol.type => e_1 : hol.term A => hol.EQ_MP (hol.eq A ((x_2 : hol.term Data_2EUnit_2Eunit => e_1) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) ((fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (x_2 : hol.term Data_2EUnit_2Eunit => e_1)) (thm_195 A e_1) (hol.EQ_MP (hol.eq A e_1 e_1) (hol.eq A ((x_2 : hol.term Data_2EUnit_2Eunit => e_1) (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (thm_201 A e_1) (thm_199 A e_1)).

(; Theorem: |- ((= (= (Data.Bool.? P))) (= (Data.Bool.? P))) ;)

(; dict ;)

def thm_203 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)).

(; Theorem: |- ((= (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_204 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1.

(; Theorem: |- ((= ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P))) ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_205 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_203 A P_1) (thm_204 A P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_206 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) P_1 P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) P_1.

(; Theorem: |- ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) ;)

(; dict ;)

def thm_207 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1 P_1 (thm_11 A) (thm_206 A P_1).

(; Theorem: |- ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_208 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (thm_205 A P_1) (thm_207 A P_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) (Data.Bool.? P)) ;)

(; dict ;)

def thm_209 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_208 A P_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q)) ;)

(; dict ;)

def thm_210 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (P x)) Q) ;)

(; dict ;)

def thm_211 : A : hol.type -> Q_1 : hol.term hol.bool -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) -> hol.proof (hol.imp (P_3 x_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) => thm_210 A Q_1 P_3 hyp_1 x_2.

(; Theorem: |- (P x) ;)

(; dict ;)

def thm_212 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (P_2 x_1) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_213 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (P_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) -> hol.proof Q_3 :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (P_2 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) => thm_211 A Q_3 x_1 P_2 hyp_2 (thm_212 A x_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_214 : A : hol.type -> x_1 : hol.term A -> Q_2 : hol.term hol.bool -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_3 x_1) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) Q_2) :=
  A : hol.type => x_1 : hol.term A => Q_2 : hol.term hol.bool => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_3 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) => thm_213 A x_1 P_3 Q_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda Q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q)) ;)

(; dict ;)

def thm_215 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => Q_3 : hol.term hol.bool => thm_214 A x_1 Q_3 P_2 hyp_1.

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_216 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hol.EQ_MP (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) (thm_209 A P_2) (thm_215 A x_1 P_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e)) ;)

(; dict ;)

def thm_217 : A : hol.type -> e_1 : hol.term A -> hyp_1 : hol.proof ((fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (x_2 : hol.term Data_2EUnit_2Eunit => e_1)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) :=
  A : hol.type => e_1 : hol.term A => hyp_1 : hol.proof ((fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (x_2 : hol.term Data_2EUnit_2Eunit => e_1)) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_216 A x_1 P_2 hyp_1) (hol.arr Data_2EUnit_2Eunit A) (x_2 : hol.term Data_2EUnit_2Eunit => e_1) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e)) ;)

(; dict ;)

def thm_218 : A : hol.type -> e_1 : hol.term A -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) :=
  A : hol.type => e_1 : hol.term A => hol.PROVE_HYP ((fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (x_2 : hol.term Data_2EUnit_2Eunit => e_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (thm_202 A e_1) (hyp_1 : hol.proof ((fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (x_2 : hol.term Data_2EUnit_2Eunit => e_1)) => thm_217 A e_1 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda e. (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e))) ;)

(; dict ;)

def thm_219 : A : hol.type -> hol.proof (hol.forall A (e_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) :=
  A : hol.type => e_1 : hol.term A => thm_218 A e_1.

(; Theorem: |- (Data.Bool.! \lambda e. (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e))) ;)

(; thm ;)

def thm_220 : A : hol.type -> hol.proof (hol.forall A (e_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) :=
  A : hol.type => hol.EQ_MP (hol.forall A (e_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) (hol.forall A (e_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) (thm_193 A) (thm_219 A).

(; Theorem: |- ((= \lambda e. (Data.Bool.?! \lambda fn. ((= (fn Data.Unit.())) e))) \lambda e. (Data.Bool.?! \lambda fn. ((= (fn Data.Unit.())) e))) ;)

(; dict ;)

def thm_221 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (e_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (e_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (e_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)).

(; Theorem: |- ((= \lambda e. (Data.Bool.?! \lambda fn. ((= (fn Data.Unit.())) e))) \lambda e. (Data.Bool.?! \lambda fn. ((= (fn Data.Unit.())) e))) ;)

(; dict ;)

def thm_222 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (e_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (e_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (e_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (e_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (e_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (thm_221 A) (thm_221 A).

(; Theorem: |- ((= (Data.Bool.! \lambda e. (Data.Bool.?! \lambda fn. ((= (fn Data.Unit.())) e)))) (Data.Bool.! \lambda e. (Data.Bool.?! \lambda fn. ((= (fn Data.Unit.())) e)))) ;)

(; dict ;)

def thm_223 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (e_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) (hol.forall A (e_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (e_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (e_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (thm_45 A) (thm_222 A).

(; Theorem: |- ((= Data.Bool.?!) Data.Bool.?!) ;)

(; dict ;)

def thm_224 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool)) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool)).

(; Theorem: |- ((= (\lambda fn. ((= (fn Data.Unit.())) e) fn)) ((= (fn Data.Unit.())) e)) ;)

(; dict ;)

def thm_225 : A : hol.type -> fn_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> e_2 : hol.term A -> hol.proof (hol.eq hol.bool ((fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) fn_1) (hol.eq A (fn_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) :=
  A : hol.type => fn_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => e_2 : hol.term A => hol.BETA_CONV (hol.arr Data_2EUnit_2Eunit A) hol.bool (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) fn_1.

(; Theorem: |- ((= \lambda fn. (\lambda fn. ((= (fn Data.Unit.())) e) fn)) \lambda fn. ((= (fn Data.Unit.())) e)) ;)

(; dict ;)

def thm_226 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) :=
  A : hol.type => e_1 : hol.term A => hol.ABS_THM (hol.arr Data_2EUnit_2Eunit A) hol.bool (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => thm_225 A fn_2 e_1).

(; Theorem: |- ((= (Data.Bool.?! \lambda fn. (\lambda fn. ((= (fn Data.Unit.())) e) fn))) (Data.Bool.?! \lambda fn. ((= (fn Data.Unit.())) e))) ;)

(; dict ;)

def thm_227 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2)) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) :=
  A : hol.type => e_1 : hol.term A => hol.APP_THM (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool)) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool)) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (thm_224 A) (thm_226 A e_1).

(; Theorem: |- ((= (= (Data.Bool.?! \lambda fn. (\lambda fn. ((= (fn Data.Unit.())) e) fn)))) (= (Data.Bool.?! \lambda fn. ((= (fn Data.Unit.())) e)))) ;)

(; dict ;)

def thm_228 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)))) :=
  A : hol.type => e_1 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2)) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) thm_139 (thm_227 A e_1).

(; Theorem: |- ((= Data.Bool./\) Data.Bool./\) ;)

(; dict ;)

def thm_229 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and hol.and) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and.

(; Theorem: |- ((= Data.Bool.?) Data.Bool.?) ;)

(; dict ;)

def thm_230 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool)).

(; Theorem: |- ((= (Data.Bool.? \lambda fn. (\lambda fn. ((= (fn Data.Unit.())) e) fn))) (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e))) ;)

(; dict ;)

def thm_231 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) :=
  A : hol.type => e_1 : hol.term A => hol.APP_THM (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool)) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (thm_230 A) (thm_226 A e_1).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.? \lambda fn. (\lambda fn. ((= (fn Data.Unit.())) e) fn)))) (Data.Bool./\ (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e)))) ;)

(; dict ;)

def thm_232 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)))) :=
  A : hol.type => e_1 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) thm_229 (thm_231 A e_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_233 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (hol.forall (hol.arr Data_2EUnit_2Eunit A)) (hol.forall (hol.arr Data_2EUnit_2Eunit A))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (hol.forall (hol.arr Data_2EUnit_2Eunit A)).

(; Theorem: |- ((= (Data.Bool./\ (\lambda fn. ((= (fn Data.Unit.())) e) fn))) (Data.Bool./\ ((= (fn Data.Unit.())) e))) ;)

(; dict ;)

def thm_234 : A : hol.type -> fn_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> e_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and ((fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) fn_1)) (hol.and (hol.eq A (fn_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2))) :=
  A : hol.type => fn_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => e_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and ((fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) fn_1) (hol.eq A (fn_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) thm_229 (thm_225 A fn_1 e_2).

(; Theorem: |- ((= (\lambda fn. ((= (fn Data.Unit.())) e) x')) ((= (x' Data.Unit.())) e)) ;)

(; dict ;)

def thm_235 : A : hol.type -> x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> e_2 : hol.term A -> hol.proof (hol.eq hol.bool ((fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) x_27_1) (hol.eq A (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) :=
  A : hol.type => x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => e_2 : hol.term A => hol.BETA_CONV (hol.arr Data_2EUnit_2Eunit A) hol.bool (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) x_27_1.

(; Theorem: |- ((= ((Data.Bool./\ (\lambda fn. ((= (fn Data.Unit.())) e) fn)) (\lambda fn. ((= (fn Data.Unit.())) e) x'))) ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ;)

(; dict ;)

def thm_236 : A : hol.type -> x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> e_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3) fn_2) ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3) x_27_1)) (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3) (hol.eq A (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3))) :=
  A : hol.type => x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => e_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3) fn_2)) (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3)) ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3) x_27_1) (hol.eq A (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3) (thm_234 A fn_2 e_3) (thm_235 A x_27_1 e_3).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool./\ (\lambda fn. ((= (fn Data.Unit.())) e) fn)) (\lambda fn. ((= (fn Data.Unit.())) e) x')))) (Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e)))) ;)

(; dict ;)

def thm_237 : A : hol.type -> x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> e_3 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.and ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3) fn_2) ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3) x_27_1))) (hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3) (hol.eq A (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3)))) :=
  A : hol.type => x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => e_3 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.and ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3) fn_2) ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3) x_27_1)) (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3) (hol.eq A (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3)) thm_66 (thm_236 A x_27_1 fn_2 e_3).

(; Theorem: |- ((= ((= fn) x')) ((= fn) x')) ;)

(; dict ;)

def thm_238 : A : hol.type -> x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_1) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_1)) :=
  A : hol.type => x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.REFL hol.bool (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (\lambda fn. ((= (fn Data.Unit.())) e) fn)) (\lambda fn. ((= (fn Data.Unit.())) e) x'))) ((= fn) x'))) ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x'))) ;)

(; dict ;)

def thm_239 : A : hol.type -> x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> e_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.and ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3) fn_2) ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3) x_27_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_1)) (hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3) (hol.eq A (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_1))) :=
  A : hol.type => x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => e_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (hol.and ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3) fn_2) ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3) x_27_1))) (hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3) (hol.eq A (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_3))) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_1) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_1) (thm_237 A x_27_1 fn_2 e_3) (thm_238 A x_27_1 fn_2).

(; Theorem: |- ((= \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda fn. ((= (fn Data.Unit.())) e) fn)) (\lambda fn. ((= (fn Data.Unit.())) e) x'))) ((= fn) x'))) \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x'))) ;)

(; dict ;)

def thm_240 : A : hol.type -> fn_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> e_2 : hol.term A -> hol.proof (hol.eq (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) fn_1) ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) x_27_3)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_1 x_27_3)) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_1 x_27_3))) :=
  A : hol.type => fn_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => e_2 : hol.term A => hol.ABS_THM (hol.arr Data_2EUnit_2Eunit A) hol.bool (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) fn_1) ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) x_27_3)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_1 x_27_3)) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_1 x_27_3)) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => thm_239 A x_27_3 fn_1 e_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda fn. ((= (fn Data.Unit.())) e) fn)) (\lambda fn. ((= (fn Data.Unit.())) e) x'))) ((= fn) x')))) (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x')))) ;)

(; dict ;)

def thm_241 : A : hol.type -> fn_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> e_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) fn_1) ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) x_27_3)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_1 x_27_3))) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_1 x_27_3)))) :=
  A : hol.type => fn_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => e_2 : hol.term A => hol.APP_THM (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool (hol.forall (hol.arr Data_2EUnit_2Eunit A)) (hol.forall (hol.arr Data_2EUnit_2Eunit A)) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) fn_1) ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) x_27_3)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_1 x_27_3)) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_1 x_27_3)) (thm_233 A) (thm_240 A fn_1 e_2).

(; Theorem: |- ((= \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda fn. ((= (fn Data.Unit.())) e) fn)) (\lambda fn. ((= (fn Data.Unit.())) e) x'))) ((= fn) x')))) \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x')))) ;)

(; dict ;)

def thm_242 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2) ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) x_27_3)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))) :=
  A : hol.type => e_1 : hol.term A => hol.ABS_THM (hol.arr Data_2EUnit_2Eunit A) hol.bool (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2) ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) x_27_3)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => thm_241 A fn_2 e_1).

(; Theorem: |- ((= (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda fn. ((= (fn Data.Unit.())) e) fn)) (\lambda fn. ((= (fn Data.Unit.())) e) x'))) ((= fn) x'))))) (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x'))))) ;)

(; dict ;)

def thm_243 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2) ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) x_27_3)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))))) :=
  A : hol.type => e_1 : hol.term A => hol.APP_THM (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool (hol.forall (hol.arr Data_2EUnit_2Eunit A)) (hol.forall (hol.arr Data_2EUnit_2Eunit A)) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2) ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) x_27_3)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))) (thm_233 A) (thm_242 A e_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda fn. (\lambda fn. ((= (fn Data.Unit.())) e) fn))) (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda fn. ((= (fn Data.Unit.())) e) fn)) (\lambda fn. ((= (fn Data.Unit.())) e) x'))) ((= fn) x')))))) ((Data.Bool./\ (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e))) (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x')))))) ;)

(; dict ;)

def thm_244 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2)) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2) ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) x_27_3)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))))) :=
  A : hol.type => e_1 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2) ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) x_27_3)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))) (thm_232 A e_1) (thm_243 A e_1).

(; Theorem: |- ((= ((= (Data.Bool.?! \lambda fn. (\lambda fn. ((= (fn Data.Unit.())) e) fn))) ((Data.Bool./\ (Data.Bool.? \lambda fn. (\lambda fn. ((= (fn Data.Unit.())) e) fn))) (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda fn. ((= (fn Data.Unit.())) e) fn)) (\lambda fn. ((= (fn Data.Unit.())) e) x'))) ((= fn) x'))))))) ((= (Data.Bool.?! \lambda fn. ((= (fn Data.Unit.())) e))) ((Data.Bool./\ (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e))) (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x'))))))) ;)

(; dict ;)

def thm_245 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2)) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2) ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) x_27_3)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))))))) :=
  A : hol.type => e_1 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2)) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2) ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) x_27_3)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))))) (thm_228 A e_1) (thm_244 A e_1).

(; Theorem: |- ((= ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) ;)

(; dict ;)

def thm_246 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))).

(; Theorem: |- ((= ((= (Data.Bool.?! \lambda fn. (p fn))) ((Data.Bool./\ (Data.Bool.? \lambda fn. (p fn))) (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p fn)) (p x'))) ((= fn) x'))))))) ((= (Data.Bool.?! \lambda fn. (p fn))) ((Data.Bool./\ (Data.Bool.? \lambda fn. (p fn))) (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p fn)) (p x'))) ((= fn) x'))))))) ;)

(; dict ;)

def thm_247 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (fn_2 : hol.term A => p_1 fn_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (fn_2 : hol.term A => p_1 fn_2)) (hol.forall A (fn_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 fn_2) (p_1 x_27_3)) (hol.eq A fn_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (fn_2 : hol.term A => p_1 fn_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (fn_2 : hol.term A => p_1 fn_2)) (hol.forall A (fn_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 fn_2) (p_1 x_27_3)) (hol.eq A fn_2 x_27_3))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (fn_2 : hol.term A => p_1 fn_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (fn_2 : hol.term A => p_1 fn_2)) (hol.forall A (fn_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 fn_2) (p_1 x_27_3)) (hol.eq A fn_2 x_27_3)))))).

(; Theorem: |- ((= ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) ((= (Data.Bool.?! \lambda fn. (p fn))) ((Data.Bool./\ (Data.Bool.? \lambda fn. (p fn))) (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p fn)) (p x'))) ((= fn) x'))))))) ;)

(; dict ;)

def thm_248 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (fn_2 : hol.term A => p_1 fn_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (fn_2 : hol.term A => p_1 fn_2)) (hol.forall A (fn_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 fn_2) (p_1 x_27_3)) (hol.eq A fn_2 x_27_3))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (fn_2 : hol.term A => p_1 fn_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (fn_2 : hol.term A => p_1 fn_2)) (hol.forall A (fn_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 fn_2) (p_1 x_27_3)) (hol.eq A fn_2 x_27_3)))))) (thm_246 A p_1) (thm_247 A p_1).

(; Theorem: |- ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x')))))) ;)

(; dict ;)

def thm_249 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_12 A p_1.

(; Theorem: |- ((= (Data.Bool.?! \lambda fn. (p fn))) ((Data.Bool./\ (Data.Bool.? \lambda fn. (p fn))) (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p fn)) (p x'))) ((= fn) x')))))) ;)

(; dict ;)

def thm_250 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (fn_2 : hol.term A => p_1 fn_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (fn_2 : hol.term A => p_1 fn_2)) (hol.forall A (fn_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 fn_2) (p_1 x_27_3)) (hol.eq A fn_2 x_27_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (fn_2 : hol.term A => p_1 fn_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (fn_2 : hol.term A => p_1 fn_2)) (hol.forall A (fn_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 fn_2) (p_1 x_27_3)) (hol.eq A fn_2 x_27_3)))))) (thm_248 A p_1) (thm_249 A p_1).

(; Theorem: |- ((= (Data.Bool.?! \lambda fn. (p fn))) ((Data.Bool./\ (Data.Bool.? \lambda fn. (p fn))) (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p fn)) (p x'))) ((= fn) x')))))) ;)

(; dict ;)

def thm_251 : A : hol.type -> p_1 : hol.term (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => p_1 fn_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => p_1 fn_2)) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (p_1 fn_2) (p_1 x_27_3)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_250 A p_1) (hol.arr Data_2EUnit_2Eunit A) p_1.

(; Theorem: |- ((= (Data.Bool.?! \lambda fn. (\lambda fn. ((= (fn Data.Unit.())) e) fn))) ((Data.Bool./\ (Data.Bool.? \lambda fn. (\lambda fn. ((= (fn Data.Unit.())) e) fn))) (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda fn. ((= (fn Data.Unit.())) e) fn)) (\lambda fn. ((= (fn Data.Unit.())) e) x'))) ((= fn) x')))))) ;)

(; dict ;)

def thm_252 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2)) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2) ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) x_27_3)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))))) :=
  A : hol.type => e_1 : hol.term A => (A : hol.type => p_1 : hol.term (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) => thm_251 A p_1) A (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1).

(; Theorem: |- ((= (Data.Bool.?! \lambda fn. ((= (fn Data.Unit.())) e))) ((Data.Bool./\ (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e))) (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x')))))) ;)

(; dict ;)

def thm_253 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))))) :=
  A : hol.type => e_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2)) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) fn_2) ((fn_4 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_4 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) x_27_3)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))))) (thm_245 A e_1) (thm_252 A e_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e))) Data.Bool.T)) ((= (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e))) Data.Bool.T)) ;)

(; dict ;)

def thm_254 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) hol.true)) :=
  A : hol.type => e_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) hol.true).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e))) Data.Bool.T)) ((= (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e))) Data.Bool.T)) ;)

(; dict ;)

def thm_255 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) hol.true)) :=
  A : hol.type => e_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) hol.true) (thm_254 A e_1) (thm_254 A e_1).

(; Theorem: |- ((= (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e))) ((= (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e))) Data.Bool.T)) ;)

(; dict ;)

def thm_256 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) hol.true)) :=
  A : hol.type => e_1 : hol.term A => (t_1 : hol.term hol.bool => thm_145 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)).

(; Theorem: |- ((= (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e))) Data.Bool.T) ;)

(; dict ;)

def thm_257 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) hol.true) :=
  A : hol.type => e_1 : hol.term A => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) hol.true) (thm_256 A e_1) (thm_218 A e_1).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e)))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_258 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) (hol.and hol.true)) :=
  A : hol.type => e_1 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) hol.true thm_229 ((A : hol.type => e_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) hol.true) (thm_255 A e_1) (thm_257 A e_1)) A e_1).

(; Theorem: |- ((= (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x'))))) (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x'))))) ;)

(; dict ;)

def thm_259 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))))) :=
  A : hol.type => e_1 : hol.term A => hol.REFL hol.bool (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e))) (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x')))))) ((Data.Bool./\ Data.Bool.T) (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x')))))) ;)

(; dict ;)

def thm_260 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))))) (hol.and hol.true (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))))) :=
  A : hol.type => e_1 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) (hol.and hol.true) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))) (thm_258 A e_1) (thm_259 A e_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_261 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_262 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_261 t_1) (thm_261 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_263 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_264 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_263 thm_263.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) ;)

(; dict ;)

def thm_265 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_87 thm_264.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_266 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_13 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_267 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_123 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_268 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_261 t_1) (thm_266 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => thm_267 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_269 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_270 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_269 t_1) (thm_269 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_271 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_14 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_272 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_123 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_273 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_270 t_1) (thm_271 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => thm_272 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_274 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_275 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_274 t_1) (thm_274 t_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_276 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => thm_15 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_277 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_123 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_278 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_275 t_1) (thm_276 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => thm_277 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_279 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_280 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_279 t_1) (thm_279 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_281 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => thm_16 t_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_282 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_123 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_283 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_280 t_1) (thm_281 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => thm_282 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_284 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_285 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_284 t_1) (thm_284 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) t)) t) ;)

(; dict ;)

def thm_286 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_17 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_287 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (thm_283 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_285 t_1) (thm_286 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_288 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (thm_278 t_1) (thm_287 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_289 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (thm_273 t_1) (thm_288 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_290 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (thm_268 t_1) (thm_289 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_291 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => thm_290 t_1.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_292 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_175 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.eq hol.bool (hol.and hol.true t_1) t_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_293 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) thm_265 thm_291 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => thm_292 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x')))))) (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x'))))) ;)

(; dict ;)

def thm_294 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and hol.true (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))))) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))))) :=
  A : hol.type => e_1 : hol.term A => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_262 t_1) (thm_293 t_1)) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e))) (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x')))))) (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x'))))) ;)

(; dict ;)

def thm_295 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))))) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))))) :=
  A : hol.type => e_1 : hol.term A => hol.TRANS hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))))) (hol.and hol.true (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))))) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))) (thm_260 A e_1) (thm_294 A e_1).

(; Theorem: |- ((= (Data.Bool.?! \lambda fn. ((= (fn Data.Unit.())) e))) (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x'))))) ;)

(; dict ;)

def thm_296 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))))) :=
  A : hol.type => e_1 : hol.term A => hol.TRANS hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))))) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))) (thm_253 A e_1) (thm_295 A e_1).

(; Theorem: |- ((= (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x'))))) (Data.Bool.?! \lambda fn. ((= (fn Data.Unit.())) e))) ;)

(; dict ;)

def thm_297 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) :=
  A : hol.type => e_1 : hol.term A => hol.SYM hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))) (thm_296 A e_1).

(; Theorem: |- ((= \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x'))) \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x'))) ;)

(; dict ;)

def thm_298 : A : hol.type -> e_1 : hol.term A -> fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hol.proof (hol.eq (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))) :=
  A : hol.type => e_1 : hol.term A => fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.REFL (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)).

(; Theorem: |- ((= \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x'))) \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x'))) ;)

(; dict ;)

def thm_299 : A : hol.type -> e_1 : hol.term A -> fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hol.proof (hol.eq (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))) :=
  A : hol.type => e_1 : hol.term A => fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.TRANS (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)) (thm_298 A e_1 fn_2) (thm_298 A e_1 fn_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x')))) (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x')))) ;)

(; dict ;)

def thm_300 : A : hol.type -> e_1 : hol.term A -> fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))) :=
  A : hol.type => e_1 : hol.term A => fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.APP_THM (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool (hol.forall (hol.arr Data_2EUnit_2Eunit A)) (hol.forall (hol.arr Data_2EUnit_2Eunit A)) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)) (thm_233 A) (thm_299 A e_1 fn_2).

(; Theorem: |- ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e)) ;)

(; dict ;)

def thm_301 : A : hol.type -> x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> e_2 : hol.term A -> fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hyp_1 : hol.proof (hol.and (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) -> hol.proof (hol.and (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) :=
  A : hol.type => x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => e_2 : hol.term A => fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hyp_1 : hol.proof (hol.and (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) => hyp_1.

(; Theorem: |- ((= (fn Data.Unit.())) e) ;)

(; dict ;)

def thm_302 : A : hol.type -> x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> e_2 : hol.term A -> fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hyp_1 : hol.proof (hol.and (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) -> hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) :=
  A : hol.type => x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => e_2 : hol.term A => fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hyp_1 : hol.proof (hol.and (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_175 q_1 p_2 hyp_1) (hol.eq A (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) hyp_1.

(; Theorem: |- ((= (fn Data.Unit.())) e) ;)

(; dict ;)

def thm_303 : A : hol.type -> x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> e_2 : hol.term A -> fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hyp_1 : hol.proof (hol.and (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) -> hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) :=
  A : hol.type => x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => e_2 : hol.term A => fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hyp_1 : hol.proof (hol.and (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) => hol.PROVE_HYP (hol.and (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (thm_301 A x_27_1 e_2 fn_3 hyp_1) (hyp_2 : hol.proof (hol.and (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) => thm_302 A x_27_1 e_2 fn_3 hyp_2).

(; Theorem: |- ((= (x' Data.Unit.())) e) ;)

(; dict ;)

def thm_304 : A : hol.type -> fn_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> e_2 : hol.term A -> x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hyp_1 : hol.proof (hol.and (hol.eq A (fn_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) -> hol.proof (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) :=
  A : hol.type => fn_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => e_2 : hol.term A => x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hyp_1 : hol.proof (hol.and (hol.eq A (fn_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_115 p_1 q_2 hyp_1) (hol.eq A (fn_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) hyp_1.

(; Theorem: |- ((= (x' Data.Unit.())) e) ;)

(; dict ;)

def thm_305 : A : hol.type -> fn_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> e_2 : hol.term A -> x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hyp_1 : hol.proof (hol.and (hol.eq A (fn_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) -> hol.proof (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) :=
  A : hol.type => fn_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => e_2 : hol.term A => x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hyp_1 : hol.proof (hol.and (hol.eq A (fn_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) => hol.PROVE_HYP (hol.and (hol.eq A (fn_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (thm_301 A x_27_3 e_2 fn_1 hyp_1) (hyp_2 : hol.proof (hol.and (hol.eq A (fn_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) => thm_304 A fn_1 e_2 x_27_3 hyp_2).

(; Theorem: |- ((= (fn Data.Unit.())) e) ;)

(; dict ;)

def thm_306 : A : hol.type -> e_1 : hol.term A -> fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hyp_1 : hol.proof (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hol.proof (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) :=
  A : hol.type => e_1 : hol.term A => fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hyp_1 : hol.proof (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hyp_1.

(; Theorem: |- ((= (x' Data.Unit.())) e) ;)

(; dict ;)

def thm_307 : A : hol.type -> e_1 : hol.term A -> x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hyp_1 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) :=
  A : hol.type => e_1 : hol.term A => x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hyp_1 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hyp_1.

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_308 : A : hol.type -> g_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> f_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr Data_2EUnit_2Eunit A) f_2 g_1) (hol.forall Data_2EUnit_2Eunit (x_3 : hol.term Data_2EUnit_2Eunit => hol.eq A (f_2 x_3) (g_1 x_3)))) :=
  A : hol.type => g_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => f_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => thm_42 B A g_1 f_2) A Data_2EUnit_2Eunit g_1 f_2.

(; Theorem: |- ((= ((= fn) x')) (Data.Bool.! \lambda x. ((= (fn x)) (x' x)))) ;)

(; dict ;)

def thm_309 : A : hol.type -> x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_1) (hol.forall Data_2EUnit_2Eunit (x_3 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_2 x_3) (x_27_1 x_3)))) :=
  A : hol.type => x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (A : hol.type => g_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => f_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => thm_308 A g_1 f_2) A x_27_1 fn_2.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (fn x)) (x' x)))) ((= fn) x')) ;)

(; dict ;)

def thm_310 : A : hol.type -> x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hol.proof (hol.eq hol.bool (hol.forall Data_2EUnit_2Eunit (x_3 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_2 x_3) (x_27_1 x_3))) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_1)) :=
  A : hol.type => x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.SYM hol.bool (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_1) (hol.forall Data_2EUnit_2Eunit (x_3 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_2 x_3) (x_27_1 x_3))) (thm_309 A x_27_1 fn_2).

(; Theorem: |- ((= fn) fn) ;)

(; dict ;)

def thm_311 : A : hol.type -> fn_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_1 fn_1) :=
  A : hol.type => fn_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.REFL (hol.arr Data_2EUnit_2Eunit A) fn_1.

(; Theorem: |- ((= (fn x)) (fn Data.Unit.())) ;)

(; dict ;)

def thm_312 : A : hol.type -> x_1 : hol.term Data_2EUnit_2Eunit -> fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hol.proof (hol.eq A (fn_2 x_1) (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) :=
  A : hol.type => x_1 : hol.term Data_2EUnit_2Eunit => fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.APP_THM Data_2EUnit_2Eunit A fn_2 fn_2 x_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit) (thm_311 A fn_2) (thm_71 x_1).

(; Theorem: |- ((= (= (fn x))) (= (fn Data.Unit.()))) ;)

(; dict ;)

def thm_313 : A : hol.type -> x_1 : hol.term Data_2EUnit_2Eunit -> fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A (fn_2 x_1)) (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) :=
  A : hol.type => x_1 : hol.term Data_2EUnit_2Eunit => fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) (fn_2 x_1) (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (thm_196 A) (thm_312 A x_1 fn_2).

(; Theorem: |- ((= x') x') ;)

(; dict ;)

def thm_314 : A : hol.type -> x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit A) x_27_1 x_27_1) :=
  A : hol.type => x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.REFL (hol.arr Data_2EUnit_2Eunit A) x_27_1.

(; Theorem: |- ((= (x' x)) (x' Data.Unit.())) ;)

(; dict ;)

def thm_315 : A : hol.type -> x_1 : hol.term Data_2EUnit_2Eunit -> x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hol.proof (hol.eq A (x_27_2 x_1) (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) :=
  A : hol.type => x_1 : hol.term Data_2EUnit_2Eunit => x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.APP_THM Data_2EUnit_2Eunit A x_27_2 x_27_2 x_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit) (thm_314 A x_27_2) (thm_71 x_1).

(; Theorem: |- ((= ((= (fn x)) (x' x))) ((= (fn Data.Unit.())) (x' Data.Unit.()))) ;)

(; dict ;)

def thm_316 : A : hol.type -> x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> x_2 : hol.term Data_2EUnit_2Eunit -> fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hol.proof (hol.eq hol.bool (hol.eq A (fn_3 x_2) (x_27_1 x_2)) (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) :=
  A : hol.type => x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => x_2 : hol.term Data_2EUnit_2Eunit => fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.APP_THM A hol.bool (hol.eq A (fn_3 x_2)) (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) (x_27_1 x_2) (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (thm_313 A x_2 fn_3) (thm_315 A x_2 x_27_1).

(; Theorem: |- ((= \lambda x. ((= (fn x)) (x' x))) \lambda x. ((= (fn Data.Unit.())) (x' Data.Unit.()))) ;)

(; dict ;)

def thm_317 : A : hol.type -> x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit hol.bool) (x_3 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_2 x_3) (x_27_1 x_3)) (x_3 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) :=
  A : hol.type => x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.ABS_THM Data_2EUnit_2Eunit hol.bool (x_3 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_2 x_3) (x_27_1 x_3)) (x_3 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) (x_3 : hol.term Data_2EUnit_2Eunit => thm_316 A x_27_1 x_3 fn_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (fn x)) (x' x)))) (Data.Bool.! \lambda x. ((= (fn Data.Unit.())) (x' Data.Unit.())))) ;)

(; dict ;)

def thm_318 : A : hol.type -> x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hol.proof (hol.eq hol.bool (hol.forall Data_2EUnit_2Eunit (x_3 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_2 x_3) (x_27_1 x_3))) (hol.forall Data_2EUnit_2Eunit (x_3 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))))) :=
  A : hol.type => x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.APP_THM (hol.arr Data_2EUnit_2Eunit hol.bool) hol.bool (hol.forall Data_2EUnit_2Eunit) (hol.forall Data_2EUnit_2Eunit) (x_3 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_2 x_3) (x_27_1 x_3)) (x_3 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) thm_70 (thm_317 A x_27_1 fn_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (fn Data.Unit.())) (x' Data.Unit.())))) (Data.Bool.! \lambda x. ((= (fn x)) (x' x)))) ;)

(; dict ;)

def thm_319 : A : hol.type -> x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hol.proof (hol.eq hol.bool (hol.forall Data_2EUnit_2Eunit (x_3 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) (hol.forall Data_2EUnit_2Eunit (x_3 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_2 x_3) (x_27_1 x_3)))) :=
  A : hol.type => x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.SYM hol.bool (hol.forall Data_2EUnit_2Eunit (x_3 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_2 x_3) (x_27_1 x_3))) (hol.forall Data_2EUnit_2Eunit (x_3 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) (thm_318 A x_27_1 fn_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (fn Data.Unit.())) (x' Data.Unit.())))) ((= (fn Data.Unit.())) (x' Data.Unit.()))) ;)

(; dict ;)

def thm_320 : A : hol.type -> x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hol.proof (hol.eq hol.bool (hol.forall Data_2EUnit_2Eunit (x_3 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) :=
  A : hol.type => x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => (t_1 : hol.term hol.bool => thm_82 t_1) (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))).

(; Theorem: |- ((= (= (fn Data.Unit.()))) (= e)) ;)

(; dict ;)

def thm_321 : A : hol.type -> e_1 : hol.term A -> fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hyp_1 : hol.proof (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) (hol.eq A e_1)) :=
  A : hol.type => e_1 : hol.term A => fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hyp_1 : hol.proof (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1 (thm_196 A) (thm_306 A e_1 fn_2 hyp_1).

(; Theorem: |- ((= ((= (fn Data.Unit.())) (x' Data.Unit.()))) ((= e) e)) ;)

(; dict ;)

def thm_322 : A : hol.type -> e_1 : hol.term A -> x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hyp_1 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hyp_2 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hol.proof (hol.eq hol.bool (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) (hol.eq A e_1 e_1)) :=
  A : hol.type => e_1 : hol.term A => x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hyp_1 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hyp_2 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hol.APP_THM A hol.bool (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) (hol.eq A e_1) (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1 (thm_321 A e_1 fn_3 hyp_1) (thm_307 A e_1 x_27_2 hyp_2).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_323 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_324 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_323 A x_1) (thm_323 A x_1).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_325 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_326 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_325 A) (thm_325 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_327 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_45 A) (thm_326 A).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_328 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_145 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_329 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => thm_18 A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_330 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_328 A x_1) (thm_329 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_331 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_323 A x_1) (thm_330 A x_1)) A x_1.

(; Theorem: |- ((= ((= e) e)) Data.Bool.T) ;)

(; dict ;)

def thm_332 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A e_1 e_1) hol.true) :=
  A : hol.type => e_1 : hol.term A => (A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_324 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_327 A) (thm_331 A) x_1)) A x_1) A e_1.

(; Theorem: |- ((= ((= (fn Data.Unit.())) (x' Data.Unit.()))) Data.Bool.T) ;)

(; dict ;)

def thm_333 : A : hol.type -> e_1 : hol.term A -> x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hyp_1 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hyp_2 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hol.proof (hol.eq hol.bool (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) hol.true) :=
  A : hol.type => e_1 : hol.term A => x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hyp_1 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hyp_2 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hol.TRANS hol.bool (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) (hol.eq A e_1 e_1) hol.true (thm_322 A e_1 x_27_2 fn_3 hyp_1 hyp_2) (thm_332 A e_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (fn Data.Unit.())) (x' Data.Unit.())))) Data.Bool.T) ;)

(; dict ;)

def thm_334 : A : hol.type -> e_1 : hol.term A -> x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hyp_1 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hyp_2 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hol.proof (hol.eq hol.bool (hol.forall Data_2EUnit_2Eunit (x_4 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) hol.true) :=
  A : hol.type => e_1 : hol.term A => x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hyp_1 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hyp_2 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hol.TRANS hol.bool (hol.forall Data_2EUnit_2Eunit (x_4 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))) hol.true (thm_320 A x_27_2 fn_3) (thm_333 A e_1 x_27_2 fn_3 hyp_1 hyp_2).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda x. ((= (fn Data.Unit.())) (x' Data.Unit.())))) ;)

(; dict ;)

def thm_335 : A : hol.type -> e_1 : hol.term A -> x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hyp_1 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hyp_2 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hol.proof (hol.eq hol.bool hol.true (hol.forall Data_2EUnit_2Eunit (x_4 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit))))) :=
  A : hol.type => e_1 : hol.term A => x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hyp_1 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hyp_2 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hol.SYM hol.bool (hol.forall Data_2EUnit_2Eunit (x_4 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) hol.true (thm_334 A e_1 x_27_2 fn_3 hyp_1 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. ((= (fn Data.Unit.())) (x' Data.Unit.()))) ;)

(; dict ;)

def thm_336 : A : hol.type -> e_1 : hol.term A -> x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hyp_1 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hyp_2 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hol.proof (hol.forall Data_2EUnit_2Eunit (x_4 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) :=
  A : hol.type => e_1 : hol.term A => x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hyp_1 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hyp_2 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hol.EQ_MP hol.true (hol.forall Data_2EUnit_2Eunit (x_4 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) (thm_335 A e_1 x_27_2 fn_3 hyp_1 hyp_2) thm_8.

(; Theorem: |- (Data.Bool.! \lambda x. ((= (fn x)) (x' x))) ;)

(; dict ;)

def thm_337 : A : hol.type -> e_1 : hol.term A -> x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hyp_1 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hyp_2 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hol.proof (hol.forall Data_2EUnit_2Eunit (x_4 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_3 x_4) (x_27_2 x_4))) :=
  A : hol.type => e_1 : hol.term A => x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hyp_1 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hyp_2 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hol.EQ_MP (hol.forall Data_2EUnit_2Eunit (x_4 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)))) (hol.forall Data_2EUnit_2Eunit (x_4 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_3 x_4) (x_27_2 x_4))) (thm_319 A x_27_2 fn_3) (thm_336 A e_1 x_27_2 fn_3 hyp_1 hyp_2).

(; Theorem: |- ((= fn) x') ;)

(; dict ;)

def thm_338 : A : hol.type -> e_1 : hol.term A -> x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hyp_1 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hyp_2 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_3 x_27_2) :=
  A : hol.type => e_1 : hol.term A => x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hyp_1 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hyp_2 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hol.EQ_MP (hol.forall Data_2EUnit_2Eunit (x_4 : hol.term Data_2EUnit_2Eunit => hol.eq A (fn_3 x_4) (x_27_2 x_4))) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_3 x_27_2) (thm_310 A x_27_2 fn_3) (thm_337 A e_1 x_27_2 fn_3 hyp_1 hyp_2).

(; Theorem: |- ((= fn) x') ;)

(; dict ;)

def thm_339 : A : hol.type -> e_1 : hol.term A -> x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hyp_1 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hyp_2 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_3 x_27_2) :=
  A : hol.type => e_1 : hol.term A => x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hyp_1 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hyp_2 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hol.PROVE_HYP (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_3 x_27_2) (thm_307 A e_1 x_27_2 hyp_2) (hyp_3 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => thm_338 A e_1 x_27_2 fn_3 hyp_1 hyp_3).

(; Theorem: |- ((= fn) x') ;)

(; dict ;)

def thm_340 : A : hol.type -> e_1 : hol.term A -> x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hyp_1 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hyp_2 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_3 x_27_2) :=
  A : hol.type => e_1 : hol.term A => x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hyp_1 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hyp_2 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hol.PROVE_HYP (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_3 x_27_2) (thm_306 A e_1 fn_3 hyp_1) (hyp_3 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => thm_339 A e_1 x_27_2 fn_3 hyp_3 hyp_2).

(; Theorem: |- ((= fn) x') ;)

(; dict ;)

def thm_341 : A : hol.type -> e_1 : hol.term A -> x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hyp_1 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) -> hyp_2 : hol.proof (hol.and (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) -> hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_3 x_27_2) :=
  A : hol.type => e_1 : hol.term A => x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hyp_1 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => hyp_2 : hol.proof (hol.and (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) => hol.PROVE_HYP (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_3 x_27_2) (thm_305 A fn_3 e_1 x_27_2 hyp_2) (hyp_3 : hol.proof (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => thm_340 A e_1 x_27_2 fn_3 hyp_1 hyp_3).

(; Theorem: |- ((= fn) x') ;)

(; dict ;)

def thm_342 : A : hol.type -> e_1 : hol.term A -> x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hyp_1 : hol.proof (hol.and (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) -> hol.proof (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_3 x_27_2) :=
  A : hol.type => e_1 : hol.term A => x_27_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hyp_1 : hol.proof (hol.and (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) => hol.PROVE_HYP (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_3 x_27_2) (thm_303 A x_27_2 e_1 fn_3 hyp_1) (hyp_2 : hol.proof (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) => thm_341 A e_1 x_27_2 fn_3 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x')) ;)

(; dict ;)

def thm_343 : A : hol.type -> x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> e_2 : hol.term A -> fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hol.proof (hol.imp (hol.and (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_3 x_27_1)) :=
  A : hol.type => x_27_1 : hol.term (hol.arr Data_2EUnit_2Eunit A) => e_2 : hol.term A => fn_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hyp_1 : hol.proof (hol.and (hol.eq A (fn_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2) (hol.eq A (x_27_1 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_2)) => thm_342 A e_2 x_27_1 fn_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x'))) ;)

(; dict ;)

def thm_344 : A : hol.type -> e_1 : hol.term A -> fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) -> hol.proof (hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))) :=
  A : hol.type => e_1 : hol.term A => fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => thm_343 A x_27_3 e_1 fn_2.

(; Theorem: |- (Data.Bool.! \lambda fn. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= (fn Data.Unit.())) e)) ((= (x' Data.Unit.())) e))) ((= fn) x')))) ;)

(; dict ;)

def thm_345 : A : hol.type -> e_1 : hol.term A -> hol.proof (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))) :=
  A : hol.type => e_1 : hol.term A => fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.EQ_MP (hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3))) (thm_300 A e_1 fn_2) (thm_344 A e_1 fn_2).

(; Theorem: |- (Data.Bool.?! \lambda fn. ((= (fn Data.Unit.())) e)) ;)

(; dict ;)

def thm_346 : A : hol.type -> e_1 : hol.term A -> hol.proof (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) :=
  A : hol.type => e_1 : hol.term A => hol.EQ_MP (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (thm_297 A e_1) (hol.EQ_MP (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))) (hol.forall (hol.arr Data_2EUnit_2Eunit A) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.forall (hol.arr Data_2EUnit_2Eunit A) (x_27_3 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.imp (hol.and (hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1) (hol.eq A (x_27_3 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1)) (hol.eq (hol.arr Data_2EUnit_2Eunit A) fn_2 x_27_3)))) (thm_259 A e_1) (thm_345 A e_1)).

(; Theorem: |- (Data.Bool.! \lambda e. (Data.Bool.?! \lambda fn. ((= (fn Data.Unit.())) e))) ;)

(; dict ;)

def thm_347 : A : hol.type -> hol.proof (hol.forall A (e_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) :=
  A : hol.type => e_1 : hol.term A => thm_346 A e_1.

(; Theorem: |- (Data.Bool.! \lambda e. (Data.Bool.?! \lambda fn. ((= (fn Data.Unit.())) e))) ;)

(; thm ;)

def thm_348 : A : hol.type -> hol.proof (hol.forall A (e_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) :=
  A : hol.type => hol.EQ_MP (hol.forall A (e_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) (hol.forall A (e_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr Data_2EUnit_2Eunit A) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr Data_2EUnit_2Eunit A) => hol.eq A (fn_2 (Data_2EUnit_2E_28_29 Data_2EUnit_2Eunit)) e_1))) (thm_223 A) (thm_347 A).
