
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME set_2Dsize_2Dthm_2Da4.

Set_2Eset : hol.type -> hol.type.

Number_2ENatural_2Enatural : hol.type.

Data_2EPair_2E_2A : hol.type -> hol.type -> hol.type.

Set_2EhasSize : A : hol.type -> hol.term A.

Set_2Ecross : A : hol.type -> hol.term A.

Set_2EfromPredicate : A : hol.type -> hol.term A.

Data_2EBool_2E_3F : A : hol.type -> hol.term A.

Data_2EPair_2E_2C : A : hol.type -> hol.term A.

Set_2Emember : A : hol.type -> hol.term A.

Number_2ENatural_2E_2A : A : hol.type -> hol.term A.

(; axiom ;)

thm_0 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_2))))))))).

(; axiom ;)

thm_1 : hol.proof hol.true.

(; axiom ;)

thm_2 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_1 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4))))))).

(; axiom ;)

thm_3 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_4 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (hol.forall (Set_2Eset A)) (hol.forall (Set_2Eset A))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (hol.forall (Set_2Eset A)).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_5 : B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (Set_2Eset B) hol.bool) hol.bool) (hol.forall (Set_2Eset B)) (hol.forall (Set_2Eset B))) :=
  B : hol.type => hol.REFL (hol.arr (hol.arr (Set_2Eset B) hol.bool) hol.bool) (hol.forall (Set_2Eset B)).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_6 : hol.proof (hol.eq (hol.arr (hol.arr Number_2ENatural_2Enatural hol.bool) hol.bool) (hol.forall Number_2ENatural_2Enatural) (hol.forall Number_2ENatural_2Enatural)) :=
  hol.REFL (hol.arr (hol.arr Number_2ENatural_2Enatural hol.bool) hol.bool) (hol.forall Number_2ENatural_2Enatural).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n)))) (Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n)))) ;)

(; dict ;)

def thm_7 : B : hol.type -> A : hol.type -> n_1 : hol.term Number_2ENatural_2Enatural -> t_2 : hol.term (Set_2Eset B) -> m_3 : hol.term Number_2ENatural_2Enatural -> s_4 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1))) (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)))) :=
  B : hol.type => A : hol.type => n_1 : hol.term Number_2ENatural_2Enatural => t_2 : hol.term (Set_2Eset B) => m_3 : hol.term Number_2ENatural_2Enatural => s_4 : hol.term (Set_2Eset A) => hol.REFL (hol.arr hol.bool hol.bool) (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1))).

(; Theorem: |- ((= Set.hasSize) Set.hasSize) ;)

(; dict ;)

def thm_8 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool))) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool))).

(; Theorem: |- ((= ((= ((Set.cross s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t)))))))) ((= ((Set.cross s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t)))))))) ;)

(; dict ;)

def thm_9 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1))))))) (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1)))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.REFL hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1))))))).

(; Theorem: |- ((= ((= ((Set.cross s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t)))))))) ((= ((Set.cross s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t)))))))) ;)

(; dict ;)

def thm_10 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1))))))) (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1)))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1))))))) (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1))))))) (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1))))))) (thm_9 B A t_1 s_2) (thm_9 B A t_1 s_2).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Set.cross s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t)))))))) ;)

(; dict ;)

def thm_11 : A : hol.type -> B : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_2)))))))) :=
  A : hol.type => B : hol.type => s_1 : hol.term (Set_2Eset A) => thm_0 B A s_1.

(; Theorem: |- ((= ((Set.cross s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t))))))) ;)

(; dict ;)

def thm_12 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => thm_11 A B s_2 t_1.

(; Theorem: |- ((= (Set.hasSize ((Set.cross s) t))) (Set.hasSize (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t)))))))) ;)

(; dict ;)

def thm_13 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr Number_2ENatural_2Enatural hol.bool) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1)))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool))) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool))) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1)))))) (thm_8 B A) ((B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.EQ_MP (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1))))))) (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1))))))) (thm_10 B A t_1 s_2) (thm_12 B A t_1 s_2)) B A t_1 s_2).

(; Theorem: |- ((= ((Number.Natural.* m) n)) ((Number.Natural.* m) n)) ;)

(; dict ;)

def thm_14 : n_1 : hol.term Number_2ENatural_2Enatural -> m_2 : hol.term Number_2ENatural_2Enatural -> hol.proof (hol.eq Number_2ENatural_2Enatural (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_2 n_1) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_2 n_1)) :=
  n_1 : hol.term Number_2ENatural_2Enatural => m_2 : hol.term Number_2ENatural_2Enatural => hol.REFL Number_2ENatural_2Enatural (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_2 n_1).

(; Theorem: |- ((= ((Set.hasSize ((Set.cross s) t)) ((Number.Natural.* m) n))) ((Set.hasSize (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t))))))) ((Number.Natural.* m) n))) ;)

(; dict ;)

def thm_15 : B : hol.type -> A : hol.type -> n_1 : hol.term Number_2ENatural_2Enatural -> m_2 : hol.term Number_2ENatural_2Enatural -> t_3 : hol.term (Set_2Eset B) -> s_4 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_4 t_3) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_3)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_2 n_1))) :=
  B : hol.type => A : hol.type => n_1 : hol.term Number_2ENatural_2Enatural => m_2 : hol.term Number_2ENatural_2Enatural => t_3 : hol.term (Set_2Eset B) => s_4 : hol.term (Set_2Eset A) => hol.APP_THM Number_2ENatural_2Enatural hol.bool (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_4 t_3)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_3))))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_2 n_1) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_2 n_1) (thm_13 B A t_3 s_4) (thm_14 n_1 m_2).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize ((Set.cross s) t)) ((Number.Natural.* m) n)))) ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t))))))) ((Number.Natural.* m) n)))) ;)

(; dict ;)

def thm_16 : B : hol.type -> A : hol.type -> n_1 : hol.term Number_2ENatural_2Enatural -> t_2 : hol.term (Set_2Eset B) -> m_3 : hol.term Number_2ENatural_2Enatural -> s_4 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_4 t_2) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))) (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1)))) :=
  B : hol.type => A : hol.type => n_1 : hol.term Number_2ENatural_2Enatural => t_2 : hol.term (Set_2Eset B) => m_3 : hol.term Number_2ENatural_2Enatural => s_4 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1))) (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1))) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_4 t_2) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1)) (thm_7 B A n_1 t_2 m_3 s_4) (thm_15 B A n_1 m_3 t_2 s_4).

(; Theorem: |- ((= ((= ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t))))))) ((Number.Natural.* m) n)))) Data.Bool.T)) ((= ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t))))))) ((Number.Natural.* m) n)))) Data.Bool.T)) ;)

(; dict ;)

def thm_17 : B : hol.type -> A : hol.type -> n_1 : hol.term Number_2ENatural_2Enatural -> t_2 : hol.term (Set_2Eset B) -> m_3 : hol.term Number_2ENatural_2Enatural -> s_4 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))) hol.true) (hol.eq hol.bool (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))) hol.true)) :=
  B : hol.type => A : hol.type => n_1 : hol.term Number_2ENatural_2Enatural => t_2 : hol.term (Set_2Eset B) => m_3 : hol.term Number_2ENatural_2Enatural => s_4 : hol.term (Set_2Eset A) => hol.REFL hol.bool (hol.eq hol.bool (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t))))))) ((Number.Natural.* m) n)))) Data.Bool.T)) ((= ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t))))))) ((Number.Natural.* m) n)))) Data.Bool.T)) ;)

(; dict ;)

def thm_18 : B : hol.type -> A : hol.type -> n_1 : hol.term Number_2ENatural_2Enatural -> t_2 : hol.term (Set_2Eset B) -> m_3 : hol.term Number_2ENatural_2Enatural -> s_4 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))) hol.true) (hol.eq hol.bool (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))) hol.true)) :=
  B : hol.type => A : hol.type => n_1 : hol.term Number_2ENatural_2Enatural => t_2 : hol.term (Set_2Eset B) => m_3 : hol.term Number_2ENatural_2Enatural => s_4 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))) hol.true) (hol.eq hol.bool (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))) hol.true) (hol.eq hol.bool (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))) hol.true) (thm_17 B A n_1 t_2 m_3 s_4) (thm_17 B A n_1 t_2 m_3 s_4).

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_19 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_20 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_19 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_21 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_20 t_1 hyp_1) thm_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_22 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_23 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_22 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_1).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_24 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_21 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_23 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t))))))) ((Number.Natural.* m) n)))) ((= ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t))))))) ((Number.Natural.* m) n)))) Data.Bool.T)) ;)

(; dict ;)

def thm_25 : B : hol.type -> A : hol.type -> n_1 : hol.term Number_2ENatural_2Enatural -> t_2 : hol.term (Set_2Eset B) -> m_3 : hol.term Number_2ENatural_2Enatural -> s_4 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))) (hol.eq hol.bool (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))) hol.true)) :=
  B : hol.type => A : hol.type => n_1 : hol.term Number_2ENatural_2Enatural => t_2 : hol.term (Set_2Eset B) => m_3 : hol.term Number_2ENatural_2Enatural => s_4 : hol.term (Set_2Eset A) => (t_1 : hol.term hol.bool => thm_24 t_1) (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))).

(; Theorem: |- (Data.Bool.! \lambda t. (Data.Bool.! \lambda m. (Data.Bool.! \lambda n. ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t))))))) ((Number.Natural.* m) n)))))) ;)

(; dict ;)

def thm_26 : A : hol.type -> B : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_1 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4)))))) :=
  A : hol.type => B : hol.type => s_1 : hol.term (Set_2Eset A) => thm_2 B A s_1.

(; Theorem: |- (Data.Bool.! \lambda m. (Data.Bool.! \lambda n. ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t))))))) ((Number.Natural.* m) n))))) ;)

(; dict ;)

def thm_27 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_2 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_1 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_1)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => thm_26 A B s_2 t_1.

(; Theorem: |- (Data.Bool.! \lambda n. ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t))))))) ((Number.Natural.* m) n)))) ;)

(; dict ;)

def thm_28 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> m_2 : hol.term Number_2ENatural_2Enatural -> s_3 : hol.term (Set_2Eset A) -> hol.proof (hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_3 m_2) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_1 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_3) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_1)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_2 n_4)))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => m_2 : hol.term Number_2ENatural_2Enatural => s_3 : hol.term (Set_2Eset A) => thm_27 B A t_1 s_3 m_2.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t))))))) ((Number.Natural.* m) n))) ;)

(; dict ;)

def thm_29 : B : hol.type -> A : hol.type -> n_1 : hol.term Number_2ENatural_2Enatural -> t_2 : hol.term (Set_2Eset B) -> m_3 : hol.term Number_2ENatural_2Enatural -> s_4 : hol.term (Set_2Eset A) -> hol.proof (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))) :=
  B : hol.type => A : hol.type => n_1 : hol.term Number_2ENatural_2Enatural => t_2 : hol.term (Set_2Eset B) => m_3 : hol.term Number_2ENatural_2Enatural => s_4 : hol.term (Set_2Eset A) => thm_28 B A t_2 m_3 s_4 n_1.

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t))))))) ((Number.Natural.* m) n)))) Data.Bool.T) ;)

(; dict ;)

def thm_30 : B : hol.type -> A : hol.type -> n_1 : hol.term Number_2ENatural_2Enatural -> t_2 : hol.term (Set_2Eset B) -> m_3 : hol.term Number_2ENatural_2Enatural -> s_4 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))) hol.true) :=
  B : hol.type => A : hol.type => n_1 : hol.term Number_2ENatural_2Enatural => t_2 : hol.term (Set_2Eset B) => m_3 : hol.term Number_2ENatural_2Enatural => s_4 : hol.term (Set_2Eset A) => hol.EQ_MP (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))) (hol.eq hol.bool (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))) hol.true) (thm_25 B A n_1 t_2 m_3 s_4) (thm_29 B A n_1 t_2 m_3 s_4).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize ((Set.cross s) t)) ((Number.Natural.* m) n)))) Data.Bool.T) ;)

(; dict ;)

def thm_31 : B : hol.type -> A : hol.type -> n_1 : hol.term Number_2ENatural_2Enatural -> t_2 : hol.term (Set_2Eset B) -> m_3 : hol.term Number_2ENatural_2Enatural -> s_4 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_4 t_2) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))) hol.true) :=
  B : hol.type => A : hol.type => n_1 : hol.term Number_2ENatural_2Enatural => t_2 : hol.term (Set_2Eset B) => m_3 : hol.term Number_2ENatural_2Enatural => s_4 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_4 t_2) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))) (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))) hol.true (thm_16 B A n_1 t_2 m_3 s_4) ((B : hol.type => A : hol.type => n_1 : hol.term Number_2ENatural_2Enatural => t_2 : hol.term (Set_2Eset B) => m_3 : hol.term Number_2ENatural_2Enatural => s_4 : hol.term (Set_2Eset A) => hol.EQ_MP (hol.eq hol.bool (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))) hol.true) (hol.eq hol.bool (hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_4 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_1)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_5 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_7 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_5 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_6 y_7)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 s_4) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 t_2)))))) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_1))) hol.true) (thm_18 B A n_1 t_2 m_3 s_4) (thm_30 B A n_1 t_2 m_3 s_4)) B A n_1 t_2 m_3 s_4).

(; Theorem: |- ((= \lambda n. ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize ((Set.cross s) t)) ((Number.Natural.* m) n)))) \lambda n. Data.Bool.T) ;)

(; dict ;)

def thm_32 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> m_2 : hol.term Number_2ENatural_2Enatural -> s_3 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr Number_2ENatural_2Enatural hol.bool) (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_3 m_2) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_1 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_3 t_1) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_2 n_4))) (n_4 : hol.term Number_2ENatural_2Enatural => hol.true)) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => m_2 : hol.term Number_2ENatural_2Enatural => s_3 : hol.term (Set_2Eset A) => hol.ABS_THM Number_2ENatural_2Enatural hol.bool (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_3 m_2) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_1 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_3 t_1) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_2 n_4))) (n_4 : hol.term Number_2ENatural_2Enatural => hol.true) (n_4 : hol.term Number_2ENatural_2Enatural => thm_31 B A n_4 t_1 m_2 s_3).

(; Theorem: |- ((= (Data.Bool.! \lambda n. ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize ((Set.cross s) t)) ((Number.Natural.* m) n))))) (Data.Bool.! \lambda n. Data.Bool.T)) ;)

(; dict ;)

def thm_33 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> m_2 : hol.term Number_2ENatural_2Enatural -> s_3 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_3 m_2) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_1 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_3 t_1) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_2 n_4)))) (hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.true))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => m_2 : hol.term Number_2ENatural_2Enatural => s_3 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr Number_2ENatural_2Enatural hol.bool) hol.bool (hol.forall Number_2ENatural_2Enatural) (hol.forall Number_2ENatural_2Enatural) (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_3 m_2) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_1 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_3 t_1) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_2 n_4))) (n_4 : hol.term Number_2ENatural_2Enatural => hol.true) thm_6 (thm_32 B A t_1 m_2 s_3).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_34 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda n. t)) t)) ((= (Data.Bool.! \lambda n. t)) t)) ;)

(; dict ;)

def thm_35 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (n_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (n_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (n_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda n. t)) t)) ;)

(; dict ;)

def thm_36 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (n_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (n_2 : hol.term A => t_1)) t_1) (thm_34 A t_1) (thm_35 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_37 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_3 A t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda n. t)) t) ;)

(; dict ;)

def thm_38 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (n_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (n_2 : hol.term A => t_1)) t_1) (thm_36 A t_1) (thm_37 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda n. t)) t) ;)

(; dict ;)

def thm_39 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => t_1)) t_1) :=
  t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_38 A t_1) Number_2ENatural_2Enatural t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda n. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_40 : hol.proof (hol.eq hol.bool (hol.forall Number_2ENatural_2Enatural (n_1 : hol.term Number_2ENatural_2Enatural => hol.true)) hol.true) :=
  (t_1 : hol.term hol.bool => thm_39 t_1) hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda n. ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize ((Set.cross s) t)) ((Number.Natural.* m) n))))) Data.Bool.T) ;)

(; dict ;)

def thm_41 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> m_2 : hol.term Number_2ENatural_2Enatural -> s_3 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_3 m_2) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_1 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_3 t_1) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_2 n_4)))) hol.true) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => m_2 : hol.term Number_2ENatural_2Enatural => s_3 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_3 m_2) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_1 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_3 t_1) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_2 n_4)))) (hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.true)) hol.true (thm_33 B A t_1 m_2 s_3) thm_40.

(; Theorem: |- ((= \lambda m. (Data.Bool.! \lambda n. ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize ((Set.cross s) t)) ((Number.Natural.* m) n))))) \lambda m. Data.Bool.T) ;)

(; dict ;)

def thm_42 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr Number_2ENatural_2Enatural hol.bool) (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_2 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_1 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4)))) (m_3 : hol.term Number_2ENatural_2Enatural => hol.true)) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.ABS_THM Number_2ENatural_2Enatural hol.bool (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_2 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_1 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4)))) (m_3 : hol.term Number_2ENatural_2Enatural => hol.true) (m_3 : hol.term Number_2ENatural_2Enatural => thm_41 B A t_1 m_3 s_2).

(; Theorem: |- ((= (Data.Bool.! \lambda m. (Data.Bool.! \lambda n. ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize ((Set.cross s) t)) ((Number.Natural.* m) n)))))) (Data.Bool.! \lambda m. Data.Bool.T)) ;)

(; dict ;)

def thm_43 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_2 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_1 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4))))) (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.true))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr Number_2ENatural_2Enatural hol.bool) hol.bool (hol.forall Number_2ENatural_2Enatural) (hol.forall Number_2ENatural_2Enatural) (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_2 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_1 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4)))) (m_3 : hol.term Number_2ENatural_2Enatural => hol.true) thm_6 (thm_42 B A t_1 s_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda m. t)) t)) ((= (Data.Bool.! \lambda m. t)) t)) ;)

(; dict ;)

def thm_44 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (m_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (m_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (m_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda m. t)) t)) ;)

(; dict ;)

def thm_45 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (m_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (m_2 : hol.term A => t_1)) t_1) (thm_34 A t_1) (thm_44 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda m. t)) t) ;)

(; dict ;)

def thm_46 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (m_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (m_2 : hol.term A => t_1)) t_1) (thm_45 A t_1) (thm_37 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda m. t)) t) ;)

(; dict ;)

def thm_47 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall Number_2ENatural_2Enatural (m_2 : hol.term Number_2ENatural_2Enatural => t_1)) t_1) :=
  t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_46 A t_1) Number_2ENatural_2Enatural t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda m. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_48 : hol.proof (hol.eq hol.bool (hol.forall Number_2ENatural_2Enatural (m_1 : hol.term Number_2ENatural_2Enatural => hol.true)) hol.true) :=
  (t_1 : hol.term hol.bool => thm_47 t_1) hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda m. (Data.Bool.! \lambda n. ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize ((Set.cross s) t)) ((Number.Natural.* m) n)))))) Data.Bool.T) ;)

(; dict ;)

def thm_49 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_2 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_1 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4))))) hol.true) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_2 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_1 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4))))) (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.true)) hol.true (thm_43 B A t_1 s_2) thm_48.

(; Theorem: |- ((= \lambda t. (Data.Bool.! \lambda m. (Data.Bool.! \lambda n. ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize ((Set.cross s) t)) ((Number.Natural.* m) n)))))) \lambda t. Data.Bool.T) ;)

(; dict ;)

def thm_50 : A : hol.type -> B : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset B) hol.bool) (t_2 : hol.term (Set_2Eset B) => hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_1 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4))))) (t_2 : hol.term (Set_2Eset B) => hol.true)) :=
  A : hol.type => B : hol.type => s_1 : hol.term (Set_2Eset A) => hol.ABS_THM (Set_2Eset B) hol.bool (t_2 : hol.term (Set_2Eset B) => hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_1 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4))))) (t_2 : hol.term (Set_2Eset B) => hol.true) (t_2 : hol.term (Set_2Eset B) => thm_49 B A t_2 s_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t. (Data.Bool.! \lambda m. (Data.Bool.! \lambda n. ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize ((Set.cross s) t)) ((Number.Natural.* m) n))))))) (Data.Bool.! \lambda t. Data.Bool.T)) ;)

(; dict ;)

def thm_51 : A : hol.type -> B : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_1 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4)))))) (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.true))) :=
  A : hol.type => B : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr (Set_2Eset B) hol.bool) hol.bool (hol.forall (Set_2Eset B)) (hol.forall (Set_2Eset B)) (t_2 : hol.term (Set_2Eset B) => hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_1 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4))))) (t_2 : hol.term (Set_2Eset B) => hol.true) (thm_5 B) (thm_50 A B s_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda t. t)) t)) ((= (Data.Bool.! \lambda t. t)) t)) ;)

(; dict ;)

def thm_52 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (t_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (t_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (t_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda t. t)) t)) ;)

(; dict ;)

def thm_53 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (t_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (t_2 : hol.term A => t_1)) t_1) (thm_34 A t_1) (thm_52 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t. t)) t) ;)

(; dict ;)

def thm_54 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (t_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (t_2 : hol.term A => t_1)) t_1) (thm_53 A t_1) (thm_37 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t. t)) t) ;)

(; dict ;)

def thm_55 : B : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => t_1)) t_1) :=
  B : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_54 A t_1) (Set_2Eset B) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda t. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_56 : B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset B) (t_1 : hol.term (Set_2Eset B) => hol.true)) hol.true) :=
  B : hol.type => (B : hol.type => t_1 : hol.term hol.bool => thm_55 B t_1) B hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda t. (Data.Bool.! \lambda m. (Data.Bool.! \lambda n. ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize ((Set.cross s) t)) ((Number.Natural.* m) n))))))) Data.Bool.T) ;)

(; dict ;)

def thm_57 : A : hol.type -> B : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_1 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4)))))) hol.true) :=
  A : hol.type => B : hol.type => s_1 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_1 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4)))))) (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.true)) hol.true (thm_51 A B s_1) (thm_56 B).

(; Theorem: |- ((= \lambda s. (Data.Bool.! \lambda t. (Data.Bool.! \lambda m. (Data.Bool.! \lambda n. ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize ((Set.cross s) t)) ((Number.Natural.* m) n))))))) \lambda s. Data.Bool.T) ;)

(; dict ;)

def thm_58 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_1 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4)))))) (s_1 : hol.term (Set_2Eset A) => hol.true)) :=
  B : hol.type => A : hol.type => hol.ABS_THM (Set_2Eset A) hol.bool (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_1 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4)))))) (s_1 : hol.term (Set_2Eset A) => hol.true) (s_1 : hol.term (Set_2Eset A) => thm_57 A B s_1).

(; Theorem: |- ((= (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. (Data.Bool.! \lambda m. (Data.Bool.! \lambda n. ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize ((Set.cross s) t)) ((Number.Natural.* m) n)))))))) (Data.Bool.! \lambda s. Data.Bool.T)) ;)

(; dict ;)

def thm_59 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_1 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4))))))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.true))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (Set_2Eset A) hol.bool) hol.bool (hol.forall (Set_2Eset A)) (hol.forall (Set_2Eset A)) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_1 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4)))))) (s_1 : hol.term (Set_2Eset A) => hol.true) (thm_4 A) (thm_58 B A).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda s. t)) t)) ((= (Data.Bool.! \lambda s. t)) t)) ;)

(; dict ;)

def thm_60 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (s_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (s_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (s_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda s. t)) t)) ;)

(; dict ;)

def thm_61 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (s_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (s_2 : hol.term A => t_1)) t_1) (thm_34 A t_1) (thm_60 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda s. t)) t) ;)

(; dict ;)

def thm_62 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (s_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (s_2 : hol.term A => t_1)) t_1) (thm_61 A t_1) (thm_37 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda s. t)) t) ;)

(; dict ;)

def thm_63 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (s_2 : hol.term (Set_2Eset A) => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_62 A t_1) (Set_2Eset A) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda s. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_64 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => thm_63 A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. (Data.Bool.! \lambda m. (Data.Bool.! \lambda n. ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize ((Set.cross s) t)) ((Number.Natural.* m) n)))))))) Data.Bool.T) ;)

(; dict ;)

def thm_65 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_1 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4))))))) hol.true) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_1 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4))))))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.true)) hol.true (thm_59 B A) (thm_64 A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. (Data.Bool.! \lambda m. (Data.Bool.! \lambda n. ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize ((Set.cross s) t)) ((Number.Natural.* m) n)))))))) ;)

(; dict ;)

def thm_66 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_1 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4)))))))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_1 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4))))))) hol.true (thm_65 B A).

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. (Data.Bool.! \lambda m. (Data.Bool.! \lambda n. ((Data.Bool.==> ((Data.Bool./\ ((Set.hasSize s) m)) ((Set.hasSize t) n))) ((Set.hasSize ((Set.cross s) t)) ((Number.Natural.* m) n))))))) ;)

(; dict ;)

def thm_67 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_1 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4))))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP hol.true (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.forall Number_2ENatural_2Enatural (n_4 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.and (Set_2EhasSize (hol.arr (Set_2Eset A) (hol.arr Number_2ENatural_2Enatural hol.bool)) s_1 m_3) (Set_2EhasSize (hol.arr (Set_2Eset B) (hol.arr Number_2ENatural_2Enatural hol.bool)) t_2 n_4)) (Set_2EhasSize (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) (hol.arr Number_2ENatural_2Enatural hol.bool)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Number_2ENatural_2E_2A (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural Number_2ENatural_2Enatural)) m_3 n_4))))))) (thm_66 B A) thm_1.
