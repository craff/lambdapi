
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME bool_2Ddef_2Da7.

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))).

(; axiom ;)

thm_1 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))).

(; axiom ;)

thm_2 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)).

(; axiom ;)

thm_3 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))).

(; axiom ;)

thm_4 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)).

(; axiom ;)

thm_5 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))).

(; axiom ;)

thm_6 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))).

(; axiom ;)

thm_7 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1)).

(; axiom ;)

thm_8 : hol.proof hol.true.

(; axiom ;)

thm_9 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)).

(; axiom ;)

thm_10 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)).

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_11 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))).

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_12 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (thm_11 B A g_1 f_2) (thm_11 B A g_1 f_2).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_13 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)).

(; Theorem: |- ((= ((= ((= x) y)) ((= y) x))) ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_14 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)).

(; Theorem: |- ((= ((= ((= x) y)) ((= y) x))) ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_15 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_14 A y_1 x_2) (thm_14 A y_1 x_2).

(; Theorem: |- (Data.Bool.! \lambda y. ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_16 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => thm_0 A x_1.

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_17 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => thm_16 A x_2 y_1.

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_18 : y_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_2 y_1) (hol.eq hol.bool y_1 x_2)) :=
  y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => (A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_15 A y_1 x_2) (thm_17 A y_1 x_2)) hol.bool y_1 x_2.

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_19 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => (y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => thm_18 y_1 x_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1).

(; Theorem: |- ((= \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_20 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM (hol.arr A B) hol.bool (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)) (g_2 : hol.term (hol.arr A B) => thm_19 B A g_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)))) ;)

(; dict ;)

def thm_21 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)) (thm_13 B A) (thm_20 B A f_1).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)))) ;)

(; dict ;)

def thm_22 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A B) hol.bool (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) (f_1 : hol.term (hol.arr A B) => thm_21 B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) ;)

(; dict ;)

def thm_23 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) (thm_13 B A) (thm_22 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))))) ;)

(; dict ;)

def thm_24 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (thm_23 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) ;)

(; dict ;)

def thm_25 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (thm_24 B A) (thm_1 B A).

(; Theorem: |- (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_26 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => thm_25 B A f_1.

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_27 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => thm_26 B A f_2 g_1.

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_28 : _3F2468 : hol.type -> g_1 : hol.term (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) -> f_2 : hol.term (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) f_2 g_1) (hol.forall (hol.arr _3F2468 hol.bool) (x_3 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq hol.bool (f_2 x_3) (g_1 x_3)))) :=
  _3F2468 : hol.type => g_1 : hol.term (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) => f_2 : hol.term (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (thm_12 B A g_1 f_2) (thm_27 B A g_1 f_2)) hol.bool (hol.arr _3F2468 hol.bool) g_1 f_2.

(; Theorem: |- ((= ((= Data.Bool.!) \lambda P. ((= P) \lambda x. Data.Bool.T))) (Data.Bool.! \lambda x. ((= (Data.Bool.! x)) (\lambda P. ((= P) \lambda x. Data.Bool.T) x)))) ;)

(; dict ;)

def thm_29 : _3F2468 : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) (hol.forall _3F2468) (P_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_1 (x_2 : hol.term _3F2468 => hol.true))) (hol.forall (hol.arr _3F2468 hol.bool) (x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq hol.bool (hol.forall _3F2468 x_1) ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1)))) :=
  _3F2468 : hol.type => (_3F2468 : hol.type => g_1 : hol.term (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) => f_2 : hol.term (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) => thm_28 _3F2468 g_1 f_2) _3F2468 (P_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_1 (x_2 : hol.term _3F2468 => hol.true)) (hol.forall _3F2468).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_30 : _3F2468 : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr _3F2468 hol.bool)) (hol.forall (hol.arr _3F2468 hol.bool))) :=
  _3F2468 : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr _3F2468 hol.bool)).

(; Theorem: |- ((= (= (Data.Bool.! x))) (= (Data.Bool.! x))) ;)

(; dict ;)

def thm_31 : _3F2468 : hol.type -> x_1 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall _3F2468 x_1)) (hol.eq hol.bool (hol.forall _3F2468 x_1))) :=
  _3F2468 : hol.type => x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall _3F2468 x_1)).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_32 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool) (hol.eq hol.bool)) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool).

(; Theorem: |- ((= (\lambda P. ((= P) \lambda x. Data.Bool.T) P)) ((= P) \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_33 : _3F2468 : hol.type -> P_1 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq hol.bool ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) P_1) (hol.eq (hol.arr _3F2468 hol.bool) P_1 (x_2 : hol.term _3F2468 => hol.true))) :=
  _3F2468 : hol.type => P_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.BETA_CONV (hol.arr _3F2468 hol.bool) hol.bool (P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) P_1.

(; Theorem: |- ((= \lambda P. (\lambda P. ((= P) \lambda x. Data.Bool.T) P)) \lambda P. ((= P) \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_34 : _3F2468 : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) (P_1 : hol.term (hol.arr _3F2468 hol.bool) => (P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) P_1) (P_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_1 (x_2 : hol.term _3F2468 => hol.true))) :=
  _3F2468 : hol.type => hol.ABS_THM (hol.arr _3F2468 hol.bool) hol.bool (P_1 : hol.term (hol.arr _3F2468 hol.bool) => (P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) P_1) (P_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_1 (x_2 : hol.term _3F2468 => hol.true)) (P_1 : hol.term (hol.arr _3F2468 hol.bool) => thm_33 _3F2468 P_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_35 : _3F2468 : hol.type -> x_1 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq (hol.arr _3F2468 hol.bool) x_1 x_1) :=
  _3F2468 : hol.type => x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.REFL (hol.arr _3F2468 hol.bool) x_1.

(; Theorem: |- ((= (\lambda P. (\lambda P. ((= P) \lambda x. Data.Bool.T) P) x)) (\lambda P. ((= P) \lambda x. Data.Bool.T) x)) ;)

(; dict ;)

def thm_36 : _3F2468 : hol.type -> x_1 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq hol.bool ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => (P_3 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_3 (x_4 : hol.term _3F2468 => hol.true)) P_2) x_1) ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1)) :=
  _3F2468 : hol.type => x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.APP_THM (hol.arr _3F2468 hol.bool) hol.bool (P_2 : hol.term (hol.arr _3F2468 hol.bool) => (P_3 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_3 (x_4 : hol.term _3F2468 => hol.true)) P_2) (P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1 x_1 (thm_34 _3F2468) (thm_35 _3F2468 x_1).

(; Theorem: |- ((= (= (\lambda P. (\lambda P. ((= P) \lambda x. Data.Bool.T) P) x))) (= (\lambda P. ((= P) \lambda x. Data.Bool.T) x))) ;)

(; dict ;)

def thm_37 : _3F2468 : hol.type -> x_1 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => (P_3 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_3 (x_4 : hol.term _3F2468 => hol.true)) P_2) x_1)) (hol.eq hol.bool ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1))) :=
  _3F2468 : hol.type => x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => (P_3 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_3 (x_4 : hol.term _3F2468 => hol.true)) P_2) x_1) ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1) thm_32 (thm_36 _3F2468 x_1).

(; Theorem: |- ((= (\lambda P. ((= P) \lambda x. Data.Bool.T) x)) ((= x) \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_38 : _3F2468 : hol.type -> x_1 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq hol.bool ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1) (hol.eq (hol.arr _3F2468 hol.bool) x_1 (x_2 : hol.term _3F2468 => hol.true))) :=
  _3F2468 : hol.type => x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.BETA_CONV (hol.arr _3F2468 hol.bool) hol.bool (P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1.

(; Theorem: |- ((= ((= (\lambda P. (\lambda P. ((= P) \lambda x. Data.Bool.T) P) x)) (\lambda P. ((= P) \lambda x. Data.Bool.T) x))) ((= (\lambda P. ((= P) \lambda x. Data.Bool.T) x)) ((= x) \lambda x. Data.Bool.T))) ;)

(; dict ;)

def thm_39 : _3F2468 : hol.type -> x_1 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => (P_3 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_3 (x_4 : hol.term _3F2468 => hol.true)) P_2) x_1) ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1)) (hol.eq hol.bool ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1) (hol.eq (hol.arr _3F2468 hol.bool) x_1 (x_2 : hol.term _3F2468 => hol.true)))) :=
  _3F2468 : hol.type => x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => (P_3 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_3 (x_4 : hol.term _3F2468 => hol.true)) P_2) x_1)) (hol.eq hol.bool ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1)) ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1) (hol.eq (hol.arr _3F2468 hol.bool) x_1 (x_2 : hol.term _3F2468 => hol.true)) (thm_37 _3F2468 x_1) (thm_38 _3F2468 x_1).

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_40 : _3F2468 : hol.type -> g_1 : hol.term (hol.arr _3F2468 hol.bool) -> f_2 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr _3F2468 hol.bool) f_2 g_1) (hol.forall _3F2468 (x_3 : hol.term _3F2468 => hol.eq hol.bool (f_2 x_3) (g_1 x_3)))) :=
  _3F2468 : hol.type => g_1 : hol.term (hol.arr _3F2468 hol.bool) => f_2 : hol.term (hol.arr _3F2468 hol.bool) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => thm_27 B A g_1 f_2) hol.bool _3F2468 g_1 f_2.

(; Theorem: |- ((= ((= x) \lambda x. Data.Bool.T)) (Data.Bool.! \lambda x. ((= (x x)) (\lambda x. Data.Bool.T x)))) ;)

(; dict ;)

def thm_41 : _3F2468 : hol.type -> x_1 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr _3F2468 hol.bool) x_1 (x_2 : hol.term _3F2468 => hol.true)) (hol.forall _3F2468 (x_2 : hol.term _3F2468 => hol.eq hol.bool (x_1 x_2) ((x_3 : hol.term _3F2468 => hol.true) x_2)))) :=
  _3F2468 : hol.type => x_1 : hol.term (hol.arr _3F2468 hol.bool) => (_3F2468 : hol.type => g_1 : hol.term (hol.arr _3F2468 hol.bool) => f_2 : hol.term (hol.arr _3F2468 hol.bool) => thm_40 _3F2468 g_1 f_2) _3F2468 (x_2 : hol.term _3F2468 => hol.true) x_1.

(; Theorem: |- ((= (\lambda P. ((= P) \lambda x. Data.Bool.T) x)) (Data.Bool.! \lambda x. ((= (x x)) (\lambda x. Data.Bool.T x)))) ;)

(; dict ;)

def thm_42 : _3F2468 : hol.type -> x_1 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq hol.bool ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1) (hol.forall _3F2468 (x_2 : hol.term _3F2468 => hol.eq hol.bool (x_1 x_2) ((x_3 : hol.term _3F2468 => hol.true) x_2)))) :=
  _3F2468 : hol.type => x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.TRANS hol.bool ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1) (hol.eq (hol.arr _3F2468 hol.bool) x_1 (x_2 : hol.term _3F2468 => hol.true)) (hol.forall _3F2468 (x_2 : hol.term _3F2468 => hol.eq hol.bool (x_1 x_2) ((x_3 : hol.term _3F2468 => hol.true) x_2))) (hol.EQ_MP (hol.eq hol.bool ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => (P_3 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_3 (x_4 : hol.term _3F2468 => hol.true)) P_2) x_1) ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1)) (hol.eq hol.bool ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1) (hol.eq (hol.arr _3F2468 hol.bool) x_1 (x_2 : hol.term _3F2468 => hol.true))) (thm_39 _3F2468 x_1) (thm_36 _3F2468 x_1)) (thm_41 _3F2468 x_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_43 : _3F2468 : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) (hol.forall _3F2468) (hol.forall _3F2468)) :=
  _3F2468 : hol.type => hol.REFL (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) (hol.forall _3F2468).

(; Theorem: |- ((= (= (x x))) (= (x x))) ;)

(; dict ;)

def thm_44 : _3F2468 : hol.type -> x_1 : hol.term _3F2468 -> x_2 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (x_2 x_1)) (hol.eq hol.bool (x_2 x_1))) :=
  _3F2468 : hol.type => x_1 : hol.term _3F2468 => x_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (x_2 x_1)).

(; Theorem: |- ((= (\lambda x. Data.Bool.T x)) Data.Bool.T) ;)

(; dict ;)

def thm_45 : _3F2468 : hol.type -> x_1 : hol.term _3F2468 -> hol.proof (hol.eq hol.bool ((x_2 : hol.term _3F2468 => hol.true) x_1) hol.true) :=
  _3F2468 : hol.type => x_1 : hol.term _3F2468 => hol.BETA_CONV _3F2468 hol.bool (x_2 : hol.term _3F2468 => hol.true) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. Data.Bool.T x)) \lambda x. Data.Bool.T) ;)

(; dict ;)

def thm_46 : _3F2468 : hol.type -> hol.proof (hol.eq (hol.arr _3F2468 hol.bool) (x_1 : hol.term _3F2468 => (x_2 : hol.term _3F2468 => hol.true) x_1) (x_1 : hol.term _3F2468 => hol.true)) :=
  _3F2468 : hol.type => hol.ABS_THM _3F2468 hol.bool (x_1 : hol.term _3F2468 => (x_2 : hol.term _3F2468 => hol.true) x_1) (x_1 : hol.term _3F2468 => hol.true) (x_1 : hol.term _3F2468 => thm_45 _3F2468 x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_47 : _3F2468 : hol.type -> x_1 : hol.term _3F2468 -> hol.proof (hol.eq _3F2468 x_1 x_1) :=
  _3F2468 : hol.type => x_1 : hol.term _3F2468 => hol.REFL _3F2468 x_1.

(; Theorem: |- ((= (\lambda x. (\lambda x. Data.Bool.T x) x)) (\lambda x. Data.Bool.T x)) ;)

(; dict ;)

def thm_48 : _3F2468 : hol.type -> x_1 : hol.term _3F2468 -> hol.proof (hol.eq hol.bool ((x_2 : hol.term _3F2468 => (x_3 : hol.term _3F2468 => hol.true) x_2) x_1) ((x_2 : hol.term _3F2468 => hol.true) x_1)) :=
  _3F2468 : hol.type => x_1 : hol.term _3F2468 => hol.APP_THM _3F2468 hol.bool (x_2 : hol.term _3F2468 => (x_3 : hol.term _3F2468 => hol.true) x_2) (x_2 : hol.term _3F2468 => hol.true) x_1 x_1 (thm_46 _3F2468) (thm_47 _3F2468 x_1).

(; Theorem: |- ((= (= (\lambda x. (\lambda x. Data.Bool.T x) x))) (= (\lambda x. Data.Bool.T x))) ;)

(; dict ;)

def thm_49 : _3F2468 : hol.type -> x_1 : hol.term _3F2468 -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((x_2 : hol.term _3F2468 => (x_3 : hol.term _3F2468 => hol.true) x_2) x_1)) (hol.eq hol.bool ((x_2 : hol.term _3F2468 => hol.true) x_1))) :=
  _3F2468 : hol.type => x_1 : hol.term _3F2468 => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((x_2 : hol.term _3F2468 => (x_3 : hol.term _3F2468 => hol.true) x_2) x_1) ((x_2 : hol.term _3F2468 => hol.true) x_1) thm_32 (thm_48 _3F2468 x_1).

(; Theorem: |- ((= ((= (\lambda x. (\lambda x. Data.Bool.T x) x)) (\lambda x. Data.Bool.T x))) ((= (\lambda x. Data.Bool.T x)) Data.Bool.T)) ;)

(; dict ;)

def thm_50 : _3F2468 : hol.type -> x_1 : hol.term _3F2468 -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((x_2 : hol.term _3F2468 => (x_3 : hol.term _3F2468 => hol.true) x_2) x_1) ((x_2 : hol.term _3F2468 => hol.true) x_1)) (hol.eq hol.bool ((x_2 : hol.term _3F2468 => hol.true) x_1) hol.true)) :=
  _3F2468 : hol.type => x_1 : hol.term _3F2468 => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((x_2 : hol.term _3F2468 => (x_3 : hol.term _3F2468 => hol.true) x_2) x_1)) (hol.eq hol.bool ((x_2 : hol.term _3F2468 => hol.true) x_1)) ((x_2 : hol.term _3F2468 => hol.true) x_1) hol.true (thm_49 _3F2468 x_1) (thm_45 _3F2468 x_1).

(; Theorem: |- ((= ((= (x x)) (\lambda x. Data.Bool.T x))) ((= (x x)) Data.Bool.T)) ;)

(; dict ;)

def thm_51 : _3F2468 : hol.type -> x_1 : hol.term _3F2468 -> x_2 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (x_2 x_1) ((x_3 : hol.term _3F2468 => hol.true) x_1)) (hol.eq hol.bool (x_2 x_1) hol.true)) :=
  _3F2468 : hol.type => x_1 : hol.term _3F2468 => x_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (x_2 x_1)) (hol.eq hol.bool (x_2 x_1)) ((x_3 : hol.term _3F2468 => hol.true) x_1) hol.true (thm_44 _3F2468 x_1 x_2) (hol.EQ_MP (hol.eq hol.bool ((x_3 : hol.term _3F2468 => (x_4 : hol.term _3F2468 => hol.true) x_3) x_1) ((x_3 : hol.term _3F2468 => hol.true) x_1)) (hol.eq hol.bool ((x_3 : hol.term _3F2468 => hol.true) x_1) hol.true) (thm_50 _3F2468 x_1) (thm_48 _3F2468 x_1)).

(; Theorem: |- ((= ((= ((= t) Data.Bool.T)) t)) ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_52 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.T)) t)) ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_53 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_52 t_1) (thm_52 t_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_54 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool) (hol.forall hol.bool)) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_55 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_56 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) thm_55 thm_55.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_57 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) thm_54 thm_56.

(; Theorem: |- ((= ((= ((= Data.Bool.T) t)) t)) ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_58 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((= Data.Bool.T) t)) t)) ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_59 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_58 t_1) (thm_58 t_1).

(; Theorem: |- ((= ((= Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_60 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_2 t_1.

(; Theorem: |- ((= (= ((Data.Bool./\ p) q))) (= ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_61 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_62 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q))) ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_63 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_61 q_1 p_2) (thm_62 q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool./\ p))) (= (Data.Bool./\ p))) ;)

(; dict ;)

def thm_64 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_65 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1.

(; Theorem: |- ((= ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p))) ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_66 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)) (thm_64 p_1) (thm_65 p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_67 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 p_1) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool p_1.

(; Theorem: |- ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) ;)

(; dict ;)

def thm_68 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1 p_1 thm_3 (thm_67 p_1).

(; Theorem: |- ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_69 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) (thm_66 p_1) (thm_68 p_1).

(; Theorem: |- ((= q) q) ;)

(; dict ;)

def thm_70 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_1 q_1) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) ;)

(; dict ;)

def thm_71 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1 q_1 (thm_69 p_2) (thm_70 q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_72 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) (thm_63 q_1 p_2) (thm_71 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_73 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_74 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hol.EQ_MP (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_72 q_1 p_2) (thm_73 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) q))) q) ;)

(; dict ;)

def thm_75 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 q_1)) q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_74 q_1 p_2 hyp_1 q_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_76 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_77 : q_1 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof q_1 :=
  q_1 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_78 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.PROP_EXT p_2 q_1 (hyp_3 : hol.proof q_1 => thm_76 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_77 q_1 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_79 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.EQ_MP p_1 q_2 (thm_78 q_2 p_1 hyp_1 hyp_2) (thm_76 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) q) ;)

(; dict ;)

def thm_80 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 q_2) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_79 p_1 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) q)) ;)

(; dict ;)

def thm_81 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_80 p_2 q_1 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_82 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_75 q_2 p_1 hyp_1 (thm_81 q_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_83 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_72 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) x)) ;)

(; dict ;)

def thm_84 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) -> hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) x) ;)

(; dict ;)

def thm_85 : p_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) -> hol.proof (hol.imp q_3 x_2) :=
  p_1 : hol.term hol.bool => x_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) => thm_84 x_2 q_3 p_1 hyp_2 (thm_76 p_1 hyp_1).

(; Theorem: |- x ;)

(; dict ;)

def thm_86 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) -> hol.proof x_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) => thm_85 p_2 x_3 q_1 hyp_1 hyp_3 (thm_77 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x) ;)

(; dict ;)

def thm_87 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.imp (hol.imp p_3 (hol.imp q_2 x_1)) x_1) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hyp_3 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => thm_86 q_2 p_3 x_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_88 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => x_3 : hol.term hol.bool => thm_87 x_3 q_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_89 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1) (thm_83 q_1 p_2) (thm_88 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= q) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_90 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool q_2 (hol.and p_1 q_2)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hol.PROP_EXT q_2 (hol.and p_1 q_2) (hyp_2 : hol.proof (hol.and p_1 q_2) => thm_82 p_1 q_2 hyp_2) (hyp_2 : hol.proof q_2 => thm_89 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_91 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_90 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_92 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_59 t_1) (thm_60 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) => thm_91 t_1 hyp_1).

(; Theorem: |- ((= ((= t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_93 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_4 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_94 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_90 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_95 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_52 t_1) (thm_93 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) => thm_94 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_96 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)).

(; Theorem: |- ((= ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_97 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_96 t_1) (thm_96 t_1).

(; Theorem: |- ((= ((= Data.Bool.F) t)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_98 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_5 t_1.

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_99 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_90 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_100 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_97 t_1) (thm_98 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) => thm_99 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_101 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_102 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_101 t_1) (thm_101 t_1).

(; Theorem: |- ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_103 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_6 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_104 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (thm_100 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_102 t_1) (thm_103 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_105 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (thm_95 t_1) (thm_104 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_106 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (thm_92 t_1) (thm_105 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_107 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => thm_106 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_108 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_82 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_109 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_2) (hol.not t_2)) (hol.eq hol.bool (hol.eq hol.bool t_2 hol.false) (hol.not t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_2) (hol.not t_2)) (hol.eq hol.bool (hol.eq hol.bool t_2 hol.false) (hol.not t_2)))))) thm_57 thm_107 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) => thm_108 t_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) p))) p) ;)

(; dict ;)

def thm_110 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 p_2)) p_2) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_74 q_1 p_2 hyp_1 p_2.

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_111 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.SYM hol.bool p_1 q_2 (thm_78 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_112 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP q_1 p_2 (thm_111 p_2 q_1 hyp_1 hyp_2) (thm_77 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_113 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_112 q_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_114 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_113 p_2 q_1 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_115 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_110 q_1 p_2 hyp_1 (thm_114 q_1 p_2).

(; Theorem: |- ((= ((= t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_116 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_115 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) hyp_1.

(; Theorem: |- ((= ((= t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_117 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_109 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) => thm_116 t_1 hyp_1).

(; Theorem: |- ((= ((= (x x)) Data.Bool.T)) (x x)) ;)

(; dict ;)

def thm_118 : _3F2468 : hol.type -> x_1 : hol.term _3F2468 -> x_2 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (x_2 x_1) hol.true) (x_2 x_1)) :=
  _3F2468 : hol.type => x_1 : hol.term _3F2468 => x_2 : hol.term (hol.arr _3F2468 hol.bool) => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_53 t_1) (thm_117 t_1)) (x_2 x_1).

(; Theorem: |- ((= ((= (x x)) (\lambda x. Data.Bool.T x))) (x x)) ;)

(; dict ;)

def thm_119 : _3F2468 : hol.type -> x_1 : hol.term _3F2468 -> x_2 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (x_2 x_1) ((x_3 : hol.term _3F2468 => hol.true) x_1)) (x_2 x_1)) :=
  _3F2468 : hol.type => x_1 : hol.term _3F2468 => x_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (x_2 x_1) ((x_3 : hol.term _3F2468 => hol.true) x_1)) (hol.eq hol.bool (x_2 x_1) hol.true) (x_2 x_1) (thm_51 _3F2468 x_1 x_2) (thm_118 _3F2468 x_1 x_2).

(; Theorem: |- ((= \lambda x. ((= (x x)) (\lambda x. Data.Bool.T x))) \lambda x. (x x)) ;)

(; dict ;)

def thm_120 : _3F2468 : hol.type -> x_1 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq (hol.arr _3F2468 hol.bool) (x_2 : hol.term _3F2468 => hol.eq hol.bool (x_1 x_2) ((x_3 : hol.term _3F2468 => hol.true) x_2)) (x_2 : hol.term _3F2468 => x_1 x_2)) :=
  _3F2468 : hol.type => x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.ABS_THM _3F2468 hol.bool (x_2 : hol.term _3F2468 => hol.eq hol.bool (x_1 x_2) ((x_3 : hol.term _3F2468 => hol.true) x_2)) (x_2 : hol.term _3F2468 => x_1 x_2) (x_2 : hol.term _3F2468 => thm_119 _3F2468 x_2 x_1).

(; Theorem: |- ((= \lambda x. (t x)) t) ;)

(; dict ;)

def thm_121 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => thm_7 B A t_1.

(; Theorem: |- ((= \lambda x. (t x)) t) ;)

(; dict ;)

def thm_122 : _3F2468 : hol.type -> t_1 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq (hol.arr _3F2468 hol.bool) (x_2 : hol.term _3F2468 => t_1 x_2) t_1) :=
  _3F2468 : hol.type => t_1 : hol.term (hol.arr _3F2468 hol.bool) => (B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => thm_121 B A t_1) hol.bool _3F2468 t_1.

(; Theorem: |- ((= \lambda x. (x x)) x) ;)

(; dict ;)

def thm_123 : _3F2468 : hol.type -> x_1 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq (hol.arr _3F2468 hol.bool) (x_2 : hol.term _3F2468 => x_1 x_2) x_1) :=
  _3F2468 : hol.type => x_1 : hol.term (hol.arr _3F2468 hol.bool) => (_3F2468 : hol.type => t_1 : hol.term (hol.arr _3F2468 hol.bool) => thm_122 _3F2468 t_1) _3F2468 x_1.

(; Theorem: |- ((= \lambda x. ((= (x x)) (\lambda x. Data.Bool.T x))) x) ;)

(; dict ;)

def thm_124 : _3F2468 : hol.type -> x_1 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq (hol.arr _3F2468 hol.bool) (x_2 : hol.term _3F2468 => hol.eq hol.bool (x_1 x_2) ((x_3 : hol.term _3F2468 => hol.true) x_2)) x_1) :=
  _3F2468 : hol.type => x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.TRANS (hol.arr _3F2468 hol.bool) (x_2 : hol.term _3F2468 => hol.eq hol.bool (x_1 x_2) ((x_3 : hol.term _3F2468 => hol.true) x_2)) (x_2 : hol.term _3F2468 => x_1 x_2) x_1 (thm_120 _3F2468 x_1) (thm_123 _3F2468 x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (x x)) (\lambda x. Data.Bool.T x)))) (Data.Bool.! x)) ;)

(; dict ;)

def thm_125 : _3F2468 : hol.type -> x_1 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall _3F2468 (x_2 : hol.term _3F2468 => hol.eq hol.bool (x_1 x_2) ((x_3 : hol.term _3F2468 => hol.true) x_2))) (hol.forall _3F2468 x_1)) :=
  _3F2468 : hol.type => x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.APP_THM (hol.arr _3F2468 hol.bool) hol.bool (hol.forall _3F2468) (hol.forall _3F2468) (x_2 : hol.term _3F2468 => hol.eq hol.bool (x_1 x_2) ((x_3 : hol.term _3F2468 => hol.true) x_2)) x_1 (thm_43 _3F2468) (thm_124 _3F2468 x_1).

(; Theorem: |- ((= (\lambda P. ((= P) \lambda x. Data.Bool.T) x)) (Data.Bool.! x)) ;)

(; dict ;)

def thm_126 : _3F2468 : hol.type -> x_1 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq hol.bool ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1) (hol.forall _3F2468 x_1)) :=
  _3F2468 : hol.type => x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.TRANS hol.bool ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1) (hol.forall _3F2468 (x_2 : hol.term _3F2468 => hol.eq hol.bool (x_1 x_2) ((x_3 : hol.term _3F2468 => hol.true) x_2))) (hol.forall _3F2468 x_1) (thm_42 _3F2468 x_1) (thm_125 _3F2468 x_1).

(; Theorem: |- ((= ((= (Data.Bool.! x)) (\lambda P. ((= P) \lambda x. Data.Bool.T) x))) ((= (Data.Bool.! x)) (Data.Bool.! x))) ;)

(; dict ;)

def thm_127 : _3F2468 : hol.type -> x_1 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall _3F2468 x_1) ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1)) (hol.eq hol.bool (hol.forall _3F2468 x_1) (hol.forall _3F2468 x_1))) :=
  _3F2468 : hol.type => x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall _3F2468 x_1)) (hol.eq hol.bool (hol.forall _3F2468 x_1)) ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1) (hol.forall _3F2468 x_1) (thm_31 _3F2468 x_1) (thm_126 _3F2468 x_1).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_128 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_129 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_128 A x_1) (thm_128 A x_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_130 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_131 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_132 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_131 A) (thm_131 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_133 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_130 A) (thm_132 A).

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_134 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_135 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_134 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_136 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_135 t_1 hyp_1) thm_8.

(; Theorem: |- t ;)

(; dict ;)

def thm_137 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_138 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_137 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_8).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_139 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_136 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_138 t_1 hyp_1).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_140 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_139 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_141 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => thm_9 A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_142 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_140 A x_1) (thm_141 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_143 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_128 A x_1) (thm_142 A x_1)) A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_144 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_1 x_1) hol.true) :=
  x_1 : hol.term hol.bool => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_129 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_133 A) (thm_143 A) x_1)) hol.bool x_1.

(; Theorem: |- ((= ((= (Data.Bool.! x)) (Data.Bool.! x))) Data.Bool.T) ;)

(; dict ;)

def thm_145 : _3F2468 : hol.type -> x_1 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall _3F2468 x_1) (hol.forall _3F2468 x_1)) hol.true) :=
  _3F2468 : hol.type => x_1 : hol.term (hol.arr _3F2468 hol.bool) => (x_1 : hol.term hol.bool => thm_144 x_1) (hol.forall _3F2468 x_1).

(; Theorem: |- ((= ((= (Data.Bool.! x)) (\lambda P. ((= P) \lambda x. Data.Bool.T) x))) Data.Bool.T) ;)

(; dict ;)

def thm_146 : _3F2468 : hol.type -> x_1 : hol.term (hol.arr _3F2468 hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall _3F2468 x_1) ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1)) hol.true) :=
  _3F2468 : hol.type => x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall _3F2468 x_1) ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1)) (hol.eq hol.bool (hol.forall _3F2468 x_1) (hol.forall _3F2468 x_1)) hol.true (thm_127 _3F2468 x_1) (thm_145 _3F2468 x_1).

(; Theorem: |- ((= \lambda x. ((= (Data.Bool.! x)) (\lambda P. ((= P) \lambda x. Data.Bool.T) x))) \lambda x. Data.Bool.T) ;)

(; dict ;)

def thm_147 : _3F2468 : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) (x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq hol.bool (hol.forall _3F2468 x_1) ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1)) (x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.true)) :=
  _3F2468 : hol.type => hol.ABS_THM (hol.arr _3F2468 hol.bool) hol.bool (x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq hol.bool (hol.forall _3F2468 x_1) ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1)) (x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.true) (x_1 : hol.term (hol.arr _3F2468 hol.bool) => thm_146 _3F2468 x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (Data.Bool.! x)) (\lambda P. ((= P) \lambda x. Data.Bool.T) x)))) (Data.Bool.! \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_148 : _3F2468 : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr _3F2468 hol.bool) (x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq hol.bool (hol.forall _3F2468 x_1) ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1))) (hol.forall (hol.arr _3F2468 hol.bool) (x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.true))) :=
  _3F2468 : hol.type => hol.APP_THM (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) hol.bool (hol.forall (hol.arr _3F2468 hol.bool)) (hol.forall (hol.arr _3F2468 hol.bool)) (x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq hol.bool (hol.forall _3F2468 x_1) ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1)) (x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.true) (thm_30 _3F2468) (thm_147 _3F2468).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_149 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_150 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (thm_149 A t_1) (thm_149 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_151 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_10 A t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_152 : _3F2468 : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr _3F2468 hol.bool) (x_2 : hol.term (hol.arr _3F2468 hol.bool) => t_1)) t_1) :=
  _3F2468 : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (thm_150 A t_1) (thm_151 A t_1)) (hol.arr _3F2468 hol.bool) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_153 : _3F2468 : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr _3F2468 hol.bool) (x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.true)) hol.true) :=
  _3F2468 : hol.type => (_3F2468 : hol.type => t_1 : hol.term hol.bool => thm_152 _3F2468 t_1) _3F2468 hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (Data.Bool.! x)) (\lambda P. ((= P) \lambda x. Data.Bool.T) x)))) Data.Bool.T) ;)

(; dict ;)

def thm_154 : _3F2468 : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr _3F2468 hol.bool) (x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq hol.bool (hol.forall _3F2468 x_1) ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1))) hol.true) :=
  _3F2468 : hol.type => hol.TRANS hol.bool (hol.forall (hol.arr _3F2468 hol.bool) (x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq hol.bool (hol.forall _3F2468 x_1) ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1))) (hol.forall (hol.arr _3F2468 hol.bool) (x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.true)) hol.true (thm_148 _3F2468) (thm_153 _3F2468).

(; Theorem: |- ((= ((= Data.Bool.!) \lambda P. ((= P) \lambda x. Data.Bool.T))) Data.Bool.T) ;)

(; dict ;)

def thm_155 : _3F2468 : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) (hol.forall _3F2468) (P_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_1 (x_2 : hol.term _3F2468 => hol.true))) hol.true) :=
  _3F2468 : hol.type => hol.TRANS hol.bool (hol.eq (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) (hol.forall _3F2468) (P_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_1 (x_2 : hol.term _3F2468 => hol.true))) (hol.forall (hol.arr _3F2468 hol.bool) (x_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq hol.bool (hol.forall _3F2468 x_1) ((P_2 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_2 (x_3 : hol.term _3F2468 => hol.true)) x_1))) hol.true (thm_29 _3F2468) (thm_154 _3F2468).

(; Theorem: |- ((= Data.Bool.T) ((= Data.Bool.!) \lambda P. ((= P) \lambda x. Data.Bool.T))) ;)

(; dict ;)

def thm_156 : _3F2468 : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.eq (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) (hol.forall _3F2468) (P_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_1 (x_2 : hol.term _3F2468 => hol.true)))) :=
  _3F2468 : hol.type => hol.SYM hol.bool (hol.eq (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) (hol.forall _3F2468) (P_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_1 (x_2 : hol.term _3F2468 => hol.true))) hol.true (thm_155 _3F2468).

(; Theorem: |- ((= Data.Bool.!) \lambda P. ((= P) \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_157 : _3F2468 : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) (hol.forall _3F2468) (P_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_1 (x_2 : hol.term _3F2468 => hol.true))) :=
  _3F2468 : hol.type => hol.EQ_MP hol.true (hol.eq (hol.arr (hol.arr _3F2468 hol.bool) hol.bool) (hol.forall _3F2468) (P_1 : hol.term (hol.arr _3F2468 hol.bool) => hol.eq (hol.arr _3F2468 hol.bool) P_1 (x_2 : hol.term _3F2468 => hol.true))) (thm_156 _3F2468) thm_8.
